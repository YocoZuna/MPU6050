
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08006998  08006998  00016998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006da4  08006da4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08006da4  08006da4  00016da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dac  08006dac  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dac  08006dac  00016dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006db0  08006db0  00016db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08006db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  200001e4  08006f98  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08006f98  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9fc  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be9  00000000  00000000  0002bc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0002d800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  0002e178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ac9  00000000  00000000  0002ea40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d6c2  00000000  00000000  00045509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000891d6  00000000  00000000  00052bcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbda1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a1c  00000000  00000000  000dbdf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000df810  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003c  00000000  00000000  000df834  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800697c 	.word	0x0800697c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800697c 	.word	0x0800697c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <MPU6050_Init>:

	}MPU6050_Config_TypeDef;
  *
  */
void MPU6050_Init(I2C_HandleTypeDef* I2C,MPU6050_Config_TypeDef* mpu6050)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af04      	add	r7, sp, #16
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
	uint8_t temp = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	73fb      	strb	r3, [r7, #15]

	/* Check if MPU6050 is present under 0x68 slave address */
	HAL_I2C_Mem_Read(I2C, MPU6050_DEV_ADDRESS, MPU6050_WHOAMI, 1, &temp, 1, 1000);
 8000eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ece:	9302      	str	r3, [sp, #8]
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	9301      	str	r3, [sp, #4]
 8000ed4:	f107 030f 	add.w	r3, r7, #15
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	2301      	movs	r3, #1
 8000edc:	2275      	movs	r2, #117	; 0x75
 8000ede:	21d0      	movs	r1, #208	; 0xd0
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f001 f879 	bl	8001fd8 <HAL_I2C_Mem_Read>
	if (temp == 0x68)
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	2b68      	cmp	r3, #104	; 0x68
 8000eea:	d162      	bne.n	8000fb2 <MPU6050_Init+0xf6>
	{
		/* Restart of the device */
		HAL_I2C_Mem_Write(I2C, MPU6050_DEV_ADDRESS, MPU6050_POWER_MANAGMENT_1, 1,0x00, 1, 1000);
 8000eec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef0:	9302      	str	r3, [sp, #8]
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	9301      	str	r3, [sp, #4]
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	2301      	movs	r3, #1
 8000efc:	226b      	movs	r2, #107	; 0x6b
 8000efe:	21d0      	movs	r1, #208	; 0xd0
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f000 ff6f 	bl	8001de4 <HAL_I2C_Mem_Write>

		HAL_Delay(100);
 8000f06:	2064      	movs	r0, #100	; 0x64
 8000f08:	f000 fb80 	bl	800160c <HAL_Delay>
		/* Initialization of clock and tempr sensor */
		if (mpu6050->TEMP_ON_OFF == DISABLE)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	789b      	ldrb	r3, [r3, #2]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d10b      	bne.n	8000f2c <MPU6050_Init+0x70>
		{
			temp  |= mpu6050->CLOCK + MPU6050_TEMP_DIS;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	3308      	adds	r3, #8
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	b25a      	sxtb	r2, r3
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
 8000f20:	b25b      	sxtb	r3, r3
 8000f22:	4313      	orrs	r3, r2
 8000f24:	b25b      	sxtb	r3, r3
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	73fb      	strb	r3, [r7, #15]
 8000f2a:	e002      	b.n	8000f32 <MPU6050_Init+0x76>
		}
		else
		{
			temp  = mpu6050->CLOCK;
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	73fb      	strb	r3, [r7, #15]
		}
		/* Restart all sensors */
		HAL_I2C_Mem_Write(I2C, MPU6050_DEV_ADDRESS, MPU6050_USER_CONTROL, 1,(uint8_t*) MPU6050_USER_RESET_ALL_SENS, 1, 1000);
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	9302      	str	r3, [sp, #8]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	9301      	str	r3, [sp, #4]
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2301      	movs	r3, #1
 8000f42:	226a      	movs	r2, #106	; 0x6a
 8000f44:	21d0      	movs	r1, #208	; 0xd0
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 ff4c 	bl	8001de4 <HAL_I2C_Mem_Write>
		/* Set lowpass filter ad dpfl */
		temp = mpu6050->FILTER;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	785b      	ldrb	r3, [r3, #1]
 8000f50:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(I2C, MPU6050_DEV_ADDRESS, MPU6050_LOW_PASS_FILTER, 1,&temp, 1, 1000);
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	9302      	str	r3, [sp, #8]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	9301      	str	r3, [sp, #4]
 8000f5c:	f107 030f 	add.w	r3, r7, #15
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2301      	movs	r3, #1
 8000f64:	221a      	movs	r2, #26
 8000f66:	21d0      	movs	r1, #208	; 0xd0
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f000 ff3b 	bl	8001de4 <HAL_I2C_Mem_Write>

		/* Setting range for accelerometer and gyroscope */
		temp = mpu6050->ACC_RANGE;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	78db      	ldrb	r3, [r3, #3]
 8000f72:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(I2C, MPU6050_DEV_ADDRESS, MPU6050_ACC_CONFIG, 1,&temp, 1, 1000);
 8000f74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f78:	9302      	str	r3, [sp, #8]
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	9301      	str	r3, [sp, #4]
 8000f7e:	f107 030f 	add.w	r3, r7, #15
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	2301      	movs	r3, #1
 8000f86:	221c      	movs	r2, #28
 8000f88:	21d0      	movs	r1, #208	; 0xd0
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f000 ff2a 	bl	8001de4 <HAL_I2C_Mem_Write>
		temp = mpu6050->GYRO_RANGE;
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	791b      	ldrb	r3, [r3, #4]
 8000f94:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(I2C, MPU6050_DEV_ADDRESS, MPU6050_GYRO_CONFIG, 1,&temp, 1, 1000);
 8000f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9a:	9302      	str	r3, [sp, #8]
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	9301      	str	r3, [sp, #4]
 8000fa0:	f107 030f 	add.w	r3, r7, #15
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	221b      	movs	r2, #27
 8000faa:	21d0      	movs	r1, #208	; 0xd0
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 ff19 	bl	8001de4 <HAL_I2C_Mem_Write>

		/*
		 * TODO Configuration of Interrupts
		 */
	}
}
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
 8000fd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	4b2d      	ldr	r3, [pc, #180]	; (800108c <MX_GPIO_Init+0xd0>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a2c      	ldr	r2, [pc, #176]	; (800108c <MX_GPIO_Init+0xd0>)
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b2a      	ldr	r3, [pc, #168]	; (800108c <MX_GPIO_Init+0xd0>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0304 	and.w	r3, r3, #4
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b26      	ldr	r3, [pc, #152]	; (800108c <MX_GPIO_Init+0xd0>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a25      	ldr	r2, [pc, #148]	; (800108c <MX_GPIO_Init+0xd0>)
 8000ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b23      	ldr	r3, [pc, #140]	; (800108c <MX_GPIO_Init+0xd0>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	4b1f      	ldr	r3, [pc, #124]	; (800108c <MX_GPIO_Init+0xd0>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a1e      	ldr	r2, [pc, #120]	; (800108c <MX_GPIO_Init+0xd0>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <MX_GPIO_Init+0xd0>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <MX_GPIO_Init+0xd0>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a17      	ldr	r2, [pc, #92]	; (800108c <MX_GPIO_Init+0xd0>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <MX_GPIO_Init+0xd0>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2120      	movs	r1, #32
 8001046:	4812      	ldr	r0, [pc, #72]	; (8001090 <MX_GPIO_Init+0xd4>)
 8001048:	f000 fd6e 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800104c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001052:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001056:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4619      	mov	r1, r3
 8001062:	480c      	ldr	r0, [pc, #48]	; (8001094 <MX_GPIO_Init+0xd8>)
 8001064:	f000 fbdc 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001068:	2320      	movs	r3, #32
 800106a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	4804      	ldr	r0, [pc, #16]	; (8001090 <MX_GPIO_Init+0xd4>)
 8001080:	f000 fbce 	bl	8001820 <HAL_GPIO_Init>

}
 8001084:	bf00      	nop
 8001086:	3728      	adds	r7, #40	; 0x28
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40023800 	.word	0x40023800
 8001090:	40020000 	.word	0x40020000
 8001094:	40020800 	.word	0x40020800

08001098 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <MX_I2C1_Init+0x50>)
 800109e:	4a13      	ldr	r2, [pc, #76]	; (80010ec <MX_I2C1_Init+0x54>)
 80010a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010a4:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <MX_I2C1_Init+0x58>)
 80010a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010d6:	f000 fd41 	bl	8001b5c <HAL_I2C_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010e0:	f000 f8e6 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000200 	.word	0x20000200
 80010ec:	40005400 	.word	0x40005400
 80010f0:	00061a80 	.word	0x00061a80

080010f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a19      	ldr	r2, [pc, #100]	; (8001178 <HAL_I2C_MspInit+0x84>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d12b      	bne.n	800116e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	4b18      	ldr	r3, [pc, #96]	; (800117c <HAL_I2C_MspInit+0x88>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a17      	ldr	r2, [pc, #92]	; (800117c <HAL_I2C_MspInit+0x88>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <HAL_I2C_MspInit+0x88>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001132:	23c0      	movs	r3, #192	; 0xc0
 8001134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001136:	2312      	movs	r3, #18
 8001138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113e:	2303      	movs	r3, #3
 8001140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001142:	2304      	movs	r3, #4
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	480c      	ldr	r0, [pc, #48]	; (8001180 <HAL_I2C_MspInit+0x8c>)
 800114e:	f000 fb67 	bl	8001820 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <HAL_I2C_MspInit+0x88>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	4a08      	ldr	r2, [pc, #32]	; (800117c <HAL_I2C_MspInit+0x88>)
 800115c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001160:	6413      	str	r3, [r2, #64]	; 0x40
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_I2C_MspInit+0x88>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800116e:	bf00      	nop
 8001170:	3728      	adds	r7, #40	; 0x28
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40005400 	.word	0x40005400
 800117c:	40023800 	.word	0x40023800
 8001180:	40020400 	.word	0x40020400

08001184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  MPU6050_Config_TypeDef mpu6050;
  mpu6050.ACC_RANGE = MPU6050_ACC_AFS_2G;
 800118a:	2300      	movs	r3, #0
 800118c:	73fb      	strb	r3, [r7, #15]
  mpu6050.CLOCK = MPU6050_CLOCK_SOURCE_0;
 800118e:	2300      	movs	r3, #0
 8001190:	733b      	strb	r3, [r7, #12]
  mpu6050.FILTER = MPU6050_LOW_PASS_FILTER_0;
 8001192:	2300      	movs	r3, #0
 8001194:	737b      	strb	r3, [r7, #13]
  mpu6050.GYRO_RANGE = MPU6050_GYRO_FS_250;
 8001196:	2300      	movs	r3, #0
 8001198:	743b      	strb	r3, [r7, #16]
  mpu6050.TEMP_ON_OFF = ENABLE;
 800119a:	2301      	movs	r3, #1
 800119c:	73bb      	strb	r3, [r7, #14]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119e:	f000 f9c3 	bl	8001528 <HAL_Init>
  initialise_monitor_handles();
 80011a2:	f002 fe1d 	bl	8003de0 <initialise_monitor_handles>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a6:	f000 f819 	bl	80011dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011aa:	f7ff ff07 	bl	8000fbc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011ae:	f000 f91f 	bl	80013f0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80011b2:	f7ff ff71 	bl	8001098 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init(&hi2c1, &mpu6050);
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	4619      	mov	r1, r3
 80011bc:	4806      	ldr	r0, [pc, #24]	; (80011d8 <main+0x54>)
 80011be:	f7ff fe7d 	bl	8000ebc <MPU6050_Init>
  int16_t AccBuff[3];
  /* USER CODE END 2 */
  float* B=0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
  float* A=0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
  float* Y=0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  while (1)
  {
    /* USER CODE END WHILE */


	  HAL_Delay(500);
 80011ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011d2:	f000 fa1b 	bl	800160c <HAL_Delay>
 80011d6:	e7fa      	b.n	80011ce <main+0x4a>
 80011d8:	20000200 	.word	0x20000200

080011dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b094      	sub	sp, #80	; 0x50
 80011e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 0320 	add.w	r3, r7, #32
 80011e6:	2230      	movs	r2, #48	; 0x30
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 ff97 	bl	800411e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <SystemClock_Config+0xcc>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	4a27      	ldr	r2, [pc, #156]	; (80012a8 <SystemClock_Config+0xcc>)
 800120a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120e:	6413      	str	r3, [r2, #64]	; 0x40
 8001210:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <SystemClock_Config+0xcc>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800121c:	2300      	movs	r3, #0
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	4b22      	ldr	r3, [pc, #136]	; (80012ac <SystemClock_Config+0xd0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a21      	ldr	r2, [pc, #132]	; (80012ac <SystemClock_Config+0xd0>)
 8001226:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <SystemClock_Config+0xd0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001238:	2302      	movs	r3, #2
 800123a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800123c:	2301      	movs	r3, #1
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001240:	2310      	movs	r3, #16
 8001242:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001244:	2302      	movs	r3, #2
 8001246:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001248:	2300      	movs	r3, #0
 800124a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800124c:	2310      	movs	r3, #16
 800124e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001250:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001254:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001256:	2304      	movs	r3, #4
 8001258:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800125a:	2304      	movs	r3, #4
 800125c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125e:	f107 0320 	add.w	r3, r7, #32
 8001262:	4618      	mov	r0, r3
 8001264:	f001 fc3a 	bl	8002adc <HAL_RCC_OscConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800126e:	f000 f81f 	bl	80012b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001272:	230f      	movs	r3, #15
 8001274:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001276:	2302      	movs	r3, #2
 8001278:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800127e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001282:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	2102      	movs	r1, #2
 800128e:	4618      	mov	r0, r3
 8001290:	f001 fe9c 	bl	8002fcc <HAL_RCC_ClockConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800129a:	f000 f809 	bl	80012b0 <Error_Handler>
  }
}
 800129e:	bf00      	nop
 80012a0:	3750      	adds	r7, #80	; 0x50
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40007000 	.word	0x40007000

080012b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b4:	b672      	cpsid	i
}
 80012b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <Error_Handler+0x8>
	...

080012bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <HAL_MspInit+0x4c>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	4a0f      	ldr	r2, [pc, #60]	; (8001308 <HAL_MspInit+0x4c>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	; 0x44
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <HAL_MspInit+0x4c>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_MspInit+0x4c>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	4a08      	ldr	r2, [pc, #32]	; (8001308 <HAL_MspInit+0x4c>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ec:	6413      	str	r3, [r2, #64]	; 0x40
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_MspInit+0x4c>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012fa:	2007      	movs	r0, #7
 80012fc:	f000 fa5c 	bl	80017b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40023800 	.word	0x40023800

0800130c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001310:	e7fe      	b.n	8001310 <NMI_Handler+0x4>

08001312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001316:	e7fe      	b.n	8001316 <HardFault_Handler+0x4>

08001318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800131c:	e7fe      	b.n	800131c <MemManage_Handler+0x4>

0800131e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001322:	e7fe      	b.n	8001322 <BusFault_Handler+0x4>

08001324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <UsageFault_Handler+0x4>

0800132a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001358:	f000 f938 	bl	80015cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}

08001360 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001368:	4a14      	ldr	r2, [pc, #80]	; (80013bc <_sbrk+0x5c>)
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <_sbrk+0x60>)
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <_sbrk+0x64>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d102      	bne.n	8001382 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <_sbrk+0x64>)
 800137e:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <_sbrk+0x68>)
 8001380:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	429a      	cmp	r2, r3
 800138e:	d207      	bcs.n	80013a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001390:	f002 fda2 	bl	8003ed8 <__errno>
 8001394:	4603      	mov	r3, r0
 8001396:	220c      	movs	r2, #12
 8001398:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
 800139e:	e009      	b.n	80013b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_sbrk+0x64>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013a6:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <_sbrk+0x64>)
 80013b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013b2:	68fb      	ldr	r3, [r7, #12]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20020000 	.word	0x20020000
 80013c0:	00000400 	.word	0x00000400
 80013c4:	20000254 	.word	0x20000254
 80013c8:	20000360 	.word	0x20000360

080013cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <SystemInit+0x20>)
 80013d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013d6:	4a05      	ldr	r2, [pc, #20]	; (80013ec <SystemInit+0x20>)
 80013d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_USART2_UART_Init+0x4c>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	; (8001440 <MX_USART2_UART_Init+0x50>)
 80013f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <MX_USART2_UART_Init+0x4c>)
 80013fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001400:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <MX_USART2_UART_Init+0x4c>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001416:	220c      	movs	r2, #12
 8001418:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <MX_USART2_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001428:	f001 fff0 	bl	800340c <HAL_UART_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001432:	f7ff ff3d 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000258 	.word	0x20000258
 8001440:	40004400 	.word	0x40004400

08001444 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a19      	ldr	r2, [pc, #100]	; (80014c8 <HAL_UART_MspInit+0x84>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d12b      	bne.n	80014be <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b18      	ldr	r3, [pc, #96]	; (80014cc <HAL_UART_MspInit+0x88>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	4a17      	ldr	r2, [pc, #92]	; (80014cc <HAL_UART_MspInit+0x88>)
 8001470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001474:	6413      	str	r3, [r2, #64]	; 0x40
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <HAL_UART_MspInit+0x88>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <HAL_UART_MspInit+0x88>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a10      	ldr	r2, [pc, #64]	; (80014cc <HAL_UART_MspInit+0x88>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <HAL_UART_MspInit+0x88>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800149e:	230c      	movs	r3, #12
 80014a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ae:	2307      	movs	r3, #7
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4619      	mov	r1, r3
 80014b8:	4805      	ldr	r0, [pc, #20]	; (80014d0 <HAL_UART_MspInit+0x8c>)
 80014ba:	f000 f9b1 	bl	8001820 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014be:	bf00      	nop
 80014c0:	3728      	adds	r7, #40	; 0x28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40004400 	.word	0x40004400
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020000 	.word	0x40020000

080014d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800150c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014d8:	480d      	ldr	r0, [pc, #52]	; (8001510 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014da:	490e      	ldr	r1, [pc, #56]	; (8001514 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014dc:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e0:	e002      	b.n	80014e8 <LoopCopyDataInit>

080014e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e6:	3304      	adds	r3, #4

080014e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ec:	d3f9      	bcc.n	80014e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ee:	4a0b      	ldr	r2, [pc, #44]	; (800151c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014f0:	4c0b      	ldr	r4, [pc, #44]	; (8001520 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f4:	e001      	b.n	80014fa <LoopFillZerobss>

080014f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f8:	3204      	adds	r2, #4

080014fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014fc:	d3fb      	bcc.n	80014f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014fe:	f7ff ff65 	bl	80013cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001502:	f002 fde5 	bl	80040d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001506:	f7ff fe3d 	bl	8001184 <main>
  bx  lr    
 800150a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800150c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001514:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001518:	08006db4 	.word	0x08006db4
  ldr r2, =_sbss
 800151c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001520:	2000035c 	.word	0x2000035c

08001524 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001524:	e7fe      	b.n	8001524 <ADC_IRQHandler>
	...

08001528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800152c:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <HAL_Init+0x40>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <HAL_Init+0x40>)
 8001532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001536:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <HAL_Init+0x40>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <HAL_Init+0x40>)
 800153e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001542:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <HAL_Init+0x40>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <HAL_Init+0x40>)
 800154a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001550:	2003      	movs	r0, #3
 8001552:	f000 f931 	bl	80017b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001556:	2000      	movs	r0, #0
 8001558:	f000 f808 	bl	800156c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800155c:	f7ff feae 	bl	80012bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023c00 	.word	0x40023c00

0800156c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_InitTick+0x54>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_InitTick+0x58>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001582:	fbb3 f3f1 	udiv	r3, r3, r1
 8001586:	fbb2 f3f3 	udiv	r3, r2, r3
 800158a:	4618      	mov	r0, r3
 800158c:	f000 f93b 	bl	8001806 <HAL_SYSTICK_Config>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e00e      	b.n	80015b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b0f      	cmp	r3, #15
 800159e:	d80a      	bhi.n	80015b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a0:	2200      	movs	r2, #0
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	f000 f911 	bl	80017ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ac:	4a06      	ldr	r2, [pc, #24]	; (80015c8 <HAL_InitTick+0x5c>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e000      	b.n	80015b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000000 	.word	0x20000000
 80015c4:	20000008 	.word	0x20000008
 80015c8:	20000004 	.word	0x20000004

080015cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_IncTick+0x20>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_IncTick+0x24>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4413      	add	r3, r2
 80015dc:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <HAL_IncTick+0x24>)
 80015de:	6013      	str	r3, [r2, #0]
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	20000008 	.word	0x20000008
 80015f0:	2000029c 	.word	0x2000029c

080015f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return uwTick;
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <HAL_GetTick+0x14>)
 80015fa:	681b      	ldr	r3, [r3, #0]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	2000029c 	.word	0x2000029c

0800160c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001614:	f7ff ffee 	bl	80015f4 <HAL_GetTick>
 8001618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001624:	d005      	beq.n	8001632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001626:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <HAL_Delay+0x44>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4413      	add	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001632:	bf00      	nop
 8001634:	f7ff ffde 	bl	80015f4 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	429a      	cmp	r2, r3
 8001642:	d8f7      	bhi.n	8001634 <HAL_Delay+0x28>
  {
  }
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000008 	.word	0x20000008

08001654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <__NVIC_SetPriorityGrouping+0x44>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001670:	4013      	ands	r3, r2
 8001672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800167c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001686:	4a04      	ldr	r2, [pc, #16]	; (8001698 <__NVIC_SetPriorityGrouping+0x44>)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	60d3      	str	r3, [r2, #12]
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <__NVIC_GetPriorityGrouping+0x18>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	0a1b      	lsrs	r3, r3, #8
 80016a6:	f003 0307 	and.w	r3, r3, #7
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	db0a      	blt.n	80016e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	490c      	ldr	r1, [pc, #48]	; (8001704 <__NVIC_SetPriority+0x4c>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	0112      	lsls	r2, r2, #4
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	440b      	add	r3, r1
 80016dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e0:	e00a      	b.n	80016f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4908      	ldr	r1, [pc, #32]	; (8001708 <__NVIC_SetPriority+0x50>)
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	3b04      	subs	r3, #4
 80016f0:	0112      	lsls	r2, r2, #4
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	440b      	add	r3, r1
 80016f6:	761a      	strb	r2, [r3, #24]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000e100 	.word	0xe000e100
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	; 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f1c3 0307 	rsb	r3, r3, #7
 8001726:	2b04      	cmp	r3, #4
 8001728:	bf28      	it	cs
 800172a:	2304      	movcs	r3, #4
 800172c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3304      	adds	r3, #4
 8001732:	2b06      	cmp	r3, #6
 8001734:	d902      	bls.n	800173c <NVIC_EncodePriority+0x30>
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3b03      	subs	r3, #3
 800173a:	e000      	b.n	800173e <NVIC_EncodePriority+0x32>
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	f04f 32ff 	mov.w	r2, #4294967295
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43da      	mvns	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	401a      	ands	r2, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001754:	f04f 31ff 	mov.w	r1, #4294967295
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa01 f303 	lsl.w	r3, r1, r3
 800175e:	43d9      	mvns	r1, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	4313      	orrs	r3, r2
         );
}
 8001766:	4618      	mov	r0, r3
 8001768:	3724      	adds	r7, #36	; 0x24
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3b01      	subs	r3, #1
 8001780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001784:	d301      	bcc.n	800178a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001786:	2301      	movs	r3, #1
 8001788:	e00f      	b.n	80017aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178a:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <SysTick_Config+0x40>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001792:	210f      	movs	r1, #15
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f7ff ff8e 	bl	80016b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <SysTick_Config+0x40>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <SysTick_Config+0x40>)
 80017a4:	2207      	movs	r2, #7
 80017a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	e000e010 	.word	0xe000e010

080017b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ff47 	bl	8001654 <__NVIC_SetPriorityGrouping>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e0:	f7ff ff5c 	bl	800169c <__NVIC_GetPriorityGrouping>
 80017e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	68b9      	ldr	r1, [r7, #8]
 80017ea:	6978      	ldr	r0, [r7, #20]
 80017ec:	f7ff ff8e 	bl	800170c <NVIC_EncodePriority>
 80017f0:	4602      	mov	r2, r0
 80017f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f6:	4611      	mov	r1, r2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff5d 	bl	80016b8 <__NVIC_SetPriority>
}
 80017fe:	bf00      	nop
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff ffb0 	bl	8001774 <SysTick_Config>
 8001814:	4603      	mov	r3, r0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001820:	b480      	push	{r7}
 8001822:	b089      	sub	sp, #36	; 0x24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001832:	2300      	movs	r3, #0
 8001834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
 800183a:	e159      	b.n	8001af0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800183c:	2201      	movs	r2, #1
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	429a      	cmp	r2, r3
 8001856:	f040 8148 	bne.w	8001aea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	2b01      	cmp	r3, #1
 8001864:	d005      	beq.n	8001872 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800186e:	2b02      	cmp	r3, #2
 8001870:	d130      	bne.n	80018d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	2203      	movs	r2, #3
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018a8:	2201      	movs	r2, #1
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	091b      	lsrs	r3, r3, #4
 80018be:	f003 0201 	and.w	r2, r3, #1
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d017      	beq.n	8001910 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	2203      	movs	r2, #3
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d123      	bne.n	8001964 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	08da      	lsrs	r2, r3, #3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3208      	adds	r2, #8
 8001924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001928:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	220f      	movs	r2, #15
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	691a      	ldr	r2, [r3, #16]
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	08da      	lsrs	r2, r3, #3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3208      	adds	r2, #8
 800195e:	69b9      	ldr	r1, [r7, #24]
 8001960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	2203      	movs	r2, #3
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0203 	and.w	r2, r3, #3
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 80a2 	beq.w	8001aea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	4b57      	ldr	r3, [pc, #348]	; (8001b08 <HAL_GPIO_Init+0x2e8>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	4a56      	ldr	r2, [pc, #344]	; (8001b08 <HAL_GPIO_Init+0x2e8>)
 80019b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b4:	6453      	str	r3, [r2, #68]	; 0x44
 80019b6:	4b54      	ldr	r3, [pc, #336]	; (8001b08 <HAL_GPIO_Init+0x2e8>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019c2:	4a52      	ldr	r2, [pc, #328]	; (8001b0c <HAL_GPIO_Init+0x2ec>)
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	089b      	lsrs	r3, r3, #2
 80019c8:	3302      	adds	r3, #2
 80019ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	220f      	movs	r2, #15
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a49      	ldr	r2, [pc, #292]	; (8001b10 <HAL_GPIO_Init+0x2f0>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d019      	beq.n	8001a22 <HAL_GPIO_Init+0x202>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a48      	ldr	r2, [pc, #288]	; (8001b14 <HAL_GPIO_Init+0x2f4>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d013      	beq.n	8001a1e <HAL_GPIO_Init+0x1fe>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a47      	ldr	r2, [pc, #284]	; (8001b18 <HAL_GPIO_Init+0x2f8>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d00d      	beq.n	8001a1a <HAL_GPIO_Init+0x1fa>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a46      	ldr	r2, [pc, #280]	; (8001b1c <HAL_GPIO_Init+0x2fc>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d007      	beq.n	8001a16 <HAL_GPIO_Init+0x1f6>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a45      	ldr	r2, [pc, #276]	; (8001b20 <HAL_GPIO_Init+0x300>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d101      	bne.n	8001a12 <HAL_GPIO_Init+0x1f2>
 8001a0e:	2304      	movs	r3, #4
 8001a10:	e008      	b.n	8001a24 <HAL_GPIO_Init+0x204>
 8001a12:	2307      	movs	r3, #7
 8001a14:	e006      	b.n	8001a24 <HAL_GPIO_Init+0x204>
 8001a16:	2303      	movs	r3, #3
 8001a18:	e004      	b.n	8001a24 <HAL_GPIO_Init+0x204>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e002      	b.n	8001a24 <HAL_GPIO_Init+0x204>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <HAL_GPIO_Init+0x204>
 8001a22:	2300      	movs	r3, #0
 8001a24:	69fa      	ldr	r2, [r7, #28]
 8001a26:	f002 0203 	and.w	r2, r2, #3
 8001a2a:	0092      	lsls	r2, r2, #2
 8001a2c:	4093      	lsls	r3, r2
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a34:	4935      	ldr	r1, [pc, #212]	; (8001b0c <HAL_GPIO_Init+0x2ec>)
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	089b      	lsrs	r3, r3, #2
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a42:	4b38      	ldr	r3, [pc, #224]	; (8001b24 <HAL_GPIO_Init+0x304>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a66:	4a2f      	ldr	r2, [pc, #188]	; (8001b24 <HAL_GPIO_Init+0x304>)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a6c:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <HAL_GPIO_Init+0x304>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a90:	4a24      	ldr	r2, [pc, #144]	; (8001b24 <HAL_GPIO_Init+0x304>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a96:	4b23      	ldr	r3, [pc, #140]	; (8001b24 <HAL_GPIO_Init+0x304>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aba:	4a1a      	ldr	r2, [pc, #104]	; (8001b24 <HAL_GPIO_Init+0x304>)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ac0:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <HAL_GPIO_Init+0x304>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ae4:	4a0f      	ldr	r2, [pc, #60]	; (8001b24 <HAL_GPIO_Init+0x304>)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3301      	adds	r3, #1
 8001aee:	61fb      	str	r3, [r7, #28]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	2b0f      	cmp	r3, #15
 8001af4:	f67f aea2 	bls.w	800183c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001af8:	bf00      	nop
 8001afa:	bf00      	nop
 8001afc:	3724      	adds	r7, #36	; 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40013800 	.word	0x40013800
 8001b10:	40020000 	.word	0x40020000
 8001b14:	40020400 	.word	0x40020400
 8001b18:	40020800 	.word	0x40020800
 8001b1c:	40020c00 	.word	0x40020c00
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40013c00 	.word	0x40013c00

08001b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
 8001b34:	4613      	mov	r3, r2
 8001b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b38:	787b      	ldrb	r3, [r7, #1]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b44:	e003      	b.n	8001b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b46:	887b      	ldrh	r3, [r7, #2]
 8001b48:	041a      	lsls	r2, r3, #16
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	619a      	str	r2, [r3, #24]
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
	...

08001b5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e12b      	b.n	8001dc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d106      	bne.n	8001b88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff fab6 	bl	80010f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2224      	movs	r2, #36	; 0x24
 8001b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0201 	bic.w	r2, r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bc0:	f001 fbfc 	bl	80033bc <HAL_RCC_GetPCLK1Freq>
 8001bc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4a81      	ldr	r2, [pc, #516]	; (8001dd0 <HAL_I2C_Init+0x274>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d807      	bhi.n	8001be0 <HAL_I2C_Init+0x84>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4a80      	ldr	r2, [pc, #512]	; (8001dd4 <HAL_I2C_Init+0x278>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	bf94      	ite	ls
 8001bd8:	2301      	movls	r3, #1
 8001bda:	2300      	movhi	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	e006      	b.n	8001bee <HAL_I2C_Init+0x92>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4a7d      	ldr	r2, [pc, #500]	; (8001dd8 <HAL_I2C_Init+0x27c>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	bf94      	ite	ls
 8001be8:	2301      	movls	r3, #1
 8001bea:	2300      	movhi	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e0e7      	b.n	8001dc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4a78      	ldr	r2, [pc, #480]	; (8001ddc <HAL_I2C_Init+0x280>)
 8001bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfe:	0c9b      	lsrs	r3, r3, #18
 8001c00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	4a6a      	ldr	r2, [pc, #424]	; (8001dd0 <HAL_I2C_Init+0x274>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d802      	bhi.n	8001c30 <HAL_I2C_Init+0xd4>
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	e009      	b.n	8001c44 <HAL_I2C_Init+0xe8>
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c36:	fb02 f303 	mul.w	r3, r2, r3
 8001c3a:	4a69      	ldr	r2, [pc, #420]	; (8001de0 <HAL_I2C_Init+0x284>)
 8001c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c40:	099b      	lsrs	r3, r3, #6
 8001c42:	3301      	adds	r3, #1
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	430b      	orrs	r3, r1
 8001c4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	495c      	ldr	r1, [pc, #368]	; (8001dd0 <HAL_I2C_Init+0x274>)
 8001c60:	428b      	cmp	r3, r1
 8001c62:	d819      	bhi.n	8001c98 <HAL_I2C_Init+0x13c>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1e59      	subs	r1, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c72:	1c59      	adds	r1, r3, #1
 8001c74:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c78:	400b      	ands	r3, r1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00a      	beq.n	8001c94 <HAL_I2C_Init+0x138>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	1e59      	subs	r1, r3, #1
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c92:	e051      	b.n	8001d38 <HAL_I2C_Init+0x1dc>
 8001c94:	2304      	movs	r3, #4
 8001c96:	e04f      	b.n	8001d38 <HAL_I2C_Init+0x1dc>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d111      	bne.n	8001cc4 <HAL_I2C_Init+0x168>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	1e58      	subs	r0, r3, #1
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6859      	ldr	r1, [r3, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	440b      	add	r3, r1
 8001cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	bf0c      	ite	eq
 8001cbc:	2301      	moveq	r3, #1
 8001cbe:	2300      	movne	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	e012      	b.n	8001cea <HAL_I2C_Init+0x18e>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	1e58      	subs	r0, r3, #1
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6859      	ldr	r1, [r3, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	0099      	lsls	r1, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cda:	3301      	adds	r3, #1
 8001cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	bf0c      	ite	eq
 8001ce4:	2301      	moveq	r3, #1
 8001ce6:	2300      	movne	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_I2C_Init+0x196>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e022      	b.n	8001d38 <HAL_I2C_Init+0x1dc>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10e      	bne.n	8001d18 <HAL_I2C_Init+0x1bc>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1e58      	subs	r0, r3, #1
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6859      	ldr	r1, [r3, #4]
 8001d02:	460b      	mov	r3, r1
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	440b      	add	r3, r1
 8001d08:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d16:	e00f      	b.n	8001d38 <HAL_I2C_Init+0x1dc>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1e58      	subs	r0, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6859      	ldr	r1, [r3, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	0099      	lsls	r1, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d2e:	3301      	adds	r3, #1
 8001d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	6809      	ldr	r1, [r1, #0]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69da      	ldr	r2, [r3, #28]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6911      	ldr	r1, [r2, #16]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	68d2      	ldr	r2, [r2, #12]
 8001d72:	4311      	orrs	r1, r2
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	430b      	orrs	r3, r1
 8001d7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695a      	ldr	r2, [r3, #20]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 0201 	orr.w	r2, r2, #1
 8001da6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2220      	movs	r2, #32
 8001db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	000186a0 	.word	0x000186a0
 8001dd4:	001e847f 	.word	0x001e847f
 8001dd8:	003d08ff 	.word	0x003d08ff
 8001ddc:	431bde83 	.word	0x431bde83
 8001de0:	10624dd3 	.word	0x10624dd3

08001de4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	4608      	mov	r0, r1
 8001dee:	4611      	mov	r1, r2
 8001df0:	461a      	mov	r2, r3
 8001df2:	4603      	mov	r3, r0
 8001df4:	817b      	strh	r3, [r7, #10]
 8001df6:	460b      	mov	r3, r1
 8001df8:	813b      	strh	r3, [r7, #8]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dfe:	f7ff fbf9 	bl	80015f4 <HAL_GetTick>
 8001e02:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b20      	cmp	r3, #32
 8001e0e:	f040 80d9 	bne.w	8001fc4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	2319      	movs	r3, #25
 8001e18:	2201      	movs	r2, #1
 8001e1a:	496d      	ldr	r1, [pc, #436]	; (8001fd0 <HAL_I2C_Mem_Write+0x1ec>)
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f000 fc7f 	bl	8002720 <I2C_WaitOnFlagUntilTimeout>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e0cc      	b.n	8001fc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d101      	bne.n	8001e3a <HAL_I2C_Mem_Write+0x56>
 8001e36:	2302      	movs	r3, #2
 8001e38:	e0c5      	b.n	8001fc6 <HAL_I2C_Mem_Write+0x1e2>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d007      	beq.n	8001e60 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 0201 	orr.w	r2, r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2221      	movs	r2, #33	; 0x21
 8001e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2240      	movs	r2, #64	; 0x40
 8001e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6a3a      	ldr	r2, [r7, #32]
 8001e8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4a4d      	ldr	r2, [pc, #308]	; (8001fd4 <HAL_I2C_Mem_Write+0x1f0>)
 8001ea0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ea2:	88f8      	ldrh	r0, [r7, #6]
 8001ea4:	893a      	ldrh	r2, [r7, #8]
 8001ea6:	8979      	ldrh	r1, [r7, #10]
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	9301      	str	r3, [sp, #4]
 8001eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f000 fab6 	bl	8002424 <I2C_RequestMemoryWrite>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d052      	beq.n	8001f64 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e081      	b.n	8001fc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 fd00 	bl	80028cc <I2C_WaitOnTXEFlagUntilTimeout>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00d      	beq.n	8001eee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d107      	bne.n	8001eea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ee8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e06b      	b.n	8001fc6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	781a      	ldrb	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	3b01      	subs	r3, #1
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d11b      	bne.n	8001f64 <HAL_I2C_Mem_Write+0x180>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d017      	beq.n	8001f64 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	781a      	ldrb	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1aa      	bne.n	8001ec2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 fcec 	bl	800294e <I2C_WaitOnBTFFlagUntilTimeout>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00d      	beq.n	8001f98 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d107      	bne.n	8001f94 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f92:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e016      	b.n	8001fc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	e000      	b.n	8001fc6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001fc4:	2302      	movs	r3, #2
  }
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	00100002 	.word	0x00100002
 8001fd4:	ffff0000 	.word	0xffff0000

08001fd8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08c      	sub	sp, #48	; 0x30
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	4608      	mov	r0, r1
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	817b      	strh	r3, [r7, #10]
 8001fea:	460b      	mov	r3, r1
 8001fec:	813b      	strh	r3, [r7, #8]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ff2:	f7ff faff 	bl	80015f4 <HAL_GetTick>
 8001ff6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b20      	cmp	r3, #32
 8002002:	f040 8208 	bne.w	8002416 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	2319      	movs	r3, #25
 800200c:	2201      	movs	r2, #1
 800200e:	497b      	ldr	r1, [pc, #492]	; (80021fc <HAL_I2C_Mem_Read+0x224>)
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 fb85 	bl	8002720 <I2C_WaitOnFlagUntilTimeout>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800201c:	2302      	movs	r3, #2
 800201e:	e1fb      	b.n	8002418 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002026:	2b01      	cmp	r3, #1
 8002028:	d101      	bne.n	800202e <HAL_I2C_Mem_Read+0x56>
 800202a:	2302      	movs	r3, #2
 800202c:	e1f4      	b.n	8002418 <HAL_I2C_Mem_Read+0x440>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b01      	cmp	r3, #1
 8002042:	d007      	beq.n	8002054 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0201 	orr.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002062:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2222      	movs	r2, #34	; 0x22
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2240      	movs	r2, #64	; 0x40
 8002070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800207e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002084:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208a:	b29a      	uxth	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4a5b      	ldr	r2, [pc, #364]	; (8002200 <HAL_I2C_Mem_Read+0x228>)
 8002094:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002096:	88f8      	ldrh	r0, [r7, #6]
 8002098:	893a      	ldrh	r2, [r7, #8]
 800209a:	8979      	ldrh	r1, [r7, #10]
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	9301      	str	r3, [sp, #4]
 80020a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	4603      	mov	r3, r0
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 fa52 	bl	8002550 <I2C_RequestMemoryRead>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e1b0      	b.n	8002418 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d113      	bne.n	80020e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020be:	2300      	movs	r3, #0
 80020c0:	623b      	str	r3, [r7, #32]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	623b      	str	r3, [r7, #32]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	623b      	str	r3, [r7, #32]
 80020d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	e184      	b.n	80023f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d11b      	bne.n	8002126 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	61fb      	str	r3, [r7, #28]
 8002112:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	e164      	b.n	80023f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212a:	2b02      	cmp	r3, #2
 800212c:	d11b      	bne.n	8002166 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800213c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800214c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800214e:	2300      	movs	r3, #0
 8002150:	61bb      	str	r3, [r7, #24]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	61bb      	str	r3, [r7, #24]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	61bb      	str	r3, [r7, #24]
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	e144      	b.n	80023f0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800217c:	e138      	b.n	80023f0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002182:	2b03      	cmp	r3, #3
 8002184:	f200 80f1 	bhi.w	800236a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218c:	2b01      	cmp	r3, #1
 800218e:	d123      	bne.n	80021d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002192:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 fc1b 	bl	80029d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e139      	b.n	8002418 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	691a      	ldr	r2, [r3, #16]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	3b01      	subs	r3, #1
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021d6:	e10b      	b.n	80023f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d14e      	bne.n	800227e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e6:	2200      	movs	r2, #0
 80021e8:	4906      	ldr	r1, [pc, #24]	; (8002204 <HAL_I2C_Mem_Read+0x22c>)
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 fa98 	bl	8002720 <I2C_WaitOnFlagUntilTimeout>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d008      	beq.n	8002208 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e10e      	b.n	8002418 <HAL_I2C_Mem_Read+0x440>
 80021fa:	bf00      	nop
 80021fc:	00100002 	.word	0x00100002
 8002200:	ffff0000 	.word	0xffff0000
 8002204:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002216:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691a      	ldr	r2, [r3, #16]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002234:	3b01      	subs	r3, #1
 8002236:	b29a      	uxth	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002240:	b29b      	uxth	r3, r3
 8002242:	3b01      	subs	r3, #1
 8002244:	b29a      	uxth	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002266:	3b01      	subs	r3, #1
 8002268:	b29a      	uxth	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002272:	b29b      	uxth	r3, r3
 8002274:	3b01      	subs	r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800227c:	e0b8      	b.n	80023f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002284:	2200      	movs	r2, #0
 8002286:	4966      	ldr	r1, [pc, #408]	; (8002420 <HAL_I2C_Mem_Read+0x448>)
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 fa49 	bl	8002720 <I2C_WaitOnFlagUntilTimeout>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e0bf      	b.n	8002418 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691a      	ldr	r2, [r3, #16]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e0:	2200      	movs	r2, #0
 80022e2:	494f      	ldr	r1, [pc, #316]	; (8002420 <HAL_I2C_Mem_Read+0x448>)
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 fa1b 	bl	8002720 <I2C_WaitOnFlagUntilTimeout>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e091      	b.n	8002418 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002302:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	691a      	ldr	r2, [r3, #16]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232c:	b29b      	uxth	r3, r3
 800232e:	3b01      	subs	r3, #1
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002352:	3b01      	subs	r3, #1
 8002354:	b29a      	uxth	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235e:	b29b      	uxth	r3, r3
 8002360:	3b01      	subs	r3, #1
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002368:	e042      	b.n	80023f0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800236a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 fb2e 	bl	80029d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e04c      	b.n	8002418 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239a:	3b01      	subs	r3, #1
 800239c:	b29a      	uxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d118      	bne.n	80023f0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023da:	3b01      	subs	r3, #1
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	3b01      	subs	r3, #1
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f47f aec2 	bne.w	800217e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2220      	movs	r2, #32
 80023fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	e000      	b.n	8002418 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002416:	2302      	movs	r3, #2
  }
}
 8002418:	4618      	mov	r0, r3
 800241a:	3728      	adds	r7, #40	; 0x28
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	00010004 	.word	0x00010004

08002424 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af02      	add	r7, sp, #8
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	4608      	mov	r0, r1
 800242e:	4611      	mov	r1, r2
 8002430:	461a      	mov	r2, r3
 8002432:	4603      	mov	r3, r0
 8002434:	817b      	strh	r3, [r7, #10]
 8002436:	460b      	mov	r3, r1
 8002438:	813b      	strh	r3, [r7, #8]
 800243a:	4613      	mov	r3, r2
 800243c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800244c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	2200      	movs	r2, #0
 8002456:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 f960 	bl	8002720 <I2C_WaitOnFlagUntilTimeout>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00d      	beq.n	8002482 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002474:	d103      	bne.n	800247e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800247c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e05f      	b.n	8002542 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002482:	897b      	ldrh	r3, [r7, #10]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	461a      	mov	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002490:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	6a3a      	ldr	r2, [r7, #32]
 8002496:	492d      	ldr	r1, [pc, #180]	; (800254c <I2C_RequestMemoryWrite+0x128>)
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f000 f998 	bl	80027ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e04c      	b.n	8002542 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c0:	6a39      	ldr	r1, [r7, #32]
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 fa02 	bl	80028cc <I2C_WaitOnTXEFlagUntilTimeout>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00d      	beq.n	80024ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d107      	bne.n	80024e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e02b      	b.n	8002542 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d105      	bne.n	80024fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024f0:	893b      	ldrh	r3, [r7, #8]
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	611a      	str	r2, [r3, #16]
 80024fa:	e021      	b.n	8002540 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80024fc:	893b      	ldrh	r3, [r7, #8]
 80024fe:	0a1b      	lsrs	r3, r3, #8
 8002500:	b29b      	uxth	r3, r3
 8002502:	b2da      	uxtb	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800250a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250c:	6a39      	ldr	r1, [r7, #32]
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 f9dc 	bl	80028cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00d      	beq.n	8002536 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	2b04      	cmp	r3, #4
 8002520:	d107      	bne.n	8002532 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002530:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e005      	b.n	8002542 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002536:	893b      	ldrh	r3, [r7, #8]
 8002538:	b2da      	uxtb	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	00010002 	.word	0x00010002

08002550 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af02      	add	r7, sp, #8
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	4608      	mov	r0, r1
 800255a:	4611      	mov	r1, r2
 800255c:	461a      	mov	r2, r3
 800255e:	4603      	mov	r3, r0
 8002560:	817b      	strh	r3, [r7, #10]
 8002562:	460b      	mov	r3, r1
 8002564:	813b      	strh	r3, [r7, #8]
 8002566:	4613      	mov	r3, r2
 8002568:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002578:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002588:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	2200      	movs	r2, #0
 8002592:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 f8c2 	bl	8002720 <I2C_WaitOnFlagUntilTimeout>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00d      	beq.n	80025be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025b0:	d103      	bne.n	80025ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e0aa      	b.n	8002714 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025be:	897b      	ldrh	r3, [r7, #10]
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	461a      	mov	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	6a3a      	ldr	r2, [r7, #32]
 80025d2:	4952      	ldr	r1, [pc, #328]	; (800271c <I2C_RequestMemoryRead+0x1cc>)
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 f8fa 	bl	80027ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e097      	b.n	8002714 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025fc:	6a39      	ldr	r1, [r7, #32]
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 f964 	bl	80028cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00d      	beq.n	8002626 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	2b04      	cmp	r3, #4
 8002610:	d107      	bne.n	8002622 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002620:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e076      	b.n	8002714 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d105      	bne.n	8002638 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800262c:	893b      	ldrh	r3, [r7, #8]
 800262e:	b2da      	uxtb	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	611a      	str	r2, [r3, #16]
 8002636:	e021      	b.n	800267c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002638:	893b      	ldrh	r3, [r7, #8]
 800263a:	0a1b      	lsrs	r3, r3, #8
 800263c:	b29b      	uxth	r3, r3
 800263e:	b2da      	uxtb	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002648:	6a39      	ldr	r1, [r7, #32]
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 f93e 	bl	80028cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00d      	beq.n	8002672 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	2b04      	cmp	r3, #4
 800265c:	d107      	bne.n	800266e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800266c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e050      	b.n	8002714 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002672:	893b      	ldrh	r3, [r7, #8]
 8002674:	b2da      	uxtb	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800267c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800267e:	6a39      	ldr	r1, [r7, #32]
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 f923 	bl	80028cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00d      	beq.n	80026a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	2b04      	cmp	r3, #4
 8002692:	d107      	bne.n	80026a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e035      	b.n	8002714 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	2200      	movs	r2, #0
 80026c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 f82b 	bl	8002720 <I2C_WaitOnFlagUntilTimeout>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00d      	beq.n	80026ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026de:	d103      	bne.n	80026e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e013      	b.n	8002714 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80026ec:	897b      	ldrh	r3, [r7, #10]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	6a3a      	ldr	r2, [r7, #32]
 8002700:	4906      	ldr	r1, [pc, #24]	; (800271c <I2C_RequestMemoryRead+0x1cc>)
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 f863 	bl	80027ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	00010002 	.word	0x00010002

08002720 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	603b      	str	r3, [r7, #0]
 800272c:	4613      	mov	r3, r2
 800272e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002730:	e025      	b.n	800277e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002738:	d021      	beq.n	800277e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800273a:	f7fe ff5b 	bl	80015f4 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d302      	bcc.n	8002750 <I2C_WaitOnFlagUntilTimeout+0x30>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d116      	bne.n	800277e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2220      	movs	r2, #32
 800275a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f043 0220 	orr.w	r2, r3, #32
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e023      	b.n	80027c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	0c1b      	lsrs	r3, r3, #16
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b01      	cmp	r3, #1
 8002786:	d10d      	bne.n	80027a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	43da      	mvns	r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	4013      	ands	r3, r2
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	bf0c      	ite	eq
 800279a:	2301      	moveq	r3, #1
 800279c:	2300      	movne	r3, #0
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	e00c      	b.n	80027be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	43da      	mvns	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	4013      	ands	r3, r2
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	bf0c      	ite	eq
 80027b6:	2301      	moveq	r3, #1
 80027b8:	2300      	movne	r3, #0
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	461a      	mov	r2, r3
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d0b6      	beq.n	8002732 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027dc:	e051      	b.n	8002882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ec:	d123      	bne.n	8002836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002806:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2220      	movs	r2, #32
 8002812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f043 0204 	orr.w	r2, r3, #4
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e046      	b.n	80028c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283c:	d021      	beq.n	8002882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800283e:	f7fe fed9 	bl	80015f4 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	429a      	cmp	r2, r3
 800284c:	d302      	bcc.n	8002854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d116      	bne.n	8002882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2220      	movs	r2, #32
 800285e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f043 0220 	orr.w	r2, r3, #32
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e020      	b.n	80028c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	0c1b      	lsrs	r3, r3, #16
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b01      	cmp	r3, #1
 800288a:	d10c      	bne.n	80028a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	43da      	mvns	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4013      	ands	r3, r2
 8002898:	b29b      	uxth	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	bf14      	ite	ne
 800289e:	2301      	movne	r3, #1
 80028a0:	2300      	moveq	r3, #0
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	e00b      	b.n	80028be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	43da      	mvns	r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	4013      	ands	r3, r2
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	bf14      	ite	ne
 80028b8:	2301      	movne	r3, #1
 80028ba:	2300      	moveq	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d18d      	bne.n	80027de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028d8:	e02d      	b.n	8002936 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 f8ce 	bl	8002a7c <I2C_IsAcknowledgeFailed>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e02d      	b.n	8002946 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f0:	d021      	beq.n	8002936 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f2:	f7fe fe7f 	bl	80015f4 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d302      	bcc.n	8002908 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d116      	bne.n	8002936 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2220      	movs	r2, #32
 8002912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	f043 0220 	orr.w	r2, r3, #32
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e007      	b.n	8002946 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002940:	2b80      	cmp	r3, #128	; 0x80
 8002942:	d1ca      	bne.n	80028da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800295a:	e02d      	b.n	80029b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 f88d 	bl	8002a7c <I2C_IsAcknowledgeFailed>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e02d      	b.n	80029c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002972:	d021      	beq.n	80029b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002974:	f7fe fe3e 	bl	80015f4 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	429a      	cmp	r2, r3
 8002982:	d302      	bcc.n	800298a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d116      	bne.n	80029b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2220      	movs	r2, #32
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	f043 0220 	orr.w	r2, r3, #32
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e007      	b.n	80029c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d1ca      	bne.n	800295c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029dc:	e042      	b.n	8002a64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	2b10      	cmp	r3, #16
 80029ea:	d119      	bne.n	8002a20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0210 	mvn.w	r2, #16
 80029f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e029      	b.n	8002a74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a20:	f7fe fde8 	bl	80015f4 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d302      	bcc.n	8002a36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d116      	bne.n	8002a64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	f043 0220 	orr.w	r2, r3, #32
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e007      	b.n	8002a74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6e:	2b40      	cmp	r3, #64	; 0x40
 8002a70:	d1b5      	bne.n	80029de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a92:	d11b      	bne.n	8002acc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	f043 0204 	orr.w	r2, r3, #4
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e267      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d075      	beq.n	8002be6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002afa:	4b88      	ldr	r3, [pc, #544]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d00c      	beq.n	8002b20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b06:	4b85      	ldr	r3, [pc, #532]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d112      	bne.n	8002b38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b12:	4b82      	ldr	r3, [pc, #520]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b1e:	d10b      	bne.n	8002b38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b20:	4b7e      	ldr	r3, [pc, #504]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d05b      	beq.n	8002be4 <HAL_RCC_OscConfig+0x108>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d157      	bne.n	8002be4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e242      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b40:	d106      	bne.n	8002b50 <HAL_RCC_OscConfig+0x74>
 8002b42:	4b76      	ldr	r3, [pc, #472]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a75      	ldr	r2, [pc, #468]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	e01d      	b.n	8002b8c <HAL_RCC_OscConfig+0xb0>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x98>
 8002b5a:	4b70      	ldr	r3, [pc, #448]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a6f      	ldr	r2, [pc, #444]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	4b6d      	ldr	r3, [pc, #436]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a6c      	ldr	r2, [pc, #432]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	e00b      	b.n	8002b8c <HAL_RCC_OscConfig+0xb0>
 8002b74:	4b69      	ldr	r3, [pc, #420]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a68      	ldr	r2, [pc, #416]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	4b66      	ldr	r3, [pc, #408]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a65      	ldr	r2, [pc, #404]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d013      	beq.n	8002bbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b94:	f7fe fd2e 	bl	80015f4 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b9c:	f7fe fd2a 	bl	80015f4 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b64      	cmp	r3, #100	; 0x64
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e207      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bae:	4b5b      	ldr	r3, [pc, #364]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCC_OscConfig+0xc0>
 8002bba:	e014      	b.n	8002be6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbc:	f7fe fd1a 	bl	80015f4 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc4:	f7fe fd16 	bl	80015f4 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b64      	cmp	r3, #100	; 0x64
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e1f3      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd6:	4b51      	ldr	r3, [pc, #324]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0xe8>
 8002be2:	e000      	b.n	8002be6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d063      	beq.n	8002cba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bf2:	4b4a      	ldr	r3, [pc, #296]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00b      	beq.n	8002c16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bfe:	4b47      	ldr	r3, [pc, #284]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d11c      	bne.n	8002c44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c0a:	4b44      	ldr	r3, [pc, #272]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d116      	bne.n	8002c44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c16:	4b41      	ldr	r3, [pc, #260]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d005      	beq.n	8002c2e <HAL_RCC_OscConfig+0x152>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d001      	beq.n	8002c2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e1c7      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2e:	4b3b      	ldr	r3, [pc, #236]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4937      	ldr	r1, [pc, #220]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c42:	e03a      	b.n	8002cba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d020      	beq.n	8002c8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c4c:	4b34      	ldr	r3, [pc, #208]	; (8002d20 <HAL_RCC_OscConfig+0x244>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c52:	f7fe fccf 	bl	80015f4 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c5a:	f7fe fccb 	bl	80015f4 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e1a8      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6c:	4b2b      	ldr	r3, [pc, #172]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0f0      	beq.n	8002c5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c78:	4b28      	ldr	r3, [pc, #160]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	4925      	ldr	r1, [pc, #148]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	600b      	str	r3, [r1, #0]
 8002c8c:	e015      	b.n	8002cba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c8e:	4b24      	ldr	r3, [pc, #144]	; (8002d20 <HAL_RCC_OscConfig+0x244>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c94:	f7fe fcae 	bl	80015f4 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c9c:	f7fe fcaa 	bl	80015f4 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e187      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cae:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f0      	bne.n	8002c9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d036      	beq.n	8002d34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d016      	beq.n	8002cfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cce:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <HAL_RCC_OscConfig+0x248>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd4:	f7fe fc8e 	bl	80015f4 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cdc:	f7fe fc8a 	bl	80015f4 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e167      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cee:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCC_OscConfig+0x200>
 8002cfa:	e01b      	b.n	8002d34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cfc:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <HAL_RCC_OscConfig+0x248>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d02:	f7fe fc77 	bl	80015f4 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d08:	e00e      	b.n	8002d28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d0a:	f7fe fc73 	bl	80015f4 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d907      	bls.n	8002d28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e150      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	42470000 	.word	0x42470000
 8002d24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d28:	4b88      	ldr	r3, [pc, #544]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1ea      	bne.n	8002d0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 8097 	beq.w	8002e70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d42:	2300      	movs	r3, #0
 8002d44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d46:	4b81      	ldr	r3, [pc, #516]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10f      	bne.n	8002d72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	4b7d      	ldr	r3, [pc, #500]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	4a7c      	ldr	r2, [pc, #496]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d60:	6413      	str	r3, [r2, #64]	; 0x40
 8002d62:	4b7a      	ldr	r3, [pc, #488]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d72:	4b77      	ldr	r3, [pc, #476]	; (8002f50 <HAL_RCC_OscConfig+0x474>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d118      	bne.n	8002db0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d7e:	4b74      	ldr	r3, [pc, #464]	; (8002f50 <HAL_RCC_OscConfig+0x474>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a73      	ldr	r2, [pc, #460]	; (8002f50 <HAL_RCC_OscConfig+0x474>)
 8002d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d8a:	f7fe fc33 	bl	80015f4 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d92:	f7fe fc2f 	bl	80015f4 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e10c      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da4:	4b6a      	ldr	r3, [pc, #424]	; (8002f50 <HAL_RCC_OscConfig+0x474>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d106      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x2ea>
 8002db8:	4b64      	ldr	r3, [pc, #400]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbc:	4a63      	ldr	r2, [pc, #396]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc4:	e01c      	b.n	8002e00 <HAL_RCC_OscConfig+0x324>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b05      	cmp	r3, #5
 8002dcc:	d10c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x30c>
 8002dce:	4b5f      	ldr	r3, [pc, #380]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd2:	4a5e      	ldr	r2, [pc, #376]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002dd4:	f043 0304 	orr.w	r3, r3, #4
 8002dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dda:	4b5c      	ldr	r3, [pc, #368]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dde:	4a5b      	ldr	r2, [pc, #364]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	6713      	str	r3, [r2, #112]	; 0x70
 8002de6:	e00b      	b.n	8002e00 <HAL_RCC_OscConfig+0x324>
 8002de8:	4b58      	ldr	r3, [pc, #352]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dec:	4a57      	ldr	r2, [pc, #348]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002dee:	f023 0301 	bic.w	r3, r3, #1
 8002df2:	6713      	str	r3, [r2, #112]	; 0x70
 8002df4:	4b55      	ldr	r3, [pc, #340]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df8:	4a54      	ldr	r2, [pc, #336]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002dfa:	f023 0304 	bic.w	r3, r3, #4
 8002dfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d015      	beq.n	8002e34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e08:	f7fe fbf4 	bl	80015f4 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0e:	e00a      	b.n	8002e26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e10:	f7fe fbf0 	bl	80015f4 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e0cb      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e26:	4b49      	ldr	r3, [pc, #292]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0ee      	beq.n	8002e10 <HAL_RCC_OscConfig+0x334>
 8002e32:	e014      	b.n	8002e5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e34:	f7fe fbde 	bl	80015f4 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e3a:	e00a      	b.n	8002e52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e3c:	f7fe fbda 	bl	80015f4 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e0b5      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e52:	4b3e      	ldr	r3, [pc, #248]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1ee      	bne.n	8002e3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e5e:	7dfb      	ldrb	r3, [r7, #23]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d105      	bne.n	8002e70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e64:	4b39      	ldr	r3, [pc, #228]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	4a38      	ldr	r2, [pc, #224]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002e6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 80a1 	beq.w	8002fbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e7a:	4b34      	ldr	r3, [pc, #208]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d05c      	beq.n	8002f40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d141      	bne.n	8002f12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8e:	4b31      	ldr	r3, [pc, #196]	; (8002f54 <HAL_RCC_OscConfig+0x478>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e94:	f7fe fbae 	bl	80015f4 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e9c:	f7fe fbaa 	bl	80015f4 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e087      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eae:	4b27      	ldr	r3, [pc, #156]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f0      	bne.n	8002e9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69da      	ldr	r2, [r3, #28]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	019b      	lsls	r3, r3, #6
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	085b      	lsrs	r3, r3, #1
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	041b      	lsls	r3, r3, #16
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002edc:	061b      	lsls	r3, r3, #24
 8002ede:	491b      	ldr	r1, [pc, #108]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee4:	4b1b      	ldr	r3, [pc, #108]	; (8002f54 <HAL_RCC_OscConfig+0x478>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eea:	f7fe fb83 	bl	80015f4 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef2:	f7fe fb7f 	bl	80015f4 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e05c      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f04:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f0      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x416>
 8002f10:	e054      	b.n	8002fbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f12:	4b10      	ldr	r3, [pc, #64]	; (8002f54 <HAL_RCC_OscConfig+0x478>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f18:	f7fe fb6c 	bl	80015f4 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f20:	f7fe fb68 	bl	80015f4 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e045      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f32:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0x444>
 8002f3e:	e03d      	b.n	8002fbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d107      	bne.n	8002f58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e038      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	40007000 	.word	0x40007000
 8002f54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f58:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <HAL_RCC_OscConfig+0x4ec>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d028      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d121      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d11a      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f88:	4013      	ands	r3, r2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d111      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9e:	085b      	lsrs	r3, r3, #1
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d107      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40023800 	.word	0x40023800

08002fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0cc      	b.n	800317a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe0:	4b68      	ldr	r3, [pc, #416]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d90c      	bls.n	8003008 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fee:	4b65      	ldr	r3, [pc, #404]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff6:	4b63      	ldr	r3, [pc, #396]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d001      	beq.n	8003008 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0b8      	b.n	800317a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d020      	beq.n	8003056 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d005      	beq.n	800302c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003020:	4b59      	ldr	r3, [pc, #356]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	4a58      	ldr	r2, [pc, #352]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800302a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b00      	cmp	r3, #0
 8003036:	d005      	beq.n	8003044 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003038:	4b53      	ldr	r3, [pc, #332]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	4a52      	ldr	r2, [pc, #328]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003042:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003044:	4b50      	ldr	r3, [pc, #320]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	494d      	ldr	r1, [pc, #308]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 8003052:	4313      	orrs	r3, r2
 8003054:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d044      	beq.n	80030ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d107      	bne.n	800307a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306a:	4b47      	ldr	r3, [pc, #284]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d119      	bne.n	80030aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e07f      	b.n	800317a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d003      	beq.n	800308a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003086:	2b03      	cmp	r3, #3
 8003088:	d107      	bne.n	800309a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308a:	4b3f      	ldr	r3, [pc, #252]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d109      	bne.n	80030aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e06f      	b.n	800317a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309a:	4b3b      	ldr	r3, [pc, #236]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e067      	b.n	800317a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030aa:	4b37      	ldr	r3, [pc, #220]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f023 0203 	bic.w	r2, r3, #3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	4934      	ldr	r1, [pc, #208]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030bc:	f7fe fa9a 	bl	80015f4 <HAL_GetTick>
 80030c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c2:	e00a      	b.n	80030da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c4:	f7fe fa96 	bl	80015f4 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e04f      	b.n	800317a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030da:	4b2b      	ldr	r3, [pc, #172]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 020c 	and.w	r2, r3, #12
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d1eb      	bne.n	80030c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030ec:	4b25      	ldr	r3, [pc, #148]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d20c      	bcs.n	8003114 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fa:	4b22      	ldr	r3, [pc, #136]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003102:	4b20      	ldr	r3, [pc, #128]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d001      	beq.n	8003114 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e032      	b.n	800317a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d008      	beq.n	8003132 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003120:	4b19      	ldr	r3, [pc, #100]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	4916      	ldr	r1, [pc, #88]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	4313      	orrs	r3, r2
 8003130:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b00      	cmp	r3, #0
 800313c:	d009      	beq.n	8003152 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800313e:	4b12      	ldr	r3, [pc, #72]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	490e      	ldr	r1, [pc, #56]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	4313      	orrs	r3, r2
 8003150:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003152:	f000 f821 	bl	8003198 <HAL_RCC_GetSysClockFreq>
 8003156:	4602      	mov	r2, r0
 8003158:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	490a      	ldr	r1, [pc, #40]	; (800318c <HAL_RCC_ClockConfig+0x1c0>)
 8003164:	5ccb      	ldrb	r3, [r1, r3]
 8003166:	fa22 f303 	lsr.w	r3, r2, r3
 800316a:	4a09      	ldr	r2, [pc, #36]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800316e:	4b09      	ldr	r3, [pc, #36]	; (8003194 <HAL_RCC_ClockConfig+0x1c8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7fe f9fa 	bl	800156c <HAL_InitTick>

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40023c00 	.word	0x40023c00
 8003188:	40023800 	.word	0x40023800
 800318c:	08006998 	.word	0x08006998
 8003190:	20000000 	.word	0x20000000
 8003194:	20000004 	.word	0x20000004

08003198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800319c:	b094      	sub	sp, #80	; 0x50
 800319e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	647b      	str	r3, [r7, #68]	; 0x44
 80031a4:	2300      	movs	r3, #0
 80031a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031a8:	2300      	movs	r3, #0
 80031aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031b0:	4b79      	ldr	r3, [pc, #484]	; (8003398 <HAL_RCC_GetSysClockFreq+0x200>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 030c 	and.w	r3, r3, #12
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d00d      	beq.n	80031d8 <HAL_RCC_GetSysClockFreq+0x40>
 80031bc:	2b08      	cmp	r3, #8
 80031be:	f200 80e1 	bhi.w	8003384 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <HAL_RCC_GetSysClockFreq+0x34>
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d003      	beq.n	80031d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80031ca:	e0db      	b.n	8003384 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031cc:	4b73      	ldr	r3, [pc, #460]	; (800339c <HAL_RCC_GetSysClockFreq+0x204>)
 80031ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80031d0:	e0db      	b.n	800338a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031d2:	4b73      	ldr	r3, [pc, #460]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80031d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031d6:	e0d8      	b.n	800338a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031d8:	4b6f      	ldr	r3, [pc, #444]	; (8003398 <HAL_RCC_GetSysClockFreq+0x200>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031e2:	4b6d      	ldr	r3, [pc, #436]	; (8003398 <HAL_RCC_GetSysClockFreq+0x200>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d063      	beq.n	80032b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ee:	4b6a      	ldr	r3, [pc, #424]	; (8003398 <HAL_RCC_GetSysClockFreq+0x200>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	099b      	lsrs	r3, r3, #6
 80031f4:	2200      	movs	r2, #0
 80031f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80031f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003200:	633b      	str	r3, [r7, #48]	; 0x30
 8003202:	2300      	movs	r3, #0
 8003204:	637b      	str	r3, [r7, #52]	; 0x34
 8003206:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800320a:	4622      	mov	r2, r4
 800320c:	462b      	mov	r3, r5
 800320e:	f04f 0000 	mov.w	r0, #0
 8003212:	f04f 0100 	mov.w	r1, #0
 8003216:	0159      	lsls	r1, r3, #5
 8003218:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800321c:	0150      	lsls	r0, r2, #5
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4621      	mov	r1, r4
 8003224:	1a51      	subs	r1, r2, r1
 8003226:	6139      	str	r1, [r7, #16]
 8003228:	4629      	mov	r1, r5
 800322a:	eb63 0301 	sbc.w	r3, r3, r1
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800323c:	4659      	mov	r1, fp
 800323e:	018b      	lsls	r3, r1, #6
 8003240:	4651      	mov	r1, sl
 8003242:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003246:	4651      	mov	r1, sl
 8003248:	018a      	lsls	r2, r1, #6
 800324a:	4651      	mov	r1, sl
 800324c:	ebb2 0801 	subs.w	r8, r2, r1
 8003250:	4659      	mov	r1, fp
 8003252:	eb63 0901 	sbc.w	r9, r3, r1
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003262:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003266:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800326a:	4690      	mov	r8, r2
 800326c:	4699      	mov	r9, r3
 800326e:	4623      	mov	r3, r4
 8003270:	eb18 0303 	adds.w	r3, r8, r3
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	462b      	mov	r3, r5
 8003278:	eb49 0303 	adc.w	r3, r9, r3
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800328a:	4629      	mov	r1, r5
 800328c:	024b      	lsls	r3, r1, #9
 800328e:	4621      	mov	r1, r4
 8003290:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003294:	4621      	mov	r1, r4
 8003296:	024a      	lsls	r2, r1, #9
 8003298:	4610      	mov	r0, r2
 800329a:	4619      	mov	r1, r3
 800329c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800329e:	2200      	movs	r2, #0
 80032a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80032a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032a8:	f7fd fc86 	bl	8000bb8 <__aeabi_uldivmod>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4613      	mov	r3, r2
 80032b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032b4:	e058      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032b6:	4b38      	ldr	r3, [pc, #224]	; (8003398 <HAL_RCC_GetSysClockFreq+0x200>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	099b      	lsrs	r3, r3, #6
 80032bc:	2200      	movs	r2, #0
 80032be:	4618      	mov	r0, r3
 80032c0:	4611      	mov	r1, r2
 80032c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032c6:	623b      	str	r3, [r7, #32]
 80032c8:	2300      	movs	r3, #0
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24
 80032cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032d0:	4642      	mov	r2, r8
 80032d2:	464b      	mov	r3, r9
 80032d4:	f04f 0000 	mov.w	r0, #0
 80032d8:	f04f 0100 	mov.w	r1, #0
 80032dc:	0159      	lsls	r1, r3, #5
 80032de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032e2:	0150      	lsls	r0, r2, #5
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	4641      	mov	r1, r8
 80032ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80032ee:	4649      	mov	r1, r9
 80032f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003300:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003304:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003308:	ebb2 040a 	subs.w	r4, r2, sl
 800330c:	eb63 050b 	sbc.w	r5, r3, fp
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	00eb      	lsls	r3, r5, #3
 800331a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800331e:	00e2      	lsls	r2, r4, #3
 8003320:	4614      	mov	r4, r2
 8003322:	461d      	mov	r5, r3
 8003324:	4643      	mov	r3, r8
 8003326:	18e3      	adds	r3, r4, r3
 8003328:	603b      	str	r3, [r7, #0]
 800332a:	464b      	mov	r3, r9
 800332c:	eb45 0303 	adc.w	r3, r5, r3
 8003330:	607b      	str	r3, [r7, #4]
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800333e:	4629      	mov	r1, r5
 8003340:	028b      	lsls	r3, r1, #10
 8003342:	4621      	mov	r1, r4
 8003344:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003348:	4621      	mov	r1, r4
 800334a:	028a      	lsls	r2, r1, #10
 800334c:	4610      	mov	r0, r2
 800334e:	4619      	mov	r1, r3
 8003350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003352:	2200      	movs	r2, #0
 8003354:	61bb      	str	r3, [r7, #24]
 8003356:	61fa      	str	r2, [r7, #28]
 8003358:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800335c:	f7fd fc2c 	bl	8000bb8 <__aeabi_uldivmod>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4613      	mov	r3, r2
 8003366:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HAL_RCC_GetSysClockFreq+0x200>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	0c1b      	lsrs	r3, r3, #16
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	3301      	adds	r3, #1
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003378:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800337a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800337c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003380:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003382:	e002      	b.n	800338a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003384:	4b05      	ldr	r3, [pc, #20]	; (800339c <HAL_RCC_GetSysClockFreq+0x204>)
 8003386:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003388:	bf00      	nop
    }
  }
  return sysclockfreq;
 800338a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800338c:	4618      	mov	r0, r3
 800338e:	3750      	adds	r7, #80	; 0x50
 8003390:	46bd      	mov	sp, r7
 8003392:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003396:	bf00      	nop
 8003398:	40023800 	.word	0x40023800
 800339c:	00f42400 	.word	0x00f42400
 80033a0:	007a1200 	.word	0x007a1200

080033a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033a8:	4b03      	ldr	r3, [pc, #12]	; (80033b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80033aa:	681b      	ldr	r3, [r3, #0]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	20000000 	.word	0x20000000

080033bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033c0:	f7ff fff0 	bl	80033a4 <HAL_RCC_GetHCLKFreq>
 80033c4:	4602      	mov	r2, r0
 80033c6:	4b05      	ldr	r3, [pc, #20]	; (80033dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	0a9b      	lsrs	r3, r3, #10
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	4903      	ldr	r1, [pc, #12]	; (80033e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033d2:	5ccb      	ldrb	r3, [r1, r3]
 80033d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d8:	4618      	mov	r0, r3
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40023800 	.word	0x40023800
 80033e0:	080069a8 	.word	0x080069a8

080033e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033e8:	f7ff ffdc 	bl	80033a4 <HAL_RCC_GetHCLKFreq>
 80033ec:	4602      	mov	r2, r0
 80033ee:	4b05      	ldr	r3, [pc, #20]	; (8003404 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	0b5b      	lsrs	r3, r3, #13
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	4903      	ldr	r1, [pc, #12]	; (8003408 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033fa:	5ccb      	ldrb	r3, [r1, r3]
 80033fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003400:	4618      	mov	r0, r3
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40023800 	.word	0x40023800
 8003408:	080069a8 	.word	0x080069a8

0800340c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e03f      	b.n	800349e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fe f806 	bl	8001444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2224      	movs	r2, #36	; 0x24
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800344e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f829 	bl	80034a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003464:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695a      	ldr	r2, [r3, #20]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003474:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003484:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
	...

080034a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034ac:	b0c0      	sub	sp, #256	; 0x100
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c4:	68d9      	ldr	r1, [r3, #12]
 80034c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	ea40 0301 	orr.w	r3, r0, r1
 80034d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	431a      	orrs	r2, r3
 80034e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80034f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003500:	f021 010c 	bic.w	r1, r1, #12
 8003504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800350e:	430b      	orrs	r3, r1
 8003510:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800351e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003522:	6999      	ldr	r1, [r3, #24]
 8003524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	ea40 0301 	orr.w	r3, r0, r1
 800352e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	4b8f      	ldr	r3, [pc, #572]	; (8003774 <UART_SetConfig+0x2cc>)
 8003538:	429a      	cmp	r2, r3
 800353a:	d005      	beq.n	8003548 <UART_SetConfig+0xa0>
 800353c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	4b8d      	ldr	r3, [pc, #564]	; (8003778 <UART_SetConfig+0x2d0>)
 8003544:	429a      	cmp	r2, r3
 8003546:	d104      	bne.n	8003552 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003548:	f7ff ff4c 	bl	80033e4 <HAL_RCC_GetPCLK2Freq>
 800354c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003550:	e003      	b.n	800355a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003552:	f7ff ff33 	bl	80033bc <HAL_RCC_GetPCLK1Freq>
 8003556:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800355a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003564:	f040 810c 	bne.w	8003780 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003568:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800356c:	2200      	movs	r2, #0
 800356e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003572:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003576:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800357a:	4622      	mov	r2, r4
 800357c:	462b      	mov	r3, r5
 800357e:	1891      	adds	r1, r2, r2
 8003580:	65b9      	str	r1, [r7, #88]	; 0x58
 8003582:	415b      	adcs	r3, r3
 8003584:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003586:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800358a:	4621      	mov	r1, r4
 800358c:	eb12 0801 	adds.w	r8, r2, r1
 8003590:	4629      	mov	r1, r5
 8003592:	eb43 0901 	adc.w	r9, r3, r1
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035aa:	4690      	mov	r8, r2
 80035ac:	4699      	mov	r9, r3
 80035ae:	4623      	mov	r3, r4
 80035b0:	eb18 0303 	adds.w	r3, r8, r3
 80035b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80035b8:	462b      	mov	r3, r5
 80035ba:	eb49 0303 	adc.w	r3, r9, r3
 80035be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80035ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80035d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80035d6:	460b      	mov	r3, r1
 80035d8:	18db      	adds	r3, r3, r3
 80035da:	653b      	str	r3, [r7, #80]	; 0x50
 80035dc:	4613      	mov	r3, r2
 80035de:	eb42 0303 	adc.w	r3, r2, r3
 80035e2:	657b      	str	r3, [r7, #84]	; 0x54
 80035e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80035e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80035ec:	f7fd fae4 	bl	8000bb8 <__aeabi_uldivmod>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4b61      	ldr	r3, [pc, #388]	; (800377c <UART_SetConfig+0x2d4>)
 80035f6:	fba3 2302 	umull	r2, r3, r3, r2
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	011c      	lsls	r4, r3, #4
 80035fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003602:	2200      	movs	r2, #0
 8003604:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003608:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800360c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003610:	4642      	mov	r2, r8
 8003612:	464b      	mov	r3, r9
 8003614:	1891      	adds	r1, r2, r2
 8003616:	64b9      	str	r1, [r7, #72]	; 0x48
 8003618:	415b      	adcs	r3, r3
 800361a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800361c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003620:	4641      	mov	r1, r8
 8003622:	eb12 0a01 	adds.w	sl, r2, r1
 8003626:	4649      	mov	r1, r9
 8003628:	eb43 0b01 	adc.w	fp, r3, r1
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003638:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800363c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003640:	4692      	mov	sl, r2
 8003642:	469b      	mov	fp, r3
 8003644:	4643      	mov	r3, r8
 8003646:	eb1a 0303 	adds.w	r3, sl, r3
 800364a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800364e:	464b      	mov	r3, r9
 8003650:	eb4b 0303 	adc.w	r3, fp, r3
 8003654:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003664:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003668:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800366c:	460b      	mov	r3, r1
 800366e:	18db      	adds	r3, r3, r3
 8003670:	643b      	str	r3, [r7, #64]	; 0x40
 8003672:	4613      	mov	r3, r2
 8003674:	eb42 0303 	adc.w	r3, r2, r3
 8003678:	647b      	str	r3, [r7, #68]	; 0x44
 800367a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800367e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003682:	f7fd fa99 	bl	8000bb8 <__aeabi_uldivmod>
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	4611      	mov	r1, r2
 800368c:	4b3b      	ldr	r3, [pc, #236]	; (800377c <UART_SetConfig+0x2d4>)
 800368e:	fba3 2301 	umull	r2, r3, r3, r1
 8003692:	095b      	lsrs	r3, r3, #5
 8003694:	2264      	movs	r2, #100	; 0x64
 8003696:	fb02 f303 	mul.w	r3, r2, r3
 800369a:	1acb      	subs	r3, r1, r3
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80036a2:	4b36      	ldr	r3, [pc, #216]	; (800377c <UART_SetConfig+0x2d4>)
 80036a4:	fba3 2302 	umull	r2, r3, r3, r2
 80036a8:	095b      	lsrs	r3, r3, #5
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036b0:	441c      	add	r4, r3
 80036b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036b6:	2200      	movs	r2, #0
 80036b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80036c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80036c4:	4642      	mov	r2, r8
 80036c6:	464b      	mov	r3, r9
 80036c8:	1891      	adds	r1, r2, r2
 80036ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80036cc:	415b      	adcs	r3, r3
 80036ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036d4:	4641      	mov	r1, r8
 80036d6:	1851      	adds	r1, r2, r1
 80036d8:	6339      	str	r1, [r7, #48]	; 0x30
 80036da:	4649      	mov	r1, r9
 80036dc:	414b      	adcs	r3, r1
 80036de:	637b      	str	r3, [r7, #52]	; 0x34
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80036ec:	4659      	mov	r1, fp
 80036ee:	00cb      	lsls	r3, r1, #3
 80036f0:	4651      	mov	r1, sl
 80036f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036f6:	4651      	mov	r1, sl
 80036f8:	00ca      	lsls	r2, r1, #3
 80036fa:	4610      	mov	r0, r2
 80036fc:	4619      	mov	r1, r3
 80036fe:	4603      	mov	r3, r0
 8003700:	4642      	mov	r2, r8
 8003702:	189b      	adds	r3, r3, r2
 8003704:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003708:	464b      	mov	r3, r9
 800370a:	460a      	mov	r2, r1
 800370c:	eb42 0303 	adc.w	r3, r2, r3
 8003710:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003720:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003724:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003728:	460b      	mov	r3, r1
 800372a:	18db      	adds	r3, r3, r3
 800372c:	62bb      	str	r3, [r7, #40]	; 0x28
 800372e:	4613      	mov	r3, r2
 8003730:	eb42 0303 	adc.w	r3, r2, r3
 8003734:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003736:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800373a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800373e:	f7fd fa3b 	bl	8000bb8 <__aeabi_uldivmod>
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	4b0d      	ldr	r3, [pc, #52]	; (800377c <UART_SetConfig+0x2d4>)
 8003748:	fba3 1302 	umull	r1, r3, r3, r2
 800374c:	095b      	lsrs	r3, r3, #5
 800374e:	2164      	movs	r1, #100	; 0x64
 8003750:	fb01 f303 	mul.w	r3, r1, r3
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	3332      	adds	r3, #50	; 0x32
 800375a:	4a08      	ldr	r2, [pc, #32]	; (800377c <UART_SetConfig+0x2d4>)
 800375c:	fba2 2303 	umull	r2, r3, r2, r3
 8003760:	095b      	lsrs	r3, r3, #5
 8003762:	f003 0207 	and.w	r2, r3, #7
 8003766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4422      	add	r2, r4
 800376e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003770:	e105      	b.n	800397e <UART_SetConfig+0x4d6>
 8003772:	bf00      	nop
 8003774:	40011000 	.word	0x40011000
 8003778:	40011400 	.word	0x40011400
 800377c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003780:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003784:	2200      	movs	r2, #0
 8003786:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800378a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800378e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003792:	4642      	mov	r2, r8
 8003794:	464b      	mov	r3, r9
 8003796:	1891      	adds	r1, r2, r2
 8003798:	6239      	str	r1, [r7, #32]
 800379a:	415b      	adcs	r3, r3
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
 800379e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037a2:	4641      	mov	r1, r8
 80037a4:	1854      	adds	r4, r2, r1
 80037a6:	4649      	mov	r1, r9
 80037a8:	eb43 0501 	adc.w	r5, r3, r1
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	00eb      	lsls	r3, r5, #3
 80037b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037ba:	00e2      	lsls	r2, r4, #3
 80037bc:	4614      	mov	r4, r2
 80037be:	461d      	mov	r5, r3
 80037c0:	4643      	mov	r3, r8
 80037c2:	18e3      	adds	r3, r4, r3
 80037c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037c8:	464b      	mov	r3, r9
 80037ca:	eb45 0303 	adc.w	r3, r5, r3
 80037ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80037d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80037de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	f04f 0300 	mov.w	r3, #0
 80037ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80037ee:	4629      	mov	r1, r5
 80037f0:	008b      	lsls	r3, r1, #2
 80037f2:	4621      	mov	r1, r4
 80037f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037f8:	4621      	mov	r1, r4
 80037fa:	008a      	lsls	r2, r1, #2
 80037fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003800:	f7fd f9da 	bl	8000bb8 <__aeabi_uldivmod>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	4b60      	ldr	r3, [pc, #384]	; (800398c <UART_SetConfig+0x4e4>)
 800380a:	fba3 2302 	umull	r2, r3, r3, r2
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	011c      	lsls	r4, r3, #4
 8003812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003816:	2200      	movs	r2, #0
 8003818:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800381c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003820:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003824:	4642      	mov	r2, r8
 8003826:	464b      	mov	r3, r9
 8003828:	1891      	adds	r1, r2, r2
 800382a:	61b9      	str	r1, [r7, #24]
 800382c:	415b      	adcs	r3, r3
 800382e:	61fb      	str	r3, [r7, #28]
 8003830:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003834:	4641      	mov	r1, r8
 8003836:	1851      	adds	r1, r2, r1
 8003838:	6139      	str	r1, [r7, #16]
 800383a:	4649      	mov	r1, r9
 800383c:	414b      	adcs	r3, r1
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	f04f 0300 	mov.w	r3, #0
 8003848:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800384c:	4659      	mov	r1, fp
 800384e:	00cb      	lsls	r3, r1, #3
 8003850:	4651      	mov	r1, sl
 8003852:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003856:	4651      	mov	r1, sl
 8003858:	00ca      	lsls	r2, r1, #3
 800385a:	4610      	mov	r0, r2
 800385c:	4619      	mov	r1, r3
 800385e:	4603      	mov	r3, r0
 8003860:	4642      	mov	r2, r8
 8003862:	189b      	adds	r3, r3, r2
 8003864:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003868:	464b      	mov	r3, r9
 800386a:	460a      	mov	r2, r1
 800386c:	eb42 0303 	adc.w	r3, r2, r3
 8003870:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	67bb      	str	r3, [r7, #120]	; 0x78
 800387e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800388c:	4649      	mov	r1, r9
 800388e:	008b      	lsls	r3, r1, #2
 8003890:	4641      	mov	r1, r8
 8003892:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003896:	4641      	mov	r1, r8
 8003898:	008a      	lsls	r2, r1, #2
 800389a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800389e:	f7fd f98b 	bl	8000bb8 <__aeabi_uldivmod>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	4b39      	ldr	r3, [pc, #228]	; (800398c <UART_SetConfig+0x4e4>)
 80038a8:	fba3 1302 	umull	r1, r3, r3, r2
 80038ac:	095b      	lsrs	r3, r3, #5
 80038ae:	2164      	movs	r1, #100	; 0x64
 80038b0:	fb01 f303 	mul.w	r3, r1, r3
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	3332      	adds	r3, #50	; 0x32
 80038ba:	4a34      	ldr	r2, [pc, #208]	; (800398c <UART_SetConfig+0x4e4>)
 80038bc:	fba2 2303 	umull	r2, r3, r2, r3
 80038c0:	095b      	lsrs	r3, r3, #5
 80038c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038c6:	441c      	add	r4, r3
 80038c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038cc:	2200      	movs	r2, #0
 80038ce:	673b      	str	r3, [r7, #112]	; 0x70
 80038d0:	677a      	str	r2, [r7, #116]	; 0x74
 80038d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80038d6:	4642      	mov	r2, r8
 80038d8:	464b      	mov	r3, r9
 80038da:	1891      	adds	r1, r2, r2
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	415b      	adcs	r3, r3
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038e6:	4641      	mov	r1, r8
 80038e8:	1851      	adds	r1, r2, r1
 80038ea:	6039      	str	r1, [r7, #0]
 80038ec:	4649      	mov	r1, r9
 80038ee:	414b      	adcs	r3, r1
 80038f0:	607b      	str	r3, [r7, #4]
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038fe:	4659      	mov	r1, fp
 8003900:	00cb      	lsls	r3, r1, #3
 8003902:	4651      	mov	r1, sl
 8003904:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003908:	4651      	mov	r1, sl
 800390a:	00ca      	lsls	r2, r1, #3
 800390c:	4610      	mov	r0, r2
 800390e:	4619      	mov	r1, r3
 8003910:	4603      	mov	r3, r0
 8003912:	4642      	mov	r2, r8
 8003914:	189b      	adds	r3, r3, r2
 8003916:	66bb      	str	r3, [r7, #104]	; 0x68
 8003918:	464b      	mov	r3, r9
 800391a:	460a      	mov	r2, r1
 800391c:	eb42 0303 	adc.w	r3, r2, r3
 8003920:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	663b      	str	r3, [r7, #96]	; 0x60
 800392c:	667a      	str	r2, [r7, #100]	; 0x64
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800393a:	4649      	mov	r1, r9
 800393c:	008b      	lsls	r3, r1, #2
 800393e:	4641      	mov	r1, r8
 8003940:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003944:	4641      	mov	r1, r8
 8003946:	008a      	lsls	r2, r1, #2
 8003948:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800394c:	f7fd f934 	bl	8000bb8 <__aeabi_uldivmod>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	4b0d      	ldr	r3, [pc, #52]	; (800398c <UART_SetConfig+0x4e4>)
 8003956:	fba3 1302 	umull	r1, r3, r3, r2
 800395a:	095b      	lsrs	r3, r3, #5
 800395c:	2164      	movs	r1, #100	; 0x64
 800395e:	fb01 f303 	mul.w	r3, r1, r3
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	3332      	adds	r3, #50	; 0x32
 8003968:	4a08      	ldr	r2, [pc, #32]	; (800398c <UART_SetConfig+0x4e4>)
 800396a:	fba2 2303 	umull	r2, r3, r2, r3
 800396e:	095b      	lsrs	r3, r3, #5
 8003970:	f003 020f 	and.w	r2, r3, #15
 8003974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4422      	add	r2, r4
 800397c:	609a      	str	r2, [r3, #8]
}
 800397e:	bf00      	nop
 8003980:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003984:	46bd      	mov	sp, r7
 8003986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800398a:	bf00      	nop
 800398c:	51eb851f 	.word	0x51eb851f

08003990 <findslot>:
 8003990:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <findslot+0x2c>)
 8003992:	b510      	push	{r4, lr}
 8003994:	4604      	mov	r4, r0
 8003996:	6818      	ldr	r0, [r3, #0]
 8003998:	b118      	cbz	r0, 80039a2 <findslot+0x12>
 800399a:	6983      	ldr	r3, [r0, #24]
 800399c:	b90b      	cbnz	r3, 80039a2 <findslot+0x12>
 800399e:	f000 faf9 	bl	8003f94 <__sinit>
 80039a2:	2c13      	cmp	r4, #19
 80039a4:	d807      	bhi.n	80039b6 <findslot+0x26>
 80039a6:	4806      	ldr	r0, [pc, #24]	; (80039c0 <findslot+0x30>)
 80039a8:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80039ac:	3201      	adds	r2, #1
 80039ae:	d002      	beq.n	80039b6 <findslot+0x26>
 80039b0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80039b4:	bd10      	pop	{r4, pc}
 80039b6:	2000      	movs	r0, #0
 80039b8:	e7fc      	b.n	80039b4 <findslot+0x24>
 80039ba:	bf00      	nop
 80039bc:	20000014 	.word	0x20000014
 80039c0:	200002ac 	.word	0x200002ac

080039c4 <error>:
 80039c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c6:	4604      	mov	r4, r0
 80039c8:	f000 fa86 	bl	8003ed8 <__errno>
 80039cc:	2613      	movs	r6, #19
 80039ce:	4605      	mov	r5, r0
 80039d0:	2700      	movs	r7, #0
 80039d2:	4630      	mov	r0, r6
 80039d4:	4639      	mov	r1, r7
 80039d6:	beab      	bkpt	0x00ab
 80039d8:	4606      	mov	r6, r0
 80039da:	602e      	str	r6, [r5, #0]
 80039dc:	4620      	mov	r0, r4
 80039de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080039e0 <checkerror>:
 80039e0:	1c43      	adds	r3, r0, #1
 80039e2:	d101      	bne.n	80039e8 <checkerror+0x8>
 80039e4:	f7ff bfee 	b.w	80039c4 <error>
 80039e8:	4770      	bx	lr

080039ea <_swiread>:
 80039ea:	b530      	push	{r4, r5, lr}
 80039ec:	b085      	sub	sp, #20
 80039ee:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80039f2:	9203      	str	r2, [sp, #12]
 80039f4:	2406      	movs	r4, #6
 80039f6:	ad01      	add	r5, sp, #4
 80039f8:	4620      	mov	r0, r4
 80039fa:	4629      	mov	r1, r5
 80039fc:	beab      	bkpt	0x00ab
 80039fe:	4604      	mov	r4, r0
 8003a00:	4620      	mov	r0, r4
 8003a02:	f7ff ffed 	bl	80039e0 <checkerror>
 8003a06:	b005      	add	sp, #20
 8003a08:	bd30      	pop	{r4, r5, pc}

08003a0a <_read>:
 8003a0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a0c:	4615      	mov	r5, r2
 8003a0e:	9101      	str	r1, [sp, #4]
 8003a10:	f7ff ffbe 	bl	8003990 <findslot>
 8003a14:	9901      	ldr	r1, [sp, #4]
 8003a16:	4604      	mov	r4, r0
 8003a18:	b938      	cbnz	r0, 8003a2a <_read+0x20>
 8003a1a:	f000 fa5d 	bl	8003ed8 <__errno>
 8003a1e:	2309      	movs	r3, #9
 8003a20:	6003      	str	r3, [r0, #0]
 8003a22:	f04f 30ff 	mov.w	r0, #4294967295
 8003a26:	b003      	add	sp, #12
 8003a28:	bd30      	pop	{r4, r5, pc}
 8003a2a:	6800      	ldr	r0, [r0, #0]
 8003a2c:	462a      	mov	r2, r5
 8003a2e:	f7ff ffdc 	bl	80039ea <_swiread>
 8003a32:	1c43      	adds	r3, r0, #1
 8003a34:	d0f7      	beq.n	8003a26 <_read+0x1c>
 8003a36:	6863      	ldr	r3, [r4, #4]
 8003a38:	1a2a      	subs	r2, r5, r0
 8003a3a:	4413      	add	r3, r2
 8003a3c:	6063      	str	r3, [r4, #4]
 8003a3e:	4610      	mov	r0, r2
 8003a40:	e7f1      	b.n	8003a26 <_read+0x1c>

08003a42 <_swilseek>:
 8003a42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a44:	460c      	mov	r4, r1
 8003a46:	4616      	mov	r6, r2
 8003a48:	f7ff ffa2 	bl	8003990 <findslot>
 8003a4c:	4605      	mov	r5, r0
 8003a4e:	b940      	cbnz	r0, 8003a62 <_swilseek+0x20>
 8003a50:	f000 fa42 	bl	8003ed8 <__errno>
 8003a54:	2309      	movs	r3, #9
 8003a56:	6003      	str	r3, [r0, #0]
 8003a58:	f04f 34ff 	mov.w	r4, #4294967295
 8003a5c:	4620      	mov	r0, r4
 8003a5e:	b003      	add	sp, #12
 8003a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a62:	2e02      	cmp	r6, #2
 8003a64:	d903      	bls.n	8003a6e <_swilseek+0x2c>
 8003a66:	f000 fa37 	bl	8003ed8 <__errno>
 8003a6a:	2316      	movs	r3, #22
 8003a6c:	e7f3      	b.n	8003a56 <_swilseek+0x14>
 8003a6e:	2e01      	cmp	r6, #1
 8003a70:	d112      	bne.n	8003a98 <_swilseek+0x56>
 8003a72:	6843      	ldr	r3, [r0, #4]
 8003a74:	18e4      	adds	r4, r4, r3
 8003a76:	d4f6      	bmi.n	8003a66 <_swilseek+0x24>
 8003a78:	682b      	ldr	r3, [r5, #0]
 8003a7a:	260a      	movs	r6, #10
 8003a7c:	e9cd 3400 	strd	r3, r4, [sp]
 8003a80:	466f      	mov	r7, sp
 8003a82:	4630      	mov	r0, r6
 8003a84:	4639      	mov	r1, r7
 8003a86:	beab      	bkpt	0x00ab
 8003a88:	4606      	mov	r6, r0
 8003a8a:	4630      	mov	r0, r6
 8003a8c:	f7ff ffa8 	bl	80039e0 <checkerror>
 8003a90:	2800      	cmp	r0, #0
 8003a92:	dbe1      	blt.n	8003a58 <_swilseek+0x16>
 8003a94:	606c      	str	r4, [r5, #4]
 8003a96:	e7e1      	b.n	8003a5c <_swilseek+0x1a>
 8003a98:	2e02      	cmp	r6, #2
 8003a9a:	d1ed      	bne.n	8003a78 <_swilseek+0x36>
 8003a9c:	6803      	ldr	r3, [r0, #0]
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	260c      	movs	r6, #12
 8003aa2:	466f      	mov	r7, sp
 8003aa4:	4630      	mov	r0, r6
 8003aa6:	4639      	mov	r1, r7
 8003aa8:	beab      	bkpt	0x00ab
 8003aaa:	4606      	mov	r6, r0
 8003aac:	4630      	mov	r0, r6
 8003aae:	f7ff ff97 	bl	80039e0 <checkerror>
 8003ab2:	1c43      	adds	r3, r0, #1
 8003ab4:	d0d0      	beq.n	8003a58 <_swilseek+0x16>
 8003ab6:	4404      	add	r4, r0
 8003ab8:	e7de      	b.n	8003a78 <_swilseek+0x36>

08003aba <_lseek>:
 8003aba:	f7ff bfc2 	b.w	8003a42 <_swilseek>

08003abe <_swiwrite>:
 8003abe:	b530      	push	{r4, r5, lr}
 8003ac0:	b085      	sub	sp, #20
 8003ac2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003ac6:	9203      	str	r2, [sp, #12]
 8003ac8:	2405      	movs	r4, #5
 8003aca:	ad01      	add	r5, sp, #4
 8003acc:	4620      	mov	r0, r4
 8003ace:	4629      	mov	r1, r5
 8003ad0:	beab      	bkpt	0x00ab
 8003ad2:	4604      	mov	r4, r0
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	f7ff ff83 	bl	80039e0 <checkerror>
 8003ada:	b005      	add	sp, #20
 8003adc:	bd30      	pop	{r4, r5, pc}

08003ade <_write>:
 8003ade:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ae0:	4615      	mov	r5, r2
 8003ae2:	9101      	str	r1, [sp, #4]
 8003ae4:	f7ff ff54 	bl	8003990 <findslot>
 8003ae8:	9901      	ldr	r1, [sp, #4]
 8003aea:	4604      	mov	r4, r0
 8003aec:	b930      	cbnz	r0, 8003afc <_write+0x1e>
 8003aee:	f000 f9f3 	bl	8003ed8 <__errno>
 8003af2:	2309      	movs	r3, #9
 8003af4:	6003      	str	r3, [r0, #0]
 8003af6:	f04f 30ff 	mov.w	r0, #4294967295
 8003afa:	e012      	b.n	8003b22 <_write+0x44>
 8003afc:	6800      	ldr	r0, [r0, #0]
 8003afe:	462a      	mov	r2, r5
 8003b00:	f7ff ffdd 	bl	8003abe <_swiwrite>
 8003b04:	2800      	cmp	r0, #0
 8003b06:	dbf6      	blt.n	8003af6 <_write+0x18>
 8003b08:	6862      	ldr	r2, [r4, #4]
 8003b0a:	1a2b      	subs	r3, r5, r0
 8003b0c:	441a      	add	r2, r3
 8003b0e:	42a8      	cmp	r0, r5
 8003b10:	6062      	str	r2, [r4, #4]
 8003b12:	d105      	bne.n	8003b20 <_write+0x42>
 8003b14:	2000      	movs	r0, #0
 8003b16:	b003      	add	sp, #12
 8003b18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b1c:	f7ff bf52 	b.w	80039c4 <error>
 8003b20:	4618      	mov	r0, r3
 8003b22:	b003      	add	sp, #12
 8003b24:	bd30      	pop	{r4, r5, pc}

08003b26 <_swiclose>:
 8003b26:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b28:	2402      	movs	r4, #2
 8003b2a:	9001      	str	r0, [sp, #4]
 8003b2c:	ad01      	add	r5, sp, #4
 8003b2e:	4620      	mov	r0, r4
 8003b30:	4629      	mov	r1, r5
 8003b32:	beab      	bkpt	0x00ab
 8003b34:	4604      	mov	r4, r0
 8003b36:	4620      	mov	r0, r4
 8003b38:	f7ff ff52 	bl	80039e0 <checkerror>
 8003b3c:	b003      	add	sp, #12
 8003b3e:	bd30      	pop	{r4, r5, pc}

08003b40 <_close>:
 8003b40:	b538      	push	{r3, r4, r5, lr}
 8003b42:	4605      	mov	r5, r0
 8003b44:	f7ff ff24 	bl	8003990 <findslot>
 8003b48:	4604      	mov	r4, r0
 8003b4a:	b930      	cbnz	r0, 8003b5a <_close+0x1a>
 8003b4c:	f000 f9c4 	bl	8003ed8 <__errno>
 8003b50:	2309      	movs	r3, #9
 8003b52:	6003      	str	r3, [r0, #0]
 8003b54:	f04f 30ff 	mov.w	r0, #4294967295
 8003b58:	bd38      	pop	{r3, r4, r5, pc}
 8003b5a:	3d01      	subs	r5, #1
 8003b5c:	2d01      	cmp	r5, #1
 8003b5e:	d809      	bhi.n	8003b74 <_close+0x34>
 8003b60:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <_close+0x48>)
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d104      	bne.n	8003b74 <_close+0x34>
 8003b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6e:	6003      	str	r3, [r0, #0]
 8003b70:	2000      	movs	r0, #0
 8003b72:	e7f1      	b.n	8003b58 <_close+0x18>
 8003b74:	6820      	ldr	r0, [r4, #0]
 8003b76:	f7ff ffd6 	bl	8003b26 <_swiclose>
 8003b7a:	2800      	cmp	r0, #0
 8003b7c:	d1ec      	bne.n	8003b58 <_close+0x18>
 8003b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b82:	6023      	str	r3, [r4, #0]
 8003b84:	e7e8      	b.n	8003b58 <_close+0x18>
 8003b86:	bf00      	nop
 8003b88:	200002ac 	.word	0x200002ac

08003b8c <_getpid>:
 8003b8c:	2001      	movs	r0, #1
 8003b8e:	4770      	bx	lr

08003b90 <_swistat>:
 8003b90:	b570      	push	{r4, r5, r6, lr}
 8003b92:	460c      	mov	r4, r1
 8003b94:	f7ff fefc 	bl	8003990 <findslot>
 8003b98:	4605      	mov	r5, r0
 8003b9a:	b930      	cbnz	r0, 8003baa <_swistat+0x1a>
 8003b9c:	f000 f99c 	bl	8003ed8 <__errno>
 8003ba0:	2309      	movs	r3, #9
 8003ba2:	6003      	str	r3, [r0, #0]
 8003ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba8:	bd70      	pop	{r4, r5, r6, pc}
 8003baa:	6863      	ldr	r3, [r4, #4]
 8003bac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003bb0:	6063      	str	r3, [r4, #4]
 8003bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bb6:	64a3      	str	r3, [r4, #72]	; 0x48
 8003bb8:	260c      	movs	r6, #12
 8003bba:	4630      	mov	r0, r6
 8003bbc:	4629      	mov	r1, r5
 8003bbe:	beab      	bkpt	0x00ab
 8003bc0:	4605      	mov	r5, r0
 8003bc2:	4628      	mov	r0, r5
 8003bc4:	f7ff ff0c 	bl	80039e0 <checkerror>
 8003bc8:	1c43      	adds	r3, r0, #1
 8003bca:	bf1c      	itt	ne
 8003bcc:	6120      	strne	r0, [r4, #16]
 8003bce:	2000      	movne	r0, #0
 8003bd0:	e7ea      	b.n	8003ba8 <_swistat+0x18>

08003bd2 <_fstat>:
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	b510      	push	{r4, lr}
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	4604      	mov	r4, r0
 8003bda:	2258      	movs	r2, #88	; 0x58
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 fa9e 	bl	800411e <memset>
 8003be2:	4601      	mov	r1, r0
 8003be4:	4620      	mov	r0, r4
 8003be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bea:	f7ff bfd1 	b.w	8003b90 <_swistat>

08003bee <_stat>:
 8003bee:	b538      	push	{r3, r4, r5, lr}
 8003bf0:	460d      	mov	r5, r1
 8003bf2:	4604      	mov	r4, r0
 8003bf4:	2258      	movs	r2, #88	; 0x58
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	4628      	mov	r0, r5
 8003bfa:	f000 fa90 	bl	800411e <memset>
 8003bfe:	4620      	mov	r0, r4
 8003c00:	2100      	movs	r1, #0
 8003c02:	f000 f811 	bl	8003c28 <_swiopen>
 8003c06:	1c43      	adds	r3, r0, #1
 8003c08:	4604      	mov	r4, r0
 8003c0a:	d00b      	beq.n	8003c24 <_stat+0x36>
 8003c0c:	686b      	ldr	r3, [r5, #4]
 8003c0e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003c12:	606b      	str	r3, [r5, #4]
 8003c14:	4629      	mov	r1, r5
 8003c16:	f7ff ffbb 	bl	8003b90 <_swistat>
 8003c1a:	4605      	mov	r5, r0
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	f7ff ff8f 	bl	8003b40 <_close>
 8003c22:	462c      	mov	r4, r5
 8003c24:	4620      	mov	r0, r4
 8003c26:	bd38      	pop	{r3, r4, r5, pc}

08003c28 <_swiopen>:
 8003c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c2c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003cd8 <_swiopen+0xb0>
 8003c30:	b097      	sub	sp, #92	; 0x5c
 8003c32:	4607      	mov	r7, r0
 8003c34:	460e      	mov	r6, r1
 8003c36:	2500      	movs	r5, #0
 8003c38:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8003c3c:	1c61      	adds	r1, r4, #1
 8003c3e:	d037      	beq.n	8003cb0 <_swiopen+0x88>
 8003c40:	3501      	adds	r5, #1
 8003c42:	2d14      	cmp	r5, #20
 8003c44:	d1f8      	bne.n	8003c38 <_swiopen+0x10>
 8003c46:	f000 f947 	bl	8003ed8 <__errno>
 8003c4a:	2318      	movs	r3, #24
 8003c4c:	6003      	str	r3, [r0, #0]
 8003c4e:	f04f 34ff 	mov.w	r4, #4294967295
 8003c52:	e03d      	b.n	8003cd0 <_swiopen+0xa8>
 8003c54:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8003c58:	f240 6301 	movw	r3, #1537	; 0x601
 8003c5c:	07b2      	lsls	r2, r6, #30
 8003c5e:	bf48      	it	mi
 8003c60:	f044 0402 	orrmi.w	r4, r4, #2
 8003c64:	421e      	tst	r6, r3
 8003c66:	bf18      	it	ne
 8003c68:	f044 0404 	orrne.w	r4, r4, #4
 8003c6c:	0733      	lsls	r3, r6, #28
 8003c6e:	bf48      	it	mi
 8003c70:	f024 0404 	bicmi.w	r4, r4, #4
 8003c74:	4638      	mov	r0, r7
 8003c76:	bf48      	it	mi
 8003c78:	f044 0408 	orrmi.w	r4, r4, #8
 8003c7c:	9700      	str	r7, [sp, #0]
 8003c7e:	f7fc faaf 	bl	80001e0 <strlen>
 8003c82:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8003c86:	2401      	movs	r4, #1
 8003c88:	4620      	mov	r0, r4
 8003c8a:	4649      	mov	r1, r9
 8003c8c:	beab      	bkpt	0x00ab
 8003c8e:	4604      	mov	r4, r0
 8003c90:	2c00      	cmp	r4, #0
 8003c92:	db08      	blt.n	8003ca6 <_swiopen+0x7e>
 8003c94:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8003c98:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f8c8 3004 	str.w	r3, [r8, #4]
 8003ca2:	462c      	mov	r4, r5
 8003ca4:	e014      	b.n	8003cd0 <_swiopen+0xa8>
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	f7ff fe8c 	bl	80039c4 <error>
 8003cac:	4604      	mov	r4, r0
 8003cae:	e00f      	b.n	8003cd0 <_swiopen+0xa8>
 8003cb0:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8003cb4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003cb8:	46e9      	mov	r9, sp
 8003cba:	d1cb      	bne.n	8003c54 <_swiopen+0x2c>
 8003cbc:	4649      	mov	r1, r9
 8003cbe:	4638      	mov	r0, r7
 8003cc0:	f7ff ff95 	bl	8003bee <_stat>
 8003cc4:	3001      	adds	r0, #1
 8003cc6:	d0c5      	beq.n	8003c54 <_swiopen+0x2c>
 8003cc8:	f000 f906 	bl	8003ed8 <__errno>
 8003ccc:	2311      	movs	r3, #17
 8003cce:	6003      	str	r3, [r0, #0]
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	b017      	add	sp, #92	; 0x5c
 8003cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003cd8:	200002ac 	.word	0x200002ac

08003cdc <_get_semihosting_exts>:
 8003cdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003ce0:	4606      	mov	r6, r0
 8003ce2:	460f      	mov	r7, r1
 8003ce4:	482a      	ldr	r0, [pc, #168]	; (8003d90 <_get_semihosting_exts+0xb4>)
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	4615      	mov	r5, r2
 8003cea:	f7ff ff9d 	bl	8003c28 <_swiopen>
 8003cee:	462a      	mov	r2, r5
 8003cf0:	4604      	mov	r4, r0
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	4630      	mov	r0, r6
 8003cf6:	f000 fa12 	bl	800411e <memset>
 8003cfa:	1c63      	adds	r3, r4, #1
 8003cfc:	d016      	beq.n	8003d2c <_get_semihosting_exts+0x50>
 8003cfe:	4620      	mov	r0, r4
 8003d00:	f7ff fe46 	bl	8003990 <findslot>
 8003d04:	f04f 090c 	mov.w	r9, #12
 8003d08:	4680      	mov	r8, r0
 8003d0a:	4648      	mov	r0, r9
 8003d0c:	4641      	mov	r1, r8
 8003d0e:	beab      	bkpt	0x00ab
 8003d10:	4680      	mov	r8, r0
 8003d12:	4640      	mov	r0, r8
 8003d14:	f7ff fe64 	bl	80039e0 <checkerror>
 8003d18:	2803      	cmp	r0, #3
 8003d1a:	dd02      	ble.n	8003d22 <_get_semihosting_exts+0x46>
 8003d1c:	1ec3      	subs	r3, r0, #3
 8003d1e:	42ab      	cmp	r3, r5
 8003d20:	dc08      	bgt.n	8003d34 <_get_semihosting_exts+0x58>
 8003d22:	4620      	mov	r0, r4
 8003d24:	f7ff ff0c 	bl	8003b40 <_close>
 8003d28:	f04f 34ff 	mov.w	r4, #4294967295
 8003d2c:	4620      	mov	r0, r4
 8003d2e:	b003      	add	sp, #12
 8003d30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d34:	2204      	movs	r2, #4
 8003d36:	eb0d 0102 	add.w	r1, sp, r2
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	f7ff fe65 	bl	8003a0a <_read>
 8003d40:	2803      	cmp	r0, #3
 8003d42:	ddee      	ble.n	8003d22 <_get_semihosting_exts+0x46>
 8003d44:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003d48:	2b53      	cmp	r3, #83	; 0x53
 8003d4a:	d1ea      	bne.n	8003d22 <_get_semihosting_exts+0x46>
 8003d4c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003d50:	2b48      	cmp	r3, #72	; 0x48
 8003d52:	d1e6      	bne.n	8003d22 <_get_semihosting_exts+0x46>
 8003d54:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003d58:	2b46      	cmp	r3, #70	; 0x46
 8003d5a:	d1e2      	bne.n	8003d22 <_get_semihosting_exts+0x46>
 8003d5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003d60:	2b42      	cmp	r3, #66	; 0x42
 8003d62:	d1de      	bne.n	8003d22 <_get_semihosting_exts+0x46>
 8003d64:	2201      	movs	r2, #1
 8003d66:	4639      	mov	r1, r7
 8003d68:	4620      	mov	r0, r4
 8003d6a:	f7ff fe6a 	bl	8003a42 <_swilseek>
 8003d6e:	2800      	cmp	r0, #0
 8003d70:	dbd7      	blt.n	8003d22 <_get_semihosting_exts+0x46>
 8003d72:	462a      	mov	r2, r5
 8003d74:	4631      	mov	r1, r6
 8003d76:	4620      	mov	r0, r4
 8003d78:	f7ff fe47 	bl	8003a0a <_read>
 8003d7c:	4605      	mov	r5, r0
 8003d7e:	4620      	mov	r0, r4
 8003d80:	f7ff fede 	bl	8003b40 <_close>
 8003d84:	4628      	mov	r0, r5
 8003d86:	f7ff fe2b 	bl	80039e0 <checkerror>
 8003d8a:	4604      	mov	r4, r0
 8003d8c:	e7ce      	b.n	8003d2c <_get_semihosting_exts+0x50>
 8003d8e:	bf00      	nop
 8003d90:	080069b0 	.word	0x080069b0

08003d94 <initialise_semihosting_exts>:
 8003d94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d96:	4d0a      	ldr	r5, [pc, #40]	; (8003dc0 <initialise_semihosting_exts+0x2c>)
 8003d98:	4c0a      	ldr	r4, [pc, #40]	; (8003dc4 <initialise_semihosting_exts+0x30>)
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	a801      	add	r0, sp, #4
 8003da0:	6029      	str	r1, [r5, #0]
 8003da2:	6022      	str	r2, [r4, #0]
 8003da4:	f7ff ff9a 	bl	8003cdc <_get_semihosting_exts>
 8003da8:	2800      	cmp	r0, #0
 8003daa:	dd07      	ble.n	8003dbc <initialise_semihosting_exts+0x28>
 8003dac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003db0:	f003 0201 	and.w	r2, r3, #1
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	602a      	str	r2, [r5, #0]
 8003dba:	6023      	str	r3, [r4, #0]
 8003dbc:	b003      	add	sp, #12
 8003dbe:	bd30      	pop	{r4, r5, pc}
 8003dc0:	2000000c 	.word	0x2000000c
 8003dc4:	20000010 	.word	0x20000010

08003dc8 <_has_ext_stdout_stderr>:
 8003dc8:	b510      	push	{r4, lr}
 8003dca:	4c04      	ldr	r4, [pc, #16]	; (8003ddc <_has_ext_stdout_stderr+0x14>)
 8003dcc:	6823      	ldr	r3, [r4, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	da01      	bge.n	8003dd6 <_has_ext_stdout_stderr+0xe>
 8003dd2:	f7ff ffdf 	bl	8003d94 <initialise_semihosting_exts>
 8003dd6:	6820      	ldr	r0, [r4, #0]
 8003dd8:	bd10      	pop	{r4, pc}
 8003dda:	bf00      	nop
 8003ddc:	20000010 	.word	0x20000010

08003de0 <initialise_monitor_handles>:
 8003de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003de4:	b085      	sub	sp, #20
 8003de6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8003e98 <initialise_monitor_handles+0xb8>
 8003dea:	f8cd 9004 	str.w	r9, [sp, #4]
 8003dee:	2303      	movs	r3, #3
 8003df0:	2400      	movs	r4, #0
 8003df2:	9303      	str	r3, [sp, #12]
 8003df4:	af01      	add	r7, sp, #4
 8003df6:	9402      	str	r4, [sp, #8]
 8003df8:	2501      	movs	r5, #1
 8003dfa:	4628      	mov	r0, r5
 8003dfc:	4639      	mov	r1, r7
 8003dfe:	beab      	bkpt	0x00ab
 8003e00:	4605      	mov	r5, r0
 8003e02:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8003e9c <initialise_monitor_handles+0xbc>
 8003e06:	4623      	mov	r3, r4
 8003e08:	4c20      	ldr	r4, [pc, #128]	; (8003e8c <initialise_monitor_handles+0xac>)
 8003e0a:	f8c8 5000 	str.w	r5, [r8]
 8003e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e12:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8003e16:	3301      	adds	r3, #1
 8003e18:	2b14      	cmp	r3, #20
 8003e1a:	d1fa      	bne.n	8003e12 <initialise_monitor_handles+0x32>
 8003e1c:	f7ff ffd4 	bl	8003dc8 <_has_ext_stdout_stderr>
 8003e20:	4d1b      	ldr	r5, [pc, #108]	; (8003e90 <initialise_monitor_handles+0xb0>)
 8003e22:	b1d0      	cbz	r0, 8003e5a <initialise_monitor_handles+0x7a>
 8003e24:	f04f 0a03 	mov.w	sl, #3
 8003e28:	2304      	movs	r3, #4
 8003e2a:	f8cd 9004 	str.w	r9, [sp, #4]
 8003e2e:	2601      	movs	r6, #1
 8003e30:	f8cd a00c 	str.w	sl, [sp, #12]
 8003e34:	9302      	str	r3, [sp, #8]
 8003e36:	4630      	mov	r0, r6
 8003e38:	4639      	mov	r1, r7
 8003e3a:	beab      	bkpt	0x00ab
 8003e3c:	4683      	mov	fp, r0
 8003e3e:	4b15      	ldr	r3, [pc, #84]	; (8003e94 <initialise_monitor_handles+0xb4>)
 8003e40:	f8cd 9004 	str.w	r9, [sp, #4]
 8003e44:	f8c3 b000 	str.w	fp, [r3]
 8003e48:	2308      	movs	r3, #8
 8003e4a:	f8cd a00c 	str.w	sl, [sp, #12]
 8003e4e:	9302      	str	r3, [sp, #8]
 8003e50:	4630      	mov	r0, r6
 8003e52:	4639      	mov	r1, r7
 8003e54:	beab      	bkpt	0x00ab
 8003e56:	4606      	mov	r6, r0
 8003e58:	602e      	str	r6, [r5, #0]
 8003e5a:	682b      	ldr	r3, [r5, #0]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	bf02      	ittt	eq
 8003e60:	4b0c      	ldreq	r3, [pc, #48]	; (8003e94 <initialise_monitor_handles+0xb4>)
 8003e62:	681b      	ldreq	r3, [r3, #0]
 8003e64:	602b      	streq	r3, [r5, #0]
 8003e66:	2600      	movs	r6, #0
 8003e68:	f8d8 3000 	ldr.w	r3, [r8]
 8003e6c:	6023      	str	r3, [r4, #0]
 8003e6e:	6066      	str	r6, [r4, #4]
 8003e70:	f7ff ffaa 	bl	8003dc8 <_has_ext_stdout_stderr>
 8003e74:	b130      	cbz	r0, 8003e84 <initialise_monitor_handles+0xa4>
 8003e76:	4b07      	ldr	r3, [pc, #28]	; (8003e94 <initialise_monitor_handles+0xb4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8003e7e:	682b      	ldr	r3, [r5, #0]
 8003e80:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8003e84:	b005      	add	sp, #20
 8003e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e8a:	bf00      	nop
 8003e8c:	200002ac 	.word	0x200002ac
 8003e90:	200002a0 	.word	0x200002a0
 8003e94:	200002a8 	.word	0x200002a8
 8003e98:	080069c6 	.word	0x080069c6
 8003e9c:	200002a4 	.word	0x200002a4

08003ea0 <_isatty>:
 8003ea0:	b570      	push	{r4, r5, r6, lr}
 8003ea2:	f7ff fd75 	bl	8003990 <findslot>
 8003ea6:	2509      	movs	r5, #9
 8003ea8:	4604      	mov	r4, r0
 8003eaa:	b920      	cbnz	r0, 8003eb6 <_isatty+0x16>
 8003eac:	f000 f814 	bl	8003ed8 <__errno>
 8003eb0:	6005      	str	r5, [r0, #0]
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	bd70      	pop	{r4, r5, r6, pc}
 8003eb6:	4628      	mov	r0, r5
 8003eb8:	4621      	mov	r1, r4
 8003eba:	beab      	bkpt	0x00ab
 8003ebc:	4604      	mov	r4, r0
 8003ebe:	2c01      	cmp	r4, #1
 8003ec0:	d0f7      	beq.n	8003eb2 <_isatty+0x12>
 8003ec2:	f000 f809 	bl	8003ed8 <__errno>
 8003ec6:	2400      	movs	r4, #0
 8003ec8:	4605      	mov	r5, r0
 8003eca:	2613      	movs	r6, #19
 8003ecc:	4630      	mov	r0, r6
 8003ece:	4621      	mov	r1, r4
 8003ed0:	beab      	bkpt	0x00ab
 8003ed2:	4606      	mov	r6, r0
 8003ed4:	602e      	str	r6, [r5, #0]
 8003ed6:	e7ec      	b.n	8003eb2 <_isatty+0x12>

08003ed8 <__errno>:
 8003ed8:	4b01      	ldr	r3, [pc, #4]	; (8003ee0 <__errno+0x8>)
 8003eda:	6818      	ldr	r0, [r3, #0]
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	20000014 	.word	0x20000014

08003ee4 <std>:
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	b510      	push	{r4, lr}
 8003ee8:	4604      	mov	r4, r0
 8003eea:	e9c0 3300 	strd	r3, r3, [r0]
 8003eee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ef2:	6083      	str	r3, [r0, #8]
 8003ef4:	8181      	strh	r1, [r0, #12]
 8003ef6:	6643      	str	r3, [r0, #100]	; 0x64
 8003ef8:	81c2      	strh	r2, [r0, #14]
 8003efa:	6183      	str	r3, [r0, #24]
 8003efc:	4619      	mov	r1, r3
 8003efe:	2208      	movs	r2, #8
 8003f00:	305c      	adds	r0, #92	; 0x5c
 8003f02:	f000 f90c 	bl	800411e <memset>
 8003f06:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <std+0x38>)
 8003f08:	6263      	str	r3, [r4, #36]	; 0x24
 8003f0a:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <std+0x3c>)
 8003f0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f0e:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <std+0x40>)
 8003f10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f12:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <std+0x44>)
 8003f14:	6224      	str	r4, [r4, #32]
 8003f16:	6323      	str	r3, [r4, #48]	; 0x30
 8003f18:	bd10      	pop	{r4, pc}
 8003f1a:	bf00      	nop
 8003f1c:	08004b4d 	.word	0x08004b4d
 8003f20:	08004b6f 	.word	0x08004b6f
 8003f24:	08004ba7 	.word	0x08004ba7
 8003f28:	08004bcb 	.word	0x08004bcb

08003f2c <_cleanup_r>:
 8003f2c:	4901      	ldr	r1, [pc, #4]	; (8003f34 <_cleanup_r+0x8>)
 8003f2e:	f000 b8af 	b.w	8004090 <_fwalk_reent>
 8003f32:	bf00      	nop
 8003f34:	08005a19 	.word	0x08005a19

08003f38 <__sfmoreglue>:
 8003f38:	b570      	push	{r4, r5, r6, lr}
 8003f3a:	2268      	movs	r2, #104	; 0x68
 8003f3c:	1e4d      	subs	r5, r1, #1
 8003f3e:	4355      	muls	r5, r2
 8003f40:	460e      	mov	r6, r1
 8003f42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003f46:	f000 f913 	bl	8004170 <_malloc_r>
 8003f4a:	4604      	mov	r4, r0
 8003f4c:	b140      	cbz	r0, 8003f60 <__sfmoreglue+0x28>
 8003f4e:	2100      	movs	r1, #0
 8003f50:	e9c0 1600 	strd	r1, r6, [r0]
 8003f54:	300c      	adds	r0, #12
 8003f56:	60a0      	str	r0, [r4, #8]
 8003f58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003f5c:	f000 f8df 	bl	800411e <memset>
 8003f60:	4620      	mov	r0, r4
 8003f62:	bd70      	pop	{r4, r5, r6, pc}

08003f64 <__sfp_lock_acquire>:
 8003f64:	4801      	ldr	r0, [pc, #4]	; (8003f6c <__sfp_lock_acquire+0x8>)
 8003f66:	f000 b8d8 	b.w	800411a <__retarget_lock_acquire_recursive>
 8003f6a:	bf00      	nop
 8003f6c:	2000034d 	.word	0x2000034d

08003f70 <__sfp_lock_release>:
 8003f70:	4801      	ldr	r0, [pc, #4]	; (8003f78 <__sfp_lock_release+0x8>)
 8003f72:	f000 b8d3 	b.w	800411c <__retarget_lock_release_recursive>
 8003f76:	bf00      	nop
 8003f78:	2000034d 	.word	0x2000034d

08003f7c <__sinit_lock_acquire>:
 8003f7c:	4801      	ldr	r0, [pc, #4]	; (8003f84 <__sinit_lock_acquire+0x8>)
 8003f7e:	f000 b8cc 	b.w	800411a <__retarget_lock_acquire_recursive>
 8003f82:	bf00      	nop
 8003f84:	2000034e 	.word	0x2000034e

08003f88 <__sinit_lock_release>:
 8003f88:	4801      	ldr	r0, [pc, #4]	; (8003f90 <__sinit_lock_release+0x8>)
 8003f8a:	f000 b8c7 	b.w	800411c <__retarget_lock_release_recursive>
 8003f8e:	bf00      	nop
 8003f90:	2000034e 	.word	0x2000034e

08003f94 <__sinit>:
 8003f94:	b510      	push	{r4, lr}
 8003f96:	4604      	mov	r4, r0
 8003f98:	f7ff fff0 	bl	8003f7c <__sinit_lock_acquire>
 8003f9c:	69a3      	ldr	r3, [r4, #24]
 8003f9e:	b11b      	cbz	r3, 8003fa8 <__sinit+0x14>
 8003fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fa4:	f7ff bff0 	b.w	8003f88 <__sinit_lock_release>
 8003fa8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003fac:	6523      	str	r3, [r4, #80]	; 0x50
 8003fae:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <__sinit+0x68>)
 8003fb0:	4a13      	ldr	r2, [pc, #76]	; (8004000 <__sinit+0x6c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8003fb6:	42a3      	cmp	r3, r4
 8003fb8:	bf04      	itt	eq
 8003fba:	2301      	moveq	r3, #1
 8003fbc:	61a3      	streq	r3, [r4, #24]
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	f000 f820 	bl	8004004 <__sfp>
 8003fc4:	6060      	str	r0, [r4, #4]
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	f000 f81c 	bl	8004004 <__sfp>
 8003fcc:	60a0      	str	r0, [r4, #8]
 8003fce:	4620      	mov	r0, r4
 8003fd0:	f000 f818 	bl	8004004 <__sfp>
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	60e0      	str	r0, [r4, #12]
 8003fd8:	2104      	movs	r1, #4
 8003fda:	6860      	ldr	r0, [r4, #4]
 8003fdc:	f7ff ff82 	bl	8003ee4 <std>
 8003fe0:	68a0      	ldr	r0, [r4, #8]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	2109      	movs	r1, #9
 8003fe6:	f7ff ff7d 	bl	8003ee4 <std>
 8003fea:	68e0      	ldr	r0, [r4, #12]
 8003fec:	2202      	movs	r2, #2
 8003fee:	2112      	movs	r1, #18
 8003ff0:	f7ff ff78 	bl	8003ee4 <std>
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	61a3      	str	r3, [r4, #24]
 8003ff8:	e7d2      	b.n	8003fa0 <__sinit+0xc>
 8003ffa:	bf00      	nop
 8003ffc:	08006a2c 	.word	0x08006a2c
 8004000:	08003f2d 	.word	0x08003f2d

08004004 <__sfp>:
 8004004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004006:	4607      	mov	r7, r0
 8004008:	f7ff ffac 	bl	8003f64 <__sfp_lock_acquire>
 800400c:	4b1e      	ldr	r3, [pc, #120]	; (8004088 <__sfp+0x84>)
 800400e:	681e      	ldr	r6, [r3, #0]
 8004010:	69b3      	ldr	r3, [r6, #24]
 8004012:	b913      	cbnz	r3, 800401a <__sfp+0x16>
 8004014:	4630      	mov	r0, r6
 8004016:	f7ff ffbd 	bl	8003f94 <__sinit>
 800401a:	3648      	adds	r6, #72	; 0x48
 800401c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004020:	3b01      	subs	r3, #1
 8004022:	d503      	bpl.n	800402c <__sfp+0x28>
 8004024:	6833      	ldr	r3, [r6, #0]
 8004026:	b30b      	cbz	r3, 800406c <__sfp+0x68>
 8004028:	6836      	ldr	r6, [r6, #0]
 800402a:	e7f7      	b.n	800401c <__sfp+0x18>
 800402c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004030:	b9d5      	cbnz	r5, 8004068 <__sfp+0x64>
 8004032:	4b16      	ldr	r3, [pc, #88]	; (800408c <__sfp+0x88>)
 8004034:	60e3      	str	r3, [r4, #12]
 8004036:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800403a:	6665      	str	r5, [r4, #100]	; 0x64
 800403c:	f000 f86c 	bl	8004118 <__retarget_lock_init_recursive>
 8004040:	f7ff ff96 	bl	8003f70 <__sfp_lock_release>
 8004044:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004048:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800404c:	6025      	str	r5, [r4, #0]
 800404e:	61a5      	str	r5, [r4, #24]
 8004050:	2208      	movs	r2, #8
 8004052:	4629      	mov	r1, r5
 8004054:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004058:	f000 f861 	bl	800411e <memset>
 800405c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004060:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004064:	4620      	mov	r0, r4
 8004066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004068:	3468      	adds	r4, #104	; 0x68
 800406a:	e7d9      	b.n	8004020 <__sfp+0x1c>
 800406c:	2104      	movs	r1, #4
 800406e:	4638      	mov	r0, r7
 8004070:	f7ff ff62 	bl	8003f38 <__sfmoreglue>
 8004074:	4604      	mov	r4, r0
 8004076:	6030      	str	r0, [r6, #0]
 8004078:	2800      	cmp	r0, #0
 800407a:	d1d5      	bne.n	8004028 <__sfp+0x24>
 800407c:	f7ff ff78 	bl	8003f70 <__sfp_lock_release>
 8004080:	230c      	movs	r3, #12
 8004082:	603b      	str	r3, [r7, #0]
 8004084:	e7ee      	b.n	8004064 <__sfp+0x60>
 8004086:	bf00      	nop
 8004088:	08006a2c 	.word	0x08006a2c
 800408c:	ffff0001 	.word	0xffff0001

08004090 <_fwalk_reent>:
 8004090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004094:	4606      	mov	r6, r0
 8004096:	4688      	mov	r8, r1
 8004098:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800409c:	2700      	movs	r7, #0
 800409e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80040a2:	f1b9 0901 	subs.w	r9, r9, #1
 80040a6:	d505      	bpl.n	80040b4 <_fwalk_reent+0x24>
 80040a8:	6824      	ldr	r4, [r4, #0]
 80040aa:	2c00      	cmp	r4, #0
 80040ac:	d1f7      	bne.n	800409e <_fwalk_reent+0xe>
 80040ae:	4638      	mov	r0, r7
 80040b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040b4:	89ab      	ldrh	r3, [r5, #12]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d907      	bls.n	80040ca <_fwalk_reent+0x3a>
 80040ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80040be:	3301      	adds	r3, #1
 80040c0:	d003      	beq.n	80040ca <_fwalk_reent+0x3a>
 80040c2:	4629      	mov	r1, r5
 80040c4:	4630      	mov	r0, r6
 80040c6:	47c0      	blx	r8
 80040c8:	4307      	orrs	r7, r0
 80040ca:	3568      	adds	r5, #104	; 0x68
 80040cc:	e7e9      	b.n	80040a2 <_fwalk_reent+0x12>
	...

080040d0 <__libc_init_array>:
 80040d0:	b570      	push	{r4, r5, r6, lr}
 80040d2:	4d0d      	ldr	r5, [pc, #52]	; (8004108 <__libc_init_array+0x38>)
 80040d4:	4c0d      	ldr	r4, [pc, #52]	; (800410c <__libc_init_array+0x3c>)
 80040d6:	1b64      	subs	r4, r4, r5
 80040d8:	10a4      	asrs	r4, r4, #2
 80040da:	2600      	movs	r6, #0
 80040dc:	42a6      	cmp	r6, r4
 80040de:	d109      	bne.n	80040f4 <__libc_init_array+0x24>
 80040e0:	4d0b      	ldr	r5, [pc, #44]	; (8004110 <__libc_init_array+0x40>)
 80040e2:	4c0c      	ldr	r4, [pc, #48]	; (8004114 <__libc_init_array+0x44>)
 80040e4:	f002 fc4a 	bl	800697c <_init>
 80040e8:	1b64      	subs	r4, r4, r5
 80040ea:	10a4      	asrs	r4, r4, #2
 80040ec:	2600      	movs	r6, #0
 80040ee:	42a6      	cmp	r6, r4
 80040f0:	d105      	bne.n	80040fe <__libc_init_array+0x2e>
 80040f2:	bd70      	pop	{r4, r5, r6, pc}
 80040f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040f8:	4798      	blx	r3
 80040fa:	3601      	adds	r6, #1
 80040fc:	e7ee      	b.n	80040dc <__libc_init_array+0xc>
 80040fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004102:	4798      	blx	r3
 8004104:	3601      	adds	r6, #1
 8004106:	e7f2      	b.n	80040ee <__libc_init_array+0x1e>
 8004108:	08006dac 	.word	0x08006dac
 800410c:	08006dac 	.word	0x08006dac
 8004110:	08006dac 	.word	0x08006dac
 8004114:	08006db0 	.word	0x08006db0

08004118 <__retarget_lock_init_recursive>:
 8004118:	4770      	bx	lr

0800411a <__retarget_lock_acquire_recursive>:
 800411a:	4770      	bx	lr

0800411c <__retarget_lock_release_recursive>:
 800411c:	4770      	bx	lr

0800411e <memset>:
 800411e:	4402      	add	r2, r0
 8004120:	4603      	mov	r3, r0
 8004122:	4293      	cmp	r3, r2
 8004124:	d100      	bne.n	8004128 <memset+0xa>
 8004126:	4770      	bx	lr
 8004128:	f803 1b01 	strb.w	r1, [r3], #1
 800412c:	e7f9      	b.n	8004122 <memset+0x4>
	...

08004130 <sbrk_aligned>:
 8004130:	b570      	push	{r4, r5, r6, lr}
 8004132:	4e0e      	ldr	r6, [pc, #56]	; (800416c <sbrk_aligned+0x3c>)
 8004134:	460c      	mov	r4, r1
 8004136:	6831      	ldr	r1, [r6, #0]
 8004138:	4605      	mov	r5, r0
 800413a:	b911      	cbnz	r1, 8004142 <sbrk_aligned+0x12>
 800413c:	f000 fcf6 	bl	8004b2c <_sbrk_r>
 8004140:	6030      	str	r0, [r6, #0]
 8004142:	4621      	mov	r1, r4
 8004144:	4628      	mov	r0, r5
 8004146:	f000 fcf1 	bl	8004b2c <_sbrk_r>
 800414a:	1c43      	adds	r3, r0, #1
 800414c:	d00a      	beq.n	8004164 <sbrk_aligned+0x34>
 800414e:	1cc4      	adds	r4, r0, #3
 8004150:	f024 0403 	bic.w	r4, r4, #3
 8004154:	42a0      	cmp	r0, r4
 8004156:	d007      	beq.n	8004168 <sbrk_aligned+0x38>
 8004158:	1a21      	subs	r1, r4, r0
 800415a:	4628      	mov	r0, r5
 800415c:	f000 fce6 	bl	8004b2c <_sbrk_r>
 8004160:	3001      	adds	r0, #1
 8004162:	d101      	bne.n	8004168 <sbrk_aligned+0x38>
 8004164:	f04f 34ff 	mov.w	r4, #4294967295
 8004168:	4620      	mov	r0, r4
 800416a:	bd70      	pop	{r4, r5, r6, pc}
 800416c:	20000354 	.word	0x20000354

08004170 <_malloc_r>:
 8004170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004174:	1ccd      	adds	r5, r1, #3
 8004176:	f025 0503 	bic.w	r5, r5, #3
 800417a:	3508      	adds	r5, #8
 800417c:	2d0c      	cmp	r5, #12
 800417e:	bf38      	it	cc
 8004180:	250c      	movcc	r5, #12
 8004182:	2d00      	cmp	r5, #0
 8004184:	4607      	mov	r7, r0
 8004186:	db01      	blt.n	800418c <_malloc_r+0x1c>
 8004188:	42a9      	cmp	r1, r5
 800418a:	d905      	bls.n	8004198 <_malloc_r+0x28>
 800418c:	230c      	movs	r3, #12
 800418e:	603b      	str	r3, [r7, #0]
 8004190:	2600      	movs	r6, #0
 8004192:	4630      	mov	r0, r6
 8004194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004198:	4e2e      	ldr	r6, [pc, #184]	; (8004254 <_malloc_r+0xe4>)
 800419a:	f001 fca5 	bl	8005ae8 <__malloc_lock>
 800419e:	6833      	ldr	r3, [r6, #0]
 80041a0:	461c      	mov	r4, r3
 80041a2:	bb34      	cbnz	r4, 80041f2 <_malloc_r+0x82>
 80041a4:	4629      	mov	r1, r5
 80041a6:	4638      	mov	r0, r7
 80041a8:	f7ff ffc2 	bl	8004130 <sbrk_aligned>
 80041ac:	1c43      	adds	r3, r0, #1
 80041ae:	4604      	mov	r4, r0
 80041b0:	d14d      	bne.n	800424e <_malloc_r+0xde>
 80041b2:	6834      	ldr	r4, [r6, #0]
 80041b4:	4626      	mov	r6, r4
 80041b6:	2e00      	cmp	r6, #0
 80041b8:	d140      	bne.n	800423c <_malloc_r+0xcc>
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	4631      	mov	r1, r6
 80041be:	4638      	mov	r0, r7
 80041c0:	eb04 0803 	add.w	r8, r4, r3
 80041c4:	f000 fcb2 	bl	8004b2c <_sbrk_r>
 80041c8:	4580      	cmp	r8, r0
 80041ca:	d13a      	bne.n	8004242 <_malloc_r+0xd2>
 80041cc:	6821      	ldr	r1, [r4, #0]
 80041ce:	3503      	adds	r5, #3
 80041d0:	1a6d      	subs	r5, r5, r1
 80041d2:	f025 0503 	bic.w	r5, r5, #3
 80041d6:	3508      	adds	r5, #8
 80041d8:	2d0c      	cmp	r5, #12
 80041da:	bf38      	it	cc
 80041dc:	250c      	movcc	r5, #12
 80041de:	4629      	mov	r1, r5
 80041e0:	4638      	mov	r0, r7
 80041e2:	f7ff ffa5 	bl	8004130 <sbrk_aligned>
 80041e6:	3001      	adds	r0, #1
 80041e8:	d02b      	beq.n	8004242 <_malloc_r+0xd2>
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	442b      	add	r3, r5
 80041ee:	6023      	str	r3, [r4, #0]
 80041f0:	e00e      	b.n	8004210 <_malloc_r+0xa0>
 80041f2:	6822      	ldr	r2, [r4, #0]
 80041f4:	1b52      	subs	r2, r2, r5
 80041f6:	d41e      	bmi.n	8004236 <_malloc_r+0xc6>
 80041f8:	2a0b      	cmp	r2, #11
 80041fa:	d916      	bls.n	800422a <_malloc_r+0xba>
 80041fc:	1961      	adds	r1, r4, r5
 80041fe:	42a3      	cmp	r3, r4
 8004200:	6025      	str	r5, [r4, #0]
 8004202:	bf18      	it	ne
 8004204:	6059      	strne	r1, [r3, #4]
 8004206:	6863      	ldr	r3, [r4, #4]
 8004208:	bf08      	it	eq
 800420a:	6031      	streq	r1, [r6, #0]
 800420c:	5162      	str	r2, [r4, r5]
 800420e:	604b      	str	r3, [r1, #4]
 8004210:	4638      	mov	r0, r7
 8004212:	f104 060b 	add.w	r6, r4, #11
 8004216:	f001 fc6d 	bl	8005af4 <__malloc_unlock>
 800421a:	f026 0607 	bic.w	r6, r6, #7
 800421e:	1d23      	adds	r3, r4, #4
 8004220:	1af2      	subs	r2, r6, r3
 8004222:	d0b6      	beq.n	8004192 <_malloc_r+0x22>
 8004224:	1b9b      	subs	r3, r3, r6
 8004226:	50a3      	str	r3, [r4, r2]
 8004228:	e7b3      	b.n	8004192 <_malloc_r+0x22>
 800422a:	6862      	ldr	r2, [r4, #4]
 800422c:	42a3      	cmp	r3, r4
 800422e:	bf0c      	ite	eq
 8004230:	6032      	streq	r2, [r6, #0]
 8004232:	605a      	strne	r2, [r3, #4]
 8004234:	e7ec      	b.n	8004210 <_malloc_r+0xa0>
 8004236:	4623      	mov	r3, r4
 8004238:	6864      	ldr	r4, [r4, #4]
 800423a:	e7b2      	b.n	80041a2 <_malloc_r+0x32>
 800423c:	4634      	mov	r4, r6
 800423e:	6876      	ldr	r6, [r6, #4]
 8004240:	e7b9      	b.n	80041b6 <_malloc_r+0x46>
 8004242:	230c      	movs	r3, #12
 8004244:	603b      	str	r3, [r7, #0]
 8004246:	4638      	mov	r0, r7
 8004248:	f001 fc54 	bl	8005af4 <__malloc_unlock>
 800424c:	e7a1      	b.n	8004192 <_malloc_r+0x22>
 800424e:	6025      	str	r5, [r4, #0]
 8004250:	e7de      	b.n	8004210 <_malloc_r+0xa0>
 8004252:	bf00      	nop
 8004254:	20000350 	.word	0x20000350

08004258 <__cvt>:
 8004258:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800425c:	ec55 4b10 	vmov	r4, r5, d0
 8004260:	2d00      	cmp	r5, #0
 8004262:	460e      	mov	r6, r1
 8004264:	4619      	mov	r1, r3
 8004266:	462b      	mov	r3, r5
 8004268:	bfbb      	ittet	lt
 800426a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800426e:	461d      	movlt	r5, r3
 8004270:	2300      	movge	r3, #0
 8004272:	232d      	movlt	r3, #45	; 0x2d
 8004274:	700b      	strb	r3, [r1, #0]
 8004276:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004278:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800427c:	4691      	mov	r9, r2
 800427e:	f023 0820 	bic.w	r8, r3, #32
 8004282:	bfbc      	itt	lt
 8004284:	4622      	movlt	r2, r4
 8004286:	4614      	movlt	r4, r2
 8004288:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800428c:	d005      	beq.n	800429a <__cvt+0x42>
 800428e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004292:	d100      	bne.n	8004296 <__cvt+0x3e>
 8004294:	3601      	adds	r6, #1
 8004296:	2102      	movs	r1, #2
 8004298:	e000      	b.n	800429c <__cvt+0x44>
 800429a:	2103      	movs	r1, #3
 800429c:	ab03      	add	r3, sp, #12
 800429e:	9301      	str	r3, [sp, #4]
 80042a0:	ab02      	add	r3, sp, #8
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	ec45 4b10 	vmov	d0, r4, r5
 80042a8:	4653      	mov	r3, sl
 80042aa:	4632      	mov	r2, r6
 80042ac:	f000 fd40 	bl	8004d30 <_dtoa_r>
 80042b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80042b4:	4607      	mov	r7, r0
 80042b6:	d102      	bne.n	80042be <__cvt+0x66>
 80042b8:	f019 0f01 	tst.w	r9, #1
 80042bc:	d022      	beq.n	8004304 <__cvt+0xac>
 80042be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80042c2:	eb07 0906 	add.w	r9, r7, r6
 80042c6:	d110      	bne.n	80042ea <__cvt+0x92>
 80042c8:	783b      	ldrb	r3, [r7, #0]
 80042ca:	2b30      	cmp	r3, #48	; 0x30
 80042cc:	d10a      	bne.n	80042e4 <__cvt+0x8c>
 80042ce:	2200      	movs	r2, #0
 80042d0:	2300      	movs	r3, #0
 80042d2:	4620      	mov	r0, r4
 80042d4:	4629      	mov	r1, r5
 80042d6:	f7fc fbff 	bl	8000ad8 <__aeabi_dcmpeq>
 80042da:	b918      	cbnz	r0, 80042e4 <__cvt+0x8c>
 80042dc:	f1c6 0601 	rsb	r6, r6, #1
 80042e0:	f8ca 6000 	str.w	r6, [sl]
 80042e4:	f8da 3000 	ldr.w	r3, [sl]
 80042e8:	4499      	add	r9, r3
 80042ea:	2200      	movs	r2, #0
 80042ec:	2300      	movs	r3, #0
 80042ee:	4620      	mov	r0, r4
 80042f0:	4629      	mov	r1, r5
 80042f2:	f7fc fbf1 	bl	8000ad8 <__aeabi_dcmpeq>
 80042f6:	b108      	cbz	r0, 80042fc <__cvt+0xa4>
 80042f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80042fc:	2230      	movs	r2, #48	; 0x30
 80042fe:	9b03      	ldr	r3, [sp, #12]
 8004300:	454b      	cmp	r3, r9
 8004302:	d307      	bcc.n	8004314 <__cvt+0xbc>
 8004304:	9b03      	ldr	r3, [sp, #12]
 8004306:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004308:	1bdb      	subs	r3, r3, r7
 800430a:	4638      	mov	r0, r7
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	b004      	add	sp, #16
 8004310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004314:	1c59      	adds	r1, r3, #1
 8004316:	9103      	str	r1, [sp, #12]
 8004318:	701a      	strb	r2, [r3, #0]
 800431a:	e7f0      	b.n	80042fe <__cvt+0xa6>

0800431c <__exponent>:
 800431c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800431e:	4603      	mov	r3, r0
 8004320:	2900      	cmp	r1, #0
 8004322:	bfb8      	it	lt
 8004324:	4249      	neglt	r1, r1
 8004326:	f803 2b02 	strb.w	r2, [r3], #2
 800432a:	bfb4      	ite	lt
 800432c:	222d      	movlt	r2, #45	; 0x2d
 800432e:	222b      	movge	r2, #43	; 0x2b
 8004330:	2909      	cmp	r1, #9
 8004332:	7042      	strb	r2, [r0, #1]
 8004334:	dd2a      	ble.n	800438c <__exponent+0x70>
 8004336:	f10d 0407 	add.w	r4, sp, #7
 800433a:	46a4      	mov	ip, r4
 800433c:	270a      	movs	r7, #10
 800433e:	46a6      	mov	lr, r4
 8004340:	460a      	mov	r2, r1
 8004342:	fb91 f6f7 	sdiv	r6, r1, r7
 8004346:	fb07 1516 	mls	r5, r7, r6, r1
 800434a:	3530      	adds	r5, #48	; 0x30
 800434c:	2a63      	cmp	r2, #99	; 0x63
 800434e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004352:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004356:	4631      	mov	r1, r6
 8004358:	dcf1      	bgt.n	800433e <__exponent+0x22>
 800435a:	3130      	adds	r1, #48	; 0x30
 800435c:	f1ae 0502 	sub.w	r5, lr, #2
 8004360:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004364:	1c44      	adds	r4, r0, #1
 8004366:	4629      	mov	r1, r5
 8004368:	4561      	cmp	r1, ip
 800436a:	d30a      	bcc.n	8004382 <__exponent+0x66>
 800436c:	f10d 0209 	add.w	r2, sp, #9
 8004370:	eba2 020e 	sub.w	r2, r2, lr
 8004374:	4565      	cmp	r5, ip
 8004376:	bf88      	it	hi
 8004378:	2200      	movhi	r2, #0
 800437a:	4413      	add	r3, r2
 800437c:	1a18      	subs	r0, r3, r0
 800437e:	b003      	add	sp, #12
 8004380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004382:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004386:	f804 2f01 	strb.w	r2, [r4, #1]!
 800438a:	e7ed      	b.n	8004368 <__exponent+0x4c>
 800438c:	2330      	movs	r3, #48	; 0x30
 800438e:	3130      	adds	r1, #48	; 0x30
 8004390:	7083      	strb	r3, [r0, #2]
 8004392:	70c1      	strb	r1, [r0, #3]
 8004394:	1d03      	adds	r3, r0, #4
 8004396:	e7f1      	b.n	800437c <__exponent+0x60>

08004398 <_printf_float>:
 8004398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800439c:	ed2d 8b02 	vpush	{d8}
 80043a0:	b08d      	sub	sp, #52	; 0x34
 80043a2:	460c      	mov	r4, r1
 80043a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80043a8:	4616      	mov	r6, r2
 80043aa:	461f      	mov	r7, r3
 80043ac:	4605      	mov	r5, r0
 80043ae:	f001 fb6f 	bl	8005a90 <_localeconv_r>
 80043b2:	f8d0 a000 	ldr.w	sl, [r0]
 80043b6:	4650      	mov	r0, sl
 80043b8:	f7fb ff12 	bl	80001e0 <strlen>
 80043bc:	2300      	movs	r3, #0
 80043be:	930a      	str	r3, [sp, #40]	; 0x28
 80043c0:	6823      	ldr	r3, [r4, #0]
 80043c2:	9305      	str	r3, [sp, #20]
 80043c4:	f8d8 3000 	ldr.w	r3, [r8]
 80043c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80043cc:	3307      	adds	r3, #7
 80043ce:	f023 0307 	bic.w	r3, r3, #7
 80043d2:	f103 0208 	add.w	r2, r3, #8
 80043d6:	f8c8 2000 	str.w	r2, [r8]
 80043da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043de:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80043e2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80043e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80043ea:	9307      	str	r3, [sp, #28]
 80043ec:	f8cd 8018 	str.w	r8, [sp, #24]
 80043f0:	ee08 0a10 	vmov	s16, r0
 80043f4:	4b9f      	ldr	r3, [pc, #636]	; (8004674 <_printf_float+0x2dc>)
 80043f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043fa:	f04f 32ff 	mov.w	r2, #4294967295
 80043fe:	f7fc fb9d 	bl	8000b3c <__aeabi_dcmpun>
 8004402:	bb88      	cbnz	r0, 8004468 <_printf_float+0xd0>
 8004404:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004408:	4b9a      	ldr	r3, [pc, #616]	; (8004674 <_printf_float+0x2dc>)
 800440a:	f04f 32ff 	mov.w	r2, #4294967295
 800440e:	f7fc fb77 	bl	8000b00 <__aeabi_dcmple>
 8004412:	bb48      	cbnz	r0, 8004468 <_printf_float+0xd0>
 8004414:	2200      	movs	r2, #0
 8004416:	2300      	movs	r3, #0
 8004418:	4640      	mov	r0, r8
 800441a:	4649      	mov	r1, r9
 800441c:	f7fc fb66 	bl	8000aec <__aeabi_dcmplt>
 8004420:	b110      	cbz	r0, 8004428 <_printf_float+0x90>
 8004422:	232d      	movs	r3, #45	; 0x2d
 8004424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004428:	4b93      	ldr	r3, [pc, #588]	; (8004678 <_printf_float+0x2e0>)
 800442a:	4894      	ldr	r0, [pc, #592]	; (800467c <_printf_float+0x2e4>)
 800442c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004430:	bf94      	ite	ls
 8004432:	4698      	movls	r8, r3
 8004434:	4680      	movhi	r8, r0
 8004436:	2303      	movs	r3, #3
 8004438:	6123      	str	r3, [r4, #16]
 800443a:	9b05      	ldr	r3, [sp, #20]
 800443c:	f023 0204 	bic.w	r2, r3, #4
 8004440:	6022      	str	r2, [r4, #0]
 8004442:	f04f 0900 	mov.w	r9, #0
 8004446:	9700      	str	r7, [sp, #0]
 8004448:	4633      	mov	r3, r6
 800444a:	aa0b      	add	r2, sp, #44	; 0x2c
 800444c:	4621      	mov	r1, r4
 800444e:	4628      	mov	r0, r5
 8004450:	f000 f9d8 	bl	8004804 <_printf_common>
 8004454:	3001      	adds	r0, #1
 8004456:	f040 8090 	bne.w	800457a <_printf_float+0x1e2>
 800445a:	f04f 30ff 	mov.w	r0, #4294967295
 800445e:	b00d      	add	sp, #52	; 0x34
 8004460:	ecbd 8b02 	vpop	{d8}
 8004464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004468:	4642      	mov	r2, r8
 800446a:	464b      	mov	r3, r9
 800446c:	4640      	mov	r0, r8
 800446e:	4649      	mov	r1, r9
 8004470:	f7fc fb64 	bl	8000b3c <__aeabi_dcmpun>
 8004474:	b140      	cbz	r0, 8004488 <_printf_float+0xf0>
 8004476:	464b      	mov	r3, r9
 8004478:	2b00      	cmp	r3, #0
 800447a:	bfbc      	itt	lt
 800447c:	232d      	movlt	r3, #45	; 0x2d
 800447e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004482:	487f      	ldr	r0, [pc, #508]	; (8004680 <_printf_float+0x2e8>)
 8004484:	4b7f      	ldr	r3, [pc, #508]	; (8004684 <_printf_float+0x2ec>)
 8004486:	e7d1      	b.n	800442c <_printf_float+0x94>
 8004488:	6863      	ldr	r3, [r4, #4]
 800448a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800448e:	9206      	str	r2, [sp, #24]
 8004490:	1c5a      	adds	r2, r3, #1
 8004492:	d13f      	bne.n	8004514 <_printf_float+0x17c>
 8004494:	2306      	movs	r3, #6
 8004496:	6063      	str	r3, [r4, #4]
 8004498:	9b05      	ldr	r3, [sp, #20]
 800449a:	6861      	ldr	r1, [r4, #4]
 800449c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80044a0:	2300      	movs	r3, #0
 80044a2:	9303      	str	r3, [sp, #12]
 80044a4:	ab0a      	add	r3, sp, #40	; 0x28
 80044a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80044aa:	ab09      	add	r3, sp, #36	; 0x24
 80044ac:	ec49 8b10 	vmov	d0, r8, r9
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	6022      	str	r2, [r4, #0]
 80044b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80044b8:	4628      	mov	r0, r5
 80044ba:	f7ff fecd 	bl	8004258 <__cvt>
 80044be:	9b06      	ldr	r3, [sp, #24]
 80044c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044c2:	2b47      	cmp	r3, #71	; 0x47
 80044c4:	4680      	mov	r8, r0
 80044c6:	d108      	bne.n	80044da <_printf_float+0x142>
 80044c8:	1cc8      	adds	r0, r1, #3
 80044ca:	db02      	blt.n	80044d2 <_printf_float+0x13a>
 80044cc:	6863      	ldr	r3, [r4, #4]
 80044ce:	4299      	cmp	r1, r3
 80044d0:	dd41      	ble.n	8004556 <_printf_float+0x1be>
 80044d2:	f1ab 0b02 	sub.w	fp, fp, #2
 80044d6:	fa5f fb8b 	uxtb.w	fp, fp
 80044da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80044de:	d820      	bhi.n	8004522 <_printf_float+0x18a>
 80044e0:	3901      	subs	r1, #1
 80044e2:	465a      	mov	r2, fp
 80044e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80044e8:	9109      	str	r1, [sp, #36]	; 0x24
 80044ea:	f7ff ff17 	bl	800431c <__exponent>
 80044ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044f0:	1813      	adds	r3, r2, r0
 80044f2:	2a01      	cmp	r2, #1
 80044f4:	4681      	mov	r9, r0
 80044f6:	6123      	str	r3, [r4, #16]
 80044f8:	dc02      	bgt.n	8004500 <_printf_float+0x168>
 80044fa:	6822      	ldr	r2, [r4, #0]
 80044fc:	07d2      	lsls	r2, r2, #31
 80044fe:	d501      	bpl.n	8004504 <_printf_float+0x16c>
 8004500:	3301      	adds	r3, #1
 8004502:	6123      	str	r3, [r4, #16]
 8004504:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004508:	2b00      	cmp	r3, #0
 800450a:	d09c      	beq.n	8004446 <_printf_float+0xae>
 800450c:	232d      	movs	r3, #45	; 0x2d
 800450e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004512:	e798      	b.n	8004446 <_printf_float+0xae>
 8004514:	9a06      	ldr	r2, [sp, #24]
 8004516:	2a47      	cmp	r2, #71	; 0x47
 8004518:	d1be      	bne.n	8004498 <_printf_float+0x100>
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1bc      	bne.n	8004498 <_printf_float+0x100>
 800451e:	2301      	movs	r3, #1
 8004520:	e7b9      	b.n	8004496 <_printf_float+0xfe>
 8004522:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004526:	d118      	bne.n	800455a <_printf_float+0x1c2>
 8004528:	2900      	cmp	r1, #0
 800452a:	6863      	ldr	r3, [r4, #4]
 800452c:	dd0b      	ble.n	8004546 <_printf_float+0x1ae>
 800452e:	6121      	str	r1, [r4, #16]
 8004530:	b913      	cbnz	r3, 8004538 <_printf_float+0x1a0>
 8004532:	6822      	ldr	r2, [r4, #0]
 8004534:	07d0      	lsls	r0, r2, #31
 8004536:	d502      	bpl.n	800453e <_printf_float+0x1a6>
 8004538:	3301      	adds	r3, #1
 800453a:	440b      	add	r3, r1
 800453c:	6123      	str	r3, [r4, #16]
 800453e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004540:	f04f 0900 	mov.w	r9, #0
 8004544:	e7de      	b.n	8004504 <_printf_float+0x16c>
 8004546:	b913      	cbnz	r3, 800454e <_printf_float+0x1b6>
 8004548:	6822      	ldr	r2, [r4, #0]
 800454a:	07d2      	lsls	r2, r2, #31
 800454c:	d501      	bpl.n	8004552 <_printf_float+0x1ba>
 800454e:	3302      	adds	r3, #2
 8004550:	e7f4      	b.n	800453c <_printf_float+0x1a4>
 8004552:	2301      	movs	r3, #1
 8004554:	e7f2      	b.n	800453c <_printf_float+0x1a4>
 8004556:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800455a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800455c:	4299      	cmp	r1, r3
 800455e:	db05      	blt.n	800456c <_printf_float+0x1d4>
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	6121      	str	r1, [r4, #16]
 8004564:	07d8      	lsls	r0, r3, #31
 8004566:	d5ea      	bpl.n	800453e <_printf_float+0x1a6>
 8004568:	1c4b      	adds	r3, r1, #1
 800456a:	e7e7      	b.n	800453c <_printf_float+0x1a4>
 800456c:	2900      	cmp	r1, #0
 800456e:	bfd4      	ite	le
 8004570:	f1c1 0202 	rsble	r2, r1, #2
 8004574:	2201      	movgt	r2, #1
 8004576:	4413      	add	r3, r2
 8004578:	e7e0      	b.n	800453c <_printf_float+0x1a4>
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	055a      	lsls	r2, r3, #21
 800457e:	d407      	bmi.n	8004590 <_printf_float+0x1f8>
 8004580:	6923      	ldr	r3, [r4, #16]
 8004582:	4642      	mov	r2, r8
 8004584:	4631      	mov	r1, r6
 8004586:	4628      	mov	r0, r5
 8004588:	47b8      	blx	r7
 800458a:	3001      	adds	r0, #1
 800458c:	d12c      	bne.n	80045e8 <_printf_float+0x250>
 800458e:	e764      	b.n	800445a <_printf_float+0xc2>
 8004590:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004594:	f240 80e0 	bls.w	8004758 <_printf_float+0x3c0>
 8004598:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800459c:	2200      	movs	r2, #0
 800459e:	2300      	movs	r3, #0
 80045a0:	f7fc fa9a 	bl	8000ad8 <__aeabi_dcmpeq>
 80045a4:	2800      	cmp	r0, #0
 80045a6:	d034      	beq.n	8004612 <_printf_float+0x27a>
 80045a8:	4a37      	ldr	r2, [pc, #220]	; (8004688 <_printf_float+0x2f0>)
 80045aa:	2301      	movs	r3, #1
 80045ac:	4631      	mov	r1, r6
 80045ae:	4628      	mov	r0, r5
 80045b0:	47b8      	blx	r7
 80045b2:	3001      	adds	r0, #1
 80045b4:	f43f af51 	beq.w	800445a <_printf_float+0xc2>
 80045b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045bc:	429a      	cmp	r2, r3
 80045be:	db02      	blt.n	80045c6 <_printf_float+0x22e>
 80045c0:	6823      	ldr	r3, [r4, #0]
 80045c2:	07d8      	lsls	r0, r3, #31
 80045c4:	d510      	bpl.n	80045e8 <_printf_float+0x250>
 80045c6:	ee18 3a10 	vmov	r3, s16
 80045ca:	4652      	mov	r2, sl
 80045cc:	4631      	mov	r1, r6
 80045ce:	4628      	mov	r0, r5
 80045d0:	47b8      	blx	r7
 80045d2:	3001      	adds	r0, #1
 80045d4:	f43f af41 	beq.w	800445a <_printf_float+0xc2>
 80045d8:	f04f 0800 	mov.w	r8, #0
 80045dc:	f104 091a 	add.w	r9, r4, #26
 80045e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045e2:	3b01      	subs	r3, #1
 80045e4:	4543      	cmp	r3, r8
 80045e6:	dc09      	bgt.n	80045fc <_printf_float+0x264>
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	079b      	lsls	r3, r3, #30
 80045ec:	f100 8105 	bmi.w	80047fa <_printf_float+0x462>
 80045f0:	68e0      	ldr	r0, [r4, #12]
 80045f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045f4:	4298      	cmp	r0, r3
 80045f6:	bfb8      	it	lt
 80045f8:	4618      	movlt	r0, r3
 80045fa:	e730      	b.n	800445e <_printf_float+0xc6>
 80045fc:	2301      	movs	r3, #1
 80045fe:	464a      	mov	r2, r9
 8004600:	4631      	mov	r1, r6
 8004602:	4628      	mov	r0, r5
 8004604:	47b8      	blx	r7
 8004606:	3001      	adds	r0, #1
 8004608:	f43f af27 	beq.w	800445a <_printf_float+0xc2>
 800460c:	f108 0801 	add.w	r8, r8, #1
 8004610:	e7e6      	b.n	80045e0 <_printf_float+0x248>
 8004612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004614:	2b00      	cmp	r3, #0
 8004616:	dc39      	bgt.n	800468c <_printf_float+0x2f4>
 8004618:	4a1b      	ldr	r2, [pc, #108]	; (8004688 <_printf_float+0x2f0>)
 800461a:	2301      	movs	r3, #1
 800461c:	4631      	mov	r1, r6
 800461e:	4628      	mov	r0, r5
 8004620:	47b8      	blx	r7
 8004622:	3001      	adds	r0, #1
 8004624:	f43f af19 	beq.w	800445a <_printf_float+0xc2>
 8004628:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800462c:	4313      	orrs	r3, r2
 800462e:	d102      	bne.n	8004636 <_printf_float+0x29e>
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	07d9      	lsls	r1, r3, #31
 8004634:	d5d8      	bpl.n	80045e8 <_printf_float+0x250>
 8004636:	ee18 3a10 	vmov	r3, s16
 800463a:	4652      	mov	r2, sl
 800463c:	4631      	mov	r1, r6
 800463e:	4628      	mov	r0, r5
 8004640:	47b8      	blx	r7
 8004642:	3001      	adds	r0, #1
 8004644:	f43f af09 	beq.w	800445a <_printf_float+0xc2>
 8004648:	f04f 0900 	mov.w	r9, #0
 800464c:	f104 0a1a 	add.w	sl, r4, #26
 8004650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004652:	425b      	negs	r3, r3
 8004654:	454b      	cmp	r3, r9
 8004656:	dc01      	bgt.n	800465c <_printf_float+0x2c4>
 8004658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800465a:	e792      	b.n	8004582 <_printf_float+0x1ea>
 800465c:	2301      	movs	r3, #1
 800465e:	4652      	mov	r2, sl
 8004660:	4631      	mov	r1, r6
 8004662:	4628      	mov	r0, r5
 8004664:	47b8      	blx	r7
 8004666:	3001      	adds	r0, #1
 8004668:	f43f aef7 	beq.w	800445a <_printf_float+0xc2>
 800466c:	f109 0901 	add.w	r9, r9, #1
 8004670:	e7ee      	b.n	8004650 <_printf_float+0x2b8>
 8004672:	bf00      	nop
 8004674:	7fefffff 	.word	0x7fefffff
 8004678:	08006a30 	.word	0x08006a30
 800467c:	08006a34 	.word	0x08006a34
 8004680:	08006a3c 	.word	0x08006a3c
 8004684:	08006a38 	.word	0x08006a38
 8004688:	08006a40 	.word	0x08006a40
 800468c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800468e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004690:	429a      	cmp	r2, r3
 8004692:	bfa8      	it	ge
 8004694:	461a      	movge	r2, r3
 8004696:	2a00      	cmp	r2, #0
 8004698:	4691      	mov	r9, r2
 800469a:	dc37      	bgt.n	800470c <_printf_float+0x374>
 800469c:	f04f 0b00 	mov.w	fp, #0
 80046a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046a4:	f104 021a 	add.w	r2, r4, #26
 80046a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046aa:	9305      	str	r3, [sp, #20]
 80046ac:	eba3 0309 	sub.w	r3, r3, r9
 80046b0:	455b      	cmp	r3, fp
 80046b2:	dc33      	bgt.n	800471c <_printf_float+0x384>
 80046b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046b8:	429a      	cmp	r2, r3
 80046ba:	db3b      	blt.n	8004734 <_printf_float+0x39c>
 80046bc:	6823      	ldr	r3, [r4, #0]
 80046be:	07da      	lsls	r2, r3, #31
 80046c0:	d438      	bmi.n	8004734 <_printf_float+0x39c>
 80046c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046c4:	9a05      	ldr	r2, [sp, #20]
 80046c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80046c8:	1a9a      	subs	r2, r3, r2
 80046ca:	eba3 0901 	sub.w	r9, r3, r1
 80046ce:	4591      	cmp	r9, r2
 80046d0:	bfa8      	it	ge
 80046d2:	4691      	movge	r9, r2
 80046d4:	f1b9 0f00 	cmp.w	r9, #0
 80046d8:	dc35      	bgt.n	8004746 <_printf_float+0x3ae>
 80046da:	f04f 0800 	mov.w	r8, #0
 80046de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046e2:	f104 0a1a 	add.w	sl, r4, #26
 80046e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046ea:	1a9b      	subs	r3, r3, r2
 80046ec:	eba3 0309 	sub.w	r3, r3, r9
 80046f0:	4543      	cmp	r3, r8
 80046f2:	f77f af79 	ble.w	80045e8 <_printf_float+0x250>
 80046f6:	2301      	movs	r3, #1
 80046f8:	4652      	mov	r2, sl
 80046fa:	4631      	mov	r1, r6
 80046fc:	4628      	mov	r0, r5
 80046fe:	47b8      	blx	r7
 8004700:	3001      	adds	r0, #1
 8004702:	f43f aeaa 	beq.w	800445a <_printf_float+0xc2>
 8004706:	f108 0801 	add.w	r8, r8, #1
 800470a:	e7ec      	b.n	80046e6 <_printf_float+0x34e>
 800470c:	4613      	mov	r3, r2
 800470e:	4631      	mov	r1, r6
 8004710:	4642      	mov	r2, r8
 8004712:	4628      	mov	r0, r5
 8004714:	47b8      	blx	r7
 8004716:	3001      	adds	r0, #1
 8004718:	d1c0      	bne.n	800469c <_printf_float+0x304>
 800471a:	e69e      	b.n	800445a <_printf_float+0xc2>
 800471c:	2301      	movs	r3, #1
 800471e:	4631      	mov	r1, r6
 8004720:	4628      	mov	r0, r5
 8004722:	9205      	str	r2, [sp, #20]
 8004724:	47b8      	blx	r7
 8004726:	3001      	adds	r0, #1
 8004728:	f43f ae97 	beq.w	800445a <_printf_float+0xc2>
 800472c:	9a05      	ldr	r2, [sp, #20]
 800472e:	f10b 0b01 	add.w	fp, fp, #1
 8004732:	e7b9      	b.n	80046a8 <_printf_float+0x310>
 8004734:	ee18 3a10 	vmov	r3, s16
 8004738:	4652      	mov	r2, sl
 800473a:	4631      	mov	r1, r6
 800473c:	4628      	mov	r0, r5
 800473e:	47b8      	blx	r7
 8004740:	3001      	adds	r0, #1
 8004742:	d1be      	bne.n	80046c2 <_printf_float+0x32a>
 8004744:	e689      	b.n	800445a <_printf_float+0xc2>
 8004746:	9a05      	ldr	r2, [sp, #20]
 8004748:	464b      	mov	r3, r9
 800474a:	4442      	add	r2, r8
 800474c:	4631      	mov	r1, r6
 800474e:	4628      	mov	r0, r5
 8004750:	47b8      	blx	r7
 8004752:	3001      	adds	r0, #1
 8004754:	d1c1      	bne.n	80046da <_printf_float+0x342>
 8004756:	e680      	b.n	800445a <_printf_float+0xc2>
 8004758:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800475a:	2a01      	cmp	r2, #1
 800475c:	dc01      	bgt.n	8004762 <_printf_float+0x3ca>
 800475e:	07db      	lsls	r3, r3, #31
 8004760:	d538      	bpl.n	80047d4 <_printf_float+0x43c>
 8004762:	2301      	movs	r3, #1
 8004764:	4642      	mov	r2, r8
 8004766:	4631      	mov	r1, r6
 8004768:	4628      	mov	r0, r5
 800476a:	47b8      	blx	r7
 800476c:	3001      	adds	r0, #1
 800476e:	f43f ae74 	beq.w	800445a <_printf_float+0xc2>
 8004772:	ee18 3a10 	vmov	r3, s16
 8004776:	4652      	mov	r2, sl
 8004778:	4631      	mov	r1, r6
 800477a:	4628      	mov	r0, r5
 800477c:	47b8      	blx	r7
 800477e:	3001      	adds	r0, #1
 8004780:	f43f ae6b 	beq.w	800445a <_printf_float+0xc2>
 8004784:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004788:	2200      	movs	r2, #0
 800478a:	2300      	movs	r3, #0
 800478c:	f7fc f9a4 	bl	8000ad8 <__aeabi_dcmpeq>
 8004790:	b9d8      	cbnz	r0, 80047ca <_printf_float+0x432>
 8004792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004794:	f108 0201 	add.w	r2, r8, #1
 8004798:	3b01      	subs	r3, #1
 800479a:	4631      	mov	r1, r6
 800479c:	4628      	mov	r0, r5
 800479e:	47b8      	blx	r7
 80047a0:	3001      	adds	r0, #1
 80047a2:	d10e      	bne.n	80047c2 <_printf_float+0x42a>
 80047a4:	e659      	b.n	800445a <_printf_float+0xc2>
 80047a6:	2301      	movs	r3, #1
 80047a8:	4652      	mov	r2, sl
 80047aa:	4631      	mov	r1, r6
 80047ac:	4628      	mov	r0, r5
 80047ae:	47b8      	blx	r7
 80047b0:	3001      	adds	r0, #1
 80047b2:	f43f ae52 	beq.w	800445a <_printf_float+0xc2>
 80047b6:	f108 0801 	add.w	r8, r8, #1
 80047ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047bc:	3b01      	subs	r3, #1
 80047be:	4543      	cmp	r3, r8
 80047c0:	dcf1      	bgt.n	80047a6 <_printf_float+0x40e>
 80047c2:	464b      	mov	r3, r9
 80047c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80047c8:	e6dc      	b.n	8004584 <_printf_float+0x1ec>
 80047ca:	f04f 0800 	mov.w	r8, #0
 80047ce:	f104 0a1a 	add.w	sl, r4, #26
 80047d2:	e7f2      	b.n	80047ba <_printf_float+0x422>
 80047d4:	2301      	movs	r3, #1
 80047d6:	4642      	mov	r2, r8
 80047d8:	e7df      	b.n	800479a <_printf_float+0x402>
 80047da:	2301      	movs	r3, #1
 80047dc:	464a      	mov	r2, r9
 80047de:	4631      	mov	r1, r6
 80047e0:	4628      	mov	r0, r5
 80047e2:	47b8      	blx	r7
 80047e4:	3001      	adds	r0, #1
 80047e6:	f43f ae38 	beq.w	800445a <_printf_float+0xc2>
 80047ea:	f108 0801 	add.w	r8, r8, #1
 80047ee:	68e3      	ldr	r3, [r4, #12]
 80047f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047f2:	1a5b      	subs	r3, r3, r1
 80047f4:	4543      	cmp	r3, r8
 80047f6:	dcf0      	bgt.n	80047da <_printf_float+0x442>
 80047f8:	e6fa      	b.n	80045f0 <_printf_float+0x258>
 80047fa:	f04f 0800 	mov.w	r8, #0
 80047fe:	f104 0919 	add.w	r9, r4, #25
 8004802:	e7f4      	b.n	80047ee <_printf_float+0x456>

08004804 <_printf_common>:
 8004804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004808:	4616      	mov	r6, r2
 800480a:	4699      	mov	r9, r3
 800480c:	688a      	ldr	r2, [r1, #8]
 800480e:	690b      	ldr	r3, [r1, #16]
 8004810:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004814:	4293      	cmp	r3, r2
 8004816:	bfb8      	it	lt
 8004818:	4613      	movlt	r3, r2
 800481a:	6033      	str	r3, [r6, #0]
 800481c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004820:	4607      	mov	r7, r0
 8004822:	460c      	mov	r4, r1
 8004824:	b10a      	cbz	r2, 800482a <_printf_common+0x26>
 8004826:	3301      	adds	r3, #1
 8004828:	6033      	str	r3, [r6, #0]
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	0699      	lsls	r1, r3, #26
 800482e:	bf42      	ittt	mi
 8004830:	6833      	ldrmi	r3, [r6, #0]
 8004832:	3302      	addmi	r3, #2
 8004834:	6033      	strmi	r3, [r6, #0]
 8004836:	6825      	ldr	r5, [r4, #0]
 8004838:	f015 0506 	ands.w	r5, r5, #6
 800483c:	d106      	bne.n	800484c <_printf_common+0x48>
 800483e:	f104 0a19 	add.w	sl, r4, #25
 8004842:	68e3      	ldr	r3, [r4, #12]
 8004844:	6832      	ldr	r2, [r6, #0]
 8004846:	1a9b      	subs	r3, r3, r2
 8004848:	42ab      	cmp	r3, r5
 800484a:	dc26      	bgt.n	800489a <_printf_common+0x96>
 800484c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004850:	1e13      	subs	r3, r2, #0
 8004852:	6822      	ldr	r2, [r4, #0]
 8004854:	bf18      	it	ne
 8004856:	2301      	movne	r3, #1
 8004858:	0692      	lsls	r2, r2, #26
 800485a:	d42b      	bmi.n	80048b4 <_printf_common+0xb0>
 800485c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004860:	4649      	mov	r1, r9
 8004862:	4638      	mov	r0, r7
 8004864:	47c0      	blx	r8
 8004866:	3001      	adds	r0, #1
 8004868:	d01e      	beq.n	80048a8 <_printf_common+0xa4>
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	68e5      	ldr	r5, [r4, #12]
 800486e:	6832      	ldr	r2, [r6, #0]
 8004870:	f003 0306 	and.w	r3, r3, #6
 8004874:	2b04      	cmp	r3, #4
 8004876:	bf08      	it	eq
 8004878:	1aad      	subeq	r5, r5, r2
 800487a:	68a3      	ldr	r3, [r4, #8]
 800487c:	6922      	ldr	r2, [r4, #16]
 800487e:	bf0c      	ite	eq
 8004880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004884:	2500      	movne	r5, #0
 8004886:	4293      	cmp	r3, r2
 8004888:	bfc4      	itt	gt
 800488a:	1a9b      	subgt	r3, r3, r2
 800488c:	18ed      	addgt	r5, r5, r3
 800488e:	2600      	movs	r6, #0
 8004890:	341a      	adds	r4, #26
 8004892:	42b5      	cmp	r5, r6
 8004894:	d11a      	bne.n	80048cc <_printf_common+0xc8>
 8004896:	2000      	movs	r0, #0
 8004898:	e008      	b.n	80048ac <_printf_common+0xa8>
 800489a:	2301      	movs	r3, #1
 800489c:	4652      	mov	r2, sl
 800489e:	4649      	mov	r1, r9
 80048a0:	4638      	mov	r0, r7
 80048a2:	47c0      	blx	r8
 80048a4:	3001      	adds	r0, #1
 80048a6:	d103      	bne.n	80048b0 <_printf_common+0xac>
 80048a8:	f04f 30ff 	mov.w	r0, #4294967295
 80048ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048b0:	3501      	adds	r5, #1
 80048b2:	e7c6      	b.n	8004842 <_printf_common+0x3e>
 80048b4:	18e1      	adds	r1, r4, r3
 80048b6:	1c5a      	adds	r2, r3, #1
 80048b8:	2030      	movs	r0, #48	; 0x30
 80048ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048be:	4422      	add	r2, r4
 80048c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048c8:	3302      	adds	r3, #2
 80048ca:	e7c7      	b.n	800485c <_printf_common+0x58>
 80048cc:	2301      	movs	r3, #1
 80048ce:	4622      	mov	r2, r4
 80048d0:	4649      	mov	r1, r9
 80048d2:	4638      	mov	r0, r7
 80048d4:	47c0      	blx	r8
 80048d6:	3001      	adds	r0, #1
 80048d8:	d0e6      	beq.n	80048a8 <_printf_common+0xa4>
 80048da:	3601      	adds	r6, #1
 80048dc:	e7d9      	b.n	8004892 <_printf_common+0x8e>
	...

080048e0 <_printf_i>:
 80048e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048e4:	7e0f      	ldrb	r7, [r1, #24]
 80048e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048e8:	2f78      	cmp	r7, #120	; 0x78
 80048ea:	4691      	mov	r9, r2
 80048ec:	4680      	mov	r8, r0
 80048ee:	460c      	mov	r4, r1
 80048f0:	469a      	mov	sl, r3
 80048f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048f6:	d807      	bhi.n	8004908 <_printf_i+0x28>
 80048f8:	2f62      	cmp	r7, #98	; 0x62
 80048fa:	d80a      	bhi.n	8004912 <_printf_i+0x32>
 80048fc:	2f00      	cmp	r7, #0
 80048fe:	f000 80d8 	beq.w	8004ab2 <_printf_i+0x1d2>
 8004902:	2f58      	cmp	r7, #88	; 0x58
 8004904:	f000 80a3 	beq.w	8004a4e <_printf_i+0x16e>
 8004908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800490c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004910:	e03a      	b.n	8004988 <_printf_i+0xa8>
 8004912:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004916:	2b15      	cmp	r3, #21
 8004918:	d8f6      	bhi.n	8004908 <_printf_i+0x28>
 800491a:	a101      	add	r1, pc, #4	; (adr r1, 8004920 <_printf_i+0x40>)
 800491c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004920:	08004979 	.word	0x08004979
 8004924:	0800498d 	.word	0x0800498d
 8004928:	08004909 	.word	0x08004909
 800492c:	08004909 	.word	0x08004909
 8004930:	08004909 	.word	0x08004909
 8004934:	08004909 	.word	0x08004909
 8004938:	0800498d 	.word	0x0800498d
 800493c:	08004909 	.word	0x08004909
 8004940:	08004909 	.word	0x08004909
 8004944:	08004909 	.word	0x08004909
 8004948:	08004909 	.word	0x08004909
 800494c:	08004a99 	.word	0x08004a99
 8004950:	080049bd 	.word	0x080049bd
 8004954:	08004a7b 	.word	0x08004a7b
 8004958:	08004909 	.word	0x08004909
 800495c:	08004909 	.word	0x08004909
 8004960:	08004abb 	.word	0x08004abb
 8004964:	08004909 	.word	0x08004909
 8004968:	080049bd 	.word	0x080049bd
 800496c:	08004909 	.word	0x08004909
 8004970:	08004909 	.word	0x08004909
 8004974:	08004a83 	.word	0x08004a83
 8004978:	682b      	ldr	r3, [r5, #0]
 800497a:	1d1a      	adds	r2, r3, #4
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	602a      	str	r2, [r5, #0]
 8004980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004984:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004988:	2301      	movs	r3, #1
 800498a:	e0a3      	b.n	8004ad4 <_printf_i+0x1f4>
 800498c:	6820      	ldr	r0, [r4, #0]
 800498e:	6829      	ldr	r1, [r5, #0]
 8004990:	0606      	lsls	r6, r0, #24
 8004992:	f101 0304 	add.w	r3, r1, #4
 8004996:	d50a      	bpl.n	80049ae <_printf_i+0xce>
 8004998:	680e      	ldr	r6, [r1, #0]
 800499a:	602b      	str	r3, [r5, #0]
 800499c:	2e00      	cmp	r6, #0
 800499e:	da03      	bge.n	80049a8 <_printf_i+0xc8>
 80049a0:	232d      	movs	r3, #45	; 0x2d
 80049a2:	4276      	negs	r6, r6
 80049a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049a8:	485e      	ldr	r0, [pc, #376]	; (8004b24 <_printf_i+0x244>)
 80049aa:	230a      	movs	r3, #10
 80049ac:	e019      	b.n	80049e2 <_printf_i+0x102>
 80049ae:	680e      	ldr	r6, [r1, #0]
 80049b0:	602b      	str	r3, [r5, #0]
 80049b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049b6:	bf18      	it	ne
 80049b8:	b236      	sxthne	r6, r6
 80049ba:	e7ef      	b.n	800499c <_printf_i+0xbc>
 80049bc:	682b      	ldr	r3, [r5, #0]
 80049be:	6820      	ldr	r0, [r4, #0]
 80049c0:	1d19      	adds	r1, r3, #4
 80049c2:	6029      	str	r1, [r5, #0]
 80049c4:	0601      	lsls	r1, r0, #24
 80049c6:	d501      	bpl.n	80049cc <_printf_i+0xec>
 80049c8:	681e      	ldr	r6, [r3, #0]
 80049ca:	e002      	b.n	80049d2 <_printf_i+0xf2>
 80049cc:	0646      	lsls	r6, r0, #25
 80049ce:	d5fb      	bpl.n	80049c8 <_printf_i+0xe8>
 80049d0:	881e      	ldrh	r6, [r3, #0]
 80049d2:	4854      	ldr	r0, [pc, #336]	; (8004b24 <_printf_i+0x244>)
 80049d4:	2f6f      	cmp	r7, #111	; 0x6f
 80049d6:	bf0c      	ite	eq
 80049d8:	2308      	moveq	r3, #8
 80049da:	230a      	movne	r3, #10
 80049dc:	2100      	movs	r1, #0
 80049de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049e2:	6865      	ldr	r5, [r4, #4]
 80049e4:	60a5      	str	r5, [r4, #8]
 80049e6:	2d00      	cmp	r5, #0
 80049e8:	bfa2      	ittt	ge
 80049ea:	6821      	ldrge	r1, [r4, #0]
 80049ec:	f021 0104 	bicge.w	r1, r1, #4
 80049f0:	6021      	strge	r1, [r4, #0]
 80049f2:	b90e      	cbnz	r6, 80049f8 <_printf_i+0x118>
 80049f4:	2d00      	cmp	r5, #0
 80049f6:	d04d      	beq.n	8004a94 <_printf_i+0x1b4>
 80049f8:	4615      	mov	r5, r2
 80049fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80049fe:	fb03 6711 	mls	r7, r3, r1, r6
 8004a02:	5dc7      	ldrb	r7, [r0, r7]
 8004a04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a08:	4637      	mov	r7, r6
 8004a0a:	42bb      	cmp	r3, r7
 8004a0c:	460e      	mov	r6, r1
 8004a0e:	d9f4      	bls.n	80049fa <_printf_i+0x11a>
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d10b      	bne.n	8004a2c <_printf_i+0x14c>
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	07de      	lsls	r6, r3, #31
 8004a18:	d508      	bpl.n	8004a2c <_printf_i+0x14c>
 8004a1a:	6923      	ldr	r3, [r4, #16]
 8004a1c:	6861      	ldr	r1, [r4, #4]
 8004a1e:	4299      	cmp	r1, r3
 8004a20:	bfde      	ittt	le
 8004a22:	2330      	movle	r3, #48	; 0x30
 8004a24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a2c:	1b52      	subs	r2, r2, r5
 8004a2e:	6122      	str	r2, [r4, #16]
 8004a30:	f8cd a000 	str.w	sl, [sp]
 8004a34:	464b      	mov	r3, r9
 8004a36:	aa03      	add	r2, sp, #12
 8004a38:	4621      	mov	r1, r4
 8004a3a:	4640      	mov	r0, r8
 8004a3c:	f7ff fee2 	bl	8004804 <_printf_common>
 8004a40:	3001      	adds	r0, #1
 8004a42:	d14c      	bne.n	8004ade <_printf_i+0x1fe>
 8004a44:	f04f 30ff 	mov.w	r0, #4294967295
 8004a48:	b004      	add	sp, #16
 8004a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a4e:	4835      	ldr	r0, [pc, #212]	; (8004b24 <_printf_i+0x244>)
 8004a50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a54:	6829      	ldr	r1, [r5, #0]
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a5c:	6029      	str	r1, [r5, #0]
 8004a5e:	061d      	lsls	r5, r3, #24
 8004a60:	d514      	bpl.n	8004a8c <_printf_i+0x1ac>
 8004a62:	07df      	lsls	r7, r3, #31
 8004a64:	bf44      	itt	mi
 8004a66:	f043 0320 	orrmi.w	r3, r3, #32
 8004a6a:	6023      	strmi	r3, [r4, #0]
 8004a6c:	b91e      	cbnz	r6, 8004a76 <_printf_i+0x196>
 8004a6e:	6823      	ldr	r3, [r4, #0]
 8004a70:	f023 0320 	bic.w	r3, r3, #32
 8004a74:	6023      	str	r3, [r4, #0]
 8004a76:	2310      	movs	r3, #16
 8004a78:	e7b0      	b.n	80049dc <_printf_i+0xfc>
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	f043 0320 	orr.w	r3, r3, #32
 8004a80:	6023      	str	r3, [r4, #0]
 8004a82:	2378      	movs	r3, #120	; 0x78
 8004a84:	4828      	ldr	r0, [pc, #160]	; (8004b28 <_printf_i+0x248>)
 8004a86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a8a:	e7e3      	b.n	8004a54 <_printf_i+0x174>
 8004a8c:	0659      	lsls	r1, r3, #25
 8004a8e:	bf48      	it	mi
 8004a90:	b2b6      	uxthmi	r6, r6
 8004a92:	e7e6      	b.n	8004a62 <_printf_i+0x182>
 8004a94:	4615      	mov	r5, r2
 8004a96:	e7bb      	b.n	8004a10 <_printf_i+0x130>
 8004a98:	682b      	ldr	r3, [r5, #0]
 8004a9a:	6826      	ldr	r6, [r4, #0]
 8004a9c:	6961      	ldr	r1, [r4, #20]
 8004a9e:	1d18      	adds	r0, r3, #4
 8004aa0:	6028      	str	r0, [r5, #0]
 8004aa2:	0635      	lsls	r5, r6, #24
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	d501      	bpl.n	8004aac <_printf_i+0x1cc>
 8004aa8:	6019      	str	r1, [r3, #0]
 8004aaa:	e002      	b.n	8004ab2 <_printf_i+0x1d2>
 8004aac:	0670      	lsls	r0, r6, #25
 8004aae:	d5fb      	bpl.n	8004aa8 <_printf_i+0x1c8>
 8004ab0:	8019      	strh	r1, [r3, #0]
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	6123      	str	r3, [r4, #16]
 8004ab6:	4615      	mov	r5, r2
 8004ab8:	e7ba      	b.n	8004a30 <_printf_i+0x150>
 8004aba:	682b      	ldr	r3, [r5, #0]
 8004abc:	1d1a      	adds	r2, r3, #4
 8004abe:	602a      	str	r2, [r5, #0]
 8004ac0:	681d      	ldr	r5, [r3, #0]
 8004ac2:	6862      	ldr	r2, [r4, #4]
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	f7fb fb92 	bl	80001f0 <memchr>
 8004acc:	b108      	cbz	r0, 8004ad2 <_printf_i+0x1f2>
 8004ace:	1b40      	subs	r0, r0, r5
 8004ad0:	6060      	str	r0, [r4, #4]
 8004ad2:	6863      	ldr	r3, [r4, #4]
 8004ad4:	6123      	str	r3, [r4, #16]
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004adc:	e7a8      	b.n	8004a30 <_printf_i+0x150>
 8004ade:	6923      	ldr	r3, [r4, #16]
 8004ae0:	462a      	mov	r2, r5
 8004ae2:	4649      	mov	r1, r9
 8004ae4:	4640      	mov	r0, r8
 8004ae6:	47d0      	blx	sl
 8004ae8:	3001      	adds	r0, #1
 8004aea:	d0ab      	beq.n	8004a44 <_printf_i+0x164>
 8004aec:	6823      	ldr	r3, [r4, #0]
 8004aee:	079b      	lsls	r3, r3, #30
 8004af0:	d413      	bmi.n	8004b1a <_printf_i+0x23a>
 8004af2:	68e0      	ldr	r0, [r4, #12]
 8004af4:	9b03      	ldr	r3, [sp, #12]
 8004af6:	4298      	cmp	r0, r3
 8004af8:	bfb8      	it	lt
 8004afa:	4618      	movlt	r0, r3
 8004afc:	e7a4      	b.n	8004a48 <_printf_i+0x168>
 8004afe:	2301      	movs	r3, #1
 8004b00:	4632      	mov	r2, r6
 8004b02:	4649      	mov	r1, r9
 8004b04:	4640      	mov	r0, r8
 8004b06:	47d0      	blx	sl
 8004b08:	3001      	adds	r0, #1
 8004b0a:	d09b      	beq.n	8004a44 <_printf_i+0x164>
 8004b0c:	3501      	adds	r5, #1
 8004b0e:	68e3      	ldr	r3, [r4, #12]
 8004b10:	9903      	ldr	r1, [sp, #12]
 8004b12:	1a5b      	subs	r3, r3, r1
 8004b14:	42ab      	cmp	r3, r5
 8004b16:	dcf2      	bgt.n	8004afe <_printf_i+0x21e>
 8004b18:	e7eb      	b.n	8004af2 <_printf_i+0x212>
 8004b1a:	2500      	movs	r5, #0
 8004b1c:	f104 0619 	add.w	r6, r4, #25
 8004b20:	e7f5      	b.n	8004b0e <_printf_i+0x22e>
 8004b22:	bf00      	nop
 8004b24:	08006a42 	.word	0x08006a42
 8004b28:	08006a53 	.word	0x08006a53

08004b2c <_sbrk_r>:
 8004b2c:	b538      	push	{r3, r4, r5, lr}
 8004b2e:	4d06      	ldr	r5, [pc, #24]	; (8004b48 <_sbrk_r+0x1c>)
 8004b30:	2300      	movs	r3, #0
 8004b32:	4604      	mov	r4, r0
 8004b34:	4608      	mov	r0, r1
 8004b36:	602b      	str	r3, [r5, #0]
 8004b38:	f7fc fc12 	bl	8001360 <_sbrk>
 8004b3c:	1c43      	adds	r3, r0, #1
 8004b3e:	d102      	bne.n	8004b46 <_sbrk_r+0x1a>
 8004b40:	682b      	ldr	r3, [r5, #0]
 8004b42:	b103      	cbz	r3, 8004b46 <_sbrk_r+0x1a>
 8004b44:	6023      	str	r3, [r4, #0]
 8004b46:	bd38      	pop	{r3, r4, r5, pc}
 8004b48:	20000358 	.word	0x20000358

08004b4c <__sread>:
 8004b4c:	b510      	push	{r4, lr}
 8004b4e:	460c      	mov	r4, r1
 8004b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b54:	f001 fbba 	bl	80062cc <_read_r>
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	bfab      	itete	ge
 8004b5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b5e:	89a3      	ldrhlt	r3, [r4, #12]
 8004b60:	181b      	addge	r3, r3, r0
 8004b62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b66:	bfac      	ite	ge
 8004b68:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b6a:	81a3      	strhlt	r3, [r4, #12]
 8004b6c:	bd10      	pop	{r4, pc}

08004b6e <__swrite>:
 8004b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b72:	461f      	mov	r7, r3
 8004b74:	898b      	ldrh	r3, [r1, #12]
 8004b76:	05db      	lsls	r3, r3, #23
 8004b78:	4605      	mov	r5, r0
 8004b7a:	460c      	mov	r4, r1
 8004b7c:	4616      	mov	r6, r2
 8004b7e:	d505      	bpl.n	8004b8c <__swrite+0x1e>
 8004b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b84:	2302      	movs	r3, #2
 8004b86:	2200      	movs	r2, #0
 8004b88:	f000 ff86 	bl	8005a98 <_lseek_r>
 8004b8c:	89a3      	ldrh	r3, [r4, #12]
 8004b8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b96:	81a3      	strh	r3, [r4, #12]
 8004b98:	4632      	mov	r2, r6
 8004b9a:	463b      	mov	r3, r7
 8004b9c:	4628      	mov	r0, r5
 8004b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ba2:	f000 b817 	b.w	8004bd4 <_write_r>

08004ba6 <__sseek>:
 8004ba6:	b510      	push	{r4, lr}
 8004ba8:	460c      	mov	r4, r1
 8004baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bae:	f000 ff73 	bl	8005a98 <_lseek_r>
 8004bb2:	1c43      	adds	r3, r0, #1
 8004bb4:	89a3      	ldrh	r3, [r4, #12]
 8004bb6:	bf15      	itete	ne
 8004bb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004bba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004bbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004bc2:	81a3      	strheq	r3, [r4, #12]
 8004bc4:	bf18      	it	ne
 8004bc6:	81a3      	strhne	r3, [r4, #12]
 8004bc8:	bd10      	pop	{r4, pc}

08004bca <__sclose>:
 8004bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bce:	f000 b813 	b.w	8004bf8 <_close_r>
	...

08004bd4 <_write_r>:
 8004bd4:	b538      	push	{r3, r4, r5, lr}
 8004bd6:	4d07      	ldr	r5, [pc, #28]	; (8004bf4 <_write_r+0x20>)
 8004bd8:	4604      	mov	r4, r0
 8004bda:	4608      	mov	r0, r1
 8004bdc:	4611      	mov	r1, r2
 8004bde:	2200      	movs	r2, #0
 8004be0:	602a      	str	r2, [r5, #0]
 8004be2:	461a      	mov	r2, r3
 8004be4:	f7fe ff7b 	bl	8003ade <_write>
 8004be8:	1c43      	adds	r3, r0, #1
 8004bea:	d102      	bne.n	8004bf2 <_write_r+0x1e>
 8004bec:	682b      	ldr	r3, [r5, #0]
 8004bee:	b103      	cbz	r3, 8004bf2 <_write_r+0x1e>
 8004bf0:	6023      	str	r3, [r4, #0]
 8004bf2:	bd38      	pop	{r3, r4, r5, pc}
 8004bf4:	20000358 	.word	0x20000358

08004bf8 <_close_r>:
 8004bf8:	b538      	push	{r3, r4, r5, lr}
 8004bfa:	4d06      	ldr	r5, [pc, #24]	; (8004c14 <_close_r+0x1c>)
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	4604      	mov	r4, r0
 8004c00:	4608      	mov	r0, r1
 8004c02:	602b      	str	r3, [r5, #0]
 8004c04:	f7fe ff9c 	bl	8003b40 <_close>
 8004c08:	1c43      	adds	r3, r0, #1
 8004c0a:	d102      	bne.n	8004c12 <_close_r+0x1a>
 8004c0c:	682b      	ldr	r3, [r5, #0]
 8004c0e:	b103      	cbz	r3, 8004c12 <_close_r+0x1a>
 8004c10:	6023      	str	r3, [r4, #0]
 8004c12:	bd38      	pop	{r3, r4, r5, pc}
 8004c14:	20000358 	.word	0x20000358

08004c18 <quorem>:
 8004c18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c1c:	6903      	ldr	r3, [r0, #16]
 8004c1e:	690c      	ldr	r4, [r1, #16]
 8004c20:	42a3      	cmp	r3, r4
 8004c22:	4607      	mov	r7, r0
 8004c24:	f2c0 8081 	blt.w	8004d2a <quorem+0x112>
 8004c28:	3c01      	subs	r4, #1
 8004c2a:	f101 0814 	add.w	r8, r1, #20
 8004c2e:	f100 0514 	add.w	r5, r0, #20
 8004c32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c36:	9301      	str	r3, [sp, #4]
 8004c38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004c3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c40:	3301      	adds	r3, #1
 8004c42:	429a      	cmp	r2, r3
 8004c44:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004c48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004c4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004c50:	d331      	bcc.n	8004cb6 <quorem+0x9e>
 8004c52:	f04f 0e00 	mov.w	lr, #0
 8004c56:	4640      	mov	r0, r8
 8004c58:	46ac      	mov	ip, r5
 8004c5a:	46f2      	mov	sl, lr
 8004c5c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004c60:	b293      	uxth	r3, r2
 8004c62:	fb06 e303 	mla	r3, r6, r3, lr
 8004c66:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	ebaa 0303 	sub.w	r3, sl, r3
 8004c70:	f8dc a000 	ldr.w	sl, [ip]
 8004c74:	0c12      	lsrs	r2, r2, #16
 8004c76:	fa13 f38a 	uxtah	r3, r3, sl
 8004c7a:	fb06 e202 	mla	r2, r6, r2, lr
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	9b00      	ldr	r3, [sp, #0]
 8004c82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004c86:	b292      	uxth	r2, r2
 8004c88:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004c8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c90:	f8bd 3000 	ldrh.w	r3, [sp]
 8004c94:	4581      	cmp	r9, r0
 8004c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c9a:	f84c 3b04 	str.w	r3, [ip], #4
 8004c9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004ca2:	d2db      	bcs.n	8004c5c <quorem+0x44>
 8004ca4:	f855 300b 	ldr.w	r3, [r5, fp]
 8004ca8:	b92b      	cbnz	r3, 8004cb6 <quorem+0x9e>
 8004caa:	9b01      	ldr	r3, [sp, #4]
 8004cac:	3b04      	subs	r3, #4
 8004cae:	429d      	cmp	r5, r3
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	d32e      	bcc.n	8004d12 <quorem+0xfa>
 8004cb4:	613c      	str	r4, [r7, #16]
 8004cb6:	4638      	mov	r0, r7
 8004cb8:	f001 f9a4 	bl	8006004 <__mcmp>
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	db24      	blt.n	8004d0a <quorem+0xf2>
 8004cc0:	3601      	adds	r6, #1
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	f04f 0c00 	mov.w	ip, #0
 8004cc8:	f858 2b04 	ldr.w	r2, [r8], #4
 8004ccc:	f8d0 e000 	ldr.w	lr, [r0]
 8004cd0:	b293      	uxth	r3, r2
 8004cd2:	ebac 0303 	sub.w	r3, ip, r3
 8004cd6:	0c12      	lsrs	r2, r2, #16
 8004cd8:	fa13 f38e 	uxtah	r3, r3, lr
 8004cdc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004ce0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cea:	45c1      	cmp	r9, r8
 8004cec:	f840 3b04 	str.w	r3, [r0], #4
 8004cf0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004cf4:	d2e8      	bcs.n	8004cc8 <quorem+0xb0>
 8004cf6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004cfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004cfe:	b922      	cbnz	r2, 8004d0a <quorem+0xf2>
 8004d00:	3b04      	subs	r3, #4
 8004d02:	429d      	cmp	r5, r3
 8004d04:	461a      	mov	r2, r3
 8004d06:	d30a      	bcc.n	8004d1e <quorem+0x106>
 8004d08:	613c      	str	r4, [r7, #16]
 8004d0a:	4630      	mov	r0, r6
 8004d0c:	b003      	add	sp, #12
 8004d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d12:	6812      	ldr	r2, [r2, #0]
 8004d14:	3b04      	subs	r3, #4
 8004d16:	2a00      	cmp	r2, #0
 8004d18:	d1cc      	bne.n	8004cb4 <quorem+0x9c>
 8004d1a:	3c01      	subs	r4, #1
 8004d1c:	e7c7      	b.n	8004cae <quorem+0x96>
 8004d1e:	6812      	ldr	r2, [r2, #0]
 8004d20:	3b04      	subs	r3, #4
 8004d22:	2a00      	cmp	r2, #0
 8004d24:	d1f0      	bne.n	8004d08 <quorem+0xf0>
 8004d26:	3c01      	subs	r4, #1
 8004d28:	e7eb      	b.n	8004d02 <quorem+0xea>
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	e7ee      	b.n	8004d0c <quorem+0xf4>
	...

08004d30 <_dtoa_r>:
 8004d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d34:	ed2d 8b04 	vpush	{d8-d9}
 8004d38:	ec57 6b10 	vmov	r6, r7, d0
 8004d3c:	b093      	sub	sp, #76	; 0x4c
 8004d3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004d40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004d44:	9106      	str	r1, [sp, #24]
 8004d46:	ee10 aa10 	vmov	sl, s0
 8004d4a:	4604      	mov	r4, r0
 8004d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8004d4e:	930c      	str	r3, [sp, #48]	; 0x30
 8004d50:	46bb      	mov	fp, r7
 8004d52:	b975      	cbnz	r5, 8004d72 <_dtoa_r+0x42>
 8004d54:	2010      	movs	r0, #16
 8004d56:	f000 feb1 	bl	8005abc <malloc>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	6260      	str	r0, [r4, #36]	; 0x24
 8004d5e:	b920      	cbnz	r0, 8004d6a <_dtoa_r+0x3a>
 8004d60:	4ba7      	ldr	r3, [pc, #668]	; (8005000 <_dtoa_r+0x2d0>)
 8004d62:	21ea      	movs	r1, #234	; 0xea
 8004d64:	48a7      	ldr	r0, [pc, #668]	; (8005004 <_dtoa_r+0x2d4>)
 8004d66:	f001 fac3 	bl	80062f0 <__assert_func>
 8004d6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004d6e:	6005      	str	r5, [r0, #0]
 8004d70:	60c5      	str	r5, [r0, #12]
 8004d72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d74:	6819      	ldr	r1, [r3, #0]
 8004d76:	b151      	cbz	r1, 8004d8e <_dtoa_r+0x5e>
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	604a      	str	r2, [r1, #4]
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	4093      	lsls	r3, r2
 8004d80:	608b      	str	r3, [r1, #8]
 8004d82:	4620      	mov	r0, r4
 8004d84:	f000 fefc 	bl	8005b80 <_Bfree>
 8004d88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	1e3b      	subs	r3, r7, #0
 8004d90:	bfaa      	itet	ge
 8004d92:	2300      	movge	r3, #0
 8004d94:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004d98:	f8c8 3000 	strge.w	r3, [r8]
 8004d9c:	4b9a      	ldr	r3, [pc, #616]	; (8005008 <_dtoa_r+0x2d8>)
 8004d9e:	bfbc      	itt	lt
 8004da0:	2201      	movlt	r2, #1
 8004da2:	f8c8 2000 	strlt.w	r2, [r8]
 8004da6:	ea33 030b 	bics.w	r3, r3, fp
 8004daa:	d11b      	bne.n	8004de4 <_dtoa_r+0xb4>
 8004dac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004dae:	f242 730f 	movw	r3, #9999	; 0x270f
 8004db2:	6013      	str	r3, [r2, #0]
 8004db4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004db8:	4333      	orrs	r3, r6
 8004dba:	f000 8592 	beq.w	80058e2 <_dtoa_r+0xbb2>
 8004dbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004dc0:	b963      	cbnz	r3, 8004ddc <_dtoa_r+0xac>
 8004dc2:	4b92      	ldr	r3, [pc, #584]	; (800500c <_dtoa_r+0x2dc>)
 8004dc4:	e022      	b.n	8004e0c <_dtoa_r+0xdc>
 8004dc6:	4b92      	ldr	r3, [pc, #584]	; (8005010 <_dtoa_r+0x2e0>)
 8004dc8:	9301      	str	r3, [sp, #4]
 8004dca:	3308      	adds	r3, #8
 8004dcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004dce:	6013      	str	r3, [r2, #0]
 8004dd0:	9801      	ldr	r0, [sp, #4]
 8004dd2:	b013      	add	sp, #76	; 0x4c
 8004dd4:	ecbd 8b04 	vpop	{d8-d9}
 8004dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ddc:	4b8b      	ldr	r3, [pc, #556]	; (800500c <_dtoa_r+0x2dc>)
 8004dde:	9301      	str	r3, [sp, #4]
 8004de0:	3303      	adds	r3, #3
 8004de2:	e7f3      	b.n	8004dcc <_dtoa_r+0x9c>
 8004de4:	2200      	movs	r2, #0
 8004de6:	2300      	movs	r3, #0
 8004de8:	4650      	mov	r0, sl
 8004dea:	4659      	mov	r1, fp
 8004dec:	f7fb fe74 	bl	8000ad8 <__aeabi_dcmpeq>
 8004df0:	ec4b ab19 	vmov	d9, sl, fp
 8004df4:	4680      	mov	r8, r0
 8004df6:	b158      	cbz	r0, 8004e10 <_dtoa_r+0xe0>
 8004df8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 856b 	beq.w	80058dc <_dtoa_r+0xbac>
 8004e06:	4883      	ldr	r0, [pc, #524]	; (8005014 <_dtoa_r+0x2e4>)
 8004e08:	6018      	str	r0, [r3, #0]
 8004e0a:	1e43      	subs	r3, r0, #1
 8004e0c:	9301      	str	r3, [sp, #4]
 8004e0e:	e7df      	b.n	8004dd0 <_dtoa_r+0xa0>
 8004e10:	ec4b ab10 	vmov	d0, sl, fp
 8004e14:	aa10      	add	r2, sp, #64	; 0x40
 8004e16:	a911      	add	r1, sp, #68	; 0x44
 8004e18:	4620      	mov	r0, r4
 8004e1a:	f001 f999 	bl	8006150 <__d2b>
 8004e1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004e22:	ee08 0a10 	vmov	s16, r0
 8004e26:	2d00      	cmp	r5, #0
 8004e28:	f000 8084 	beq.w	8004f34 <_dtoa_r+0x204>
 8004e2c:	ee19 3a90 	vmov	r3, s19
 8004e30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004e38:	4656      	mov	r6, sl
 8004e3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004e3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004e42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004e46:	4b74      	ldr	r3, [pc, #464]	; (8005018 <_dtoa_r+0x2e8>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	4639      	mov	r1, r7
 8004e4e:	f7fb fa23 	bl	8000298 <__aeabi_dsub>
 8004e52:	a365      	add	r3, pc, #404	; (adr r3, 8004fe8 <_dtoa_r+0x2b8>)
 8004e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e58:	f7fb fbd6 	bl	8000608 <__aeabi_dmul>
 8004e5c:	a364      	add	r3, pc, #400	; (adr r3, 8004ff0 <_dtoa_r+0x2c0>)
 8004e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e62:	f7fb fa1b 	bl	800029c <__adddf3>
 8004e66:	4606      	mov	r6, r0
 8004e68:	4628      	mov	r0, r5
 8004e6a:	460f      	mov	r7, r1
 8004e6c:	f7fb fb62 	bl	8000534 <__aeabi_i2d>
 8004e70:	a361      	add	r3, pc, #388	; (adr r3, 8004ff8 <_dtoa_r+0x2c8>)
 8004e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e76:	f7fb fbc7 	bl	8000608 <__aeabi_dmul>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	4630      	mov	r0, r6
 8004e80:	4639      	mov	r1, r7
 8004e82:	f7fb fa0b 	bl	800029c <__adddf3>
 8004e86:	4606      	mov	r6, r0
 8004e88:	460f      	mov	r7, r1
 8004e8a:	f7fb fe6d 	bl	8000b68 <__aeabi_d2iz>
 8004e8e:	2200      	movs	r2, #0
 8004e90:	9000      	str	r0, [sp, #0]
 8004e92:	2300      	movs	r3, #0
 8004e94:	4630      	mov	r0, r6
 8004e96:	4639      	mov	r1, r7
 8004e98:	f7fb fe28 	bl	8000aec <__aeabi_dcmplt>
 8004e9c:	b150      	cbz	r0, 8004eb4 <_dtoa_r+0x184>
 8004e9e:	9800      	ldr	r0, [sp, #0]
 8004ea0:	f7fb fb48 	bl	8000534 <__aeabi_i2d>
 8004ea4:	4632      	mov	r2, r6
 8004ea6:	463b      	mov	r3, r7
 8004ea8:	f7fb fe16 	bl	8000ad8 <__aeabi_dcmpeq>
 8004eac:	b910      	cbnz	r0, 8004eb4 <_dtoa_r+0x184>
 8004eae:	9b00      	ldr	r3, [sp, #0]
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	9b00      	ldr	r3, [sp, #0]
 8004eb6:	2b16      	cmp	r3, #22
 8004eb8:	d85a      	bhi.n	8004f70 <_dtoa_r+0x240>
 8004eba:	9a00      	ldr	r2, [sp, #0]
 8004ebc:	4b57      	ldr	r3, [pc, #348]	; (800501c <_dtoa_r+0x2ec>)
 8004ebe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec6:	ec51 0b19 	vmov	r0, r1, d9
 8004eca:	f7fb fe0f 	bl	8000aec <__aeabi_dcmplt>
 8004ece:	2800      	cmp	r0, #0
 8004ed0:	d050      	beq.n	8004f74 <_dtoa_r+0x244>
 8004ed2:	9b00      	ldr	r3, [sp, #0]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	2300      	movs	r3, #0
 8004eda:	930b      	str	r3, [sp, #44]	; 0x2c
 8004edc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004ede:	1b5d      	subs	r5, r3, r5
 8004ee0:	1e6b      	subs	r3, r5, #1
 8004ee2:	9305      	str	r3, [sp, #20]
 8004ee4:	bf45      	ittet	mi
 8004ee6:	f1c5 0301 	rsbmi	r3, r5, #1
 8004eea:	9304      	strmi	r3, [sp, #16]
 8004eec:	2300      	movpl	r3, #0
 8004eee:	2300      	movmi	r3, #0
 8004ef0:	bf4c      	ite	mi
 8004ef2:	9305      	strmi	r3, [sp, #20]
 8004ef4:	9304      	strpl	r3, [sp, #16]
 8004ef6:	9b00      	ldr	r3, [sp, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	db3d      	blt.n	8004f78 <_dtoa_r+0x248>
 8004efc:	9b05      	ldr	r3, [sp, #20]
 8004efe:	9a00      	ldr	r2, [sp, #0]
 8004f00:	920a      	str	r2, [sp, #40]	; 0x28
 8004f02:	4413      	add	r3, r2
 8004f04:	9305      	str	r3, [sp, #20]
 8004f06:	2300      	movs	r3, #0
 8004f08:	9307      	str	r3, [sp, #28]
 8004f0a:	9b06      	ldr	r3, [sp, #24]
 8004f0c:	2b09      	cmp	r3, #9
 8004f0e:	f200 8089 	bhi.w	8005024 <_dtoa_r+0x2f4>
 8004f12:	2b05      	cmp	r3, #5
 8004f14:	bfc4      	itt	gt
 8004f16:	3b04      	subgt	r3, #4
 8004f18:	9306      	strgt	r3, [sp, #24]
 8004f1a:	9b06      	ldr	r3, [sp, #24]
 8004f1c:	f1a3 0302 	sub.w	r3, r3, #2
 8004f20:	bfcc      	ite	gt
 8004f22:	2500      	movgt	r5, #0
 8004f24:	2501      	movle	r5, #1
 8004f26:	2b03      	cmp	r3, #3
 8004f28:	f200 8087 	bhi.w	800503a <_dtoa_r+0x30a>
 8004f2c:	e8df f003 	tbb	[pc, r3]
 8004f30:	59383a2d 	.word	0x59383a2d
 8004f34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004f38:	441d      	add	r5, r3
 8004f3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004f3e:	2b20      	cmp	r3, #32
 8004f40:	bfc1      	itttt	gt
 8004f42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004f46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004f4a:	fa0b f303 	lslgt.w	r3, fp, r3
 8004f4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004f52:	bfda      	itte	le
 8004f54:	f1c3 0320 	rsble	r3, r3, #32
 8004f58:	fa06 f003 	lslle.w	r0, r6, r3
 8004f5c:	4318      	orrgt	r0, r3
 8004f5e:	f7fb fad9 	bl	8000514 <__aeabi_ui2d>
 8004f62:	2301      	movs	r3, #1
 8004f64:	4606      	mov	r6, r0
 8004f66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004f6a:	3d01      	subs	r5, #1
 8004f6c:	930e      	str	r3, [sp, #56]	; 0x38
 8004f6e:	e76a      	b.n	8004e46 <_dtoa_r+0x116>
 8004f70:	2301      	movs	r3, #1
 8004f72:	e7b2      	b.n	8004eda <_dtoa_r+0x1aa>
 8004f74:	900b      	str	r0, [sp, #44]	; 0x2c
 8004f76:	e7b1      	b.n	8004edc <_dtoa_r+0x1ac>
 8004f78:	9b04      	ldr	r3, [sp, #16]
 8004f7a:	9a00      	ldr	r2, [sp, #0]
 8004f7c:	1a9b      	subs	r3, r3, r2
 8004f7e:	9304      	str	r3, [sp, #16]
 8004f80:	4253      	negs	r3, r2
 8004f82:	9307      	str	r3, [sp, #28]
 8004f84:	2300      	movs	r3, #0
 8004f86:	930a      	str	r3, [sp, #40]	; 0x28
 8004f88:	e7bf      	b.n	8004f0a <_dtoa_r+0x1da>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	9308      	str	r3, [sp, #32]
 8004f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	dc55      	bgt.n	8005040 <_dtoa_r+0x310>
 8004f94:	2301      	movs	r3, #1
 8004f96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	9209      	str	r2, [sp, #36]	; 0x24
 8004f9e:	e00c      	b.n	8004fba <_dtoa_r+0x28a>
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e7f3      	b.n	8004f8c <_dtoa_r+0x25c>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fa8:	9308      	str	r3, [sp, #32]
 8004faa:	9b00      	ldr	r3, [sp, #0]
 8004fac:	4413      	add	r3, r2
 8004fae:	9302      	str	r3, [sp, #8]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	9303      	str	r3, [sp, #12]
 8004fb6:	bfb8      	it	lt
 8004fb8:	2301      	movlt	r3, #1
 8004fba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	6042      	str	r2, [r0, #4]
 8004fc0:	2204      	movs	r2, #4
 8004fc2:	f102 0614 	add.w	r6, r2, #20
 8004fc6:	429e      	cmp	r6, r3
 8004fc8:	6841      	ldr	r1, [r0, #4]
 8004fca:	d93d      	bls.n	8005048 <_dtoa_r+0x318>
 8004fcc:	4620      	mov	r0, r4
 8004fce:	f000 fd97 	bl	8005b00 <_Balloc>
 8004fd2:	9001      	str	r0, [sp, #4]
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	d13b      	bne.n	8005050 <_dtoa_r+0x320>
 8004fd8:	4b11      	ldr	r3, [pc, #68]	; (8005020 <_dtoa_r+0x2f0>)
 8004fda:	4602      	mov	r2, r0
 8004fdc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004fe0:	e6c0      	b.n	8004d64 <_dtoa_r+0x34>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e7df      	b.n	8004fa6 <_dtoa_r+0x276>
 8004fe6:	bf00      	nop
 8004fe8:	636f4361 	.word	0x636f4361
 8004fec:	3fd287a7 	.word	0x3fd287a7
 8004ff0:	8b60c8b3 	.word	0x8b60c8b3
 8004ff4:	3fc68a28 	.word	0x3fc68a28
 8004ff8:	509f79fb 	.word	0x509f79fb
 8004ffc:	3fd34413 	.word	0x3fd34413
 8005000:	08006a71 	.word	0x08006a71
 8005004:	08006a88 	.word	0x08006a88
 8005008:	7ff00000 	.word	0x7ff00000
 800500c:	08006a6d 	.word	0x08006a6d
 8005010:	08006a64 	.word	0x08006a64
 8005014:	08006a41 	.word	0x08006a41
 8005018:	3ff80000 	.word	0x3ff80000
 800501c:	08006b78 	.word	0x08006b78
 8005020:	08006ae3 	.word	0x08006ae3
 8005024:	2501      	movs	r5, #1
 8005026:	2300      	movs	r3, #0
 8005028:	9306      	str	r3, [sp, #24]
 800502a:	9508      	str	r5, [sp, #32]
 800502c:	f04f 33ff 	mov.w	r3, #4294967295
 8005030:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005034:	2200      	movs	r2, #0
 8005036:	2312      	movs	r3, #18
 8005038:	e7b0      	b.n	8004f9c <_dtoa_r+0x26c>
 800503a:	2301      	movs	r3, #1
 800503c:	9308      	str	r3, [sp, #32]
 800503e:	e7f5      	b.n	800502c <_dtoa_r+0x2fc>
 8005040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005042:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005046:	e7b8      	b.n	8004fba <_dtoa_r+0x28a>
 8005048:	3101      	adds	r1, #1
 800504a:	6041      	str	r1, [r0, #4]
 800504c:	0052      	lsls	r2, r2, #1
 800504e:	e7b8      	b.n	8004fc2 <_dtoa_r+0x292>
 8005050:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005052:	9a01      	ldr	r2, [sp, #4]
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	9b03      	ldr	r3, [sp, #12]
 8005058:	2b0e      	cmp	r3, #14
 800505a:	f200 809d 	bhi.w	8005198 <_dtoa_r+0x468>
 800505e:	2d00      	cmp	r5, #0
 8005060:	f000 809a 	beq.w	8005198 <_dtoa_r+0x468>
 8005064:	9b00      	ldr	r3, [sp, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	dd32      	ble.n	80050d0 <_dtoa_r+0x3a0>
 800506a:	4ab7      	ldr	r2, [pc, #732]	; (8005348 <_dtoa_r+0x618>)
 800506c:	f003 030f 	and.w	r3, r3, #15
 8005070:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005074:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005078:	9b00      	ldr	r3, [sp, #0]
 800507a:	05d8      	lsls	r0, r3, #23
 800507c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005080:	d516      	bpl.n	80050b0 <_dtoa_r+0x380>
 8005082:	4bb2      	ldr	r3, [pc, #712]	; (800534c <_dtoa_r+0x61c>)
 8005084:	ec51 0b19 	vmov	r0, r1, d9
 8005088:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800508c:	f7fb fbe6 	bl	800085c <__aeabi_ddiv>
 8005090:	f007 070f 	and.w	r7, r7, #15
 8005094:	4682      	mov	sl, r0
 8005096:	468b      	mov	fp, r1
 8005098:	2503      	movs	r5, #3
 800509a:	4eac      	ldr	r6, [pc, #688]	; (800534c <_dtoa_r+0x61c>)
 800509c:	b957      	cbnz	r7, 80050b4 <_dtoa_r+0x384>
 800509e:	4642      	mov	r2, r8
 80050a0:	464b      	mov	r3, r9
 80050a2:	4650      	mov	r0, sl
 80050a4:	4659      	mov	r1, fp
 80050a6:	f7fb fbd9 	bl	800085c <__aeabi_ddiv>
 80050aa:	4682      	mov	sl, r0
 80050ac:	468b      	mov	fp, r1
 80050ae:	e028      	b.n	8005102 <_dtoa_r+0x3d2>
 80050b0:	2502      	movs	r5, #2
 80050b2:	e7f2      	b.n	800509a <_dtoa_r+0x36a>
 80050b4:	07f9      	lsls	r1, r7, #31
 80050b6:	d508      	bpl.n	80050ca <_dtoa_r+0x39a>
 80050b8:	4640      	mov	r0, r8
 80050ba:	4649      	mov	r1, r9
 80050bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80050c0:	f7fb faa2 	bl	8000608 <__aeabi_dmul>
 80050c4:	3501      	adds	r5, #1
 80050c6:	4680      	mov	r8, r0
 80050c8:	4689      	mov	r9, r1
 80050ca:	107f      	asrs	r7, r7, #1
 80050cc:	3608      	adds	r6, #8
 80050ce:	e7e5      	b.n	800509c <_dtoa_r+0x36c>
 80050d0:	f000 809b 	beq.w	800520a <_dtoa_r+0x4da>
 80050d4:	9b00      	ldr	r3, [sp, #0]
 80050d6:	4f9d      	ldr	r7, [pc, #628]	; (800534c <_dtoa_r+0x61c>)
 80050d8:	425e      	negs	r6, r3
 80050da:	4b9b      	ldr	r3, [pc, #620]	; (8005348 <_dtoa_r+0x618>)
 80050dc:	f006 020f 	and.w	r2, r6, #15
 80050e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e8:	ec51 0b19 	vmov	r0, r1, d9
 80050ec:	f7fb fa8c 	bl	8000608 <__aeabi_dmul>
 80050f0:	1136      	asrs	r6, r6, #4
 80050f2:	4682      	mov	sl, r0
 80050f4:	468b      	mov	fp, r1
 80050f6:	2300      	movs	r3, #0
 80050f8:	2502      	movs	r5, #2
 80050fa:	2e00      	cmp	r6, #0
 80050fc:	d17a      	bne.n	80051f4 <_dtoa_r+0x4c4>
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1d3      	bne.n	80050aa <_dtoa_r+0x37a>
 8005102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 8082 	beq.w	800520e <_dtoa_r+0x4de>
 800510a:	4b91      	ldr	r3, [pc, #580]	; (8005350 <_dtoa_r+0x620>)
 800510c:	2200      	movs	r2, #0
 800510e:	4650      	mov	r0, sl
 8005110:	4659      	mov	r1, fp
 8005112:	f7fb fceb 	bl	8000aec <__aeabi_dcmplt>
 8005116:	2800      	cmp	r0, #0
 8005118:	d079      	beq.n	800520e <_dtoa_r+0x4de>
 800511a:	9b03      	ldr	r3, [sp, #12]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d076      	beq.n	800520e <_dtoa_r+0x4de>
 8005120:	9b02      	ldr	r3, [sp, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	dd36      	ble.n	8005194 <_dtoa_r+0x464>
 8005126:	9b00      	ldr	r3, [sp, #0]
 8005128:	4650      	mov	r0, sl
 800512a:	4659      	mov	r1, fp
 800512c:	1e5f      	subs	r7, r3, #1
 800512e:	2200      	movs	r2, #0
 8005130:	4b88      	ldr	r3, [pc, #544]	; (8005354 <_dtoa_r+0x624>)
 8005132:	f7fb fa69 	bl	8000608 <__aeabi_dmul>
 8005136:	9e02      	ldr	r6, [sp, #8]
 8005138:	4682      	mov	sl, r0
 800513a:	468b      	mov	fp, r1
 800513c:	3501      	adds	r5, #1
 800513e:	4628      	mov	r0, r5
 8005140:	f7fb f9f8 	bl	8000534 <__aeabi_i2d>
 8005144:	4652      	mov	r2, sl
 8005146:	465b      	mov	r3, fp
 8005148:	f7fb fa5e 	bl	8000608 <__aeabi_dmul>
 800514c:	4b82      	ldr	r3, [pc, #520]	; (8005358 <_dtoa_r+0x628>)
 800514e:	2200      	movs	r2, #0
 8005150:	f7fb f8a4 	bl	800029c <__adddf3>
 8005154:	46d0      	mov	r8, sl
 8005156:	46d9      	mov	r9, fp
 8005158:	4682      	mov	sl, r0
 800515a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800515e:	2e00      	cmp	r6, #0
 8005160:	d158      	bne.n	8005214 <_dtoa_r+0x4e4>
 8005162:	4b7e      	ldr	r3, [pc, #504]	; (800535c <_dtoa_r+0x62c>)
 8005164:	2200      	movs	r2, #0
 8005166:	4640      	mov	r0, r8
 8005168:	4649      	mov	r1, r9
 800516a:	f7fb f895 	bl	8000298 <__aeabi_dsub>
 800516e:	4652      	mov	r2, sl
 8005170:	465b      	mov	r3, fp
 8005172:	4680      	mov	r8, r0
 8005174:	4689      	mov	r9, r1
 8005176:	f7fb fcd7 	bl	8000b28 <__aeabi_dcmpgt>
 800517a:	2800      	cmp	r0, #0
 800517c:	f040 8295 	bne.w	80056aa <_dtoa_r+0x97a>
 8005180:	4652      	mov	r2, sl
 8005182:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005186:	4640      	mov	r0, r8
 8005188:	4649      	mov	r1, r9
 800518a:	f7fb fcaf 	bl	8000aec <__aeabi_dcmplt>
 800518e:	2800      	cmp	r0, #0
 8005190:	f040 8289 	bne.w	80056a6 <_dtoa_r+0x976>
 8005194:	ec5b ab19 	vmov	sl, fp, d9
 8005198:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800519a:	2b00      	cmp	r3, #0
 800519c:	f2c0 8148 	blt.w	8005430 <_dtoa_r+0x700>
 80051a0:	9a00      	ldr	r2, [sp, #0]
 80051a2:	2a0e      	cmp	r2, #14
 80051a4:	f300 8144 	bgt.w	8005430 <_dtoa_r+0x700>
 80051a8:	4b67      	ldr	r3, [pc, #412]	; (8005348 <_dtoa_r+0x618>)
 80051aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80051b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f280 80d5 	bge.w	8005364 <_dtoa_r+0x634>
 80051ba:	9b03      	ldr	r3, [sp, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f300 80d1 	bgt.w	8005364 <_dtoa_r+0x634>
 80051c2:	f040 826f 	bne.w	80056a4 <_dtoa_r+0x974>
 80051c6:	4b65      	ldr	r3, [pc, #404]	; (800535c <_dtoa_r+0x62c>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	4640      	mov	r0, r8
 80051cc:	4649      	mov	r1, r9
 80051ce:	f7fb fa1b 	bl	8000608 <__aeabi_dmul>
 80051d2:	4652      	mov	r2, sl
 80051d4:	465b      	mov	r3, fp
 80051d6:	f7fb fc9d 	bl	8000b14 <__aeabi_dcmpge>
 80051da:	9e03      	ldr	r6, [sp, #12]
 80051dc:	4637      	mov	r7, r6
 80051de:	2800      	cmp	r0, #0
 80051e0:	f040 8245 	bne.w	800566e <_dtoa_r+0x93e>
 80051e4:	9d01      	ldr	r5, [sp, #4]
 80051e6:	2331      	movs	r3, #49	; 0x31
 80051e8:	f805 3b01 	strb.w	r3, [r5], #1
 80051ec:	9b00      	ldr	r3, [sp, #0]
 80051ee:	3301      	adds	r3, #1
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	e240      	b.n	8005676 <_dtoa_r+0x946>
 80051f4:	07f2      	lsls	r2, r6, #31
 80051f6:	d505      	bpl.n	8005204 <_dtoa_r+0x4d4>
 80051f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051fc:	f7fb fa04 	bl	8000608 <__aeabi_dmul>
 8005200:	3501      	adds	r5, #1
 8005202:	2301      	movs	r3, #1
 8005204:	1076      	asrs	r6, r6, #1
 8005206:	3708      	adds	r7, #8
 8005208:	e777      	b.n	80050fa <_dtoa_r+0x3ca>
 800520a:	2502      	movs	r5, #2
 800520c:	e779      	b.n	8005102 <_dtoa_r+0x3d2>
 800520e:	9f00      	ldr	r7, [sp, #0]
 8005210:	9e03      	ldr	r6, [sp, #12]
 8005212:	e794      	b.n	800513e <_dtoa_r+0x40e>
 8005214:	9901      	ldr	r1, [sp, #4]
 8005216:	4b4c      	ldr	r3, [pc, #304]	; (8005348 <_dtoa_r+0x618>)
 8005218:	4431      	add	r1, r6
 800521a:	910d      	str	r1, [sp, #52]	; 0x34
 800521c:	9908      	ldr	r1, [sp, #32]
 800521e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005222:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005226:	2900      	cmp	r1, #0
 8005228:	d043      	beq.n	80052b2 <_dtoa_r+0x582>
 800522a:	494d      	ldr	r1, [pc, #308]	; (8005360 <_dtoa_r+0x630>)
 800522c:	2000      	movs	r0, #0
 800522e:	f7fb fb15 	bl	800085c <__aeabi_ddiv>
 8005232:	4652      	mov	r2, sl
 8005234:	465b      	mov	r3, fp
 8005236:	f7fb f82f 	bl	8000298 <__aeabi_dsub>
 800523a:	9d01      	ldr	r5, [sp, #4]
 800523c:	4682      	mov	sl, r0
 800523e:	468b      	mov	fp, r1
 8005240:	4649      	mov	r1, r9
 8005242:	4640      	mov	r0, r8
 8005244:	f7fb fc90 	bl	8000b68 <__aeabi_d2iz>
 8005248:	4606      	mov	r6, r0
 800524a:	f7fb f973 	bl	8000534 <__aeabi_i2d>
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	4640      	mov	r0, r8
 8005254:	4649      	mov	r1, r9
 8005256:	f7fb f81f 	bl	8000298 <__aeabi_dsub>
 800525a:	3630      	adds	r6, #48	; 0x30
 800525c:	f805 6b01 	strb.w	r6, [r5], #1
 8005260:	4652      	mov	r2, sl
 8005262:	465b      	mov	r3, fp
 8005264:	4680      	mov	r8, r0
 8005266:	4689      	mov	r9, r1
 8005268:	f7fb fc40 	bl	8000aec <__aeabi_dcmplt>
 800526c:	2800      	cmp	r0, #0
 800526e:	d163      	bne.n	8005338 <_dtoa_r+0x608>
 8005270:	4642      	mov	r2, r8
 8005272:	464b      	mov	r3, r9
 8005274:	4936      	ldr	r1, [pc, #216]	; (8005350 <_dtoa_r+0x620>)
 8005276:	2000      	movs	r0, #0
 8005278:	f7fb f80e 	bl	8000298 <__aeabi_dsub>
 800527c:	4652      	mov	r2, sl
 800527e:	465b      	mov	r3, fp
 8005280:	f7fb fc34 	bl	8000aec <__aeabi_dcmplt>
 8005284:	2800      	cmp	r0, #0
 8005286:	f040 80b5 	bne.w	80053f4 <_dtoa_r+0x6c4>
 800528a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800528c:	429d      	cmp	r5, r3
 800528e:	d081      	beq.n	8005194 <_dtoa_r+0x464>
 8005290:	4b30      	ldr	r3, [pc, #192]	; (8005354 <_dtoa_r+0x624>)
 8005292:	2200      	movs	r2, #0
 8005294:	4650      	mov	r0, sl
 8005296:	4659      	mov	r1, fp
 8005298:	f7fb f9b6 	bl	8000608 <__aeabi_dmul>
 800529c:	4b2d      	ldr	r3, [pc, #180]	; (8005354 <_dtoa_r+0x624>)
 800529e:	4682      	mov	sl, r0
 80052a0:	468b      	mov	fp, r1
 80052a2:	4640      	mov	r0, r8
 80052a4:	4649      	mov	r1, r9
 80052a6:	2200      	movs	r2, #0
 80052a8:	f7fb f9ae 	bl	8000608 <__aeabi_dmul>
 80052ac:	4680      	mov	r8, r0
 80052ae:	4689      	mov	r9, r1
 80052b0:	e7c6      	b.n	8005240 <_dtoa_r+0x510>
 80052b2:	4650      	mov	r0, sl
 80052b4:	4659      	mov	r1, fp
 80052b6:	f7fb f9a7 	bl	8000608 <__aeabi_dmul>
 80052ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052bc:	9d01      	ldr	r5, [sp, #4]
 80052be:	930f      	str	r3, [sp, #60]	; 0x3c
 80052c0:	4682      	mov	sl, r0
 80052c2:	468b      	mov	fp, r1
 80052c4:	4649      	mov	r1, r9
 80052c6:	4640      	mov	r0, r8
 80052c8:	f7fb fc4e 	bl	8000b68 <__aeabi_d2iz>
 80052cc:	4606      	mov	r6, r0
 80052ce:	f7fb f931 	bl	8000534 <__aeabi_i2d>
 80052d2:	3630      	adds	r6, #48	; 0x30
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	4640      	mov	r0, r8
 80052da:	4649      	mov	r1, r9
 80052dc:	f7fa ffdc 	bl	8000298 <__aeabi_dsub>
 80052e0:	f805 6b01 	strb.w	r6, [r5], #1
 80052e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052e6:	429d      	cmp	r5, r3
 80052e8:	4680      	mov	r8, r0
 80052ea:	4689      	mov	r9, r1
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	d124      	bne.n	800533c <_dtoa_r+0x60c>
 80052f2:	4b1b      	ldr	r3, [pc, #108]	; (8005360 <_dtoa_r+0x630>)
 80052f4:	4650      	mov	r0, sl
 80052f6:	4659      	mov	r1, fp
 80052f8:	f7fa ffd0 	bl	800029c <__adddf3>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	4640      	mov	r0, r8
 8005302:	4649      	mov	r1, r9
 8005304:	f7fb fc10 	bl	8000b28 <__aeabi_dcmpgt>
 8005308:	2800      	cmp	r0, #0
 800530a:	d173      	bne.n	80053f4 <_dtoa_r+0x6c4>
 800530c:	4652      	mov	r2, sl
 800530e:	465b      	mov	r3, fp
 8005310:	4913      	ldr	r1, [pc, #76]	; (8005360 <_dtoa_r+0x630>)
 8005312:	2000      	movs	r0, #0
 8005314:	f7fa ffc0 	bl	8000298 <__aeabi_dsub>
 8005318:	4602      	mov	r2, r0
 800531a:	460b      	mov	r3, r1
 800531c:	4640      	mov	r0, r8
 800531e:	4649      	mov	r1, r9
 8005320:	f7fb fbe4 	bl	8000aec <__aeabi_dcmplt>
 8005324:	2800      	cmp	r0, #0
 8005326:	f43f af35 	beq.w	8005194 <_dtoa_r+0x464>
 800532a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800532c:	1e6b      	subs	r3, r5, #1
 800532e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005330:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005334:	2b30      	cmp	r3, #48	; 0x30
 8005336:	d0f8      	beq.n	800532a <_dtoa_r+0x5fa>
 8005338:	9700      	str	r7, [sp, #0]
 800533a:	e049      	b.n	80053d0 <_dtoa_r+0x6a0>
 800533c:	4b05      	ldr	r3, [pc, #20]	; (8005354 <_dtoa_r+0x624>)
 800533e:	f7fb f963 	bl	8000608 <__aeabi_dmul>
 8005342:	4680      	mov	r8, r0
 8005344:	4689      	mov	r9, r1
 8005346:	e7bd      	b.n	80052c4 <_dtoa_r+0x594>
 8005348:	08006b78 	.word	0x08006b78
 800534c:	08006b50 	.word	0x08006b50
 8005350:	3ff00000 	.word	0x3ff00000
 8005354:	40240000 	.word	0x40240000
 8005358:	401c0000 	.word	0x401c0000
 800535c:	40140000 	.word	0x40140000
 8005360:	3fe00000 	.word	0x3fe00000
 8005364:	9d01      	ldr	r5, [sp, #4]
 8005366:	4656      	mov	r6, sl
 8005368:	465f      	mov	r7, fp
 800536a:	4642      	mov	r2, r8
 800536c:	464b      	mov	r3, r9
 800536e:	4630      	mov	r0, r6
 8005370:	4639      	mov	r1, r7
 8005372:	f7fb fa73 	bl	800085c <__aeabi_ddiv>
 8005376:	f7fb fbf7 	bl	8000b68 <__aeabi_d2iz>
 800537a:	4682      	mov	sl, r0
 800537c:	f7fb f8da 	bl	8000534 <__aeabi_i2d>
 8005380:	4642      	mov	r2, r8
 8005382:	464b      	mov	r3, r9
 8005384:	f7fb f940 	bl	8000608 <__aeabi_dmul>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4630      	mov	r0, r6
 800538e:	4639      	mov	r1, r7
 8005390:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005394:	f7fa ff80 	bl	8000298 <__aeabi_dsub>
 8005398:	f805 6b01 	strb.w	r6, [r5], #1
 800539c:	9e01      	ldr	r6, [sp, #4]
 800539e:	9f03      	ldr	r7, [sp, #12]
 80053a0:	1bae      	subs	r6, r5, r6
 80053a2:	42b7      	cmp	r7, r6
 80053a4:	4602      	mov	r2, r0
 80053a6:	460b      	mov	r3, r1
 80053a8:	d135      	bne.n	8005416 <_dtoa_r+0x6e6>
 80053aa:	f7fa ff77 	bl	800029c <__adddf3>
 80053ae:	4642      	mov	r2, r8
 80053b0:	464b      	mov	r3, r9
 80053b2:	4606      	mov	r6, r0
 80053b4:	460f      	mov	r7, r1
 80053b6:	f7fb fbb7 	bl	8000b28 <__aeabi_dcmpgt>
 80053ba:	b9d0      	cbnz	r0, 80053f2 <_dtoa_r+0x6c2>
 80053bc:	4642      	mov	r2, r8
 80053be:	464b      	mov	r3, r9
 80053c0:	4630      	mov	r0, r6
 80053c2:	4639      	mov	r1, r7
 80053c4:	f7fb fb88 	bl	8000ad8 <__aeabi_dcmpeq>
 80053c8:	b110      	cbz	r0, 80053d0 <_dtoa_r+0x6a0>
 80053ca:	f01a 0f01 	tst.w	sl, #1
 80053ce:	d110      	bne.n	80053f2 <_dtoa_r+0x6c2>
 80053d0:	4620      	mov	r0, r4
 80053d2:	ee18 1a10 	vmov	r1, s16
 80053d6:	f000 fbd3 	bl	8005b80 <_Bfree>
 80053da:	2300      	movs	r3, #0
 80053dc:	9800      	ldr	r0, [sp, #0]
 80053de:	702b      	strb	r3, [r5, #0]
 80053e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053e2:	3001      	adds	r0, #1
 80053e4:	6018      	str	r0, [r3, #0]
 80053e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f43f acf1 	beq.w	8004dd0 <_dtoa_r+0xa0>
 80053ee:	601d      	str	r5, [r3, #0]
 80053f0:	e4ee      	b.n	8004dd0 <_dtoa_r+0xa0>
 80053f2:	9f00      	ldr	r7, [sp, #0]
 80053f4:	462b      	mov	r3, r5
 80053f6:	461d      	mov	r5, r3
 80053f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80053fc:	2a39      	cmp	r2, #57	; 0x39
 80053fe:	d106      	bne.n	800540e <_dtoa_r+0x6de>
 8005400:	9a01      	ldr	r2, [sp, #4]
 8005402:	429a      	cmp	r2, r3
 8005404:	d1f7      	bne.n	80053f6 <_dtoa_r+0x6c6>
 8005406:	9901      	ldr	r1, [sp, #4]
 8005408:	2230      	movs	r2, #48	; 0x30
 800540a:	3701      	adds	r7, #1
 800540c:	700a      	strb	r2, [r1, #0]
 800540e:	781a      	ldrb	r2, [r3, #0]
 8005410:	3201      	adds	r2, #1
 8005412:	701a      	strb	r2, [r3, #0]
 8005414:	e790      	b.n	8005338 <_dtoa_r+0x608>
 8005416:	4ba6      	ldr	r3, [pc, #664]	; (80056b0 <_dtoa_r+0x980>)
 8005418:	2200      	movs	r2, #0
 800541a:	f7fb f8f5 	bl	8000608 <__aeabi_dmul>
 800541e:	2200      	movs	r2, #0
 8005420:	2300      	movs	r3, #0
 8005422:	4606      	mov	r6, r0
 8005424:	460f      	mov	r7, r1
 8005426:	f7fb fb57 	bl	8000ad8 <__aeabi_dcmpeq>
 800542a:	2800      	cmp	r0, #0
 800542c:	d09d      	beq.n	800536a <_dtoa_r+0x63a>
 800542e:	e7cf      	b.n	80053d0 <_dtoa_r+0x6a0>
 8005430:	9a08      	ldr	r2, [sp, #32]
 8005432:	2a00      	cmp	r2, #0
 8005434:	f000 80d7 	beq.w	80055e6 <_dtoa_r+0x8b6>
 8005438:	9a06      	ldr	r2, [sp, #24]
 800543a:	2a01      	cmp	r2, #1
 800543c:	f300 80ba 	bgt.w	80055b4 <_dtoa_r+0x884>
 8005440:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005442:	2a00      	cmp	r2, #0
 8005444:	f000 80b2 	beq.w	80055ac <_dtoa_r+0x87c>
 8005448:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800544c:	9e07      	ldr	r6, [sp, #28]
 800544e:	9d04      	ldr	r5, [sp, #16]
 8005450:	9a04      	ldr	r2, [sp, #16]
 8005452:	441a      	add	r2, r3
 8005454:	9204      	str	r2, [sp, #16]
 8005456:	9a05      	ldr	r2, [sp, #20]
 8005458:	2101      	movs	r1, #1
 800545a:	441a      	add	r2, r3
 800545c:	4620      	mov	r0, r4
 800545e:	9205      	str	r2, [sp, #20]
 8005460:	f000 fc46 	bl	8005cf0 <__i2b>
 8005464:	4607      	mov	r7, r0
 8005466:	2d00      	cmp	r5, #0
 8005468:	dd0c      	ble.n	8005484 <_dtoa_r+0x754>
 800546a:	9b05      	ldr	r3, [sp, #20]
 800546c:	2b00      	cmp	r3, #0
 800546e:	dd09      	ble.n	8005484 <_dtoa_r+0x754>
 8005470:	42ab      	cmp	r3, r5
 8005472:	9a04      	ldr	r2, [sp, #16]
 8005474:	bfa8      	it	ge
 8005476:	462b      	movge	r3, r5
 8005478:	1ad2      	subs	r2, r2, r3
 800547a:	9204      	str	r2, [sp, #16]
 800547c:	9a05      	ldr	r2, [sp, #20]
 800547e:	1aed      	subs	r5, r5, r3
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	9305      	str	r3, [sp, #20]
 8005484:	9b07      	ldr	r3, [sp, #28]
 8005486:	b31b      	cbz	r3, 80054d0 <_dtoa_r+0x7a0>
 8005488:	9b08      	ldr	r3, [sp, #32]
 800548a:	2b00      	cmp	r3, #0
 800548c:	f000 80af 	beq.w	80055ee <_dtoa_r+0x8be>
 8005490:	2e00      	cmp	r6, #0
 8005492:	dd13      	ble.n	80054bc <_dtoa_r+0x78c>
 8005494:	4639      	mov	r1, r7
 8005496:	4632      	mov	r2, r6
 8005498:	4620      	mov	r0, r4
 800549a:	f000 fce9 	bl	8005e70 <__pow5mult>
 800549e:	ee18 2a10 	vmov	r2, s16
 80054a2:	4601      	mov	r1, r0
 80054a4:	4607      	mov	r7, r0
 80054a6:	4620      	mov	r0, r4
 80054a8:	f000 fc38 	bl	8005d1c <__multiply>
 80054ac:	ee18 1a10 	vmov	r1, s16
 80054b0:	4680      	mov	r8, r0
 80054b2:	4620      	mov	r0, r4
 80054b4:	f000 fb64 	bl	8005b80 <_Bfree>
 80054b8:	ee08 8a10 	vmov	s16, r8
 80054bc:	9b07      	ldr	r3, [sp, #28]
 80054be:	1b9a      	subs	r2, r3, r6
 80054c0:	d006      	beq.n	80054d0 <_dtoa_r+0x7a0>
 80054c2:	ee18 1a10 	vmov	r1, s16
 80054c6:	4620      	mov	r0, r4
 80054c8:	f000 fcd2 	bl	8005e70 <__pow5mult>
 80054cc:	ee08 0a10 	vmov	s16, r0
 80054d0:	2101      	movs	r1, #1
 80054d2:	4620      	mov	r0, r4
 80054d4:	f000 fc0c 	bl	8005cf0 <__i2b>
 80054d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054da:	2b00      	cmp	r3, #0
 80054dc:	4606      	mov	r6, r0
 80054de:	f340 8088 	ble.w	80055f2 <_dtoa_r+0x8c2>
 80054e2:	461a      	mov	r2, r3
 80054e4:	4601      	mov	r1, r0
 80054e6:	4620      	mov	r0, r4
 80054e8:	f000 fcc2 	bl	8005e70 <__pow5mult>
 80054ec:	9b06      	ldr	r3, [sp, #24]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	4606      	mov	r6, r0
 80054f2:	f340 8081 	ble.w	80055f8 <_dtoa_r+0x8c8>
 80054f6:	f04f 0800 	mov.w	r8, #0
 80054fa:	6933      	ldr	r3, [r6, #16]
 80054fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005500:	6918      	ldr	r0, [r3, #16]
 8005502:	f000 fba5 	bl	8005c50 <__hi0bits>
 8005506:	f1c0 0020 	rsb	r0, r0, #32
 800550a:	9b05      	ldr	r3, [sp, #20]
 800550c:	4418      	add	r0, r3
 800550e:	f010 001f 	ands.w	r0, r0, #31
 8005512:	f000 8092 	beq.w	800563a <_dtoa_r+0x90a>
 8005516:	f1c0 0320 	rsb	r3, r0, #32
 800551a:	2b04      	cmp	r3, #4
 800551c:	f340 808a 	ble.w	8005634 <_dtoa_r+0x904>
 8005520:	f1c0 001c 	rsb	r0, r0, #28
 8005524:	9b04      	ldr	r3, [sp, #16]
 8005526:	4403      	add	r3, r0
 8005528:	9304      	str	r3, [sp, #16]
 800552a:	9b05      	ldr	r3, [sp, #20]
 800552c:	4403      	add	r3, r0
 800552e:	4405      	add	r5, r0
 8005530:	9305      	str	r3, [sp, #20]
 8005532:	9b04      	ldr	r3, [sp, #16]
 8005534:	2b00      	cmp	r3, #0
 8005536:	dd07      	ble.n	8005548 <_dtoa_r+0x818>
 8005538:	ee18 1a10 	vmov	r1, s16
 800553c:	461a      	mov	r2, r3
 800553e:	4620      	mov	r0, r4
 8005540:	f000 fcf0 	bl	8005f24 <__lshift>
 8005544:	ee08 0a10 	vmov	s16, r0
 8005548:	9b05      	ldr	r3, [sp, #20]
 800554a:	2b00      	cmp	r3, #0
 800554c:	dd05      	ble.n	800555a <_dtoa_r+0x82a>
 800554e:	4631      	mov	r1, r6
 8005550:	461a      	mov	r2, r3
 8005552:	4620      	mov	r0, r4
 8005554:	f000 fce6 	bl	8005f24 <__lshift>
 8005558:	4606      	mov	r6, r0
 800555a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800555c:	2b00      	cmp	r3, #0
 800555e:	d06e      	beq.n	800563e <_dtoa_r+0x90e>
 8005560:	ee18 0a10 	vmov	r0, s16
 8005564:	4631      	mov	r1, r6
 8005566:	f000 fd4d 	bl	8006004 <__mcmp>
 800556a:	2800      	cmp	r0, #0
 800556c:	da67      	bge.n	800563e <_dtoa_r+0x90e>
 800556e:	9b00      	ldr	r3, [sp, #0]
 8005570:	3b01      	subs	r3, #1
 8005572:	ee18 1a10 	vmov	r1, s16
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	220a      	movs	r2, #10
 800557a:	2300      	movs	r3, #0
 800557c:	4620      	mov	r0, r4
 800557e:	f000 fb21 	bl	8005bc4 <__multadd>
 8005582:	9b08      	ldr	r3, [sp, #32]
 8005584:	ee08 0a10 	vmov	s16, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 81b1 	beq.w	80058f0 <_dtoa_r+0xbc0>
 800558e:	2300      	movs	r3, #0
 8005590:	4639      	mov	r1, r7
 8005592:	220a      	movs	r2, #10
 8005594:	4620      	mov	r0, r4
 8005596:	f000 fb15 	bl	8005bc4 <__multadd>
 800559a:	9b02      	ldr	r3, [sp, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	4607      	mov	r7, r0
 80055a0:	f300 808e 	bgt.w	80056c0 <_dtoa_r+0x990>
 80055a4:	9b06      	ldr	r3, [sp, #24]
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	dc51      	bgt.n	800564e <_dtoa_r+0x91e>
 80055aa:	e089      	b.n	80056c0 <_dtoa_r+0x990>
 80055ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80055ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80055b2:	e74b      	b.n	800544c <_dtoa_r+0x71c>
 80055b4:	9b03      	ldr	r3, [sp, #12]
 80055b6:	1e5e      	subs	r6, r3, #1
 80055b8:	9b07      	ldr	r3, [sp, #28]
 80055ba:	42b3      	cmp	r3, r6
 80055bc:	bfbf      	itttt	lt
 80055be:	9b07      	ldrlt	r3, [sp, #28]
 80055c0:	9607      	strlt	r6, [sp, #28]
 80055c2:	1af2      	sublt	r2, r6, r3
 80055c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80055c6:	bfb6      	itet	lt
 80055c8:	189b      	addlt	r3, r3, r2
 80055ca:	1b9e      	subge	r6, r3, r6
 80055cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80055ce:	9b03      	ldr	r3, [sp, #12]
 80055d0:	bfb8      	it	lt
 80055d2:	2600      	movlt	r6, #0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	bfb7      	itett	lt
 80055d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80055dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80055e0:	1a9d      	sublt	r5, r3, r2
 80055e2:	2300      	movlt	r3, #0
 80055e4:	e734      	b.n	8005450 <_dtoa_r+0x720>
 80055e6:	9e07      	ldr	r6, [sp, #28]
 80055e8:	9d04      	ldr	r5, [sp, #16]
 80055ea:	9f08      	ldr	r7, [sp, #32]
 80055ec:	e73b      	b.n	8005466 <_dtoa_r+0x736>
 80055ee:	9a07      	ldr	r2, [sp, #28]
 80055f0:	e767      	b.n	80054c2 <_dtoa_r+0x792>
 80055f2:	9b06      	ldr	r3, [sp, #24]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	dc18      	bgt.n	800562a <_dtoa_r+0x8fa>
 80055f8:	f1ba 0f00 	cmp.w	sl, #0
 80055fc:	d115      	bne.n	800562a <_dtoa_r+0x8fa>
 80055fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005602:	b993      	cbnz	r3, 800562a <_dtoa_r+0x8fa>
 8005604:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005608:	0d1b      	lsrs	r3, r3, #20
 800560a:	051b      	lsls	r3, r3, #20
 800560c:	b183      	cbz	r3, 8005630 <_dtoa_r+0x900>
 800560e:	9b04      	ldr	r3, [sp, #16]
 8005610:	3301      	adds	r3, #1
 8005612:	9304      	str	r3, [sp, #16]
 8005614:	9b05      	ldr	r3, [sp, #20]
 8005616:	3301      	adds	r3, #1
 8005618:	9305      	str	r3, [sp, #20]
 800561a:	f04f 0801 	mov.w	r8, #1
 800561e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005620:	2b00      	cmp	r3, #0
 8005622:	f47f af6a 	bne.w	80054fa <_dtoa_r+0x7ca>
 8005626:	2001      	movs	r0, #1
 8005628:	e76f      	b.n	800550a <_dtoa_r+0x7da>
 800562a:	f04f 0800 	mov.w	r8, #0
 800562e:	e7f6      	b.n	800561e <_dtoa_r+0x8ee>
 8005630:	4698      	mov	r8, r3
 8005632:	e7f4      	b.n	800561e <_dtoa_r+0x8ee>
 8005634:	f43f af7d 	beq.w	8005532 <_dtoa_r+0x802>
 8005638:	4618      	mov	r0, r3
 800563a:	301c      	adds	r0, #28
 800563c:	e772      	b.n	8005524 <_dtoa_r+0x7f4>
 800563e:	9b03      	ldr	r3, [sp, #12]
 8005640:	2b00      	cmp	r3, #0
 8005642:	dc37      	bgt.n	80056b4 <_dtoa_r+0x984>
 8005644:	9b06      	ldr	r3, [sp, #24]
 8005646:	2b02      	cmp	r3, #2
 8005648:	dd34      	ble.n	80056b4 <_dtoa_r+0x984>
 800564a:	9b03      	ldr	r3, [sp, #12]
 800564c:	9302      	str	r3, [sp, #8]
 800564e:	9b02      	ldr	r3, [sp, #8]
 8005650:	b96b      	cbnz	r3, 800566e <_dtoa_r+0x93e>
 8005652:	4631      	mov	r1, r6
 8005654:	2205      	movs	r2, #5
 8005656:	4620      	mov	r0, r4
 8005658:	f000 fab4 	bl	8005bc4 <__multadd>
 800565c:	4601      	mov	r1, r0
 800565e:	4606      	mov	r6, r0
 8005660:	ee18 0a10 	vmov	r0, s16
 8005664:	f000 fcce 	bl	8006004 <__mcmp>
 8005668:	2800      	cmp	r0, #0
 800566a:	f73f adbb 	bgt.w	80051e4 <_dtoa_r+0x4b4>
 800566e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005670:	9d01      	ldr	r5, [sp, #4]
 8005672:	43db      	mvns	r3, r3
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	f04f 0800 	mov.w	r8, #0
 800567a:	4631      	mov	r1, r6
 800567c:	4620      	mov	r0, r4
 800567e:	f000 fa7f 	bl	8005b80 <_Bfree>
 8005682:	2f00      	cmp	r7, #0
 8005684:	f43f aea4 	beq.w	80053d0 <_dtoa_r+0x6a0>
 8005688:	f1b8 0f00 	cmp.w	r8, #0
 800568c:	d005      	beq.n	800569a <_dtoa_r+0x96a>
 800568e:	45b8      	cmp	r8, r7
 8005690:	d003      	beq.n	800569a <_dtoa_r+0x96a>
 8005692:	4641      	mov	r1, r8
 8005694:	4620      	mov	r0, r4
 8005696:	f000 fa73 	bl	8005b80 <_Bfree>
 800569a:	4639      	mov	r1, r7
 800569c:	4620      	mov	r0, r4
 800569e:	f000 fa6f 	bl	8005b80 <_Bfree>
 80056a2:	e695      	b.n	80053d0 <_dtoa_r+0x6a0>
 80056a4:	2600      	movs	r6, #0
 80056a6:	4637      	mov	r7, r6
 80056a8:	e7e1      	b.n	800566e <_dtoa_r+0x93e>
 80056aa:	9700      	str	r7, [sp, #0]
 80056ac:	4637      	mov	r7, r6
 80056ae:	e599      	b.n	80051e4 <_dtoa_r+0x4b4>
 80056b0:	40240000 	.word	0x40240000
 80056b4:	9b08      	ldr	r3, [sp, #32]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 80ca 	beq.w	8005850 <_dtoa_r+0xb20>
 80056bc:	9b03      	ldr	r3, [sp, #12]
 80056be:	9302      	str	r3, [sp, #8]
 80056c0:	2d00      	cmp	r5, #0
 80056c2:	dd05      	ble.n	80056d0 <_dtoa_r+0x9a0>
 80056c4:	4639      	mov	r1, r7
 80056c6:	462a      	mov	r2, r5
 80056c8:	4620      	mov	r0, r4
 80056ca:	f000 fc2b 	bl	8005f24 <__lshift>
 80056ce:	4607      	mov	r7, r0
 80056d0:	f1b8 0f00 	cmp.w	r8, #0
 80056d4:	d05b      	beq.n	800578e <_dtoa_r+0xa5e>
 80056d6:	6879      	ldr	r1, [r7, #4]
 80056d8:	4620      	mov	r0, r4
 80056da:	f000 fa11 	bl	8005b00 <_Balloc>
 80056de:	4605      	mov	r5, r0
 80056e0:	b928      	cbnz	r0, 80056ee <_dtoa_r+0x9be>
 80056e2:	4b87      	ldr	r3, [pc, #540]	; (8005900 <_dtoa_r+0xbd0>)
 80056e4:	4602      	mov	r2, r0
 80056e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80056ea:	f7ff bb3b 	b.w	8004d64 <_dtoa_r+0x34>
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	3202      	adds	r2, #2
 80056f2:	0092      	lsls	r2, r2, #2
 80056f4:	f107 010c 	add.w	r1, r7, #12
 80056f8:	300c      	adds	r0, #12
 80056fa:	f000 f9e7 	bl	8005acc <memcpy>
 80056fe:	2201      	movs	r2, #1
 8005700:	4629      	mov	r1, r5
 8005702:	4620      	mov	r0, r4
 8005704:	f000 fc0e 	bl	8005f24 <__lshift>
 8005708:	9b01      	ldr	r3, [sp, #4]
 800570a:	f103 0901 	add.w	r9, r3, #1
 800570e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005712:	4413      	add	r3, r2
 8005714:	9305      	str	r3, [sp, #20]
 8005716:	f00a 0301 	and.w	r3, sl, #1
 800571a:	46b8      	mov	r8, r7
 800571c:	9304      	str	r3, [sp, #16]
 800571e:	4607      	mov	r7, r0
 8005720:	4631      	mov	r1, r6
 8005722:	ee18 0a10 	vmov	r0, s16
 8005726:	f7ff fa77 	bl	8004c18 <quorem>
 800572a:	4641      	mov	r1, r8
 800572c:	9002      	str	r0, [sp, #8]
 800572e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005732:	ee18 0a10 	vmov	r0, s16
 8005736:	f000 fc65 	bl	8006004 <__mcmp>
 800573a:	463a      	mov	r2, r7
 800573c:	9003      	str	r0, [sp, #12]
 800573e:	4631      	mov	r1, r6
 8005740:	4620      	mov	r0, r4
 8005742:	f000 fc7b 	bl	800603c <__mdiff>
 8005746:	68c2      	ldr	r2, [r0, #12]
 8005748:	f109 3bff 	add.w	fp, r9, #4294967295
 800574c:	4605      	mov	r5, r0
 800574e:	bb02      	cbnz	r2, 8005792 <_dtoa_r+0xa62>
 8005750:	4601      	mov	r1, r0
 8005752:	ee18 0a10 	vmov	r0, s16
 8005756:	f000 fc55 	bl	8006004 <__mcmp>
 800575a:	4602      	mov	r2, r0
 800575c:	4629      	mov	r1, r5
 800575e:	4620      	mov	r0, r4
 8005760:	9207      	str	r2, [sp, #28]
 8005762:	f000 fa0d 	bl	8005b80 <_Bfree>
 8005766:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800576a:	ea43 0102 	orr.w	r1, r3, r2
 800576e:	9b04      	ldr	r3, [sp, #16]
 8005770:	430b      	orrs	r3, r1
 8005772:	464d      	mov	r5, r9
 8005774:	d10f      	bne.n	8005796 <_dtoa_r+0xa66>
 8005776:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800577a:	d02a      	beq.n	80057d2 <_dtoa_r+0xaa2>
 800577c:	9b03      	ldr	r3, [sp, #12]
 800577e:	2b00      	cmp	r3, #0
 8005780:	dd02      	ble.n	8005788 <_dtoa_r+0xa58>
 8005782:	9b02      	ldr	r3, [sp, #8]
 8005784:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005788:	f88b a000 	strb.w	sl, [fp]
 800578c:	e775      	b.n	800567a <_dtoa_r+0x94a>
 800578e:	4638      	mov	r0, r7
 8005790:	e7ba      	b.n	8005708 <_dtoa_r+0x9d8>
 8005792:	2201      	movs	r2, #1
 8005794:	e7e2      	b.n	800575c <_dtoa_r+0xa2c>
 8005796:	9b03      	ldr	r3, [sp, #12]
 8005798:	2b00      	cmp	r3, #0
 800579a:	db04      	blt.n	80057a6 <_dtoa_r+0xa76>
 800579c:	9906      	ldr	r1, [sp, #24]
 800579e:	430b      	orrs	r3, r1
 80057a0:	9904      	ldr	r1, [sp, #16]
 80057a2:	430b      	orrs	r3, r1
 80057a4:	d122      	bne.n	80057ec <_dtoa_r+0xabc>
 80057a6:	2a00      	cmp	r2, #0
 80057a8:	ddee      	ble.n	8005788 <_dtoa_r+0xa58>
 80057aa:	ee18 1a10 	vmov	r1, s16
 80057ae:	2201      	movs	r2, #1
 80057b0:	4620      	mov	r0, r4
 80057b2:	f000 fbb7 	bl	8005f24 <__lshift>
 80057b6:	4631      	mov	r1, r6
 80057b8:	ee08 0a10 	vmov	s16, r0
 80057bc:	f000 fc22 	bl	8006004 <__mcmp>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	dc03      	bgt.n	80057cc <_dtoa_r+0xa9c>
 80057c4:	d1e0      	bne.n	8005788 <_dtoa_r+0xa58>
 80057c6:	f01a 0f01 	tst.w	sl, #1
 80057ca:	d0dd      	beq.n	8005788 <_dtoa_r+0xa58>
 80057cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80057d0:	d1d7      	bne.n	8005782 <_dtoa_r+0xa52>
 80057d2:	2339      	movs	r3, #57	; 0x39
 80057d4:	f88b 3000 	strb.w	r3, [fp]
 80057d8:	462b      	mov	r3, r5
 80057da:	461d      	mov	r5, r3
 80057dc:	3b01      	subs	r3, #1
 80057de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80057e2:	2a39      	cmp	r2, #57	; 0x39
 80057e4:	d071      	beq.n	80058ca <_dtoa_r+0xb9a>
 80057e6:	3201      	adds	r2, #1
 80057e8:	701a      	strb	r2, [r3, #0]
 80057ea:	e746      	b.n	800567a <_dtoa_r+0x94a>
 80057ec:	2a00      	cmp	r2, #0
 80057ee:	dd07      	ble.n	8005800 <_dtoa_r+0xad0>
 80057f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80057f4:	d0ed      	beq.n	80057d2 <_dtoa_r+0xaa2>
 80057f6:	f10a 0301 	add.w	r3, sl, #1
 80057fa:	f88b 3000 	strb.w	r3, [fp]
 80057fe:	e73c      	b.n	800567a <_dtoa_r+0x94a>
 8005800:	9b05      	ldr	r3, [sp, #20]
 8005802:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005806:	4599      	cmp	r9, r3
 8005808:	d047      	beq.n	800589a <_dtoa_r+0xb6a>
 800580a:	ee18 1a10 	vmov	r1, s16
 800580e:	2300      	movs	r3, #0
 8005810:	220a      	movs	r2, #10
 8005812:	4620      	mov	r0, r4
 8005814:	f000 f9d6 	bl	8005bc4 <__multadd>
 8005818:	45b8      	cmp	r8, r7
 800581a:	ee08 0a10 	vmov	s16, r0
 800581e:	f04f 0300 	mov.w	r3, #0
 8005822:	f04f 020a 	mov.w	r2, #10
 8005826:	4641      	mov	r1, r8
 8005828:	4620      	mov	r0, r4
 800582a:	d106      	bne.n	800583a <_dtoa_r+0xb0a>
 800582c:	f000 f9ca 	bl	8005bc4 <__multadd>
 8005830:	4680      	mov	r8, r0
 8005832:	4607      	mov	r7, r0
 8005834:	f109 0901 	add.w	r9, r9, #1
 8005838:	e772      	b.n	8005720 <_dtoa_r+0x9f0>
 800583a:	f000 f9c3 	bl	8005bc4 <__multadd>
 800583e:	4639      	mov	r1, r7
 8005840:	4680      	mov	r8, r0
 8005842:	2300      	movs	r3, #0
 8005844:	220a      	movs	r2, #10
 8005846:	4620      	mov	r0, r4
 8005848:	f000 f9bc 	bl	8005bc4 <__multadd>
 800584c:	4607      	mov	r7, r0
 800584e:	e7f1      	b.n	8005834 <_dtoa_r+0xb04>
 8005850:	9b03      	ldr	r3, [sp, #12]
 8005852:	9302      	str	r3, [sp, #8]
 8005854:	9d01      	ldr	r5, [sp, #4]
 8005856:	ee18 0a10 	vmov	r0, s16
 800585a:	4631      	mov	r1, r6
 800585c:	f7ff f9dc 	bl	8004c18 <quorem>
 8005860:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005864:	9b01      	ldr	r3, [sp, #4]
 8005866:	f805 ab01 	strb.w	sl, [r5], #1
 800586a:	1aea      	subs	r2, r5, r3
 800586c:	9b02      	ldr	r3, [sp, #8]
 800586e:	4293      	cmp	r3, r2
 8005870:	dd09      	ble.n	8005886 <_dtoa_r+0xb56>
 8005872:	ee18 1a10 	vmov	r1, s16
 8005876:	2300      	movs	r3, #0
 8005878:	220a      	movs	r2, #10
 800587a:	4620      	mov	r0, r4
 800587c:	f000 f9a2 	bl	8005bc4 <__multadd>
 8005880:	ee08 0a10 	vmov	s16, r0
 8005884:	e7e7      	b.n	8005856 <_dtoa_r+0xb26>
 8005886:	9b02      	ldr	r3, [sp, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	bfc8      	it	gt
 800588c:	461d      	movgt	r5, r3
 800588e:	9b01      	ldr	r3, [sp, #4]
 8005890:	bfd8      	it	le
 8005892:	2501      	movle	r5, #1
 8005894:	441d      	add	r5, r3
 8005896:	f04f 0800 	mov.w	r8, #0
 800589a:	ee18 1a10 	vmov	r1, s16
 800589e:	2201      	movs	r2, #1
 80058a0:	4620      	mov	r0, r4
 80058a2:	f000 fb3f 	bl	8005f24 <__lshift>
 80058a6:	4631      	mov	r1, r6
 80058a8:	ee08 0a10 	vmov	s16, r0
 80058ac:	f000 fbaa 	bl	8006004 <__mcmp>
 80058b0:	2800      	cmp	r0, #0
 80058b2:	dc91      	bgt.n	80057d8 <_dtoa_r+0xaa8>
 80058b4:	d102      	bne.n	80058bc <_dtoa_r+0xb8c>
 80058b6:	f01a 0f01 	tst.w	sl, #1
 80058ba:	d18d      	bne.n	80057d8 <_dtoa_r+0xaa8>
 80058bc:	462b      	mov	r3, r5
 80058be:	461d      	mov	r5, r3
 80058c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80058c4:	2a30      	cmp	r2, #48	; 0x30
 80058c6:	d0fa      	beq.n	80058be <_dtoa_r+0xb8e>
 80058c8:	e6d7      	b.n	800567a <_dtoa_r+0x94a>
 80058ca:	9a01      	ldr	r2, [sp, #4]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d184      	bne.n	80057da <_dtoa_r+0xaaa>
 80058d0:	9b00      	ldr	r3, [sp, #0]
 80058d2:	3301      	adds	r3, #1
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	2331      	movs	r3, #49	; 0x31
 80058d8:	7013      	strb	r3, [r2, #0]
 80058da:	e6ce      	b.n	800567a <_dtoa_r+0x94a>
 80058dc:	4b09      	ldr	r3, [pc, #36]	; (8005904 <_dtoa_r+0xbd4>)
 80058de:	f7ff ba95 	b.w	8004e0c <_dtoa_r+0xdc>
 80058e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f47f aa6e 	bne.w	8004dc6 <_dtoa_r+0x96>
 80058ea:	4b07      	ldr	r3, [pc, #28]	; (8005908 <_dtoa_r+0xbd8>)
 80058ec:	f7ff ba8e 	b.w	8004e0c <_dtoa_r+0xdc>
 80058f0:	9b02      	ldr	r3, [sp, #8]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	dcae      	bgt.n	8005854 <_dtoa_r+0xb24>
 80058f6:	9b06      	ldr	r3, [sp, #24]
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	f73f aea8 	bgt.w	800564e <_dtoa_r+0x91e>
 80058fe:	e7a9      	b.n	8005854 <_dtoa_r+0xb24>
 8005900:	08006ae3 	.word	0x08006ae3
 8005904:	08006a40 	.word	0x08006a40
 8005908:	08006a64 	.word	0x08006a64

0800590c <__sflush_r>:
 800590c:	898a      	ldrh	r2, [r1, #12]
 800590e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005912:	4605      	mov	r5, r0
 8005914:	0710      	lsls	r0, r2, #28
 8005916:	460c      	mov	r4, r1
 8005918:	d458      	bmi.n	80059cc <__sflush_r+0xc0>
 800591a:	684b      	ldr	r3, [r1, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	dc05      	bgt.n	800592c <__sflush_r+0x20>
 8005920:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005922:	2b00      	cmp	r3, #0
 8005924:	dc02      	bgt.n	800592c <__sflush_r+0x20>
 8005926:	2000      	movs	r0, #0
 8005928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800592c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800592e:	2e00      	cmp	r6, #0
 8005930:	d0f9      	beq.n	8005926 <__sflush_r+0x1a>
 8005932:	2300      	movs	r3, #0
 8005934:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005938:	682f      	ldr	r7, [r5, #0]
 800593a:	602b      	str	r3, [r5, #0]
 800593c:	d032      	beq.n	80059a4 <__sflush_r+0x98>
 800593e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005940:	89a3      	ldrh	r3, [r4, #12]
 8005942:	075a      	lsls	r2, r3, #29
 8005944:	d505      	bpl.n	8005952 <__sflush_r+0x46>
 8005946:	6863      	ldr	r3, [r4, #4]
 8005948:	1ac0      	subs	r0, r0, r3
 800594a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800594c:	b10b      	cbz	r3, 8005952 <__sflush_r+0x46>
 800594e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005950:	1ac0      	subs	r0, r0, r3
 8005952:	2300      	movs	r3, #0
 8005954:	4602      	mov	r2, r0
 8005956:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005958:	6a21      	ldr	r1, [r4, #32]
 800595a:	4628      	mov	r0, r5
 800595c:	47b0      	blx	r6
 800595e:	1c43      	adds	r3, r0, #1
 8005960:	89a3      	ldrh	r3, [r4, #12]
 8005962:	d106      	bne.n	8005972 <__sflush_r+0x66>
 8005964:	6829      	ldr	r1, [r5, #0]
 8005966:	291d      	cmp	r1, #29
 8005968:	d82c      	bhi.n	80059c4 <__sflush_r+0xb8>
 800596a:	4a2a      	ldr	r2, [pc, #168]	; (8005a14 <__sflush_r+0x108>)
 800596c:	40ca      	lsrs	r2, r1
 800596e:	07d6      	lsls	r6, r2, #31
 8005970:	d528      	bpl.n	80059c4 <__sflush_r+0xb8>
 8005972:	2200      	movs	r2, #0
 8005974:	6062      	str	r2, [r4, #4]
 8005976:	04d9      	lsls	r1, r3, #19
 8005978:	6922      	ldr	r2, [r4, #16]
 800597a:	6022      	str	r2, [r4, #0]
 800597c:	d504      	bpl.n	8005988 <__sflush_r+0x7c>
 800597e:	1c42      	adds	r2, r0, #1
 8005980:	d101      	bne.n	8005986 <__sflush_r+0x7a>
 8005982:	682b      	ldr	r3, [r5, #0]
 8005984:	b903      	cbnz	r3, 8005988 <__sflush_r+0x7c>
 8005986:	6560      	str	r0, [r4, #84]	; 0x54
 8005988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800598a:	602f      	str	r7, [r5, #0]
 800598c:	2900      	cmp	r1, #0
 800598e:	d0ca      	beq.n	8005926 <__sflush_r+0x1a>
 8005990:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005994:	4299      	cmp	r1, r3
 8005996:	d002      	beq.n	800599e <__sflush_r+0x92>
 8005998:	4628      	mov	r0, r5
 800599a:	f000 fc4b 	bl	8006234 <_free_r>
 800599e:	2000      	movs	r0, #0
 80059a0:	6360      	str	r0, [r4, #52]	; 0x34
 80059a2:	e7c1      	b.n	8005928 <__sflush_r+0x1c>
 80059a4:	6a21      	ldr	r1, [r4, #32]
 80059a6:	2301      	movs	r3, #1
 80059a8:	4628      	mov	r0, r5
 80059aa:	47b0      	blx	r6
 80059ac:	1c41      	adds	r1, r0, #1
 80059ae:	d1c7      	bne.n	8005940 <__sflush_r+0x34>
 80059b0:	682b      	ldr	r3, [r5, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d0c4      	beq.n	8005940 <__sflush_r+0x34>
 80059b6:	2b1d      	cmp	r3, #29
 80059b8:	d001      	beq.n	80059be <__sflush_r+0xb2>
 80059ba:	2b16      	cmp	r3, #22
 80059bc:	d101      	bne.n	80059c2 <__sflush_r+0xb6>
 80059be:	602f      	str	r7, [r5, #0]
 80059c0:	e7b1      	b.n	8005926 <__sflush_r+0x1a>
 80059c2:	89a3      	ldrh	r3, [r4, #12]
 80059c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059c8:	81a3      	strh	r3, [r4, #12]
 80059ca:	e7ad      	b.n	8005928 <__sflush_r+0x1c>
 80059cc:	690f      	ldr	r7, [r1, #16]
 80059ce:	2f00      	cmp	r7, #0
 80059d0:	d0a9      	beq.n	8005926 <__sflush_r+0x1a>
 80059d2:	0793      	lsls	r3, r2, #30
 80059d4:	680e      	ldr	r6, [r1, #0]
 80059d6:	bf08      	it	eq
 80059d8:	694b      	ldreq	r3, [r1, #20]
 80059da:	600f      	str	r7, [r1, #0]
 80059dc:	bf18      	it	ne
 80059de:	2300      	movne	r3, #0
 80059e0:	eba6 0807 	sub.w	r8, r6, r7
 80059e4:	608b      	str	r3, [r1, #8]
 80059e6:	f1b8 0f00 	cmp.w	r8, #0
 80059ea:	dd9c      	ble.n	8005926 <__sflush_r+0x1a>
 80059ec:	6a21      	ldr	r1, [r4, #32]
 80059ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80059f0:	4643      	mov	r3, r8
 80059f2:	463a      	mov	r2, r7
 80059f4:	4628      	mov	r0, r5
 80059f6:	47b0      	blx	r6
 80059f8:	2800      	cmp	r0, #0
 80059fa:	dc06      	bgt.n	8005a0a <__sflush_r+0xfe>
 80059fc:	89a3      	ldrh	r3, [r4, #12]
 80059fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a02:	81a3      	strh	r3, [r4, #12]
 8005a04:	f04f 30ff 	mov.w	r0, #4294967295
 8005a08:	e78e      	b.n	8005928 <__sflush_r+0x1c>
 8005a0a:	4407      	add	r7, r0
 8005a0c:	eba8 0800 	sub.w	r8, r8, r0
 8005a10:	e7e9      	b.n	80059e6 <__sflush_r+0xda>
 8005a12:	bf00      	nop
 8005a14:	20400001 	.word	0x20400001

08005a18 <_fflush_r>:
 8005a18:	b538      	push	{r3, r4, r5, lr}
 8005a1a:	690b      	ldr	r3, [r1, #16]
 8005a1c:	4605      	mov	r5, r0
 8005a1e:	460c      	mov	r4, r1
 8005a20:	b913      	cbnz	r3, 8005a28 <_fflush_r+0x10>
 8005a22:	2500      	movs	r5, #0
 8005a24:	4628      	mov	r0, r5
 8005a26:	bd38      	pop	{r3, r4, r5, pc}
 8005a28:	b118      	cbz	r0, 8005a32 <_fflush_r+0x1a>
 8005a2a:	6983      	ldr	r3, [r0, #24]
 8005a2c:	b90b      	cbnz	r3, 8005a32 <_fflush_r+0x1a>
 8005a2e:	f7fe fab1 	bl	8003f94 <__sinit>
 8005a32:	4b14      	ldr	r3, [pc, #80]	; (8005a84 <_fflush_r+0x6c>)
 8005a34:	429c      	cmp	r4, r3
 8005a36:	d11b      	bne.n	8005a70 <_fflush_r+0x58>
 8005a38:	686c      	ldr	r4, [r5, #4]
 8005a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d0ef      	beq.n	8005a22 <_fflush_r+0xa>
 8005a42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a44:	07d0      	lsls	r0, r2, #31
 8005a46:	d404      	bmi.n	8005a52 <_fflush_r+0x3a>
 8005a48:	0599      	lsls	r1, r3, #22
 8005a4a:	d402      	bmi.n	8005a52 <_fflush_r+0x3a>
 8005a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a4e:	f7fe fb64 	bl	800411a <__retarget_lock_acquire_recursive>
 8005a52:	4628      	mov	r0, r5
 8005a54:	4621      	mov	r1, r4
 8005a56:	f7ff ff59 	bl	800590c <__sflush_r>
 8005a5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a5c:	07da      	lsls	r2, r3, #31
 8005a5e:	4605      	mov	r5, r0
 8005a60:	d4e0      	bmi.n	8005a24 <_fflush_r+0xc>
 8005a62:	89a3      	ldrh	r3, [r4, #12]
 8005a64:	059b      	lsls	r3, r3, #22
 8005a66:	d4dd      	bmi.n	8005a24 <_fflush_r+0xc>
 8005a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a6a:	f7fe fb57 	bl	800411c <__retarget_lock_release_recursive>
 8005a6e:	e7d9      	b.n	8005a24 <_fflush_r+0xc>
 8005a70:	4b05      	ldr	r3, [pc, #20]	; (8005a88 <_fflush_r+0x70>)
 8005a72:	429c      	cmp	r4, r3
 8005a74:	d101      	bne.n	8005a7a <_fflush_r+0x62>
 8005a76:	68ac      	ldr	r4, [r5, #8]
 8005a78:	e7df      	b.n	8005a3a <_fflush_r+0x22>
 8005a7a:	4b04      	ldr	r3, [pc, #16]	; (8005a8c <_fflush_r+0x74>)
 8005a7c:	429c      	cmp	r4, r3
 8005a7e:	bf08      	it	eq
 8005a80:	68ec      	ldreq	r4, [r5, #12]
 8005a82:	e7da      	b.n	8005a3a <_fflush_r+0x22>
 8005a84:	080069ec 	.word	0x080069ec
 8005a88:	08006a0c 	.word	0x08006a0c
 8005a8c:	080069cc 	.word	0x080069cc

08005a90 <_localeconv_r>:
 8005a90:	4800      	ldr	r0, [pc, #0]	; (8005a94 <_localeconv_r+0x4>)
 8005a92:	4770      	bx	lr
 8005a94:	20000168 	.word	0x20000168

08005a98 <_lseek_r>:
 8005a98:	b538      	push	{r3, r4, r5, lr}
 8005a9a:	4d07      	ldr	r5, [pc, #28]	; (8005ab8 <_lseek_r+0x20>)
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	4608      	mov	r0, r1
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	602a      	str	r2, [r5, #0]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f7fe f807 	bl	8003aba <_lseek>
 8005aac:	1c43      	adds	r3, r0, #1
 8005aae:	d102      	bne.n	8005ab6 <_lseek_r+0x1e>
 8005ab0:	682b      	ldr	r3, [r5, #0]
 8005ab2:	b103      	cbz	r3, 8005ab6 <_lseek_r+0x1e>
 8005ab4:	6023      	str	r3, [r4, #0]
 8005ab6:	bd38      	pop	{r3, r4, r5, pc}
 8005ab8:	20000358 	.word	0x20000358

08005abc <malloc>:
 8005abc:	4b02      	ldr	r3, [pc, #8]	; (8005ac8 <malloc+0xc>)
 8005abe:	4601      	mov	r1, r0
 8005ac0:	6818      	ldr	r0, [r3, #0]
 8005ac2:	f7fe bb55 	b.w	8004170 <_malloc_r>
 8005ac6:	bf00      	nop
 8005ac8:	20000014 	.word	0x20000014

08005acc <memcpy>:
 8005acc:	440a      	add	r2, r1
 8005ace:	4291      	cmp	r1, r2
 8005ad0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ad4:	d100      	bne.n	8005ad8 <memcpy+0xc>
 8005ad6:	4770      	bx	lr
 8005ad8:	b510      	push	{r4, lr}
 8005ada:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ade:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ae2:	4291      	cmp	r1, r2
 8005ae4:	d1f9      	bne.n	8005ada <memcpy+0xe>
 8005ae6:	bd10      	pop	{r4, pc}

08005ae8 <__malloc_lock>:
 8005ae8:	4801      	ldr	r0, [pc, #4]	; (8005af0 <__malloc_lock+0x8>)
 8005aea:	f7fe bb16 	b.w	800411a <__retarget_lock_acquire_recursive>
 8005aee:	bf00      	nop
 8005af0:	2000034c 	.word	0x2000034c

08005af4 <__malloc_unlock>:
 8005af4:	4801      	ldr	r0, [pc, #4]	; (8005afc <__malloc_unlock+0x8>)
 8005af6:	f7fe bb11 	b.w	800411c <__retarget_lock_release_recursive>
 8005afa:	bf00      	nop
 8005afc:	2000034c 	.word	0x2000034c

08005b00 <_Balloc>:
 8005b00:	b570      	push	{r4, r5, r6, lr}
 8005b02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b04:	4604      	mov	r4, r0
 8005b06:	460d      	mov	r5, r1
 8005b08:	b976      	cbnz	r6, 8005b28 <_Balloc+0x28>
 8005b0a:	2010      	movs	r0, #16
 8005b0c:	f7ff ffd6 	bl	8005abc <malloc>
 8005b10:	4602      	mov	r2, r0
 8005b12:	6260      	str	r0, [r4, #36]	; 0x24
 8005b14:	b920      	cbnz	r0, 8005b20 <_Balloc+0x20>
 8005b16:	4b18      	ldr	r3, [pc, #96]	; (8005b78 <_Balloc+0x78>)
 8005b18:	4818      	ldr	r0, [pc, #96]	; (8005b7c <_Balloc+0x7c>)
 8005b1a:	2166      	movs	r1, #102	; 0x66
 8005b1c:	f000 fbe8 	bl	80062f0 <__assert_func>
 8005b20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b24:	6006      	str	r6, [r0, #0]
 8005b26:	60c6      	str	r6, [r0, #12]
 8005b28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005b2a:	68f3      	ldr	r3, [r6, #12]
 8005b2c:	b183      	cbz	r3, 8005b50 <_Balloc+0x50>
 8005b2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005b36:	b9b8      	cbnz	r0, 8005b68 <_Balloc+0x68>
 8005b38:	2101      	movs	r1, #1
 8005b3a:	fa01 f605 	lsl.w	r6, r1, r5
 8005b3e:	1d72      	adds	r2, r6, #5
 8005b40:	0092      	lsls	r2, r2, #2
 8005b42:	4620      	mov	r0, r4
 8005b44:	f000 fb60 	bl	8006208 <_calloc_r>
 8005b48:	b160      	cbz	r0, 8005b64 <_Balloc+0x64>
 8005b4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005b4e:	e00e      	b.n	8005b6e <_Balloc+0x6e>
 8005b50:	2221      	movs	r2, #33	; 0x21
 8005b52:	2104      	movs	r1, #4
 8005b54:	4620      	mov	r0, r4
 8005b56:	f000 fb57 	bl	8006208 <_calloc_r>
 8005b5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b5c:	60f0      	str	r0, [r6, #12]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1e4      	bne.n	8005b2e <_Balloc+0x2e>
 8005b64:	2000      	movs	r0, #0
 8005b66:	bd70      	pop	{r4, r5, r6, pc}
 8005b68:	6802      	ldr	r2, [r0, #0]
 8005b6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005b6e:	2300      	movs	r3, #0
 8005b70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b74:	e7f7      	b.n	8005b66 <_Balloc+0x66>
 8005b76:	bf00      	nop
 8005b78:	08006a71 	.word	0x08006a71
 8005b7c:	08006af4 	.word	0x08006af4

08005b80 <_Bfree>:
 8005b80:	b570      	push	{r4, r5, r6, lr}
 8005b82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b84:	4605      	mov	r5, r0
 8005b86:	460c      	mov	r4, r1
 8005b88:	b976      	cbnz	r6, 8005ba8 <_Bfree+0x28>
 8005b8a:	2010      	movs	r0, #16
 8005b8c:	f7ff ff96 	bl	8005abc <malloc>
 8005b90:	4602      	mov	r2, r0
 8005b92:	6268      	str	r0, [r5, #36]	; 0x24
 8005b94:	b920      	cbnz	r0, 8005ba0 <_Bfree+0x20>
 8005b96:	4b09      	ldr	r3, [pc, #36]	; (8005bbc <_Bfree+0x3c>)
 8005b98:	4809      	ldr	r0, [pc, #36]	; (8005bc0 <_Bfree+0x40>)
 8005b9a:	218a      	movs	r1, #138	; 0x8a
 8005b9c:	f000 fba8 	bl	80062f0 <__assert_func>
 8005ba0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ba4:	6006      	str	r6, [r0, #0]
 8005ba6:	60c6      	str	r6, [r0, #12]
 8005ba8:	b13c      	cbz	r4, 8005bba <_Bfree+0x3a>
 8005baa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005bac:	6862      	ldr	r2, [r4, #4]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005bb4:	6021      	str	r1, [r4, #0]
 8005bb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005bba:	bd70      	pop	{r4, r5, r6, pc}
 8005bbc:	08006a71 	.word	0x08006a71
 8005bc0:	08006af4 	.word	0x08006af4

08005bc4 <__multadd>:
 8005bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bc8:	690d      	ldr	r5, [r1, #16]
 8005bca:	4607      	mov	r7, r0
 8005bcc:	460c      	mov	r4, r1
 8005bce:	461e      	mov	r6, r3
 8005bd0:	f101 0c14 	add.w	ip, r1, #20
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	f8dc 3000 	ldr.w	r3, [ip]
 8005bda:	b299      	uxth	r1, r3
 8005bdc:	fb02 6101 	mla	r1, r2, r1, r6
 8005be0:	0c1e      	lsrs	r6, r3, #16
 8005be2:	0c0b      	lsrs	r3, r1, #16
 8005be4:	fb02 3306 	mla	r3, r2, r6, r3
 8005be8:	b289      	uxth	r1, r1
 8005bea:	3001      	adds	r0, #1
 8005bec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005bf0:	4285      	cmp	r5, r0
 8005bf2:	f84c 1b04 	str.w	r1, [ip], #4
 8005bf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005bfa:	dcec      	bgt.n	8005bd6 <__multadd+0x12>
 8005bfc:	b30e      	cbz	r6, 8005c42 <__multadd+0x7e>
 8005bfe:	68a3      	ldr	r3, [r4, #8]
 8005c00:	42ab      	cmp	r3, r5
 8005c02:	dc19      	bgt.n	8005c38 <__multadd+0x74>
 8005c04:	6861      	ldr	r1, [r4, #4]
 8005c06:	4638      	mov	r0, r7
 8005c08:	3101      	adds	r1, #1
 8005c0a:	f7ff ff79 	bl	8005b00 <_Balloc>
 8005c0e:	4680      	mov	r8, r0
 8005c10:	b928      	cbnz	r0, 8005c1e <__multadd+0x5a>
 8005c12:	4602      	mov	r2, r0
 8005c14:	4b0c      	ldr	r3, [pc, #48]	; (8005c48 <__multadd+0x84>)
 8005c16:	480d      	ldr	r0, [pc, #52]	; (8005c4c <__multadd+0x88>)
 8005c18:	21b5      	movs	r1, #181	; 0xb5
 8005c1a:	f000 fb69 	bl	80062f0 <__assert_func>
 8005c1e:	6922      	ldr	r2, [r4, #16]
 8005c20:	3202      	adds	r2, #2
 8005c22:	f104 010c 	add.w	r1, r4, #12
 8005c26:	0092      	lsls	r2, r2, #2
 8005c28:	300c      	adds	r0, #12
 8005c2a:	f7ff ff4f 	bl	8005acc <memcpy>
 8005c2e:	4621      	mov	r1, r4
 8005c30:	4638      	mov	r0, r7
 8005c32:	f7ff ffa5 	bl	8005b80 <_Bfree>
 8005c36:	4644      	mov	r4, r8
 8005c38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005c3c:	3501      	adds	r5, #1
 8005c3e:	615e      	str	r6, [r3, #20]
 8005c40:	6125      	str	r5, [r4, #16]
 8005c42:	4620      	mov	r0, r4
 8005c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c48:	08006ae3 	.word	0x08006ae3
 8005c4c:	08006af4 	.word	0x08006af4

08005c50 <__hi0bits>:
 8005c50:	0c03      	lsrs	r3, r0, #16
 8005c52:	041b      	lsls	r3, r3, #16
 8005c54:	b9d3      	cbnz	r3, 8005c8c <__hi0bits+0x3c>
 8005c56:	0400      	lsls	r0, r0, #16
 8005c58:	2310      	movs	r3, #16
 8005c5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005c5e:	bf04      	itt	eq
 8005c60:	0200      	lsleq	r0, r0, #8
 8005c62:	3308      	addeq	r3, #8
 8005c64:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005c68:	bf04      	itt	eq
 8005c6a:	0100      	lsleq	r0, r0, #4
 8005c6c:	3304      	addeq	r3, #4
 8005c6e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005c72:	bf04      	itt	eq
 8005c74:	0080      	lsleq	r0, r0, #2
 8005c76:	3302      	addeq	r3, #2
 8005c78:	2800      	cmp	r0, #0
 8005c7a:	db05      	blt.n	8005c88 <__hi0bits+0x38>
 8005c7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005c80:	f103 0301 	add.w	r3, r3, #1
 8005c84:	bf08      	it	eq
 8005c86:	2320      	moveq	r3, #32
 8005c88:	4618      	mov	r0, r3
 8005c8a:	4770      	bx	lr
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	e7e4      	b.n	8005c5a <__hi0bits+0xa>

08005c90 <__lo0bits>:
 8005c90:	6803      	ldr	r3, [r0, #0]
 8005c92:	f013 0207 	ands.w	r2, r3, #7
 8005c96:	4601      	mov	r1, r0
 8005c98:	d00b      	beq.n	8005cb2 <__lo0bits+0x22>
 8005c9a:	07da      	lsls	r2, r3, #31
 8005c9c:	d423      	bmi.n	8005ce6 <__lo0bits+0x56>
 8005c9e:	0798      	lsls	r0, r3, #30
 8005ca0:	bf49      	itett	mi
 8005ca2:	085b      	lsrmi	r3, r3, #1
 8005ca4:	089b      	lsrpl	r3, r3, #2
 8005ca6:	2001      	movmi	r0, #1
 8005ca8:	600b      	strmi	r3, [r1, #0]
 8005caa:	bf5c      	itt	pl
 8005cac:	600b      	strpl	r3, [r1, #0]
 8005cae:	2002      	movpl	r0, #2
 8005cb0:	4770      	bx	lr
 8005cb2:	b298      	uxth	r0, r3
 8005cb4:	b9a8      	cbnz	r0, 8005ce2 <__lo0bits+0x52>
 8005cb6:	0c1b      	lsrs	r3, r3, #16
 8005cb8:	2010      	movs	r0, #16
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	b90a      	cbnz	r2, 8005cc2 <__lo0bits+0x32>
 8005cbe:	3008      	adds	r0, #8
 8005cc0:	0a1b      	lsrs	r3, r3, #8
 8005cc2:	071a      	lsls	r2, r3, #28
 8005cc4:	bf04      	itt	eq
 8005cc6:	091b      	lsreq	r3, r3, #4
 8005cc8:	3004      	addeq	r0, #4
 8005cca:	079a      	lsls	r2, r3, #30
 8005ccc:	bf04      	itt	eq
 8005cce:	089b      	lsreq	r3, r3, #2
 8005cd0:	3002      	addeq	r0, #2
 8005cd2:	07da      	lsls	r2, r3, #31
 8005cd4:	d403      	bmi.n	8005cde <__lo0bits+0x4e>
 8005cd6:	085b      	lsrs	r3, r3, #1
 8005cd8:	f100 0001 	add.w	r0, r0, #1
 8005cdc:	d005      	beq.n	8005cea <__lo0bits+0x5a>
 8005cde:	600b      	str	r3, [r1, #0]
 8005ce0:	4770      	bx	lr
 8005ce2:	4610      	mov	r0, r2
 8005ce4:	e7e9      	b.n	8005cba <__lo0bits+0x2a>
 8005ce6:	2000      	movs	r0, #0
 8005ce8:	4770      	bx	lr
 8005cea:	2020      	movs	r0, #32
 8005cec:	4770      	bx	lr
	...

08005cf0 <__i2b>:
 8005cf0:	b510      	push	{r4, lr}
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	f7ff ff03 	bl	8005b00 <_Balloc>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	b928      	cbnz	r0, 8005d0a <__i2b+0x1a>
 8005cfe:	4b05      	ldr	r3, [pc, #20]	; (8005d14 <__i2b+0x24>)
 8005d00:	4805      	ldr	r0, [pc, #20]	; (8005d18 <__i2b+0x28>)
 8005d02:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005d06:	f000 faf3 	bl	80062f0 <__assert_func>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	6144      	str	r4, [r0, #20]
 8005d0e:	6103      	str	r3, [r0, #16]
 8005d10:	bd10      	pop	{r4, pc}
 8005d12:	bf00      	nop
 8005d14:	08006ae3 	.word	0x08006ae3
 8005d18:	08006af4 	.word	0x08006af4

08005d1c <__multiply>:
 8005d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d20:	4691      	mov	r9, r2
 8005d22:	690a      	ldr	r2, [r1, #16]
 8005d24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	bfb8      	it	lt
 8005d2c:	460b      	movlt	r3, r1
 8005d2e:	460c      	mov	r4, r1
 8005d30:	bfbc      	itt	lt
 8005d32:	464c      	movlt	r4, r9
 8005d34:	4699      	movlt	r9, r3
 8005d36:	6927      	ldr	r7, [r4, #16]
 8005d38:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005d3c:	68a3      	ldr	r3, [r4, #8]
 8005d3e:	6861      	ldr	r1, [r4, #4]
 8005d40:	eb07 060a 	add.w	r6, r7, sl
 8005d44:	42b3      	cmp	r3, r6
 8005d46:	b085      	sub	sp, #20
 8005d48:	bfb8      	it	lt
 8005d4a:	3101      	addlt	r1, #1
 8005d4c:	f7ff fed8 	bl	8005b00 <_Balloc>
 8005d50:	b930      	cbnz	r0, 8005d60 <__multiply+0x44>
 8005d52:	4602      	mov	r2, r0
 8005d54:	4b44      	ldr	r3, [pc, #272]	; (8005e68 <__multiply+0x14c>)
 8005d56:	4845      	ldr	r0, [pc, #276]	; (8005e6c <__multiply+0x150>)
 8005d58:	f240 115d 	movw	r1, #349	; 0x15d
 8005d5c:	f000 fac8 	bl	80062f0 <__assert_func>
 8005d60:	f100 0514 	add.w	r5, r0, #20
 8005d64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005d68:	462b      	mov	r3, r5
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	4543      	cmp	r3, r8
 8005d6e:	d321      	bcc.n	8005db4 <__multiply+0x98>
 8005d70:	f104 0314 	add.w	r3, r4, #20
 8005d74:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005d78:	f109 0314 	add.w	r3, r9, #20
 8005d7c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005d80:	9202      	str	r2, [sp, #8]
 8005d82:	1b3a      	subs	r2, r7, r4
 8005d84:	3a15      	subs	r2, #21
 8005d86:	f022 0203 	bic.w	r2, r2, #3
 8005d8a:	3204      	adds	r2, #4
 8005d8c:	f104 0115 	add.w	r1, r4, #21
 8005d90:	428f      	cmp	r7, r1
 8005d92:	bf38      	it	cc
 8005d94:	2204      	movcc	r2, #4
 8005d96:	9201      	str	r2, [sp, #4]
 8005d98:	9a02      	ldr	r2, [sp, #8]
 8005d9a:	9303      	str	r3, [sp, #12]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d80c      	bhi.n	8005dba <__multiply+0x9e>
 8005da0:	2e00      	cmp	r6, #0
 8005da2:	dd03      	ble.n	8005dac <__multiply+0x90>
 8005da4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d05a      	beq.n	8005e62 <__multiply+0x146>
 8005dac:	6106      	str	r6, [r0, #16]
 8005dae:	b005      	add	sp, #20
 8005db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db4:	f843 2b04 	str.w	r2, [r3], #4
 8005db8:	e7d8      	b.n	8005d6c <__multiply+0x50>
 8005dba:	f8b3 a000 	ldrh.w	sl, [r3]
 8005dbe:	f1ba 0f00 	cmp.w	sl, #0
 8005dc2:	d024      	beq.n	8005e0e <__multiply+0xf2>
 8005dc4:	f104 0e14 	add.w	lr, r4, #20
 8005dc8:	46a9      	mov	r9, r5
 8005dca:	f04f 0c00 	mov.w	ip, #0
 8005dce:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005dd2:	f8d9 1000 	ldr.w	r1, [r9]
 8005dd6:	fa1f fb82 	uxth.w	fp, r2
 8005dda:	b289      	uxth	r1, r1
 8005ddc:	fb0a 110b 	mla	r1, sl, fp, r1
 8005de0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005de4:	f8d9 2000 	ldr.w	r2, [r9]
 8005de8:	4461      	add	r1, ip
 8005dea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005dee:	fb0a c20b 	mla	r2, sl, fp, ip
 8005df2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005df6:	b289      	uxth	r1, r1
 8005df8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005dfc:	4577      	cmp	r7, lr
 8005dfe:	f849 1b04 	str.w	r1, [r9], #4
 8005e02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005e06:	d8e2      	bhi.n	8005dce <__multiply+0xb2>
 8005e08:	9a01      	ldr	r2, [sp, #4]
 8005e0a:	f845 c002 	str.w	ip, [r5, r2]
 8005e0e:	9a03      	ldr	r2, [sp, #12]
 8005e10:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005e14:	3304      	adds	r3, #4
 8005e16:	f1b9 0f00 	cmp.w	r9, #0
 8005e1a:	d020      	beq.n	8005e5e <__multiply+0x142>
 8005e1c:	6829      	ldr	r1, [r5, #0]
 8005e1e:	f104 0c14 	add.w	ip, r4, #20
 8005e22:	46ae      	mov	lr, r5
 8005e24:	f04f 0a00 	mov.w	sl, #0
 8005e28:	f8bc b000 	ldrh.w	fp, [ip]
 8005e2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005e30:	fb09 220b 	mla	r2, r9, fp, r2
 8005e34:	4492      	add	sl, r2
 8005e36:	b289      	uxth	r1, r1
 8005e38:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005e3c:	f84e 1b04 	str.w	r1, [lr], #4
 8005e40:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005e44:	f8be 1000 	ldrh.w	r1, [lr]
 8005e48:	0c12      	lsrs	r2, r2, #16
 8005e4a:	fb09 1102 	mla	r1, r9, r2, r1
 8005e4e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005e52:	4567      	cmp	r7, ip
 8005e54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005e58:	d8e6      	bhi.n	8005e28 <__multiply+0x10c>
 8005e5a:	9a01      	ldr	r2, [sp, #4]
 8005e5c:	50a9      	str	r1, [r5, r2]
 8005e5e:	3504      	adds	r5, #4
 8005e60:	e79a      	b.n	8005d98 <__multiply+0x7c>
 8005e62:	3e01      	subs	r6, #1
 8005e64:	e79c      	b.n	8005da0 <__multiply+0x84>
 8005e66:	bf00      	nop
 8005e68:	08006ae3 	.word	0x08006ae3
 8005e6c:	08006af4 	.word	0x08006af4

08005e70 <__pow5mult>:
 8005e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e74:	4615      	mov	r5, r2
 8005e76:	f012 0203 	ands.w	r2, r2, #3
 8005e7a:	4606      	mov	r6, r0
 8005e7c:	460f      	mov	r7, r1
 8005e7e:	d007      	beq.n	8005e90 <__pow5mult+0x20>
 8005e80:	4c25      	ldr	r4, [pc, #148]	; (8005f18 <__pow5mult+0xa8>)
 8005e82:	3a01      	subs	r2, #1
 8005e84:	2300      	movs	r3, #0
 8005e86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e8a:	f7ff fe9b 	bl	8005bc4 <__multadd>
 8005e8e:	4607      	mov	r7, r0
 8005e90:	10ad      	asrs	r5, r5, #2
 8005e92:	d03d      	beq.n	8005f10 <__pow5mult+0xa0>
 8005e94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005e96:	b97c      	cbnz	r4, 8005eb8 <__pow5mult+0x48>
 8005e98:	2010      	movs	r0, #16
 8005e9a:	f7ff fe0f 	bl	8005abc <malloc>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	6270      	str	r0, [r6, #36]	; 0x24
 8005ea2:	b928      	cbnz	r0, 8005eb0 <__pow5mult+0x40>
 8005ea4:	4b1d      	ldr	r3, [pc, #116]	; (8005f1c <__pow5mult+0xac>)
 8005ea6:	481e      	ldr	r0, [pc, #120]	; (8005f20 <__pow5mult+0xb0>)
 8005ea8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005eac:	f000 fa20 	bl	80062f0 <__assert_func>
 8005eb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005eb4:	6004      	str	r4, [r0, #0]
 8005eb6:	60c4      	str	r4, [r0, #12]
 8005eb8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005ebc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ec0:	b94c      	cbnz	r4, 8005ed6 <__pow5mult+0x66>
 8005ec2:	f240 2171 	movw	r1, #625	; 0x271
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	f7ff ff12 	bl	8005cf0 <__i2b>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	f8c8 0008 	str.w	r0, [r8, #8]
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	6003      	str	r3, [r0, #0]
 8005ed6:	f04f 0900 	mov.w	r9, #0
 8005eda:	07eb      	lsls	r3, r5, #31
 8005edc:	d50a      	bpl.n	8005ef4 <__pow5mult+0x84>
 8005ede:	4639      	mov	r1, r7
 8005ee0:	4622      	mov	r2, r4
 8005ee2:	4630      	mov	r0, r6
 8005ee4:	f7ff ff1a 	bl	8005d1c <__multiply>
 8005ee8:	4639      	mov	r1, r7
 8005eea:	4680      	mov	r8, r0
 8005eec:	4630      	mov	r0, r6
 8005eee:	f7ff fe47 	bl	8005b80 <_Bfree>
 8005ef2:	4647      	mov	r7, r8
 8005ef4:	106d      	asrs	r5, r5, #1
 8005ef6:	d00b      	beq.n	8005f10 <__pow5mult+0xa0>
 8005ef8:	6820      	ldr	r0, [r4, #0]
 8005efa:	b938      	cbnz	r0, 8005f0c <__pow5mult+0x9c>
 8005efc:	4622      	mov	r2, r4
 8005efe:	4621      	mov	r1, r4
 8005f00:	4630      	mov	r0, r6
 8005f02:	f7ff ff0b 	bl	8005d1c <__multiply>
 8005f06:	6020      	str	r0, [r4, #0]
 8005f08:	f8c0 9000 	str.w	r9, [r0]
 8005f0c:	4604      	mov	r4, r0
 8005f0e:	e7e4      	b.n	8005eda <__pow5mult+0x6a>
 8005f10:	4638      	mov	r0, r7
 8005f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f16:	bf00      	nop
 8005f18:	08006c40 	.word	0x08006c40
 8005f1c:	08006a71 	.word	0x08006a71
 8005f20:	08006af4 	.word	0x08006af4

08005f24 <__lshift>:
 8005f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f28:	460c      	mov	r4, r1
 8005f2a:	6849      	ldr	r1, [r1, #4]
 8005f2c:	6923      	ldr	r3, [r4, #16]
 8005f2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005f32:	68a3      	ldr	r3, [r4, #8]
 8005f34:	4607      	mov	r7, r0
 8005f36:	4691      	mov	r9, r2
 8005f38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005f3c:	f108 0601 	add.w	r6, r8, #1
 8005f40:	42b3      	cmp	r3, r6
 8005f42:	db0b      	blt.n	8005f5c <__lshift+0x38>
 8005f44:	4638      	mov	r0, r7
 8005f46:	f7ff fddb 	bl	8005b00 <_Balloc>
 8005f4a:	4605      	mov	r5, r0
 8005f4c:	b948      	cbnz	r0, 8005f62 <__lshift+0x3e>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	4b2a      	ldr	r3, [pc, #168]	; (8005ffc <__lshift+0xd8>)
 8005f52:	482b      	ldr	r0, [pc, #172]	; (8006000 <__lshift+0xdc>)
 8005f54:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005f58:	f000 f9ca 	bl	80062f0 <__assert_func>
 8005f5c:	3101      	adds	r1, #1
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	e7ee      	b.n	8005f40 <__lshift+0x1c>
 8005f62:	2300      	movs	r3, #0
 8005f64:	f100 0114 	add.w	r1, r0, #20
 8005f68:	f100 0210 	add.w	r2, r0, #16
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	4553      	cmp	r3, sl
 8005f70:	db37      	blt.n	8005fe2 <__lshift+0xbe>
 8005f72:	6920      	ldr	r0, [r4, #16]
 8005f74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f78:	f104 0314 	add.w	r3, r4, #20
 8005f7c:	f019 091f 	ands.w	r9, r9, #31
 8005f80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005f88:	d02f      	beq.n	8005fea <__lshift+0xc6>
 8005f8a:	f1c9 0e20 	rsb	lr, r9, #32
 8005f8e:	468a      	mov	sl, r1
 8005f90:	f04f 0c00 	mov.w	ip, #0
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	fa02 f209 	lsl.w	r2, r2, r9
 8005f9a:	ea42 020c 	orr.w	r2, r2, ip
 8005f9e:	f84a 2b04 	str.w	r2, [sl], #4
 8005fa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fa6:	4298      	cmp	r0, r3
 8005fa8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005fac:	d8f2      	bhi.n	8005f94 <__lshift+0x70>
 8005fae:	1b03      	subs	r3, r0, r4
 8005fb0:	3b15      	subs	r3, #21
 8005fb2:	f023 0303 	bic.w	r3, r3, #3
 8005fb6:	3304      	adds	r3, #4
 8005fb8:	f104 0215 	add.w	r2, r4, #21
 8005fbc:	4290      	cmp	r0, r2
 8005fbe:	bf38      	it	cc
 8005fc0:	2304      	movcc	r3, #4
 8005fc2:	f841 c003 	str.w	ip, [r1, r3]
 8005fc6:	f1bc 0f00 	cmp.w	ip, #0
 8005fca:	d001      	beq.n	8005fd0 <__lshift+0xac>
 8005fcc:	f108 0602 	add.w	r6, r8, #2
 8005fd0:	3e01      	subs	r6, #1
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	612e      	str	r6, [r5, #16]
 8005fd6:	4621      	mov	r1, r4
 8005fd8:	f7ff fdd2 	bl	8005b80 <_Bfree>
 8005fdc:	4628      	mov	r0, r5
 8005fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fe2:	f842 0f04 	str.w	r0, [r2, #4]!
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	e7c1      	b.n	8005f6e <__lshift+0x4a>
 8005fea:	3904      	subs	r1, #4
 8005fec:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ff0:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ff4:	4298      	cmp	r0, r3
 8005ff6:	d8f9      	bhi.n	8005fec <__lshift+0xc8>
 8005ff8:	e7ea      	b.n	8005fd0 <__lshift+0xac>
 8005ffa:	bf00      	nop
 8005ffc:	08006ae3 	.word	0x08006ae3
 8006000:	08006af4 	.word	0x08006af4

08006004 <__mcmp>:
 8006004:	b530      	push	{r4, r5, lr}
 8006006:	6902      	ldr	r2, [r0, #16]
 8006008:	690c      	ldr	r4, [r1, #16]
 800600a:	1b12      	subs	r2, r2, r4
 800600c:	d10e      	bne.n	800602c <__mcmp+0x28>
 800600e:	f100 0314 	add.w	r3, r0, #20
 8006012:	3114      	adds	r1, #20
 8006014:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006018:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800601c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006020:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006024:	42a5      	cmp	r5, r4
 8006026:	d003      	beq.n	8006030 <__mcmp+0x2c>
 8006028:	d305      	bcc.n	8006036 <__mcmp+0x32>
 800602a:	2201      	movs	r2, #1
 800602c:	4610      	mov	r0, r2
 800602e:	bd30      	pop	{r4, r5, pc}
 8006030:	4283      	cmp	r3, r0
 8006032:	d3f3      	bcc.n	800601c <__mcmp+0x18>
 8006034:	e7fa      	b.n	800602c <__mcmp+0x28>
 8006036:	f04f 32ff 	mov.w	r2, #4294967295
 800603a:	e7f7      	b.n	800602c <__mcmp+0x28>

0800603c <__mdiff>:
 800603c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006040:	460c      	mov	r4, r1
 8006042:	4606      	mov	r6, r0
 8006044:	4611      	mov	r1, r2
 8006046:	4620      	mov	r0, r4
 8006048:	4690      	mov	r8, r2
 800604a:	f7ff ffdb 	bl	8006004 <__mcmp>
 800604e:	1e05      	subs	r5, r0, #0
 8006050:	d110      	bne.n	8006074 <__mdiff+0x38>
 8006052:	4629      	mov	r1, r5
 8006054:	4630      	mov	r0, r6
 8006056:	f7ff fd53 	bl	8005b00 <_Balloc>
 800605a:	b930      	cbnz	r0, 800606a <__mdiff+0x2e>
 800605c:	4b3a      	ldr	r3, [pc, #232]	; (8006148 <__mdiff+0x10c>)
 800605e:	4602      	mov	r2, r0
 8006060:	f240 2132 	movw	r1, #562	; 0x232
 8006064:	4839      	ldr	r0, [pc, #228]	; (800614c <__mdiff+0x110>)
 8006066:	f000 f943 	bl	80062f0 <__assert_func>
 800606a:	2301      	movs	r3, #1
 800606c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006070:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006074:	bfa4      	itt	ge
 8006076:	4643      	movge	r3, r8
 8006078:	46a0      	movge	r8, r4
 800607a:	4630      	mov	r0, r6
 800607c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006080:	bfa6      	itte	ge
 8006082:	461c      	movge	r4, r3
 8006084:	2500      	movge	r5, #0
 8006086:	2501      	movlt	r5, #1
 8006088:	f7ff fd3a 	bl	8005b00 <_Balloc>
 800608c:	b920      	cbnz	r0, 8006098 <__mdiff+0x5c>
 800608e:	4b2e      	ldr	r3, [pc, #184]	; (8006148 <__mdiff+0x10c>)
 8006090:	4602      	mov	r2, r0
 8006092:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006096:	e7e5      	b.n	8006064 <__mdiff+0x28>
 8006098:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800609c:	6926      	ldr	r6, [r4, #16]
 800609e:	60c5      	str	r5, [r0, #12]
 80060a0:	f104 0914 	add.w	r9, r4, #20
 80060a4:	f108 0514 	add.w	r5, r8, #20
 80060a8:	f100 0e14 	add.w	lr, r0, #20
 80060ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80060b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80060b4:	f108 0210 	add.w	r2, r8, #16
 80060b8:	46f2      	mov	sl, lr
 80060ba:	2100      	movs	r1, #0
 80060bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80060c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80060c4:	fa1f f883 	uxth.w	r8, r3
 80060c8:	fa11 f18b 	uxtah	r1, r1, fp
 80060cc:	0c1b      	lsrs	r3, r3, #16
 80060ce:	eba1 0808 	sub.w	r8, r1, r8
 80060d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80060d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80060da:	fa1f f888 	uxth.w	r8, r8
 80060de:	1419      	asrs	r1, r3, #16
 80060e0:	454e      	cmp	r6, r9
 80060e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80060e6:	f84a 3b04 	str.w	r3, [sl], #4
 80060ea:	d8e7      	bhi.n	80060bc <__mdiff+0x80>
 80060ec:	1b33      	subs	r3, r6, r4
 80060ee:	3b15      	subs	r3, #21
 80060f0:	f023 0303 	bic.w	r3, r3, #3
 80060f4:	3304      	adds	r3, #4
 80060f6:	3415      	adds	r4, #21
 80060f8:	42a6      	cmp	r6, r4
 80060fa:	bf38      	it	cc
 80060fc:	2304      	movcc	r3, #4
 80060fe:	441d      	add	r5, r3
 8006100:	4473      	add	r3, lr
 8006102:	469e      	mov	lr, r3
 8006104:	462e      	mov	r6, r5
 8006106:	4566      	cmp	r6, ip
 8006108:	d30e      	bcc.n	8006128 <__mdiff+0xec>
 800610a:	f10c 0203 	add.w	r2, ip, #3
 800610e:	1b52      	subs	r2, r2, r5
 8006110:	f022 0203 	bic.w	r2, r2, #3
 8006114:	3d03      	subs	r5, #3
 8006116:	45ac      	cmp	ip, r5
 8006118:	bf38      	it	cc
 800611a:	2200      	movcc	r2, #0
 800611c:	441a      	add	r2, r3
 800611e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006122:	b17b      	cbz	r3, 8006144 <__mdiff+0x108>
 8006124:	6107      	str	r7, [r0, #16]
 8006126:	e7a3      	b.n	8006070 <__mdiff+0x34>
 8006128:	f856 8b04 	ldr.w	r8, [r6], #4
 800612c:	fa11 f288 	uxtah	r2, r1, r8
 8006130:	1414      	asrs	r4, r2, #16
 8006132:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006136:	b292      	uxth	r2, r2
 8006138:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800613c:	f84e 2b04 	str.w	r2, [lr], #4
 8006140:	1421      	asrs	r1, r4, #16
 8006142:	e7e0      	b.n	8006106 <__mdiff+0xca>
 8006144:	3f01      	subs	r7, #1
 8006146:	e7ea      	b.n	800611e <__mdiff+0xe2>
 8006148:	08006ae3 	.word	0x08006ae3
 800614c:	08006af4 	.word	0x08006af4

08006150 <__d2b>:
 8006150:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006154:	4689      	mov	r9, r1
 8006156:	2101      	movs	r1, #1
 8006158:	ec57 6b10 	vmov	r6, r7, d0
 800615c:	4690      	mov	r8, r2
 800615e:	f7ff fccf 	bl	8005b00 <_Balloc>
 8006162:	4604      	mov	r4, r0
 8006164:	b930      	cbnz	r0, 8006174 <__d2b+0x24>
 8006166:	4602      	mov	r2, r0
 8006168:	4b25      	ldr	r3, [pc, #148]	; (8006200 <__d2b+0xb0>)
 800616a:	4826      	ldr	r0, [pc, #152]	; (8006204 <__d2b+0xb4>)
 800616c:	f240 310a 	movw	r1, #778	; 0x30a
 8006170:	f000 f8be 	bl	80062f0 <__assert_func>
 8006174:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006178:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800617c:	bb35      	cbnz	r5, 80061cc <__d2b+0x7c>
 800617e:	2e00      	cmp	r6, #0
 8006180:	9301      	str	r3, [sp, #4]
 8006182:	d028      	beq.n	80061d6 <__d2b+0x86>
 8006184:	4668      	mov	r0, sp
 8006186:	9600      	str	r6, [sp, #0]
 8006188:	f7ff fd82 	bl	8005c90 <__lo0bits>
 800618c:	9900      	ldr	r1, [sp, #0]
 800618e:	b300      	cbz	r0, 80061d2 <__d2b+0x82>
 8006190:	9a01      	ldr	r2, [sp, #4]
 8006192:	f1c0 0320 	rsb	r3, r0, #32
 8006196:	fa02 f303 	lsl.w	r3, r2, r3
 800619a:	430b      	orrs	r3, r1
 800619c:	40c2      	lsrs	r2, r0
 800619e:	6163      	str	r3, [r4, #20]
 80061a0:	9201      	str	r2, [sp, #4]
 80061a2:	9b01      	ldr	r3, [sp, #4]
 80061a4:	61a3      	str	r3, [r4, #24]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	bf14      	ite	ne
 80061aa:	2202      	movne	r2, #2
 80061ac:	2201      	moveq	r2, #1
 80061ae:	6122      	str	r2, [r4, #16]
 80061b0:	b1d5      	cbz	r5, 80061e8 <__d2b+0x98>
 80061b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80061b6:	4405      	add	r5, r0
 80061b8:	f8c9 5000 	str.w	r5, [r9]
 80061bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80061c0:	f8c8 0000 	str.w	r0, [r8]
 80061c4:	4620      	mov	r0, r4
 80061c6:	b003      	add	sp, #12
 80061c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061d0:	e7d5      	b.n	800617e <__d2b+0x2e>
 80061d2:	6161      	str	r1, [r4, #20]
 80061d4:	e7e5      	b.n	80061a2 <__d2b+0x52>
 80061d6:	a801      	add	r0, sp, #4
 80061d8:	f7ff fd5a 	bl	8005c90 <__lo0bits>
 80061dc:	9b01      	ldr	r3, [sp, #4]
 80061de:	6163      	str	r3, [r4, #20]
 80061e0:	2201      	movs	r2, #1
 80061e2:	6122      	str	r2, [r4, #16]
 80061e4:	3020      	adds	r0, #32
 80061e6:	e7e3      	b.n	80061b0 <__d2b+0x60>
 80061e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80061ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80061f0:	f8c9 0000 	str.w	r0, [r9]
 80061f4:	6918      	ldr	r0, [r3, #16]
 80061f6:	f7ff fd2b 	bl	8005c50 <__hi0bits>
 80061fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80061fe:	e7df      	b.n	80061c0 <__d2b+0x70>
 8006200:	08006ae3 	.word	0x08006ae3
 8006204:	08006af4 	.word	0x08006af4

08006208 <_calloc_r>:
 8006208:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800620a:	fba1 2402 	umull	r2, r4, r1, r2
 800620e:	b94c      	cbnz	r4, 8006224 <_calloc_r+0x1c>
 8006210:	4611      	mov	r1, r2
 8006212:	9201      	str	r2, [sp, #4]
 8006214:	f7fd ffac 	bl	8004170 <_malloc_r>
 8006218:	9a01      	ldr	r2, [sp, #4]
 800621a:	4605      	mov	r5, r0
 800621c:	b930      	cbnz	r0, 800622c <_calloc_r+0x24>
 800621e:	4628      	mov	r0, r5
 8006220:	b003      	add	sp, #12
 8006222:	bd30      	pop	{r4, r5, pc}
 8006224:	220c      	movs	r2, #12
 8006226:	6002      	str	r2, [r0, #0]
 8006228:	2500      	movs	r5, #0
 800622a:	e7f8      	b.n	800621e <_calloc_r+0x16>
 800622c:	4621      	mov	r1, r4
 800622e:	f7fd ff76 	bl	800411e <memset>
 8006232:	e7f4      	b.n	800621e <_calloc_r+0x16>

08006234 <_free_r>:
 8006234:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006236:	2900      	cmp	r1, #0
 8006238:	d044      	beq.n	80062c4 <_free_r+0x90>
 800623a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800623e:	9001      	str	r0, [sp, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	f1a1 0404 	sub.w	r4, r1, #4
 8006246:	bfb8      	it	lt
 8006248:	18e4      	addlt	r4, r4, r3
 800624a:	f7ff fc4d 	bl	8005ae8 <__malloc_lock>
 800624e:	4a1e      	ldr	r2, [pc, #120]	; (80062c8 <_free_r+0x94>)
 8006250:	9801      	ldr	r0, [sp, #4]
 8006252:	6813      	ldr	r3, [r2, #0]
 8006254:	b933      	cbnz	r3, 8006264 <_free_r+0x30>
 8006256:	6063      	str	r3, [r4, #4]
 8006258:	6014      	str	r4, [r2, #0]
 800625a:	b003      	add	sp, #12
 800625c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006260:	f7ff bc48 	b.w	8005af4 <__malloc_unlock>
 8006264:	42a3      	cmp	r3, r4
 8006266:	d908      	bls.n	800627a <_free_r+0x46>
 8006268:	6825      	ldr	r5, [r4, #0]
 800626a:	1961      	adds	r1, r4, r5
 800626c:	428b      	cmp	r3, r1
 800626e:	bf01      	itttt	eq
 8006270:	6819      	ldreq	r1, [r3, #0]
 8006272:	685b      	ldreq	r3, [r3, #4]
 8006274:	1949      	addeq	r1, r1, r5
 8006276:	6021      	streq	r1, [r4, #0]
 8006278:	e7ed      	b.n	8006256 <_free_r+0x22>
 800627a:	461a      	mov	r2, r3
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	b10b      	cbz	r3, 8006284 <_free_r+0x50>
 8006280:	42a3      	cmp	r3, r4
 8006282:	d9fa      	bls.n	800627a <_free_r+0x46>
 8006284:	6811      	ldr	r1, [r2, #0]
 8006286:	1855      	adds	r5, r2, r1
 8006288:	42a5      	cmp	r5, r4
 800628a:	d10b      	bne.n	80062a4 <_free_r+0x70>
 800628c:	6824      	ldr	r4, [r4, #0]
 800628e:	4421      	add	r1, r4
 8006290:	1854      	adds	r4, r2, r1
 8006292:	42a3      	cmp	r3, r4
 8006294:	6011      	str	r1, [r2, #0]
 8006296:	d1e0      	bne.n	800625a <_free_r+0x26>
 8006298:	681c      	ldr	r4, [r3, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	6053      	str	r3, [r2, #4]
 800629e:	4421      	add	r1, r4
 80062a0:	6011      	str	r1, [r2, #0]
 80062a2:	e7da      	b.n	800625a <_free_r+0x26>
 80062a4:	d902      	bls.n	80062ac <_free_r+0x78>
 80062a6:	230c      	movs	r3, #12
 80062a8:	6003      	str	r3, [r0, #0]
 80062aa:	e7d6      	b.n	800625a <_free_r+0x26>
 80062ac:	6825      	ldr	r5, [r4, #0]
 80062ae:	1961      	adds	r1, r4, r5
 80062b0:	428b      	cmp	r3, r1
 80062b2:	bf04      	itt	eq
 80062b4:	6819      	ldreq	r1, [r3, #0]
 80062b6:	685b      	ldreq	r3, [r3, #4]
 80062b8:	6063      	str	r3, [r4, #4]
 80062ba:	bf04      	itt	eq
 80062bc:	1949      	addeq	r1, r1, r5
 80062be:	6021      	streq	r1, [r4, #0]
 80062c0:	6054      	str	r4, [r2, #4]
 80062c2:	e7ca      	b.n	800625a <_free_r+0x26>
 80062c4:	b003      	add	sp, #12
 80062c6:	bd30      	pop	{r4, r5, pc}
 80062c8:	20000350 	.word	0x20000350

080062cc <_read_r>:
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	4d07      	ldr	r5, [pc, #28]	; (80062ec <_read_r+0x20>)
 80062d0:	4604      	mov	r4, r0
 80062d2:	4608      	mov	r0, r1
 80062d4:	4611      	mov	r1, r2
 80062d6:	2200      	movs	r2, #0
 80062d8:	602a      	str	r2, [r5, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	f7fd fb95 	bl	8003a0a <_read>
 80062e0:	1c43      	adds	r3, r0, #1
 80062e2:	d102      	bne.n	80062ea <_read_r+0x1e>
 80062e4:	682b      	ldr	r3, [r5, #0]
 80062e6:	b103      	cbz	r3, 80062ea <_read_r+0x1e>
 80062e8:	6023      	str	r3, [r4, #0]
 80062ea:	bd38      	pop	{r3, r4, r5, pc}
 80062ec:	20000358 	.word	0x20000358

080062f0 <__assert_func>:
 80062f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80062f2:	4614      	mov	r4, r2
 80062f4:	461a      	mov	r2, r3
 80062f6:	4b09      	ldr	r3, [pc, #36]	; (800631c <__assert_func+0x2c>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4605      	mov	r5, r0
 80062fc:	68d8      	ldr	r0, [r3, #12]
 80062fe:	b14c      	cbz	r4, 8006314 <__assert_func+0x24>
 8006300:	4b07      	ldr	r3, [pc, #28]	; (8006320 <__assert_func+0x30>)
 8006302:	9100      	str	r1, [sp, #0]
 8006304:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006308:	4906      	ldr	r1, [pc, #24]	; (8006324 <__assert_func+0x34>)
 800630a:	462b      	mov	r3, r5
 800630c:	f000 f80e 	bl	800632c <fiprintf>
 8006310:	f000 fa58 	bl	80067c4 <abort>
 8006314:	4b04      	ldr	r3, [pc, #16]	; (8006328 <__assert_func+0x38>)
 8006316:	461c      	mov	r4, r3
 8006318:	e7f3      	b.n	8006302 <__assert_func+0x12>
 800631a:	bf00      	nop
 800631c:	20000014 	.word	0x20000014
 8006320:	08006c4c 	.word	0x08006c4c
 8006324:	08006c59 	.word	0x08006c59
 8006328:	08006c87 	.word	0x08006c87

0800632c <fiprintf>:
 800632c:	b40e      	push	{r1, r2, r3}
 800632e:	b503      	push	{r0, r1, lr}
 8006330:	4601      	mov	r1, r0
 8006332:	ab03      	add	r3, sp, #12
 8006334:	4805      	ldr	r0, [pc, #20]	; (800634c <fiprintf+0x20>)
 8006336:	f853 2b04 	ldr.w	r2, [r3], #4
 800633a:	6800      	ldr	r0, [r0, #0]
 800633c:	9301      	str	r3, [sp, #4]
 800633e:	f000 f843 	bl	80063c8 <_vfiprintf_r>
 8006342:	b002      	add	sp, #8
 8006344:	f85d eb04 	ldr.w	lr, [sp], #4
 8006348:	b003      	add	sp, #12
 800634a:	4770      	bx	lr
 800634c:	20000014 	.word	0x20000014

08006350 <__ascii_mbtowc>:
 8006350:	b082      	sub	sp, #8
 8006352:	b901      	cbnz	r1, 8006356 <__ascii_mbtowc+0x6>
 8006354:	a901      	add	r1, sp, #4
 8006356:	b142      	cbz	r2, 800636a <__ascii_mbtowc+0x1a>
 8006358:	b14b      	cbz	r3, 800636e <__ascii_mbtowc+0x1e>
 800635a:	7813      	ldrb	r3, [r2, #0]
 800635c:	600b      	str	r3, [r1, #0]
 800635e:	7812      	ldrb	r2, [r2, #0]
 8006360:	1e10      	subs	r0, r2, #0
 8006362:	bf18      	it	ne
 8006364:	2001      	movne	r0, #1
 8006366:	b002      	add	sp, #8
 8006368:	4770      	bx	lr
 800636a:	4610      	mov	r0, r2
 800636c:	e7fb      	b.n	8006366 <__ascii_mbtowc+0x16>
 800636e:	f06f 0001 	mvn.w	r0, #1
 8006372:	e7f8      	b.n	8006366 <__ascii_mbtowc+0x16>

08006374 <__sfputc_r>:
 8006374:	6893      	ldr	r3, [r2, #8]
 8006376:	3b01      	subs	r3, #1
 8006378:	2b00      	cmp	r3, #0
 800637a:	b410      	push	{r4}
 800637c:	6093      	str	r3, [r2, #8]
 800637e:	da08      	bge.n	8006392 <__sfputc_r+0x1e>
 8006380:	6994      	ldr	r4, [r2, #24]
 8006382:	42a3      	cmp	r3, r4
 8006384:	db01      	blt.n	800638a <__sfputc_r+0x16>
 8006386:	290a      	cmp	r1, #10
 8006388:	d103      	bne.n	8006392 <__sfputc_r+0x1e>
 800638a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800638e:	f000 b94b 	b.w	8006628 <__swbuf_r>
 8006392:	6813      	ldr	r3, [r2, #0]
 8006394:	1c58      	adds	r0, r3, #1
 8006396:	6010      	str	r0, [r2, #0]
 8006398:	7019      	strb	r1, [r3, #0]
 800639a:	4608      	mov	r0, r1
 800639c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <__sfputs_r>:
 80063a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a4:	4606      	mov	r6, r0
 80063a6:	460f      	mov	r7, r1
 80063a8:	4614      	mov	r4, r2
 80063aa:	18d5      	adds	r5, r2, r3
 80063ac:	42ac      	cmp	r4, r5
 80063ae:	d101      	bne.n	80063b4 <__sfputs_r+0x12>
 80063b0:	2000      	movs	r0, #0
 80063b2:	e007      	b.n	80063c4 <__sfputs_r+0x22>
 80063b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063b8:	463a      	mov	r2, r7
 80063ba:	4630      	mov	r0, r6
 80063bc:	f7ff ffda 	bl	8006374 <__sfputc_r>
 80063c0:	1c43      	adds	r3, r0, #1
 80063c2:	d1f3      	bne.n	80063ac <__sfputs_r+0xa>
 80063c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063c8 <_vfiprintf_r>:
 80063c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063cc:	460d      	mov	r5, r1
 80063ce:	b09d      	sub	sp, #116	; 0x74
 80063d0:	4614      	mov	r4, r2
 80063d2:	4698      	mov	r8, r3
 80063d4:	4606      	mov	r6, r0
 80063d6:	b118      	cbz	r0, 80063e0 <_vfiprintf_r+0x18>
 80063d8:	6983      	ldr	r3, [r0, #24]
 80063da:	b90b      	cbnz	r3, 80063e0 <_vfiprintf_r+0x18>
 80063dc:	f7fd fdda 	bl	8003f94 <__sinit>
 80063e0:	4b89      	ldr	r3, [pc, #548]	; (8006608 <_vfiprintf_r+0x240>)
 80063e2:	429d      	cmp	r5, r3
 80063e4:	d11b      	bne.n	800641e <_vfiprintf_r+0x56>
 80063e6:	6875      	ldr	r5, [r6, #4]
 80063e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063ea:	07d9      	lsls	r1, r3, #31
 80063ec:	d405      	bmi.n	80063fa <_vfiprintf_r+0x32>
 80063ee:	89ab      	ldrh	r3, [r5, #12]
 80063f0:	059a      	lsls	r2, r3, #22
 80063f2:	d402      	bmi.n	80063fa <_vfiprintf_r+0x32>
 80063f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063f6:	f7fd fe90 	bl	800411a <__retarget_lock_acquire_recursive>
 80063fa:	89ab      	ldrh	r3, [r5, #12]
 80063fc:	071b      	lsls	r3, r3, #28
 80063fe:	d501      	bpl.n	8006404 <_vfiprintf_r+0x3c>
 8006400:	692b      	ldr	r3, [r5, #16]
 8006402:	b9eb      	cbnz	r3, 8006440 <_vfiprintf_r+0x78>
 8006404:	4629      	mov	r1, r5
 8006406:	4630      	mov	r0, r6
 8006408:	f000 f96e 	bl	80066e8 <__swsetup_r>
 800640c:	b1c0      	cbz	r0, 8006440 <_vfiprintf_r+0x78>
 800640e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006410:	07dc      	lsls	r4, r3, #31
 8006412:	d50e      	bpl.n	8006432 <_vfiprintf_r+0x6a>
 8006414:	f04f 30ff 	mov.w	r0, #4294967295
 8006418:	b01d      	add	sp, #116	; 0x74
 800641a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800641e:	4b7b      	ldr	r3, [pc, #492]	; (800660c <_vfiprintf_r+0x244>)
 8006420:	429d      	cmp	r5, r3
 8006422:	d101      	bne.n	8006428 <_vfiprintf_r+0x60>
 8006424:	68b5      	ldr	r5, [r6, #8]
 8006426:	e7df      	b.n	80063e8 <_vfiprintf_r+0x20>
 8006428:	4b79      	ldr	r3, [pc, #484]	; (8006610 <_vfiprintf_r+0x248>)
 800642a:	429d      	cmp	r5, r3
 800642c:	bf08      	it	eq
 800642e:	68f5      	ldreq	r5, [r6, #12]
 8006430:	e7da      	b.n	80063e8 <_vfiprintf_r+0x20>
 8006432:	89ab      	ldrh	r3, [r5, #12]
 8006434:	0598      	lsls	r0, r3, #22
 8006436:	d4ed      	bmi.n	8006414 <_vfiprintf_r+0x4c>
 8006438:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800643a:	f7fd fe6f 	bl	800411c <__retarget_lock_release_recursive>
 800643e:	e7e9      	b.n	8006414 <_vfiprintf_r+0x4c>
 8006440:	2300      	movs	r3, #0
 8006442:	9309      	str	r3, [sp, #36]	; 0x24
 8006444:	2320      	movs	r3, #32
 8006446:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800644a:	f8cd 800c 	str.w	r8, [sp, #12]
 800644e:	2330      	movs	r3, #48	; 0x30
 8006450:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006614 <_vfiprintf_r+0x24c>
 8006454:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006458:	f04f 0901 	mov.w	r9, #1
 800645c:	4623      	mov	r3, r4
 800645e:	469a      	mov	sl, r3
 8006460:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006464:	b10a      	cbz	r2, 800646a <_vfiprintf_r+0xa2>
 8006466:	2a25      	cmp	r2, #37	; 0x25
 8006468:	d1f9      	bne.n	800645e <_vfiprintf_r+0x96>
 800646a:	ebba 0b04 	subs.w	fp, sl, r4
 800646e:	d00b      	beq.n	8006488 <_vfiprintf_r+0xc0>
 8006470:	465b      	mov	r3, fp
 8006472:	4622      	mov	r2, r4
 8006474:	4629      	mov	r1, r5
 8006476:	4630      	mov	r0, r6
 8006478:	f7ff ff93 	bl	80063a2 <__sfputs_r>
 800647c:	3001      	adds	r0, #1
 800647e:	f000 80aa 	beq.w	80065d6 <_vfiprintf_r+0x20e>
 8006482:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006484:	445a      	add	r2, fp
 8006486:	9209      	str	r2, [sp, #36]	; 0x24
 8006488:	f89a 3000 	ldrb.w	r3, [sl]
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 80a2 	beq.w	80065d6 <_vfiprintf_r+0x20e>
 8006492:	2300      	movs	r3, #0
 8006494:	f04f 32ff 	mov.w	r2, #4294967295
 8006498:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800649c:	f10a 0a01 	add.w	sl, sl, #1
 80064a0:	9304      	str	r3, [sp, #16]
 80064a2:	9307      	str	r3, [sp, #28]
 80064a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064a8:	931a      	str	r3, [sp, #104]	; 0x68
 80064aa:	4654      	mov	r4, sl
 80064ac:	2205      	movs	r2, #5
 80064ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064b2:	4858      	ldr	r0, [pc, #352]	; (8006614 <_vfiprintf_r+0x24c>)
 80064b4:	f7f9 fe9c 	bl	80001f0 <memchr>
 80064b8:	9a04      	ldr	r2, [sp, #16]
 80064ba:	b9d8      	cbnz	r0, 80064f4 <_vfiprintf_r+0x12c>
 80064bc:	06d1      	lsls	r1, r2, #27
 80064be:	bf44      	itt	mi
 80064c0:	2320      	movmi	r3, #32
 80064c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064c6:	0713      	lsls	r3, r2, #28
 80064c8:	bf44      	itt	mi
 80064ca:	232b      	movmi	r3, #43	; 0x2b
 80064cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064d0:	f89a 3000 	ldrb.w	r3, [sl]
 80064d4:	2b2a      	cmp	r3, #42	; 0x2a
 80064d6:	d015      	beq.n	8006504 <_vfiprintf_r+0x13c>
 80064d8:	9a07      	ldr	r2, [sp, #28]
 80064da:	4654      	mov	r4, sl
 80064dc:	2000      	movs	r0, #0
 80064de:	f04f 0c0a 	mov.w	ip, #10
 80064e2:	4621      	mov	r1, r4
 80064e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064e8:	3b30      	subs	r3, #48	; 0x30
 80064ea:	2b09      	cmp	r3, #9
 80064ec:	d94e      	bls.n	800658c <_vfiprintf_r+0x1c4>
 80064ee:	b1b0      	cbz	r0, 800651e <_vfiprintf_r+0x156>
 80064f0:	9207      	str	r2, [sp, #28]
 80064f2:	e014      	b.n	800651e <_vfiprintf_r+0x156>
 80064f4:	eba0 0308 	sub.w	r3, r0, r8
 80064f8:	fa09 f303 	lsl.w	r3, r9, r3
 80064fc:	4313      	orrs	r3, r2
 80064fe:	9304      	str	r3, [sp, #16]
 8006500:	46a2      	mov	sl, r4
 8006502:	e7d2      	b.n	80064aa <_vfiprintf_r+0xe2>
 8006504:	9b03      	ldr	r3, [sp, #12]
 8006506:	1d19      	adds	r1, r3, #4
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	9103      	str	r1, [sp, #12]
 800650c:	2b00      	cmp	r3, #0
 800650e:	bfbb      	ittet	lt
 8006510:	425b      	neglt	r3, r3
 8006512:	f042 0202 	orrlt.w	r2, r2, #2
 8006516:	9307      	strge	r3, [sp, #28]
 8006518:	9307      	strlt	r3, [sp, #28]
 800651a:	bfb8      	it	lt
 800651c:	9204      	strlt	r2, [sp, #16]
 800651e:	7823      	ldrb	r3, [r4, #0]
 8006520:	2b2e      	cmp	r3, #46	; 0x2e
 8006522:	d10c      	bne.n	800653e <_vfiprintf_r+0x176>
 8006524:	7863      	ldrb	r3, [r4, #1]
 8006526:	2b2a      	cmp	r3, #42	; 0x2a
 8006528:	d135      	bne.n	8006596 <_vfiprintf_r+0x1ce>
 800652a:	9b03      	ldr	r3, [sp, #12]
 800652c:	1d1a      	adds	r2, r3, #4
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	9203      	str	r2, [sp, #12]
 8006532:	2b00      	cmp	r3, #0
 8006534:	bfb8      	it	lt
 8006536:	f04f 33ff 	movlt.w	r3, #4294967295
 800653a:	3402      	adds	r4, #2
 800653c:	9305      	str	r3, [sp, #20]
 800653e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006624 <_vfiprintf_r+0x25c>
 8006542:	7821      	ldrb	r1, [r4, #0]
 8006544:	2203      	movs	r2, #3
 8006546:	4650      	mov	r0, sl
 8006548:	f7f9 fe52 	bl	80001f0 <memchr>
 800654c:	b140      	cbz	r0, 8006560 <_vfiprintf_r+0x198>
 800654e:	2340      	movs	r3, #64	; 0x40
 8006550:	eba0 000a 	sub.w	r0, r0, sl
 8006554:	fa03 f000 	lsl.w	r0, r3, r0
 8006558:	9b04      	ldr	r3, [sp, #16]
 800655a:	4303      	orrs	r3, r0
 800655c:	3401      	adds	r4, #1
 800655e:	9304      	str	r3, [sp, #16]
 8006560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006564:	482c      	ldr	r0, [pc, #176]	; (8006618 <_vfiprintf_r+0x250>)
 8006566:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800656a:	2206      	movs	r2, #6
 800656c:	f7f9 fe40 	bl	80001f0 <memchr>
 8006570:	2800      	cmp	r0, #0
 8006572:	d03f      	beq.n	80065f4 <_vfiprintf_r+0x22c>
 8006574:	4b29      	ldr	r3, [pc, #164]	; (800661c <_vfiprintf_r+0x254>)
 8006576:	bb1b      	cbnz	r3, 80065c0 <_vfiprintf_r+0x1f8>
 8006578:	9b03      	ldr	r3, [sp, #12]
 800657a:	3307      	adds	r3, #7
 800657c:	f023 0307 	bic.w	r3, r3, #7
 8006580:	3308      	adds	r3, #8
 8006582:	9303      	str	r3, [sp, #12]
 8006584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006586:	443b      	add	r3, r7
 8006588:	9309      	str	r3, [sp, #36]	; 0x24
 800658a:	e767      	b.n	800645c <_vfiprintf_r+0x94>
 800658c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006590:	460c      	mov	r4, r1
 8006592:	2001      	movs	r0, #1
 8006594:	e7a5      	b.n	80064e2 <_vfiprintf_r+0x11a>
 8006596:	2300      	movs	r3, #0
 8006598:	3401      	adds	r4, #1
 800659a:	9305      	str	r3, [sp, #20]
 800659c:	4619      	mov	r1, r3
 800659e:	f04f 0c0a 	mov.w	ip, #10
 80065a2:	4620      	mov	r0, r4
 80065a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065a8:	3a30      	subs	r2, #48	; 0x30
 80065aa:	2a09      	cmp	r2, #9
 80065ac:	d903      	bls.n	80065b6 <_vfiprintf_r+0x1ee>
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d0c5      	beq.n	800653e <_vfiprintf_r+0x176>
 80065b2:	9105      	str	r1, [sp, #20]
 80065b4:	e7c3      	b.n	800653e <_vfiprintf_r+0x176>
 80065b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80065ba:	4604      	mov	r4, r0
 80065bc:	2301      	movs	r3, #1
 80065be:	e7f0      	b.n	80065a2 <_vfiprintf_r+0x1da>
 80065c0:	ab03      	add	r3, sp, #12
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	462a      	mov	r2, r5
 80065c6:	4b16      	ldr	r3, [pc, #88]	; (8006620 <_vfiprintf_r+0x258>)
 80065c8:	a904      	add	r1, sp, #16
 80065ca:	4630      	mov	r0, r6
 80065cc:	f7fd fee4 	bl	8004398 <_printf_float>
 80065d0:	4607      	mov	r7, r0
 80065d2:	1c78      	adds	r0, r7, #1
 80065d4:	d1d6      	bne.n	8006584 <_vfiprintf_r+0x1bc>
 80065d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065d8:	07d9      	lsls	r1, r3, #31
 80065da:	d405      	bmi.n	80065e8 <_vfiprintf_r+0x220>
 80065dc:	89ab      	ldrh	r3, [r5, #12]
 80065de:	059a      	lsls	r2, r3, #22
 80065e0:	d402      	bmi.n	80065e8 <_vfiprintf_r+0x220>
 80065e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065e4:	f7fd fd9a 	bl	800411c <__retarget_lock_release_recursive>
 80065e8:	89ab      	ldrh	r3, [r5, #12]
 80065ea:	065b      	lsls	r3, r3, #25
 80065ec:	f53f af12 	bmi.w	8006414 <_vfiprintf_r+0x4c>
 80065f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065f2:	e711      	b.n	8006418 <_vfiprintf_r+0x50>
 80065f4:	ab03      	add	r3, sp, #12
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	462a      	mov	r2, r5
 80065fa:	4b09      	ldr	r3, [pc, #36]	; (8006620 <_vfiprintf_r+0x258>)
 80065fc:	a904      	add	r1, sp, #16
 80065fe:	4630      	mov	r0, r6
 8006600:	f7fe f96e 	bl	80048e0 <_printf_i>
 8006604:	e7e4      	b.n	80065d0 <_vfiprintf_r+0x208>
 8006606:	bf00      	nop
 8006608:	080069ec 	.word	0x080069ec
 800660c:	08006a0c 	.word	0x08006a0c
 8006610:	080069cc 	.word	0x080069cc
 8006614:	08006c92 	.word	0x08006c92
 8006618:	08006c9c 	.word	0x08006c9c
 800661c:	08004399 	.word	0x08004399
 8006620:	080063a3 	.word	0x080063a3
 8006624:	08006c98 	.word	0x08006c98

08006628 <__swbuf_r>:
 8006628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662a:	460e      	mov	r6, r1
 800662c:	4614      	mov	r4, r2
 800662e:	4605      	mov	r5, r0
 8006630:	b118      	cbz	r0, 800663a <__swbuf_r+0x12>
 8006632:	6983      	ldr	r3, [r0, #24]
 8006634:	b90b      	cbnz	r3, 800663a <__swbuf_r+0x12>
 8006636:	f7fd fcad 	bl	8003f94 <__sinit>
 800663a:	4b21      	ldr	r3, [pc, #132]	; (80066c0 <__swbuf_r+0x98>)
 800663c:	429c      	cmp	r4, r3
 800663e:	d12b      	bne.n	8006698 <__swbuf_r+0x70>
 8006640:	686c      	ldr	r4, [r5, #4]
 8006642:	69a3      	ldr	r3, [r4, #24]
 8006644:	60a3      	str	r3, [r4, #8]
 8006646:	89a3      	ldrh	r3, [r4, #12]
 8006648:	071a      	lsls	r2, r3, #28
 800664a:	d52f      	bpl.n	80066ac <__swbuf_r+0x84>
 800664c:	6923      	ldr	r3, [r4, #16]
 800664e:	b36b      	cbz	r3, 80066ac <__swbuf_r+0x84>
 8006650:	6923      	ldr	r3, [r4, #16]
 8006652:	6820      	ldr	r0, [r4, #0]
 8006654:	1ac0      	subs	r0, r0, r3
 8006656:	6963      	ldr	r3, [r4, #20]
 8006658:	b2f6      	uxtb	r6, r6
 800665a:	4283      	cmp	r3, r0
 800665c:	4637      	mov	r7, r6
 800665e:	dc04      	bgt.n	800666a <__swbuf_r+0x42>
 8006660:	4621      	mov	r1, r4
 8006662:	4628      	mov	r0, r5
 8006664:	f7ff f9d8 	bl	8005a18 <_fflush_r>
 8006668:	bb30      	cbnz	r0, 80066b8 <__swbuf_r+0x90>
 800666a:	68a3      	ldr	r3, [r4, #8]
 800666c:	3b01      	subs	r3, #1
 800666e:	60a3      	str	r3, [r4, #8]
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	1c5a      	adds	r2, r3, #1
 8006674:	6022      	str	r2, [r4, #0]
 8006676:	701e      	strb	r6, [r3, #0]
 8006678:	6963      	ldr	r3, [r4, #20]
 800667a:	3001      	adds	r0, #1
 800667c:	4283      	cmp	r3, r0
 800667e:	d004      	beq.n	800668a <__swbuf_r+0x62>
 8006680:	89a3      	ldrh	r3, [r4, #12]
 8006682:	07db      	lsls	r3, r3, #31
 8006684:	d506      	bpl.n	8006694 <__swbuf_r+0x6c>
 8006686:	2e0a      	cmp	r6, #10
 8006688:	d104      	bne.n	8006694 <__swbuf_r+0x6c>
 800668a:	4621      	mov	r1, r4
 800668c:	4628      	mov	r0, r5
 800668e:	f7ff f9c3 	bl	8005a18 <_fflush_r>
 8006692:	b988      	cbnz	r0, 80066b8 <__swbuf_r+0x90>
 8006694:	4638      	mov	r0, r7
 8006696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006698:	4b0a      	ldr	r3, [pc, #40]	; (80066c4 <__swbuf_r+0x9c>)
 800669a:	429c      	cmp	r4, r3
 800669c:	d101      	bne.n	80066a2 <__swbuf_r+0x7a>
 800669e:	68ac      	ldr	r4, [r5, #8]
 80066a0:	e7cf      	b.n	8006642 <__swbuf_r+0x1a>
 80066a2:	4b09      	ldr	r3, [pc, #36]	; (80066c8 <__swbuf_r+0xa0>)
 80066a4:	429c      	cmp	r4, r3
 80066a6:	bf08      	it	eq
 80066a8:	68ec      	ldreq	r4, [r5, #12]
 80066aa:	e7ca      	b.n	8006642 <__swbuf_r+0x1a>
 80066ac:	4621      	mov	r1, r4
 80066ae:	4628      	mov	r0, r5
 80066b0:	f000 f81a 	bl	80066e8 <__swsetup_r>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	d0cb      	beq.n	8006650 <__swbuf_r+0x28>
 80066b8:	f04f 37ff 	mov.w	r7, #4294967295
 80066bc:	e7ea      	b.n	8006694 <__swbuf_r+0x6c>
 80066be:	bf00      	nop
 80066c0:	080069ec 	.word	0x080069ec
 80066c4:	08006a0c 	.word	0x08006a0c
 80066c8:	080069cc 	.word	0x080069cc

080066cc <__ascii_wctomb>:
 80066cc:	b149      	cbz	r1, 80066e2 <__ascii_wctomb+0x16>
 80066ce:	2aff      	cmp	r2, #255	; 0xff
 80066d0:	bf85      	ittet	hi
 80066d2:	238a      	movhi	r3, #138	; 0x8a
 80066d4:	6003      	strhi	r3, [r0, #0]
 80066d6:	700a      	strbls	r2, [r1, #0]
 80066d8:	f04f 30ff 	movhi.w	r0, #4294967295
 80066dc:	bf98      	it	ls
 80066de:	2001      	movls	r0, #1
 80066e0:	4770      	bx	lr
 80066e2:	4608      	mov	r0, r1
 80066e4:	4770      	bx	lr
	...

080066e8 <__swsetup_r>:
 80066e8:	4b32      	ldr	r3, [pc, #200]	; (80067b4 <__swsetup_r+0xcc>)
 80066ea:	b570      	push	{r4, r5, r6, lr}
 80066ec:	681d      	ldr	r5, [r3, #0]
 80066ee:	4606      	mov	r6, r0
 80066f0:	460c      	mov	r4, r1
 80066f2:	b125      	cbz	r5, 80066fe <__swsetup_r+0x16>
 80066f4:	69ab      	ldr	r3, [r5, #24]
 80066f6:	b913      	cbnz	r3, 80066fe <__swsetup_r+0x16>
 80066f8:	4628      	mov	r0, r5
 80066fa:	f7fd fc4b 	bl	8003f94 <__sinit>
 80066fe:	4b2e      	ldr	r3, [pc, #184]	; (80067b8 <__swsetup_r+0xd0>)
 8006700:	429c      	cmp	r4, r3
 8006702:	d10f      	bne.n	8006724 <__swsetup_r+0x3c>
 8006704:	686c      	ldr	r4, [r5, #4]
 8006706:	89a3      	ldrh	r3, [r4, #12]
 8006708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800670c:	0719      	lsls	r1, r3, #28
 800670e:	d42c      	bmi.n	800676a <__swsetup_r+0x82>
 8006710:	06dd      	lsls	r5, r3, #27
 8006712:	d411      	bmi.n	8006738 <__swsetup_r+0x50>
 8006714:	2309      	movs	r3, #9
 8006716:	6033      	str	r3, [r6, #0]
 8006718:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800671c:	81a3      	strh	r3, [r4, #12]
 800671e:	f04f 30ff 	mov.w	r0, #4294967295
 8006722:	e03e      	b.n	80067a2 <__swsetup_r+0xba>
 8006724:	4b25      	ldr	r3, [pc, #148]	; (80067bc <__swsetup_r+0xd4>)
 8006726:	429c      	cmp	r4, r3
 8006728:	d101      	bne.n	800672e <__swsetup_r+0x46>
 800672a:	68ac      	ldr	r4, [r5, #8]
 800672c:	e7eb      	b.n	8006706 <__swsetup_r+0x1e>
 800672e:	4b24      	ldr	r3, [pc, #144]	; (80067c0 <__swsetup_r+0xd8>)
 8006730:	429c      	cmp	r4, r3
 8006732:	bf08      	it	eq
 8006734:	68ec      	ldreq	r4, [r5, #12]
 8006736:	e7e6      	b.n	8006706 <__swsetup_r+0x1e>
 8006738:	0758      	lsls	r0, r3, #29
 800673a:	d512      	bpl.n	8006762 <__swsetup_r+0x7a>
 800673c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800673e:	b141      	cbz	r1, 8006752 <__swsetup_r+0x6a>
 8006740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006744:	4299      	cmp	r1, r3
 8006746:	d002      	beq.n	800674e <__swsetup_r+0x66>
 8006748:	4630      	mov	r0, r6
 800674a:	f7ff fd73 	bl	8006234 <_free_r>
 800674e:	2300      	movs	r3, #0
 8006750:	6363      	str	r3, [r4, #52]	; 0x34
 8006752:	89a3      	ldrh	r3, [r4, #12]
 8006754:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006758:	81a3      	strh	r3, [r4, #12]
 800675a:	2300      	movs	r3, #0
 800675c:	6063      	str	r3, [r4, #4]
 800675e:	6923      	ldr	r3, [r4, #16]
 8006760:	6023      	str	r3, [r4, #0]
 8006762:	89a3      	ldrh	r3, [r4, #12]
 8006764:	f043 0308 	orr.w	r3, r3, #8
 8006768:	81a3      	strh	r3, [r4, #12]
 800676a:	6923      	ldr	r3, [r4, #16]
 800676c:	b94b      	cbnz	r3, 8006782 <__swsetup_r+0x9a>
 800676e:	89a3      	ldrh	r3, [r4, #12]
 8006770:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006778:	d003      	beq.n	8006782 <__swsetup_r+0x9a>
 800677a:	4621      	mov	r1, r4
 800677c:	4630      	mov	r0, r6
 800677e:	f000 f84d 	bl	800681c <__smakebuf_r>
 8006782:	89a0      	ldrh	r0, [r4, #12]
 8006784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006788:	f010 0301 	ands.w	r3, r0, #1
 800678c:	d00a      	beq.n	80067a4 <__swsetup_r+0xbc>
 800678e:	2300      	movs	r3, #0
 8006790:	60a3      	str	r3, [r4, #8]
 8006792:	6963      	ldr	r3, [r4, #20]
 8006794:	425b      	negs	r3, r3
 8006796:	61a3      	str	r3, [r4, #24]
 8006798:	6923      	ldr	r3, [r4, #16]
 800679a:	b943      	cbnz	r3, 80067ae <__swsetup_r+0xc6>
 800679c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80067a0:	d1ba      	bne.n	8006718 <__swsetup_r+0x30>
 80067a2:	bd70      	pop	{r4, r5, r6, pc}
 80067a4:	0781      	lsls	r1, r0, #30
 80067a6:	bf58      	it	pl
 80067a8:	6963      	ldrpl	r3, [r4, #20]
 80067aa:	60a3      	str	r3, [r4, #8]
 80067ac:	e7f4      	b.n	8006798 <__swsetup_r+0xb0>
 80067ae:	2000      	movs	r0, #0
 80067b0:	e7f7      	b.n	80067a2 <__swsetup_r+0xba>
 80067b2:	bf00      	nop
 80067b4:	20000014 	.word	0x20000014
 80067b8:	080069ec 	.word	0x080069ec
 80067bc:	08006a0c 	.word	0x08006a0c
 80067c0:	080069cc 	.word	0x080069cc

080067c4 <abort>:
 80067c4:	b508      	push	{r3, lr}
 80067c6:	2006      	movs	r0, #6
 80067c8:	f000 f890 	bl	80068ec <raise>
 80067cc:	2001      	movs	r0, #1
 80067ce:	f000 f8d3 	bl	8006978 <_exit>

080067d2 <__swhatbuf_r>:
 80067d2:	b570      	push	{r4, r5, r6, lr}
 80067d4:	460e      	mov	r6, r1
 80067d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067da:	2900      	cmp	r1, #0
 80067dc:	b096      	sub	sp, #88	; 0x58
 80067de:	4614      	mov	r4, r2
 80067e0:	461d      	mov	r5, r3
 80067e2:	da08      	bge.n	80067f6 <__swhatbuf_r+0x24>
 80067e4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	602a      	str	r2, [r5, #0]
 80067ec:	061a      	lsls	r2, r3, #24
 80067ee:	d410      	bmi.n	8006812 <__swhatbuf_r+0x40>
 80067f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067f4:	e00e      	b.n	8006814 <__swhatbuf_r+0x42>
 80067f6:	466a      	mov	r2, sp
 80067f8:	f000 f894 	bl	8006924 <_fstat_r>
 80067fc:	2800      	cmp	r0, #0
 80067fe:	dbf1      	blt.n	80067e4 <__swhatbuf_r+0x12>
 8006800:	9a01      	ldr	r2, [sp, #4]
 8006802:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006806:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800680a:	425a      	negs	r2, r3
 800680c:	415a      	adcs	r2, r3
 800680e:	602a      	str	r2, [r5, #0]
 8006810:	e7ee      	b.n	80067f0 <__swhatbuf_r+0x1e>
 8006812:	2340      	movs	r3, #64	; 0x40
 8006814:	2000      	movs	r0, #0
 8006816:	6023      	str	r3, [r4, #0]
 8006818:	b016      	add	sp, #88	; 0x58
 800681a:	bd70      	pop	{r4, r5, r6, pc}

0800681c <__smakebuf_r>:
 800681c:	898b      	ldrh	r3, [r1, #12]
 800681e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006820:	079d      	lsls	r5, r3, #30
 8006822:	4606      	mov	r6, r0
 8006824:	460c      	mov	r4, r1
 8006826:	d507      	bpl.n	8006838 <__smakebuf_r+0x1c>
 8006828:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800682c:	6023      	str	r3, [r4, #0]
 800682e:	6123      	str	r3, [r4, #16]
 8006830:	2301      	movs	r3, #1
 8006832:	6163      	str	r3, [r4, #20]
 8006834:	b002      	add	sp, #8
 8006836:	bd70      	pop	{r4, r5, r6, pc}
 8006838:	ab01      	add	r3, sp, #4
 800683a:	466a      	mov	r2, sp
 800683c:	f7ff ffc9 	bl	80067d2 <__swhatbuf_r>
 8006840:	9900      	ldr	r1, [sp, #0]
 8006842:	4605      	mov	r5, r0
 8006844:	4630      	mov	r0, r6
 8006846:	f7fd fc93 	bl	8004170 <_malloc_r>
 800684a:	b948      	cbnz	r0, 8006860 <__smakebuf_r+0x44>
 800684c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006850:	059a      	lsls	r2, r3, #22
 8006852:	d4ef      	bmi.n	8006834 <__smakebuf_r+0x18>
 8006854:	f023 0303 	bic.w	r3, r3, #3
 8006858:	f043 0302 	orr.w	r3, r3, #2
 800685c:	81a3      	strh	r3, [r4, #12]
 800685e:	e7e3      	b.n	8006828 <__smakebuf_r+0xc>
 8006860:	4b0d      	ldr	r3, [pc, #52]	; (8006898 <__smakebuf_r+0x7c>)
 8006862:	62b3      	str	r3, [r6, #40]	; 0x28
 8006864:	89a3      	ldrh	r3, [r4, #12]
 8006866:	6020      	str	r0, [r4, #0]
 8006868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800686c:	81a3      	strh	r3, [r4, #12]
 800686e:	9b00      	ldr	r3, [sp, #0]
 8006870:	6163      	str	r3, [r4, #20]
 8006872:	9b01      	ldr	r3, [sp, #4]
 8006874:	6120      	str	r0, [r4, #16]
 8006876:	b15b      	cbz	r3, 8006890 <__smakebuf_r+0x74>
 8006878:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800687c:	4630      	mov	r0, r6
 800687e:	f000 f863 	bl	8006948 <_isatty_r>
 8006882:	b128      	cbz	r0, 8006890 <__smakebuf_r+0x74>
 8006884:	89a3      	ldrh	r3, [r4, #12]
 8006886:	f023 0303 	bic.w	r3, r3, #3
 800688a:	f043 0301 	orr.w	r3, r3, #1
 800688e:	81a3      	strh	r3, [r4, #12]
 8006890:	89a0      	ldrh	r0, [r4, #12]
 8006892:	4305      	orrs	r5, r0
 8006894:	81a5      	strh	r5, [r4, #12]
 8006896:	e7cd      	b.n	8006834 <__smakebuf_r+0x18>
 8006898:	08003f2d 	.word	0x08003f2d

0800689c <_raise_r>:
 800689c:	291f      	cmp	r1, #31
 800689e:	b538      	push	{r3, r4, r5, lr}
 80068a0:	4604      	mov	r4, r0
 80068a2:	460d      	mov	r5, r1
 80068a4:	d904      	bls.n	80068b0 <_raise_r+0x14>
 80068a6:	2316      	movs	r3, #22
 80068a8:	6003      	str	r3, [r0, #0]
 80068aa:	f04f 30ff 	mov.w	r0, #4294967295
 80068ae:	bd38      	pop	{r3, r4, r5, pc}
 80068b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80068b2:	b112      	cbz	r2, 80068ba <_raise_r+0x1e>
 80068b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80068b8:	b94b      	cbnz	r3, 80068ce <_raise_r+0x32>
 80068ba:	4620      	mov	r0, r4
 80068bc:	f000 f830 	bl	8006920 <_getpid_r>
 80068c0:	462a      	mov	r2, r5
 80068c2:	4601      	mov	r1, r0
 80068c4:	4620      	mov	r0, r4
 80068c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068ca:	f000 b817 	b.w	80068fc <_kill_r>
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d00a      	beq.n	80068e8 <_raise_r+0x4c>
 80068d2:	1c59      	adds	r1, r3, #1
 80068d4:	d103      	bne.n	80068de <_raise_r+0x42>
 80068d6:	2316      	movs	r3, #22
 80068d8:	6003      	str	r3, [r0, #0]
 80068da:	2001      	movs	r0, #1
 80068dc:	e7e7      	b.n	80068ae <_raise_r+0x12>
 80068de:	2400      	movs	r4, #0
 80068e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80068e4:	4628      	mov	r0, r5
 80068e6:	4798      	blx	r3
 80068e8:	2000      	movs	r0, #0
 80068ea:	e7e0      	b.n	80068ae <_raise_r+0x12>

080068ec <raise>:
 80068ec:	4b02      	ldr	r3, [pc, #8]	; (80068f8 <raise+0xc>)
 80068ee:	4601      	mov	r1, r0
 80068f0:	6818      	ldr	r0, [r3, #0]
 80068f2:	f7ff bfd3 	b.w	800689c <_raise_r>
 80068f6:	bf00      	nop
 80068f8:	20000014 	.word	0x20000014

080068fc <_kill_r>:
 80068fc:	b538      	push	{r3, r4, r5, lr}
 80068fe:	4d07      	ldr	r5, [pc, #28]	; (800691c <_kill_r+0x20>)
 8006900:	2300      	movs	r3, #0
 8006902:	4604      	mov	r4, r0
 8006904:	4608      	mov	r0, r1
 8006906:	4611      	mov	r1, r2
 8006908:	602b      	str	r3, [r5, #0]
 800690a:	f000 f82d 	bl	8006968 <_kill>
 800690e:	1c43      	adds	r3, r0, #1
 8006910:	d102      	bne.n	8006918 <_kill_r+0x1c>
 8006912:	682b      	ldr	r3, [r5, #0]
 8006914:	b103      	cbz	r3, 8006918 <_kill_r+0x1c>
 8006916:	6023      	str	r3, [r4, #0]
 8006918:	bd38      	pop	{r3, r4, r5, pc}
 800691a:	bf00      	nop
 800691c:	20000358 	.word	0x20000358

08006920 <_getpid_r>:
 8006920:	f7fd b934 	b.w	8003b8c <_getpid>

08006924 <_fstat_r>:
 8006924:	b538      	push	{r3, r4, r5, lr}
 8006926:	4d07      	ldr	r5, [pc, #28]	; (8006944 <_fstat_r+0x20>)
 8006928:	2300      	movs	r3, #0
 800692a:	4604      	mov	r4, r0
 800692c:	4608      	mov	r0, r1
 800692e:	4611      	mov	r1, r2
 8006930:	602b      	str	r3, [r5, #0]
 8006932:	f7fd f94e 	bl	8003bd2 <_fstat>
 8006936:	1c43      	adds	r3, r0, #1
 8006938:	d102      	bne.n	8006940 <_fstat_r+0x1c>
 800693a:	682b      	ldr	r3, [r5, #0]
 800693c:	b103      	cbz	r3, 8006940 <_fstat_r+0x1c>
 800693e:	6023      	str	r3, [r4, #0]
 8006940:	bd38      	pop	{r3, r4, r5, pc}
 8006942:	bf00      	nop
 8006944:	20000358 	.word	0x20000358

08006948 <_isatty_r>:
 8006948:	b538      	push	{r3, r4, r5, lr}
 800694a:	4d06      	ldr	r5, [pc, #24]	; (8006964 <_isatty_r+0x1c>)
 800694c:	2300      	movs	r3, #0
 800694e:	4604      	mov	r4, r0
 8006950:	4608      	mov	r0, r1
 8006952:	602b      	str	r3, [r5, #0]
 8006954:	f7fd faa4 	bl	8003ea0 <_isatty>
 8006958:	1c43      	adds	r3, r0, #1
 800695a:	d102      	bne.n	8006962 <_isatty_r+0x1a>
 800695c:	682b      	ldr	r3, [r5, #0]
 800695e:	b103      	cbz	r3, 8006962 <_isatty_r+0x1a>
 8006960:	6023      	str	r3, [r4, #0]
 8006962:	bd38      	pop	{r3, r4, r5, pc}
 8006964:	20000358 	.word	0x20000358

08006968 <_kill>:
 8006968:	4b02      	ldr	r3, [pc, #8]	; (8006974 <_kill+0xc>)
 800696a:	2258      	movs	r2, #88	; 0x58
 800696c:	601a      	str	r2, [r3, #0]
 800696e:	f04f 30ff 	mov.w	r0, #4294967295
 8006972:	4770      	bx	lr
 8006974:	20000358 	.word	0x20000358

08006978 <_exit>:
 8006978:	e7fe      	b.n	8006978 <_exit>
	...

0800697c <_init>:
 800697c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697e:	bf00      	nop
 8006980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006982:	bc08      	pop	{r3}
 8006984:	469e      	mov	lr, r3
 8006986:	4770      	bx	lr

08006988 <_fini>:
 8006988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800698a:	bf00      	nop
 800698c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800698e:	bc08      	pop	{r3}
 8006990:	469e      	mov	lr, r3
 8006992:	4770      	bx	lr
