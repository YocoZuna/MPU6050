
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007250  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  080073f0  080073f0  000173f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007888  08007888  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007888  08007888  00017888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007890  08007890  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007890  08007890  00017890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007894  08007894  00017894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  200001e4  08007a7c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08007a7c  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9be  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be4  00000000  00000000  0002bbd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  0002d7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  0002e128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ab6  00000000  00000000  0002e9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d71c  00000000  00000000  0004549e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000891c3  00000000  00000000  00052bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbd7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bbc  00000000  00000000  000dbdd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000df98c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003c  00000000  00000000  000df9b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080073d8 	.word	0x080073d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	080073d8 	.word	0x080073d8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <MPU6050_Init>:

	}MPU6050_Config_TypeDef;
  *
  */
void MPU6050_Init(I2C_HandleTypeDef* I2C,MPU6050_Config_TypeDef* mpu6050)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af04      	add	r7, sp, #16
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
	uint8_t temp = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	73fb      	strb	r3, [r7, #15]

	/* Check if MPU6050 is present under 0x68 slave address */
	HAL_I2C_Mem_Read(I2C, MPU6050_DEV_ADDRESS, MPU6050_WHOAMI, 1, &temp, 1, 1000);
 8000f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6e:	9302      	str	r3, [sp, #8]
 8000f70:	2301      	movs	r3, #1
 8000f72:	9301      	str	r3, [sp, #4]
 8000f74:	f107 030f 	add.w	r3, r7, #15
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	2275      	movs	r2, #117	; 0x75
 8000f7e:	21d0      	movs	r1, #208	; 0xd0
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f001 f9e9 	bl	8002358 <HAL_I2C_Mem_Read>
	if (temp == 0x68)
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	2b68      	cmp	r3, #104	; 0x68
 8000f8a:	d162      	bne.n	8001052 <MPU6050_Init+0xf6>
	{
		/* Restart of the device */
		HAL_I2C_Mem_Write(I2C, MPU6050_DEV_ADDRESS, MPU6050_POWER_MANAGMENT_1, 1,0x00, 1, 1000);
 8000f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f90:	9302      	str	r3, [sp, #8]
 8000f92:	2301      	movs	r3, #1
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	2300      	movs	r3, #0
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	226b      	movs	r2, #107	; 0x6b
 8000f9e:	21d0      	movs	r1, #208	; 0xd0
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f001 f8df 	bl	8002164 <HAL_I2C_Mem_Write>

		HAL_Delay(100);
 8000fa6:	2064      	movs	r0, #100	; 0x64
 8000fa8:	f000 fcf0 	bl	800198c <HAL_Delay>
		/* Initialization of clock and tempr sensor */
		if (mpu6050->TEMP_ON_OFF == DISABLE)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	789b      	ldrb	r3, [r3, #2]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d10b      	bne.n	8000fcc <MPU6050_Init+0x70>
		{
			temp  |= mpu6050->CLOCK + MPU6050_TEMP_DIS;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	3308      	adds	r3, #8
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	b25a      	sxtb	r2, r3
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	73fb      	strb	r3, [r7, #15]
 8000fca:	e002      	b.n	8000fd2 <MPU6050_Init+0x76>
		}
		else
		{
			temp  = mpu6050->CLOCK;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	73fb      	strb	r3, [r7, #15]
		}
		/* Restart all sensors */
		HAL_I2C_Mem_Write(I2C, MPU6050_DEV_ADDRESS, MPU6050_USER_CONTROL, 1,(uint8_t*) MPU6050_USER_RESET_ALL_SENS, 1, 1000);
 8000fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd6:	9302      	str	r3, [sp, #8]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	226a      	movs	r2, #106	; 0x6a
 8000fe4:	21d0      	movs	r1, #208	; 0xd0
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f001 f8bc 	bl	8002164 <HAL_I2C_Mem_Write>
		/* Set lowpass filter ad dpfl */
		temp = mpu6050->FILTER;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	785b      	ldrb	r3, [r3, #1]
 8000ff0:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(I2C, MPU6050_DEV_ADDRESS, MPU6050_LOW_PASS_FILTER, 1,&temp, 1, 1000);
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	9302      	str	r3, [sp, #8]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	9301      	str	r3, [sp, #4]
 8000ffc:	f107 030f 	add.w	r3, r7, #15
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2301      	movs	r3, #1
 8001004:	221a      	movs	r2, #26
 8001006:	21d0      	movs	r1, #208	; 0xd0
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f001 f8ab 	bl	8002164 <HAL_I2C_Mem_Write>

		/* Setting range for accelerometer and gyroscope */
		temp = mpu6050->ACC_RANGE;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	78db      	ldrb	r3, [r3, #3]
 8001012:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(I2C, MPU6050_DEV_ADDRESS, MPU6050_ACC_CONFIG, 1,&temp, 1, 1000);
 8001014:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001018:	9302      	str	r3, [sp, #8]
 800101a:	2301      	movs	r3, #1
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	f107 030f 	add.w	r3, r7, #15
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2301      	movs	r3, #1
 8001026:	221c      	movs	r2, #28
 8001028:	21d0      	movs	r1, #208	; 0xd0
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f001 f89a 	bl	8002164 <HAL_I2C_Mem_Write>
		temp = mpu6050->GYRO_RANGE;
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	791b      	ldrb	r3, [r3, #4]
 8001034:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(I2C, MPU6050_DEV_ADDRESS, MPU6050_GYRO_CONFIG, 1,&temp, 1, 1000);
 8001036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103a:	9302      	str	r3, [sp, #8]
 800103c:	2301      	movs	r3, #1
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	f107 030f 	add.w	r3, r7, #15
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2301      	movs	r3, #1
 8001048:	221b      	movs	r2, #27
 800104a:	21d0      	movs	r1, #208	; 0xd0
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f001 f889 	bl	8002164 <HAL_I2C_Mem_Write>

		/*
		 * TODO Configuration of Interrupts
		 */
	}
}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <MPU6050_Get_Gyro_RAW>:
  * int16_t* gyroBuff -> pointer to gyroscope data array
  * where [0] = X axis, [1] = Y axis, [2] = Z axis
  * @retval None
  */
static void MPU6050_Get_Gyro_RAW(I2C_HandleTypeDef* I2C,float* gyroBuff)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b088      	sub	sp, #32
 800105e:	af04      	add	r7, sp, #16
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	6039      	str	r1, [r7, #0]

	uint8_t temp[6];
	HAL_I2C_Mem_Read(I2C, MPU6050_DEV_ADDRESS, MPU6050_GYRO_MEAS, 1, temp, 6, 1000);
 8001064:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001068:	9302      	str	r3, [sp, #8]
 800106a:	2306      	movs	r3, #6
 800106c:	9301      	str	r3, [sp, #4]
 800106e:	f107 0308 	add.w	r3, r7, #8
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2301      	movs	r3, #1
 8001076:	2243      	movs	r2, #67	; 0x43
 8001078:	21d0      	movs	r1, #208	; 0xd0
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f001 f96c 	bl	8002358 <HAL_I2C_Mem_Read>

	gyroBuff[0] = (int16_t) (temp[0]<<8) | temp[1];
 8001080:	7a3b      	ldrb	r3, [r7, #8]
 8001082:	021b      	lsls	r3, r3, #8
 8001084:	b21b      	sxth	r3, r3
 8001086:	461a      	mov	r2, r3
 8001088:	7a7b      	ldrb	r3, [r7, #9]
 800108a:	4313      	orrs	r3, r2
 800108c:	ee07 3a90 	vmov	s15, r3
 8001090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	edc3 7a00 	vstr	s15, [r3]
	gyroBuff[1] = (int16_t) (temp[2]<<8) | temp[3];
 800109a:	7abb      	ldrb	r3, [r7, #10]
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	b21b      	sxth	r3, r3
 80010a0:	461a      	mov	r2, r3
 80010a2:	7afb      	ldrb	r3, [r7, #11]
 80010a4:	431a      	orrs	r2, r3
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	3304      	adds	r3, #4
 80010aa:	ee07 2a90 	vmov	s15, r2
 80010ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b2:	edc3 7a00 	vstr	s15, [r3]
	gyroBuff[2] = (int16_t) (temp[4]<<8) | temp[5];
 80010b6:	7b3b      	ldrb	r3, [r7, #12]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	461a      	mov	r2, r3
 80010be:	7b7b      	ldrb	r3, [r7, #13]
 80010c0:	431a      	orrs	r2, r3
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	3308      	adds	r3, #8
 80010c6:	ee07 2a90 	vmov	s15, r2
 80010ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ce:	edc3 7a00 	vstr	s15, [r3]

}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	0000      	movs	r0, r0
 80010dc:	0000      	movs	r0, r0
	...

080010e0 <MPU6050_Get_Gyro_Value>:
			accvalue[i]  = accBuff[i]/2048;
		}

}
void MPU6050_Get_Gyro_Value(I2C_HandleTypeDef* I2C,MPU6050_Config_TypeDef* mpu6050,float* gyrovalue)
{
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b08d      	sub	sp, #52	; 0x34
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
	float gyroBuff[3];
	assert_param(sizeof(gyrovalue)==12);
	MPU6050_Get_Gyro_RAW(I2C, gyroBuff);
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4619      	mov	r1, r3
 80010f2:	68f8      	ldr	r0, [r7, #12]
 80010f4:	f7ff ffb1 	bl	800105a <MPU6050_Get_Gyro_RAW>
	if (mpu6050->GYRO_RANGE == MPU6050_GYRO_FS_250)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	791b      	ldrb	r3, [r3, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d119      	bne.n	8001134 <MPU6050_Get_Gyro_Value+0x54>
		for ( int i=0;i<3;i++)
 8001100:	2300      	movs	r3, #0
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001104:	e013      	b.n	800112e <MPU6050_Get_Gyro_Value+0x4e>
		{
			gyrovalue[i]  = gyroBuff[i]/131;
 8001106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	3330      	adds	r3, #48	; 0x30
 800110c:	443b      	add	r3, r7
 800110e:	3b1c      	subs	r3, #28
 8001110:	ed93 7a00 	vldr	s14, [r3]
 8001114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	4413      	add	r3, r2
 800111c:	eddf 6a42 	vldr	s13, [pc, #264]	; 8001228 <MPU6050_Get_Gyro_Value+0x148>
 8001120:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001124:	edc3 7a00 	vstr	s15, [r3]
		for ( int i=0;i<3;i++)
 8001128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800112a:	3301      	adds	r3, #1
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800112e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001130:	2b02      	cmp	r3, #2
 8001132:	dde8      	ble.n	8001106 <MPU6050_Get_Gyro_Value+0x26>
		}
	if (mpu6050->GYRO_RANGE == MPU6050_GYRO_FS_500)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	791b      	ldrb	r3, [r3, #4]
 8001138:	2b08      	cmp	r3, #8
 800113a:	d119      	bne.n	8001170 <MPU6050_Get_Gyro_Value+0x90>
		for ( int i=0;i<3;i++)
 800113c:	2300      	movs	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001140:	e013      	b.n	800116a <MPU6050_Get_Gyro_Value+0x8a>
		{
			gyrovalue[i]  = gyroBuff[i]/65.5;
 8001142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	3330      	adds	r3, #48	; 0x30
 8001148:	443b      	add	r3, r7
 800114a:	3b1c      	subs	r3, #28
 800114c:	ed93 7a00 	vldr	s14, [r3]
 8001150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	4413      	add	r3, r2
 8001158:	eddf 6a34 	vldr	s13, [pc, #208]	; 800122c <MPU6050_Get_Gyro_Value+0x14c>
 800115c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001160:	edc3 7a00 	vstr	s15, [r3]
		for ( int i=0;i<3;i++)
 8001164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001166:	3301      	adds	r3, #1
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
 800116a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116c:	2b02      	cmp	r3, #2
 800116e:	dde8      	ble.n	8001142 <MPU6050_Get_Gyro_Value+0x62>
		}
	if (mpu6050->GYRO_RANGE == MPU6050_GYRO_FS_1000)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	791b      	ldrb	r3, [r3, #4]
 8001174:	2b10      	cmp	r3, #16
 8001176:	d122      	bne.n	80011be <MPU6050_Get_Gyro_Value+0xde>
		for ( int i=0;i<3;i++)
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
 800117c:	e01c      	b.n	80011b8 <MPU6050_Get_Gyro_Value+0xd8>
		{
			gyrovalue[i]  = gyroBuff[i]/32.8;
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	3330      	adds	r3, #48	; 0x30
 8001184:	443b      	add	r3, r7
 8001186:	3b1c      	subs	r3, #28
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f9e4 	bl	8000558 <__aeabi_f2d>
 8001190:	a321      	add	r3, pc, #132	; (adr r3, 8001218 <MPU6050_Get_Gyro_Value+0x138>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	f7ff fb61 	bl	800085c <__aeabi_ddiv>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	18d4      	adds	r4, r2, r3
 80011aa:	f7ff fd05 	bl	8000bb8 <__aeabi_d2f>
 80011ae:	4603      	mov	r3, r0
 80011b0:	6023      	str	r3, [r4, #0]
		for ( int i=0;i<3;i++)
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	3301      	adds	r3, #1
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
 80011b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	dddf      	ble.n	800117e <MPU6050_Get_Gyro_Value+0x9e>
		}
	if (mpu6050->GYRO_RANGE == MPU6050_GYRO_FS_2000)
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	791b      	ldrb	r3, [r3, #4]
 80011c2:	2b18      	cmp	r3, #24
 80011c4:	d122      	bne.n	800120c <MPU6050_Get_Gyro_Value+0x12c>
		for ( int i=0;i<3;i++)
 80011c6:	2300      	movs	r3, #0
 80011c8:	623b      	str	r3, [r7, #32]
 80011ca:	e01c      	b.n	8001206 <MPU6050_Get_Gyro_Value+0x126>
		{
			gyrovalue[i]  = gyroBuff[i]/16.4;
 80011cc:	6a3b      	ldr	r3, [r7, #32]
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	3330      	adds	r3, #48	; 0x30
 80011d2:	443b      	add	r3, r7
 80011d4:	3b1c      	subs	r3, #28
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff f9bd 	bl	8000558 <__aeabi_f2d>
 80011de:	a310      	add	r3, pc, #64	; (adr r3, 8001220 <MPU6050_Get_Gyro_Value+0x140>)
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	f7ff fb3a 	bl	800085c <__aeabi_ddiv>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	6a3b      	ldr	r3, [r7, #32]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	18d4      	adds	r4, r2, r3
 80011f8:	f7ff fcde 	bl	8000bb8 <__aeabi_d2f>
 80011fc:	4603      	mov	r3, r0
 80011fe:	6023      	str	r3, [r4, #0]
		for ( int i=0;i<3;i++)
 8001200:	6a3b      	ldr	r3, [r7, #32]
 8001202:	3301      	adds	r3, #1
 8001204:	623b      	str	r3, [r7, #32]
 8001206:	6a3b      	ldr	r3, [r7, #32]
 8001208:	2b02      	cmp	r3, #2
 800120a:	dddf      	ble.n	80011cc <MPU6050_Get_Gyro_Value+0xec>
		}

}
 800120c:	bf00      	nop
 800120e:	3734      	adds	r7, #52	; 0x34
 8001210:	46bd      	mov	sp, r7
 8001212:	bd90      	pop	{r4, r7, pc}
 8001214:	f3af 8000 	nop.w
 8001218:	66666666 	.word	0x66666666
 800121c:	40406666 	.word	0x40406666
 8001220:	66666666 	.word	0x66666666
 8001224:	40306666 	.word	0x40306666
 8001228:	43030000 	.word	0x43030000
 800122c:	42830000 	.word	0x42830000

08001230 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <MX_GPIO_Init+0xd0>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a2c      	ldr	r2, [pc, #176]	; (8001300 <MX_GPIO_Init+0xd0>)
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b2a      	ldr	r3, [pc, #168]	; (8001300 <MX_GPIO_Init+0xd0>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b26      	ldr	r3, [pc, #152]	; (8001300 <MX_GPIO_Init+0xd0>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a25      	ldr	r2, [pc, #148]	; (8001300 <MX_GPIO_Init+0xd0>)
 800126c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b23      	ldr	r3, [pc, #140]	; (8001300 <MX_GPIO_Init+0xd0>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <MX_GPIO_Init+0xd0>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a1e      	ldr	r2, [pc, #120]	; (8001300 <MX_GPIO_Init+0xd0>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <MX_GPIO_Init+0xd0>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <MX_GPIO_Init+0xd0>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a17      	ldr	r2, [pc, #92]	; (8001300 <MX_GPIO_Init+0xd0>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <MX_GPIO_Init+0xd0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2120      	movs	r1, #32
 80012ba:	4812      	ldr	r0, [pc, #72]	; (8001304 <MX_GPIO_Init+0xd4>)
 80012bc:	f000 fdf4 	bl	8001ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012c6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4619      	mov	r1, r3
 80012d6:	480c      	ldr	r0, [pc, #48]	; (8001308 <MX_GPIO_Init+0xd8>)
 80012d8:	f000 fc62 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012dc:	2320      	movs	r3, #32
 80012de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	4804      	ldr	r0, [pc, #16]	; (8001304 <MX_GPIO_Init+0xd4>)
 80012f4:	f000 fc54 	bl	8001ba0 <HAL_GPIO_Init>

}
 80012f8:	bf00      	nop
 80012fa:	3728      	adds	r7, #40	; 0x28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40023800 	.word	0x40023800
 8001304:	40020000 	.word	0x40020000
 8001308:	40020800 	.word	0x40020800

0800130c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <MX_I2C1_Init+0x50>)
 8001312:	4a13      	ldr	r2, [pc, #76]	; (8001360 <MX_I2C1_Init+0x54>)
 8001314:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_I2C1_Init+0x50>)
 8001318:	4a12      	ldr	r2, [pc, #72]	; (8001364 <MX_I2C1_Init+0x58>)
 800131a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <MX_I2C1_Init+0x50>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_I2C1_Init+0x50>)
 8001324:	2200      	movs	r2, #0
 8001326:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_I2C1_Init+0x50>)
 800132a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800132e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <MX_I2C1_Init+0x50>)
 8001332:	2200      	movs	r2, #0
 8001334:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_I2C1_Init+0x50>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <MX_I2C1_Init+0x50>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_I2C1_Init+0x50>)
 8001344:	2200      	movs	r2, #0
 8001346:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001348:	4804      	ldr	r0, [pc, #16]	; (800135c <MX_I2C1_Init+0x50>)
 800134a:	f000 fdc7 	bl	8001edc <HAL_I2C_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001354:	f000 f96c 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000200 	.word	0x20000200
 8001360:	40005400 	.word	0x40005400
 8001364:	00061a80 	.word	0x00061a80

08001368 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	; 0x28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a19      	ldr	r2, [pc, #100]	; (80013ec <HAL_I2C_MspInit+0x84>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d12b      	bne.n	80013e2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <HAL_I2C_MspInit+0x88>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <HAL_I2C_MspInit+0x88>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_I2C_MspInit+0x88>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013a6:	23c0      	movs	r3, #192	; 0xc0
 80013a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013aa:	2312      	movs	r3, #18
 80013ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013b6:	2304      	movs	r3, #4
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	480c      	ldr	r0, [pc, #48]	; (80013f4 <HAL_I2C_MspInit+0x8c>)
 80013c2:	f000 fbed 	bl	8001ba0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <HAL_I2C_MspInit+0x88>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a08      	ldr	r2, [pc, #32]	; (80013f0 <HAL_I2C_MspInit+0x88>)
 80013d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_I2C_MspInit+0x88>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013e2:	bf00      	nop
 80013e4:	3728      	adds	r7, #40	; 0x28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40005400 	.word	0x40005400
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40020400 	.word	0x40020400

080013f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013fc:	b086      	sub	sp, #24
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  MPU6050_Config_TypeDef mpu6050;
  mpu6050.ACC_RANGE = MPU6050_ACC_AFS_2G;
 8001400:	2300      	movs	r3, #0
 8001402:	72fb      	strb	r3, [r7, #11]
  mpu6050.CLOCK = MPU6050_CLOCK_SOURCE_0;
 8001404:	2300      	movs	r3, #0
 8001406:	723b      	strb	r3, [r7, #8]
  mpu6050.FILTER = MPU6050_LOW_PASS_FILTER_0;
 8001408:	2300      	movs	r3, #0
 800140a:	727b      	strb	r3, [r7, #9]
  mpu6050.GYRO_RANGE = MPU6050_GYRO_FS_250;
 800140c:	2300      	movs	r3, #0
 800140e:	733b      	strb	r3, [r7, #12]
  mpu6050.TEMP_ON_OFF = ENABLE;
 8001410:	2301      	movs	r3, #1
 8001412:	72bb      	strb	r3, [r7, #10]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001414:	f000 fa48 	bl	80018a8 <HAL_Init>
  initialise_monitor_handles();
 8001418:	f002 fea2 	bl	8004160 <initialise_monitor_handles>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800141c:	f000 f89e 	bl	800155c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001420:	f7ff ff06 	bl	8001230 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001424:	f000 f9a4 	bl	8001770 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001428:	f7ff ff70 	bl	800130c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init(&hi2c1, &mpu6050);
 800142c:	f107 0308 	add.w	r3, r7, #8
 8001430:	4619      	mov	r1, r3
 8001432:	4847      	ldr	r0, [pc, #284]	; (8001550 <main+0x158>)
 8001434:	f7ff fd92 	bl	8000f5c <MPU6050_Init>
  int16_t AccBuff[3];
  /* USER CODE END 2 */
  float* Roll=0;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  float* Pitch=0;
 800143c:	2300      	movs	r3, #0
 800143e:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  MPU6050_Get_Gyro_Value(&hi2c1, &mpu6050, AccBuff);
 8001440:	463a      	mov	r2, r7
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	4619      	mov	r1, r3
 8001448:	4841      	ldr	r0, [pc, #260]	; (8001550 <main+0x158>)
 800144a:	f7ff fe49 	bl	80010e0 <MPU6050_Get_Gyro_Value>
	  //HAL_I2C_Mem_Read(&hi2c1, MPU6050_DEV_ADDRESS, MPU6050_ACC_MEAS, 1, AccBuff, 1, HAL_MAX_DELAY);

	  *Roll = atan2(AccBuff[1], AccBuff[2]) * 180.0 / 3.14f;
 800144e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff f86e 	bl	8000534 <__aeabi_i2d>
 8001458:	4680      	mov	r8, r0
 800145a:	4689      	mov	r9, r1
 800145c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff f867 	bl	8000534 <__aeabi_i2d>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	ec43 2b11 	vmov	d1, r2, r3
 800146e:	ec49 8b10 	vmov	d0, r8, r9
 8001472:	f005 fc51 	bl	8006d18 <atan2>
 8001476:	ec51 0b10 	vmov	r0, r1, d0
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	4b35      	ldr	r3, [pc, #212]	; (8001554 <main+0x15c>)
 8001480:	f7ff f8c2 	bl	8000608 <__aeabi_dmul>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4610      	mov	r0, r2
 800148a:	4619      	mov	r1, r3
 800148c:	a32e      	add	r3, pc, #184	; (adr r3, 8001548 <main+0x150>)
 800148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001492:	f7ff f9e3 	bl	800085c <__aeabi_ddiv>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4610      	mov	r0, r2
 800149c:	4619      	mov	r1, r3
 800149e:	f7ff fb8b 	bl	8000bb8 <__aeabi_d2f>
 80014a2:	4602      	mov	r2, r0
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	601a      	str	r2, [r3, #0]
	  *Pitch = -(atan2(AccBuff[0], sqrt(AccBuff[1]*AccBuff[1] +AccBuff[2]*AccBuff[2]))*180.0)/3.14f;
 80014a8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f841 	bl	8000534 <__aeabi_i2d>
 80014b2:	4680      	mov	r8, r0
 80014b4:	4689      	mov	r9, r1
 80014b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014ba:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80014be:	fb03 f202 	mul.w	r2, r3, r2
 80014c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014c6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80014ca:	fb01 f303 	mul.w	r3, r1, r3
 80014ce:	4413      	add	r3, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff f82f 	bl	8000534 <__aeabi_i2d>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	ec43 2b10 	vmov	d0, r2, r3
 80014de:	f005 fc1d 	bl	8006d1c <sqrt>
 80014e2:	eeb0 7a40 	vmov.f32	s14, s0
 80014e6:	eef0 7a60 	vmov.f32	s15, s1
 80014ea:	eeb0 1a47 	vmov.f32	s2, s14
 80014ee:	eef0 1a67 	vmov.f32	s3, s15
 80014f2:	ec49 8b10 	vmov	d0, r8, r9
 80014f6:	f005 fc0f 	bl	8006d18 <atan2>
 80014fa:	ec51 0b10 	vmov	r0, r1, d0
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <main+0x15c>)
 8001504:	f7ff f880 	bl	8000608 <__aeabi_dmul>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4614      	mov	r4, r2
 800150e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001512:	a30d      	add	r3, pc, #52	; (adr r3, 8001548 <main+0x150>)
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	4620      	mov	r0, r4
 800151a:	4629      	mov	r1, r5
 800151c:	f7ff f99e 	bl	800085c <__aeabi_ddiv>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	f7ff fb46 	bl	8000bb8 <__aeabi_d2f>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	601a      	str	r2, [r3, #0]
	  //printf("Gyro values X:%.2f  Y:%.2f  Z:%.2f\n",(float)AccBuff[0],(float)AccBuff[1],(float)AccBuff[2]);
	  printf("Roll:%.2f  Pitch:%.2f\n",Roll,Pitch);
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	6979      	ldr	r1, [r7, #20]
 8001536:	4808      	ldr	r0, [pc, #32]	; (8001558 <main+0x160>)
 8001538:	f003 fcb8 	bl	8004eac <iprintf>
	  HAL_Delay(500);
 800153c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001540:	f000 fa24 	bl	800198c <HAL_Delay>
	  MPU6050_Get_Gyro_Value(&hi2c1, &mpu6050, AccBuff);
 8001544:	e77c      	b.n	8001440 <main+0x48>
 8001546:	bf00      	nop
 8001548:	60000000 	.word	0x60000000
 800154c:	40091eb8 	.word	0x40091eb8
 8001550:	20000200 	.word	0x20000200
 8001554:	40668000 	.word	0x40668000
 8001558:	080073f0 	.word	0x080073f0

0800155c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b094      	sub	sp, #80	; 0x50
 8001560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001562:	f107 0320 	add.w	r3, r7, #32
 8001566:	2230      	movs	r2, #48	; 0x30
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f002 ff97 	bl	800449e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001580:	2300      	movs	r3, #0
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	4b28      	ldr	r3, [pc, #160]	; (8001628 <SystemClock_Config+0xcc>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	4a27      	ldr	r2, [pc, #156]	; (8001628 <SystemClock_Config+0xcc>)
 800158a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158e:	6413      	str	r3, [r2, #64]	; 0x40
 8001590:	4b25      	ldr	r3, [pc, #148]	; (8001628 <SystemClock_Config+0xcc>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	4b22      	ldr	r3, [pc, #136]	; (800162c <SystemClock_Config+0xd0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a21      	ldr	r2, [pc, #132]	; (800162c <SystemClock_Config+0xd0>)
 80015a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	4b1f      	ldr	r3, [pc, #124]	; (800162c <SystemClock_Config+0xd0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015b8:	2302      	movs	r3, #2
 80015ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015bc:	2301      	movs	r3, #1
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015c0:	2310      	movs	r3, #16
 80015c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c4:	2302      	movs	r3, #2
 80015c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015c8:	2300      	movs	r3, #0
 80015ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015cc:	2310      	movs	r3, #16
 80015ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015d0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015d6:	2304      	movs	r3, #4
 80015d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015da:	2304      	movs	r3, #4
 80015dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015de:	f107 0320 	add.w	r3, r7, #32
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 fc3a 	bl	8002e5c <HAL_RCC_OscConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80015ee:	f000 f81f 	bl	8001630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f2:	230f      	movs	r3, #15
 80015f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f6:	2302      	movs	r3, #2
 80015f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001602:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	2102      	movs	r1, #2
 800160e:	4618      	mov	r0, r3
 8001610:	f001 fe9c 	bl	800334c <HAL_RCC_ClockConfig>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800161a:	f000 f809 	bl	8001630 <Error_Handler>
  }
}
 800161e:	bf00      	nop
 8001620:	3750      	adds	r7, #80	; 0x50
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800
 800162c:	40007000 	.word	0x40007000

08001630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001634:	b672      	cpsid	i
}
 8001636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001638:	e7fe      	b.n	8001638 <Error_Handler+0x8>
	...

0800163c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <HAL_MspInit+0x4c>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	4a0f      	ldr	r2, [pc, #60]	; (8001688 <HAL_MspInit+0x4c>)
 800164c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001650:	6453      	str	r3, [r2, #68]	; 0x44
 8001652:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <HAL_MspInit+0x4c>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	603b      	str	r3, [r7, #0]
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_MspInit+0x4c>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a08      	ldr	r2, [pc, #32]	; (8001688 <HAL_MspInit+0x4c>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_MspInit+0x4c>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800167a:	2007      	movs	r0, #7
 800167c:	f000 fa5c 	bl	8001b38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40023800 	.word	0x40023800

0800168c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <NMI_Handler+0x4>

08001692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001696:	e7fe      	b.n	8001696 <HardFault_Handler+0x4>

08001698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800169c:	e7fe      	b.n	800169c <MemManage_Handler+0x4>

0800169e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <BusFault_Handler+0x4>

080016a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <UsageFault_Handler+0x4>

080016aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d8:	f000 f938 	bl	800194c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}

080016e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e8:	4a14      	ldr	r2, [pc, #80]	; (800173c <_sbrk+0x5c>)
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <_sbrk+0x60>)
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f4:	4b13      	ldr	r3, [pc, #76]	; (8001744 <_sbrk+0x64>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d102      	bne.n	8001702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <_sbrk+0x64>)
 80016fe:	4a12      	ldr	r2, [pc, #72]	; (8001748 <_sbrk+0x68>)
 8001700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <_sbrk+0x64>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	429a      	cmp	r2, r3
 800170e:	d207      	bcs.n	8001720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001710:	f002 fda2 	bl	8004258 <__errno>
 8001714:	4603      	mov	r3, r0
 8001716:	220c      	movs	r2, #12
 8001718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
 800171e:	e009      	b.n	8001734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <_sbrk+0x64>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001726:	4b07      	ldr	r3, [pc, #28]	; (8001744 <_sbrk+0x64>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	4a05      	ldr	r2, [pc, #20]	; (8001744 <_sbrk+0x64>)
 8001730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001732:	68fb      	ldr	r3, [r7, #12]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20020000 	.word	0x20020000
 8001740:	00000400 	.word	0x00000400
 8001744:	20000254 	.word	0x20000254
 8001748:	20000360 	.word	0x20000360

0800174c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <SystemInit+0x20>)
 8001752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <SystemInit+0x20>)
 8001758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800175c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <MX_USART2_UART_Init+0x4c>)
 8001776:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <MX_USART2_UART_Init+0x50>)
 8001778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <MX_USART2_UART_Init+0x4c>)
 800177c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <MX_USART2_UART_Init+0x4c>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_USART2_UART_Init+0x4c>)
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <MX_USART2_UART_Init+0x4c>)
 8001790:	2200      	movs	r2, #0
 8001792:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_USART2_UART_Init+0x4c>)
 8001796:	220c      	movs	r2, #12
 8001798:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <MX_USART2_UART_Init+0x4c>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_USART2_UART_Init+0x4c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <MX_USART2_UART_Init+0x4c>)
 80017a8:	f001 fff0 	bl	800378c <HAL_UART_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017b2:	f7ff ff3d 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000258 	.word	0x20000258
 80017c0:	40004400 	.word	0x40004400

080017c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a19      	ldr	r2, [pc, #100]	; (8001848 <HAL_UART_MspInit+0x84>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d12b      	bne.n	800183e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	4b18      	ldr	r3, [pc, #96]	; (800184c <HAL_UART_MspInit+0x88>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	4a17      	ldr	r2, [pc, #92]	; (800184c <HAL_UART_MspInit+0x88>)
 80017f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f4:	6413      	str	r3, [r2, #64]	; 0x40
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <HAL_UART_MspInit+0x88>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <HAL_UART_MspInit+0x88>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a10      	ldr	r2, [pc, #64]	; (800184c <HAL_UART_MspInit+0x88>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <HAL_UART_MspInit+0x88>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800181e:	230c      	movs	r3, #12
 8001820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182a:	2303      	movs	r3, #3
 800182c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800182e:	2307      	movs	r3, #7
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	4805      	ldr	r0, [pc, #20]	; (8001850 <HAL_UART_MspInit+0x8c>)
 800183a:	f000 f9b1 	bl	8001ba0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800183e:	bf00      	nop
 8001840:	3728      	adds	r7, #40	; 0x28
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40004400 	.word	0x40004400
 800184c:	40023800 	.word	0x40023800
 8001850:	40020000 	.word	0x40020000

08001854 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001854:	f8df d034 	ldr.w	sp, [pc, #52]	; 800188c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001858:	480d      	ldr	r0, [pc, #52]	; (8001890 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800185a:	490e      	ldr	r1, [pc, #56]	; (8001894 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800185c:	4a0e      	ldr	r2, [pc, #56]	; (8001898 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001860:	e002      	b.n	8001868 <LoopCopyDataInit>

08001862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001866:	3304      	adds	r3, #4

08001868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800186c:	d3f9      	bcc.n	8001862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186e:	4a0b      	ldr	r2, [pc, #44]	; (800189c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001870:	4c0b      	ldr	r4, [pc, #44]	; (80018a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001874:	e001      	b.n	800187a <LoopFillZerobss>

08001876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001878:	3204      	adds	r2, #4

0800187a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800187c:	d3fb      	bcc.n	8001876 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800187e:	f7ff ff65 	bl	800174c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001882:	f002 fde5 	bl	8004450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001886:	f7ff fdb7 	bl	80013f8 <main>
  bx  lr    
 800188a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800188c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001894:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001898:	08007898 	.word	0x08007898
  ldr r2, =_sbss
 800189c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80018a0:	2000035c 	.word	0x2000035c

080018a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018a4:	e7fe      	b.n	80018a4 <ADC_IRQHandler>
	...

080018a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <HAL_Init+0x40>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a0d      	ldr	r2, [pc, #52]	; (80018e8 <HAL_Init+0x40>)
 80018b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <HAL_Init+0x40>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <HAL_Init+0x40>)
 80018be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <HAL_Init+0x40>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a07      	ldr	r2, [pc, #28]	; (80018e8 <HAL_Init+0x40>)
 80018ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d0:	2003      	movs	r0, #3
 80018d2:	f000 f931 	bl	8001b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018d6:	2000      	movs	r0, #0
 80018d8:	f000 f808 	bl	80018ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018dc:	f7ff feae 	bl	800163c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40023c00 	.word	0x40023c00

080018ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_InitTick+0x54>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <HAL_InitTick+0x58>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	4619      	mov	r1, r3
 80018fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001902:	fbb3 f3f1 	udiv	r3, r3, r1
 8001906:	fbb2 f3f3 	udiv	r3, r2, r3
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f93b 	bl	8001b86 <HAL_SYSTICK_Config>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e00e      	b.n	8001938 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b0f      	cmp	r3, #15
 800191e:	d80a      	bhi.n	8001936 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001920:	2200      	movs	r2, #0
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
 8001928:	f000 f911 	bl	8001b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800192c:	4a06      	ldr	r2, [pc, #24]	; (8001948 <HAL_InitTick+0x5c>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001932:	2300      	movs	r3, #0
 8001934:	e000      	b.n	8001938 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
}
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000000 	.word	0x20000000
 8001944:	20000008 	.word	0x20000008
 8001948:	20000004 	.word	0x20000004

0800194c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_IncTick+0x20>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_IncTick+0x24>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4413      	add	r3, r2
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <HAL_IncTick+0x24>)
 800195e:	6013      	str	r3, [r2, #0]
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000008 	.word	0x20000008
 8001970:	2000029c 	.word	0x2000029c

08001974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return uwTick;
 8001978:	4b03      	ldr	r3, [pc, #12]	; (8001988 <HAL_GetTick+0x14>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	2000029c 	.word	0x2000029c

0800198c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001994:	f7ff ffee 	bl	8001974 <HAL_GetTick>
 8001998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a4:	d005      	beq.n	80019b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <HAL_Delay+0x44>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4413      	add	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019b2:	bf00      	nop
 80019b4:	f7ff ffde 	bl	8001974 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d8f7      	bhi.n	80019b4 <HAL_Delay+0x28>
  {
  }
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000008 	.word	0x20000008

080019d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <__NVIC_SetPriorityGrouping+0x44>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019f0:	4013      	ands	r3, r2
 80019f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a06:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <__NVIC_SetPriorityGrouping+0x44>)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	60d3      	str	r3, [r2, #12]
}
 8001a0c:	bf00      	nop
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <__NVIC_GetPriorityGrouping+0x18>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	0a1b      	lsrs	r3, r3, #8
 8001a26:	f003 0307 	and.w	r3, r3, #7
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	6039      	str	r1, [r7, #0]
 8001a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	db0a      	blt.n	8001a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	490c      	ldr	r1, [pc, #48]	; (8001a84 <__NVIC_SetPriority+0x4c>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	0112      	lsls	r2, r2, #4
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a60:	e00a      	b.n	8001a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4908      	ldr	r1, [pc, #32]	; (8001a88 <__NVIC_SetPriority+0x50>)
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	3b04      	subs	r3, #4
 8001a70:	0112      	lsls	r2, r2, #4
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	440b      	add	r3, r1
 8001a76:	761a      	strb	r2, [r3, #24]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000e100 	.word	0xe000e100
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	; 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f1c3 0307 	rsb	r3, r3, #7
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	bf28      	it	cs
 8001aaa:	2304      	movcs	r3, #4
 8001aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	2b06      	cmp	r3, #6
 8001ab4:	d902      	bls.n	8001abc <NVIC_EncodePriority+0x30>
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3b03      	subs	r3, #3
 8001aba:	e000      	b.n	8001abe <NVIC_EncodePriority+0x32>
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	401a      	ands	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43d9      	mvns	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	4313      	orrs	r3, r2
         );
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3724      	adds	r7, #36	; 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b04:	d301      	bcc.n	8001b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b06:	2301      	movs	r3, #1
 8001b08:	e00f      	b.n	8001b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <SysTick_Config+0x40>)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b12:	210f      	movs	r1, #15
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295
 8001b18:	f7ff ff8e 	bl	8001a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <SysTick_Config+0x40>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b22:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <SysTick_Config+0x40>)
 8001b24:	2207      	movs	r2, #7
 8001b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	e000e010 	.word	0xe000e010

08001b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff ff47 	bl	80019d4 <__NVIC_SetPriorityGrouping>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b60:	f7ff ff5c 	bl	8001a1c <__NVIC_GetPriorityGrouping>
 8001b64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	6978      	ldr	r0, [r7, #20]
 8001b6c:	f7ff ff8e 	bl	8001a8c <NVIC_EncodePriority>
 8001b70:	4602      	mov	r2, r0
 8001b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff5d 	bl	8001a38 <__NVIC_SetPriority>
}
 8001b7e:	bf00      	nop
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ffb0 	bl	8001af4 <SysTick_Config>
 8001b94:	4603      	mov	r3, r0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	; 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
 8001bba:	e159      	b.n	8001e70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	f040 8148 	bne.w	8001e6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d005      	beq.n	8001bf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d130      	bne.n	8001c54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f003 0201 	and.w	r2, r3, #1
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	d017      	beq.n	8001c90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d123      	bne.n	8001ce4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	08da      	lsrs	r2, r3, #3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3208      	adds	r2, #8
 8001ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	220f      	movs	r2, #15
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	691a      	ldr	r2, [r3, #16]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	08da      	lsrs	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3208      	adds	r2, #8
 8001cde:	69b9      	ldr	r1, [r7, #24]
 8001ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0203 	and.w	r2, r3, #3
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 80a2 	beq.w	8001e6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	4b57      	ldr	r3, [pc, #348]	; (8001e88 <HAL_GPIO_Init+0x2e8>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	4a56      	ldr	r2, [pc, #344]	; (8001e88 <HAL_GPIO_Init+0x2e8>)
 8001d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d34:	6453      	str	r3, [r2, #68]	; 0x44
 8001d36:	4b54      	ldr	r3, [pc, #336]	; (8001e88 <HAL_GPIO_Init+0x2e8>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d42:	4a52      	ldr	r2, [pc, #328]	; (8001e8c <HAL_GPIO_Init+0x2ec>)
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	089b      	lsrs	r3, r3, #2
 8001d48:	3302      	adds	r3, #2
 8001d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	220f      	movs	r2, #15
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a49      	ldr	r2, [pc, #292]	; (8001e90 <HAL_GPIO_Init+0x2f0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d019      	beq.n	8001da2 <HAL_GPIO_Init+0x202>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a48      	ldr	r2, [pc, #288]	; (8001e94 <HAL_GPIO_Init+0x2f4>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d013      	beq.n	8001d9e <HAL_GPIO_Init+0x1fe>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a47      	ldr	r2, [pc, #284]	; (8001e98 <HAL_GPIO_Init+0x2f8>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d00d      	beq.n	8001d9a <HAL_GPIO_Init+0x1fa>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a46      	ldr	r2, [pc, #280]	; (8001e9c <HAL_GPIO_Init+0x2fc>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d007      	beq.n	8001d96 <HAL_GPIO_Init+0x1f6>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a45      	ldr	r2, [pc, #276]	; (8001ea0 <HAL_GPIO_Init+0x300>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d101      	bne.n	8001d92 <HAL_GPIO_Init+0x1f2>
 8001d8e:	2304      	movs	r3, #4
 8001d90:	e008      	b.n	8001da4 <HAL_GPIO_Init+0x204>
 8001d92:	2307      	movs	r3, #7
 8001d94:	e006      	b.n	8001da4 <HAL_GPIO_Init+0x204>
 8001d96:	2303      	movs	r3, #3
 8001d98:	e004      	b.n	8001da4 <HAL_GPIO_Init+0x204>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e002      	b.n	8001da4 <HAL_GPIO_Init+0x204>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <HAL_GPIO_Init+0x204>
 8001da2:	2300      	movs	r3, #0
 8001da4:	69fa      	ldr	r2, [r7, #28]
 8001da6:	f002 0203 	and.w	r2, r2, #3
 8001daa:	0092      	lsls	r2, r2, #2
 8001dac:	4093      	lsls	r3, r2
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001db4:	4935      	ldr	r1, [pc, #212]	; (8001e8c <HAL_GPIO_Init+0x2ec>)
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	089b      	lsrs	r3, r3, #2
 8001dba:	3302      	adds	r3, #2
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dc2:	4b38      	ldr	r3, [pc, #224]	; (8001ea4 <HAL_GPIO_Init+0x304>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001de6:	4a2f      	ldr	r2, [pc, #188]	; (8001ea4 <HAL_GPIO_Init+0x304>)
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dec:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <HAL_GPIO_Init+0x304>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e10:	4a24      	ldr	r2, [pc, #144]	; (8001ea4 <HAL_GPIO_Init+0x304>)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e16:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <HAL_GPIO_Init+0x304>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e3a:	4a1a      	ldr	r2, [pc, #104]	; (8001ea4 <HAL_GPIO_Init+0x304>)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e40:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <HAL_GPIO_Init+0x304>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e64:	4a0f      	ldr	r2, [pc, #60]	; (8001ea4 <HAL_GPIO_Init+0x304>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	61fb      	str	r3, [r7, #28]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	2b0f      	cmp	r3, #15
 8001e74:	f67f aea2 	bls.w	8001bbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	3724      	adds	r7, #36	; 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40013800 	.word	0x40013800
 8001e90:	40020000 	.word	0x40020000
 8001e94:	40020400 	.word	0x40020400
 8001e98:	40020800 	.word	0x40020800
 8001e9c:	40020c00 	.word	0x40020c00
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40013c00 	.word	0x40013c00

08001ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	807b      	strh	r3, [r7, #2]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eb8:	787b      	ldrb	r3, [r7, #1]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ebe:	887a      	ldrh	r2, [r7, #2]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ec4:	e003      	b.n	8001ece <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ec6:	887b      	ldrh	r3, [r7, #2]
 8001ec8:	041a      	lsls	r2, r3, #16
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	619a      	str	r2, [r3, #24]
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e12b      	b.n	8002146 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d106      	bne.n	8001f08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff fa30 	bl	8001368 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2224      	movs	r2, #36	; 0x24
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 0201 	bic.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f40:	f001 fbfc 	bl	800373c <HAL_RCC_GetPCLK1Freq>
 8001f44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	4a81      	ldr	r2, [pc, #516]	; (8002150 <HAL_I2C_Init+0x274>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d807      	bhi.n	8001f60 <HAL_I2C_Init+0x84>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4a80      	ldr	r2, [pc, #512]	; (8002154 <HAL_I2C_Init+0x278>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	bf94      	ite	ls
 8001f58:	2301      	movls	r3, #1
 8001f5a:	2300      	movhi	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	e006      	b.n	8001f6e <HAL_I2C_Init+0x92>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4a7d      	ldr	r2, [pc, #500]	; (8002158 <HAL_I2C_Init+0x27c>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	bf94      	ite	ls
 8001f68:	2301      	movls	r3, #1
 8001f6a:	2300      	movhi	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e0e7      	b.n	8002146 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4a78      	ldr	r2, [pc, #480]	; (800215c <HAL_I2C_Init+0x280>)
 8001f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7e:	0c9b      	lsrs	r3, r3, #18
 8001f80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68ba      	ldr	r2, [r7, #8]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	4a6a      	ldr	r2, [pc, #424]	; (8002150 <HAL_I2C_Init+0x274>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d802      	bhi.n	8001fb0 <HAL_I2C_Init+0xd4>
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	3301      	adds	r3, #1
 8001fae:	e009      	b.n	8001fc4 <HAL_I2C_Init+0xe8>
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fb6:	fb02 f303 	mul.w	r3, r2, r3
 8001fba:	4a69      	ldr	r2, [pc, #420]	; (8002160 <HAL_I2C_Init+0x284>)
 8001fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc0:	099b      	lsrs	r3, r3, #6
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6812      	ldr	r2, [r2, #0]
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001fd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	495c      	ldr	r1, [pc, #368]	; (8002150 <HAL_I2C_Init+0x274>)
 8001fe0:	428b      	cmp	r3, r1
 8001fe2:	d819      	bhi.n	8002018 <HAL_I2C_Init+0x13c>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	1e59      	subs	r1, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ff2:	1c59      	adds	r1, r3, #1
 8001ff4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ff8:	400b      	ands	r3, r1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00a      	beq.n	8002014 <HAL_I2C_Init+0x138>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	1e59      	subs	r1, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fbb1 f3f3 	udiv	r3, r1, r3
 800200c:	3301      	adds	r3, #1
 800200e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002012:	e051      	b.n	80020b8 <HAL_I2C_Init+0x1dc>
 8002014:	2304      	movs	r3, #4
 8002016:	e04f      	b.n	80020b8 <HAL_I2C_Init+0x1dc>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d111      	bne.n	8002044 <HAL_I2C_Init+0x168>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1e58      	subs	r0, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	440b      	add	r3, r1
 800202e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002032:	3301      	adds	r3, #1
 8002034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002038:	2b00      	cmp	r3, #0
 800203a:	bf0c      	ite	eq
 800203c:	2301      	moveq	r3, #1
 800203e:	2300      	movne	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	e012      	b.n	800206a <HAL_I2C_Init+0x18e>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	1e58      	subs	r0, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6859      	ldr	r1, [r3, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	0099      	lsls	r1, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	fbb0 f3f3 	udiv	r3, r0, r3
 800205a:	3301      	adds	r3, #1
 800205c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002060:	2b00      	cmp	r3, #0
 8002062:	bf0c      	ite	eq
 8002064:	2301      	moveq	r3, #1
 8002066:	2300      	movne	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_I2C_Init+0x196>
 800206e:	2301      	movs	r3, #1
 8002070:	e022      	b.n	80020b8 <HAL_I2C_Init+0x1dc>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10e      	bne.n	8002098 <HAL_I2C_Init+0x1bc>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	1e58      	subs	r0, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6859      	ldr	r1, [r3, #4]
 8002082:	460b      	mov	r3, r1
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	440b      	add	r3, r1
 8002088:	fbb0 f3f3 	udiv	r3, r0, r3
 800208c:	3301      	adds	r3, #1
 800208e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002096:	e00f      	b.n	80020b8 <HAL_I2C_Init+0x1dc>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	1e58      	subs	r0, r3, #1
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6859      	ldr	r1, [r3, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	0099      	lsls	r1, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ae:	3301      	adds	r3, #1
 80020b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	6809      	ldr	r1, [r1, #0]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69da      	ldr	r2, [r3, #28]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6911      	ldr	r1, [r2, #16]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68d2      	ldr	r2, [r2, #12]
 80020f2:	4311      	orrs	r1, r2
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	430b      	orrs	r3, r1
 80020fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695a      	ldr	r2, [r3, #20]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0201 	orr.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2220      	movs	r2, #32
 8002132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	000186a0 	.word	0x000186a0
 8002154:	001e847f 	.word	0x001e847f
 8002158:	003d08ff 	.word	0x003d08ff
 800215c:	431bde83 	.word	0x431bde83
 8002160:	10624dd3 	.word	0x10624dd3

08002164 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af02      	add	r7, sp, #8
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	4608      	mov	r0, r1
 800216e:	4611      	mov	r1, r2
 8002170:	461a      	mov	r2, r3
 8002172:	4603      	mov	r3, r0
 8002174:	817b      	strh	r3, [r7, #10]
 8002176:	460b      	mov	r3, r1
 8002178:	813b      	strh	r3, [r7, #8]
 800217a:	4613      	mov	r3, r2
 800217c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800217e:	f7ff fbf9 	bl	8001974 <HAL_GetTick>
 8002182:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b20      	cmp	r3, #32
 800218e:	f040 80d9 	bne.w	8002344 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	2319      	movs	r3, #25
 8002198:	2201      	movs	r2, #1
 800219a:	496d      	ldr	r1, [pc, #436]	; (8002350 <HAL_I2C_Mem_Write+0x1ec>)
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 fc7f 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80021a8:	2302      	movs	r3, #2
 80021aa:	e0cc      	b.n	8002346 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d101      	bne.n	80021ba <HAL_I2C_Mem_Write+0x56>
 80021b6:	2302      	movs	r3, #2
 80021b8:	e0c5      	b.n	8002346 <HAL_I2C_Mem_Write+0x1e2>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d007      	beq.n	80021e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0201 	orr.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2221      	movs	r2, #33	; 0x21
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2240      	movs	r2, #64	; 0x40
 80021fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6a3a      	ldr	r2, [r7, #32]
 800220a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002210:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002216:	b29a      	uxth	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4a4d      	ldr	r2, [pc, #308]	; (8002354 <HAL_I2C_Mem_Write+0x1f0>)
 8002220:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002222:	88f8      	ldrh	r0, [r7, #6]
 8002224:	893a      	ldrh	r2, [r7, #8]
 8002226:	8979      	ldrh	r1, [r7, #10]
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	9301      	str	r3, [sp, #4]
 800222c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	4603      	mov	r3, r0
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 fab6 	bl	80027a4 <I2C_RequestMemoryWrite>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d052      	beq.n	80022e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e081      	b.n	8002346 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 fd00 	bl	8002c4c <I2C_WaitOnTXEFlagUntilTimeout>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00d      	beq.n	800226e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	2b04      	cmp	r3, #4
 8002258:	d107      	bne.n	800226a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002268:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e06b      	b.n	8002346 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	781a      	ldrb	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002288:	3b01      	subs	r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002294:	b29b      	uxth	r3, r3
 8002296:	3b01      	subs	r3, #1
 8002298:	b29a      	uxth	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d11b      	bne.n	80022e4 <HAL_I2C_Mem_Write+0x180>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d017      	beq.n	80022e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	781a      	ldrb	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022da:	b29b      	uxth	r3, r3
 80022dc:	3b01      	subs	r3, #1
 80022de:	b29a      	uxth	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1aa      	bne.n	8002242 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 fcec 	bl	8002cce <I2C_WaitOnBTFFlagUntilTimeout>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00d      	beq.n	8002318 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	2b04      	cmp	r3, #4
 8002302:	d107      	bne.n	8002314 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002312:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e016      	b.n	8002346 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002326:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2220      	movs	r2, #32
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	e000      	b.n	8002346 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002344:	2302      	movs	r3, #2
  }
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	00100002 	.word	0x00100002
 8002354:	ffff0000 	.word	0xffff0000

08002358 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08c      	sub	sp, #48	; 0x30
 800235c:	af02      	add	r7, sp, #8
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	4608      	mov	r0, r1
 8002362:	4611      	mov	r1, r2
 8002364:	461a      	mov	r2, r3
 8002366:	4603      	mov	r3, r0
 8002368:	817b      	strh	r3, [r7, #10]
 800236a:	460b      	mov	r3, r1
 800236c:	813b      	strh	r3, [r7, #8]
 800236e:	4613      	mov	r3, r2
 8002370:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002372:	f7ff faff 	bl	8001974 <HAL_GetTick>
 8002376:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b20      	cmp	r3, #32
 8002382:	f040 8208 	bne.w	8002796 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	2319      	movs	r3, #25
 800238c:	2201      	movs	r2, #1
 800238e:	497b      	ldr	r1, [pc, #492]	; (800257c <HAL_I2C_Mem_Read+0x224>)
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 fb85 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800239c:	2302      	movs	r3, #2
 800239e:	e1fb      	b.n	8002798 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_I2C_Mem_Read+0x56>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e1f4      	b.n	8002798 <HAL_I2C_Mem_Read+0x440>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d007      	beq.n	80023d4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0201 	orr.w	r2, r2, #1
 80023d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2222      	movs	r2, #34	; 0x22
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2240      	movs	r2, #64	; 0x40
 80023f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002404:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240a:	b29a      	uxth	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4a5b      	ldr	r2, [pc, #364]	; (8002580 <HAL_I2C_Mem_Read+0x228>)
 8002414:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002416:	88f8      	ldrh	r0, [r7, #6]
 8002418:	893a      	ldrh	r2, [r7, #8]
 800241a:	8979      	ldrh	r1, [r7, #10]
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	9301      	str	r3, [sp, #4]
 8002420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	4603      	mov	r3, r0
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 fa52 	bl	80028d0 <I2C_RequestMemoryRead>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e1b0      	b.n	8002798 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243a:	2b00      	cmp	r3, #0
 800243c:	d113      	bne.n	8002466 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800243e:	2300      	movs	r3, #0
 8002440:	623b      	str	r3, [r7, #32]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	623b      	str	r3, [r7, #32]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	623b      	str	r3, [r7, #32]
 8002452:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	e184      	b.n	8002770 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246a:	2b01      	cmp	r3, #1
 800246c:	d11b      	bne.n	80024a6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800247c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	61fb      	str	r3, [r7, #28]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	61fb      	str	r3, [r7, #28]
 8002492:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	e164      	b.n	8002770 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d11b      	bne.n	80024e6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ce:	2300      	movs	r3, #0
 80024d0:	61bb      	str	r3, [r7, #24]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	61bb      	str	r3, [r7, #24]
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	e144      	b.n	8002770 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80024fc:	e138      	b.n	8002770 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002502:	2b03      	cmp	r3, #3
 8002504:	f200 80f1 	bhi.w	80026ea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250c:	2b01      	cmp	r3, #1
 800250e:	d123      	bne.n	8002558 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002512:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 fc1b 	bl	8002d50 <I2C_WaitOnRXNEFlagUntilTimeout>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e139      	b.n	8002798 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691a      	ldr	r2, [r3, #16]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	1c5a      	adds	r2, r3, #1
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002540:	3b01      	subs	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254c:	b29b      	uxth	r3, r3
 800254e:	3b01      	subs	r3, #1
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002556:	e10b      	b.n	8002770 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255c:	2b02      	cmp	r3, #2
 800255e:	d14e      	bne.n	80025fe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002566:	2200      	movs	r2, #0
 8002568:	4906      	ldr	r1, [pc, #24]	; (8002584 <HAL_I2C_Mem_Read+0x22c>)
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 fa98 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d008      	beq.n	8002588 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e10e      	b.n	8002798 <HAL_I2C_Mem_Read+0x440>
 800257a:	bf00      	nop
 800257c:	00100002 	.word	0x00100002
 8002580:	ffff0000 	.word	0xffff0000
 8002584:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002596:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691a      	ldr	r2, [r3, #16]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e6:	3b01      	subs	r3, #1
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025fc:	e0b8      	b.n	8002770 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002604:	2200      	movs	r2, #0
 8002606:	4966      	ldr	r1, [pc, #408]	; (80027a0 <HAL_I2C_Mem_Read+0x448>)
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 fa49 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0bf      	b.n	8002798 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002626:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	691a      	ldr	r2, [r3, #16]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	1c5a      	adds	r2, r3, #1
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002650:	b29b      	uxth	r3, r3
 8002652:	3b01      	subs	r3, #1
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002660:	2200      	movs	r2, #0
 8002662:	494f      	ldr	r1, [pc, #316]	; (80027a0 <HAL_I2C_Mem_Read+0x448>)
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 fa1b 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e091      	b.n	8002798 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002682:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	3b01      	subs	r3, #1
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026de:	b29b      	uxth	r3, r3
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026e8:	e042      	b.n	8002770 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 fb2e 	bl	8002d50 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e04c      	b.n	8002798 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271a:	3b01      	subs	r3, #1
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002726:	b29b      	uxth	r3, r3
 8002728:	3b01      	subs	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	2b04      	cmp	r3, #4
 800273c:	d118      	bne.n	8002770 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002766:	b29b      	uxth	r3, r3
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002774:	2b00      	cmp	r3, #0
 8002776:	f47f aec2 	bne.w	80024fe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	e000      	b.n	8002798 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002796:	2302      	movs	r3, #2
  }
}
 8002798:	4618      	mov	r0, r3
 800279a:	3728      	adds	r7, #40	; 0x28
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	00010004 	.word	0x00010004

080027a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	4608      	mov	r0, r1
 80027ae:	4611      	mov	r1, r2
 80027b0:	461a      	mov	r2, r3
 80027b2:	4603      	mov	r3, r0
 80027b4:	817b      	strh	r3, [r7, #10]
 80027b6:	460b      	mov	r3, r1
 80027b8:	813b      	strh	r3, [r7, #8]
 80027ba:	4613      	mov	r3, r2
 80027bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 f960 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00d      	beq.n	8002802 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027f4:	d103      	bne.n	80027fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e05f      	b.n	80028c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002802:	897b      	ldrh	r3, [r7, #10]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002810:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	6a3a      	ldr	r2, [r7, #32]
 8002816:	492d      	ldr	r1, [pc, #180]	; (80028cc <I2C_RequestMemoryWrite+0x128>)
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f998 	bl	8002b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e04c      	b.n	80028c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800283e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002840:	6a39      	ldr	r1, [r7, #32]
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 fa02 	bl	8002c4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00d      	beq.n	800286a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	2b04      	cmp	r3, #4
 8002854:	d107      	bne.n	8002866 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002864:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e02b      	b.n	80028c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d105      	bne.n	800287c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002870:	893b      	ldrh	r3, [r7, #8]
 8002872:	b2da      	uxtb	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	611a      	str	r2, [r3, #16]
 800287a:	e021      	b.n	80028c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800287c:	893b      	ldrh	r3, [r7, #8]
 800287e:	0a1b      	lsrs	r3, r3, #8
 8002880:	b29b      	uxth	r3, r3
 8002882:	b2da      	uxtb	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800288a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800288c:	6a39      	ldr	r1, [r7, #32]
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 f9dc 	bl	8002c4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00d      	beq.n	80028b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d107      	bne.n	80028b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e005      	b.n	80028c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028b6:	893b      	ldrh	r3, [r7, #8]
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	00010002 	.word	0x00010002

080028d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af02      	add	r7, sp, #8
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	4608      	mov	r0, r1
 80028da:	4611      	mov	r1, r2
 80028dc:	461a      	mov	r2, r3
 80028de:	4603      	mov	r3, r0
 80028e0:	817b      	strh	r3, [r7, #10]
 80028e2:	460b      	mov	r3, r1
 80028e4:	813b      	strh	r3, [r7, #8]
 80028e6:	4613      	mov	r3, r2
 80028e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002908:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	6a3b      	ldr	r3, [r7, #32]
 8002910:	2200      	movs	r2, #0
 8002912:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 f8c2 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00d      	beq.n	800293e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002930:	d103      	bne.n	800293a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002938:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e0aa      	b.n	8002a94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800293e:	897b      	ldrh	r3, [r7, #10]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	461a      	mov	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800294c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	6a3a      	ldr	r2, [r7, #32]
 8002952:	4952      	ldr	r1, [pc, #328]	; (8002a9c <I2C_RequestMemoryRead+0x1cc>)
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 f8fa 	bl	8002b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e097      	b.n	8002a94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800297a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297c:	6a39      	ldr	r1, [r7, #32]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 f964 	bl	8002c4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00d      	beq.n	80029a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	2b04      	cmp	r3, #4
 8002990:	d107      	bne.n	80029a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e076      	b.n	8002a94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029a6:	88fb      	ldrh	r3, [r7, #6]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d105      	bne.n	80029b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029ac:	893b      	ldrh	r3, [r7, #8]
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	611a      	str	r2, [r3, #16]
 80029b6:	e021      	b.n	80029fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029b8:	893b      	ldrh	r3, [r7, #8]
 80029ba:	0a1b      	lsrs	r3, r3, #8
 80029bc:	b29b      	uxth	r3, r3
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c8:	6a39      	ldr	r1, [r7, #32]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f93e 	bl	8002c4c <I2C_WaitOnTXEFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00d      	beq.n	80029f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d107      	bne.n	80029ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e050      	b.n	8002a94 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029f2:	893b      	ldrh	r3, [r7, #8]
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fe:	6a39      	ldr	r1, [r7, #32]
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f923 	bl	8002c4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00d      	beq.n	8002a28 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d107      	bne.n	8002a24 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a22:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e035      	b.n	8002a94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a36:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 f82b 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00d      	beq.n	8002a6c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a5e:	d103      	bne.n	8002a68 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e013      	b.n	8002a94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a6c:	897b      	ldrh	r3, [r7, #10]
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	6a3a      	ldr	r2, [r7, #32]
 8002a80:	4906      	ldr	r1, [pc, #24]	; (8002a9c <I2C_RequestMemoryRead+0x1cc>)
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 f863 	bl	8002b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	00010002 	.word	0x00010002

08002aa0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	4613      	mov	r3, r2
 8002aae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ab0:	e025      	b.n	8002afe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab8:	d021      	beq.n	8002afe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aba:	f7fe ff5b 	bl	8001974 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d302      	bcc.n	8002ad0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d116      	bne.n	8002afe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f043 0220 	orr.w	r2, r3, #32
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e023      	b.n	8002b46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	0c1b      	lsrs	r3, r3, #16
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d10d      	bne.n	8002b24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4013      	ands	r3, r2
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	bf0c      	ite	eq
 8002b1a:	2301      	moveq	r3, #1
 8002b1c:	2300      	movne	r3, #0
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	461a      	mov	r2, r3
 8002b22:	e00c      	b.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	bf0c      	ite	eq
 8002b36:	2301      	moveq	r3, #1
 8002b38:	2300      	movne	r3, #0
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	79fb      	ldrb	r3, [r7, #7]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d0b6      	beq.n	8002ab2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b084      	sub	sp, #16
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]
 8002b5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b5c:	e051      	b.n	8002c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b6c:	d123      	bne.n	8002bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f043 0204 	orr.w	r2, r3, #4
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e046      	b.n	8002c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbc:	d021      	beq.n	8002c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bbe:	f7fe fed9 	bl	8001974 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d302      	bcc.n	8002bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d116      	bne.n	8002c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	f043 0220 	orr.w	r2, r3, #32
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e020      	b.n	8002c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	0c1b      	lsrs	r3, r3, #16
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d10c      	bne.n	8002c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	43da      	mvns	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4013      	ands	r3, r2
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	bf14      	ite	ne
 8002c1e:	2301      	movne	r3, #1
 8002c20:	2300      	moveq	r3, #0
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	e00b      	b.n	8002c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	43da      	mvns	r2, r3
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	4013      	ands	r3, r2
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	bf14      	ite	ne
 8002c38:	2301      	movne	r3, #1
 8002c3a:	2300      	moveq	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d18d      	bne.n	8002b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c58:	e02d      	b.n	8002cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f8ce 	bl	8002dfc <I2C_IsAcknowledgeFailed>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e02d      	b.n	8002cc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c70:	d021      	beq.n	8002cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c72:	f7fe fe7f 	bl	8001974 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d302      	bcc.n	8002c88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d116      	bne.n	8002cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f043 0220 	orr.w	r2, r3, #32
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e007      	b.n	8002cc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b80      	cmp	r3, #128	; 0x80
 8002cc2:	d1ca      	bne.n	8002c5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cda:	e02d      	b.n	8002d38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 f88d 	bl	8002dfc <I2C_IsAcknowledgeFailed>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e02d      	b.n	8002d48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf2:	d021      	beq.n	8002d38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf4:	f7fe fe3e 	bl	8001974 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d302      	bcc.n	8002d0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d116      	bne.n	8002d38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	f043 0220 	orr.w	r2, r3, #32
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e007      	b.n	8002d48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d1ca      	bne.n	8002cdc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d5c:	e042      	b.n	8002de4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	2b10      	cmp	r3, #16
 8002d6a:	d119      	bne.n	8002da0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0210 	mvn.w	r2, #16
 8002d74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e029      	b.n	8002df4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da0:	f7fe fde8 	bl	8001974 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d302      	bcc.n	8002db6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d116      	bne.n	8002de4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	f043 0220 	orr.w	r2, r3, #32
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e007      	b.n	8002df4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dee:	2b40      	cmp	r3, #64	; 0x40
 8002df0:	d1b5      	bne.n	8002d5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e12:	d11b      	bne.n	8002e4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	f043 0204 	orr.w	r2, r3, #4
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e000      	b.n	8002e4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
	...

08002e5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e267      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d075      	beq.n	8002f66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e7a:	4b88      	ldr	r3, [pc, #544]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d00c      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e86:	4b85      	ldr	r3, [pc, #532]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d112      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e92:	4b82      	ldr	r3, [pc, #520]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e9e:	d10b      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea0:	4b7e      	ldr	r3, [pc, #504]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d05b      	beq.n	8002f64 <HAL_RCC_OscConfig+0x108>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d157      	bne.n	8002f64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e242      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec0:	d106      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x74>
 8002ec2:	4b76      	ldr	r3, [pc, #472]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a75      	ldr	r2, [pc, #468]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	e01d      	b.n	8002f0c <HAL_RCC_OscConfig+0xb0>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x98>
 8002eda:	4b70      	ldr	r3, [pc, #448]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a6f      	ldr	r2, [pc, #444]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	4b6d      	ldr	r3, [pc, #436]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a6c      	ldr	r2, [pc, #432]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	e00b      	b.n	8002f0c <HAL_RCC_OscConfig+0xb0>
 8002ef4:	4b69      	ldr	r3, [pc, #420]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a68      	ldr	r2, [pc, #416]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	4b66      	ldr	r3, [pc, #408]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a65      	ldr	r2, [pc, #404]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d013      	beq.n	8002f3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7fe fd2e 	bl	8001974 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f1c:	f7fe fd2a 	bl	8001974 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b64      	cmp	r3, #100	; 0x64
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e207      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2e:	4b5b      	ldr	r3, [pc, #364]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0xc0>
 8002f3a:	e014      	b.n	8002f66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fd1a 	bl	8001974 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f44:	f7fe fd16 	bl	8001974 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b64      	cmp	r3, #100	; 0x64
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e1f3      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f56:	4b51      	ldr	r3, [pc, #324]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f0      	bne.n	8002f44 <HAL_RCC_OscConfig+0xe8>
 8002f62:	e000      	b.n	8002f66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d063      	beq.n	800303a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f72:	4b4a      	ldr	r3, [pc, #296]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 030c 	and.w	r3, r3, #12
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00b      	beq.n	8002f96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f7e:	4b47      	ldr	r3, [pc, #284]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d11c      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f8a:	4b44      	ldr	r3, [pc, #272]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d116      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f96:	4b41      	ldr	r3, [pc, #260]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <HAL_RCC_OscConfig+0x152>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d001      	beq.n	8002fae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e1c7      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fae:	4b3b      	ldr	r3, [pc, #236]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4937      	ldr	r1, [pc, #220]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc2:	e03a      	b.n	800303a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d020      	beq.n	800300e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fcc:	4b34      	ldr	r3, [pc, #208]	; (80030a0 <HAL_RCC_OscConfig+0x244>)
 8002fce:	2201      	movs	r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd2:	f7fe fccf 	bl	8001974 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fda:	f7fe fccb 	bl	8001974 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e1a8      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fec:	4b2b      	ldr	r3, [pc, #172]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0f0      	beq.n	8002fda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff8:	4b28      	ldr	r3, [pc, #160]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	4925      	ldr	r1, [pc, #148]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8003008:	4313      	orrs	r3, r2
 800300a:	600b      	str	r3, [r1, #0]
 800300c:	e015      	b.n	800303a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800300e:	4b24      	ldr	r3, [pc, #144]	; (80030a0 <HAL_RCC_OscConfig+0x244>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003014:	f7fe fcae 	bl	8001974 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800301c:	f7fe fcaa 	bl	8001974 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e187      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302e:	4b1b      	ldr	r3, [pc, #108]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d036      	beq.n	80030b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d016      	beq.n	800307c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800304e:	4b15      	ldr	r3, [pc, #84]	; (80030a4 <HAL_RCC_OscConfig+0x248>)
 8003050:	2201      	movs	r2, #1
 8003052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003054:	f7fe fc8e 	bl	8001974 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800305c:	f7fe fc8a 	bl	8001974 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e167      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306e:	4b0b      	ldr	r3, [pc, #44]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8003070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f0      	beq.n	800305c <HAL_RCC_OscConfig+0x200>
 800307a:	e01b      	b.n	80030b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800307c:	4b09      	ldr	r3, [pc, #36]	; (80030a4 <HAL_RCC_OscConfig+0x248>)
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003082:	f7fe fc77 	bl	8001974 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003088:	e00e      	b.n	80030a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800308a:	f7fe fc73 	bl	8001974 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d907      	bls.n	80030a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e150      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
 800309c:	40023800 	.word	0x40023800
 80030a0:	42470000 	.word	0x42470000
 80030a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a8:	4b88      	ldr	r3, [pc, #544]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80030aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1ea      	bne.n	800308a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 8097 	beq.w	80031f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c2:	2300      	movs	r3, #0
 80030c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030c6:	4b81      	ldr	r3, [pc, #516]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10f      	bne.n	80030f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	4b7d      	ldr	r3, [pc, #500]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	4a7c      	ldr	r2, [pc, #496]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80030dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e0:	6413      	str	r3, [r2, #64]	; 0x40
 80030e2:	4b7a      	ldr	r3, [pc, #488]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ea:	60bb      	str	r3, [r7, #8]
 80030ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ee:	2301      	movs	r3, #1
 80030f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f2:	4b77      	ldr	r3, [pc, #476]	; (80032d0 <HAL_RCC_OscConfig+0x474>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d118      	bne.n	8003130 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030fe:	4b74      	ldr	r3, [pc, #464]	; (80032d0 <HAL_RCC_OscConfig+0x474>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a73      	ldr	r2, [pc, #460]	; (80032d0 <HAL_RCC_OscConfig+0x474>)
 8003104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800310a:	f7fe fc33 	bl	8001974 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003112:	f7fe fc2f 	bl	8001974 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e10c      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003124:	4b6a      	ldr	r3, [pc, #424]	; (80032d0 <HAL_RCC_OscConfig+0x474>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0f0      	beq.n	8003112 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d106      	bne.n	8003146 <HAL_RCC_OscConfig+0x2ea>
 8003138:	4b64      	ldr	r3, [pc, #400]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 800313a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313c:	4a63      	ldr	r2, [pc, #396]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	6713      	str	r3, [r2, #112]	; 0x70
 8003144:	e01c      	b.n	8003180 <HAL_RCC_OscConfig+0x324>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b05      	cmp	r3, #5
 800314c:	d10c      	bne.n	8003168 <HAL_RCC_OscConfig+0x30c>
 800314e:	4b5f      	ldr	r3, [pc, #380]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 8003150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003152:	4a5e      	ldr	r2, [pc, #376]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 8003154:	f043 0304 	orr.w	r3, r3, #4
 8003158:	6713      	str	r3, [r2, #112]	; 0x70
 800315a:	4b5c      	ldr	r3, [pc, #368]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 800315c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315e:	4a5b      	ldr	r2, [pc, #364]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	6713      	str	r3, [r2, #112]	; 0x70
 8003166:	e00b      	b.n	8003180 <HAL_RCC_OscConfig+0x324>
 8003168:	4b58      	ldr	r3, [pc, #352]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 800316a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316c:	4a57      	ldr	r2, [pc, #348]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 800316e:	f023 0301 	bic.w	r3, r3, #1
 8003172:	6713      	str	r3, [r2, #112]	; 0x70
 8003174:	4b55      	ldr	r3, [pc, #340]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 8003176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003178:	4a54      	ldr	r2, [pc, #336]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 800317a:	f023 0304 	bic.w	r3, r3, #4
 800317e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d015      	beq.n	80031b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003188:	f7fe fbf4 	bl	8001974 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318e:	e00a      	b.n	80031a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003190:	f7fe fbf0 	bl	8001974 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	f241 3288 	movw	r2, #5000	; 0x1388
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e0cb      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a6:	4b49      	ldr	r3, [pc, #292]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80031a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0ee      	beq.n	8003190 <HAL_RCC_OscConfig+0x334>
 80031b2:	e014      	b.n	80031de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b4:	f7fe fbde 	bl	8001974 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ba:	e00a      	b.n	80031d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031bc:	f7fe fbda 	bl	8001974 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e0b5      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d2:	4b3e      	ldr	r3, [pc, #248]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80031d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1ee      	bne.n	80031bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031de:	7dfb      	ldrb	r3, [r7, #23]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d105      	bne.n	80031f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e4:	4b39      	ldr	r3, [pc, #228]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	4a38      	ldr	r2, [pc, #224]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80031ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 80a1 	beq.w	800333c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031fa:	4b34      	ldr	r3, [pc, #208]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 030c 	and.w	r3, r3, #12
 8003202:	2b08      	cmp	r3, #8
 8003204:	d05c      	beq.n	80032c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d141      	bne.n	8003292 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320e:	4b31      	ldr	r3, [pc, #196]	; (80032d4 <HAL_RCC_OscConfig+0x478>)
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7fe fbae 	bl	8001974 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800321c:	f7fe fbaa 	bl	8001974 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e087      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322e:	4b27      	ldr	r3, [pc, #156]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69da      	ldr	r2, [r3, #28]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	019b      	lsls	r3, r3, #6
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003250:	085b      	lsrs	r3, r3, #1
 8003252:	3b01      	subs	r3, #1
 8003254:	041b      	lsls	r3, r3, #16
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325c:	061b      	lsls	r3, r3, #24
 800325e:	491b      	ldr	r1, [pc, #108]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 8003260:	4313      	orrs	r3, r2
 8003262:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003264:	4b1b      	ldr	r3, [pc, #108]	; (80032d4 <HAL_RCC_OscConfig+0x478>)
 8003266:	2201      	movs	r2, #1
 8003268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326a:	f7fe fb83 	bl	8001974 <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003272:	f7fe fb7f 	bl	8001974 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e05c      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003284:	4b11      	ldr	r3, [pc, #68]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCC_OscConfig+0x416>
 8003290:	e054      	b.n	800333c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003292:	4b10      	ldr	r3, [pc, #64]	; (80032d4 <HAL_RCC_OscConfig+0x478>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003298:	f7fe fb6c 	bl	8001974 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a0:	f7fe fb68 	bl	8001974 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e045      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b2:	4b06      	ldr	r3, [pc, #24]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f0      	bne.n	80032a0 <HAL_RCC_OscConfig+0x444>
 80032be:	e03d      	b.n	800333c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d107      	bne.n	80032d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e038      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
 80032cc:	40023800 	.word	0x40023800
 80032d0:	40007000 	.word	0x40007000
 80032d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032d8:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <HAL_RCC_OscConfig+0x4ec>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d028      	beq.n	8003338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d121      	bne.n	8003338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fe:	429a      	cmp	r2, r3
 8003300:	d11a      	bne.n	8003338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003308:	4013      	ands	r3, r2
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800330e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003310:	4293      	cmp	r3, r2
 8003312:	d111      	bne.n	8003338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331e:	085b      	lsrs	r3, r3, #1
 8003320:	3b01      	subs	r3, #1
 8003322:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003324:	429a      	cmp	r2, r3
 8003326:	d107      	bne.n	8003338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003332:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003334:	429a      	cmp	r2, r3
 8003336:	d001      	beq.n	800333c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e000      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40023800 	.word	0x40023800

0800334c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0cc      	b.n	80034fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003360:	4b68      	ldr	r3, [pc, #416]	; (8003504 <HAL_RCC_ClockConfig+0x1b8>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d90c      	bls.n	8003388 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336e:	4b65      	ldr	r3, [pc, #404]	; (8003504 <HAL_RCC_ClockConfig+0x1b8>)
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003376:	4b63      	ldr	r3, [pc, #396]	; (8003504 <HAL_RCC_ClockConfig+0x1b8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d001      	beq.n	8003388 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e0b8      	b.n	80034fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d020      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033a0:	4b59      	ldr	r3, [pc, #356]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	4a58      	ldr	r2, [pc, #352]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d005      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033b8:	4b53      	ldr	r3, [pc, #332]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	4a52      	ldr	r2, [pc, #328]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c4:	4b50      	ldr	r3, [pc, #320]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	494d      	ldr	r1, [pc, #308]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d044      	beq.n	800346c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d107      	bne.n	80033fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ea:	4b47      	ldr	r3, [pc, #284]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d119      	bne.n	800342a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e07f      	b.n	80034fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d003      	beq.n	800340a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003406:	2b03      	cmp	r3, #3
 8003408:	d107      	bne.n	800341a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340a:	4b3f      	ldr	r3, [pc, #252]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d109      	bne.n	800342a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e06f      	b.n	80034fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341a:	4b3b      	ldr	r3, [pc, #236]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e067      	b.n	80034fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800342a:	4b37      	ldr	r3, [pc, #220]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f023 0203 	bic.w	r2, r3, #3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	4934      	ldr	r1, [pc, #208]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 8003438:	4313      	orrs	r3, r2
 800343a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800343c:	f7fe fa9a 	bl	8001974 <HAL_GetTick>
 8003440:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003442:	e00a      	b.n	800345a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003444:	f7fe fa96 	bl	8001974 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003452:	4293      	cmp	r3, r2
 8003454:	d901      	bls.n	800345a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e04f      	b.n	80034fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345a:	4b2b      	ldr	r3, [pc, #172]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 020c 	and.w	r2, r3, #12
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	429a      	cmp	r2, r3
 800346a:	d1eb      	bne.n	8003444 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800346c:	4b25      	ldr	r3, [pc, #148]	; (8003504 <HAL_RCC_ClockConfig+0x1b8>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d20c      	bcs.n	8003494 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347a:	4b22      	ldr	r3, [pc, #136]	; (8003504 <HAL_RCC_ClockConfig+0x1b8>)
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003482:	4b20      	ldr	r3, [pc, #128]	; (8003504 <HAL_RCC_ClockConfig+0x1b8>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d001      	beq.n	8003494 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e032      	b.n	80034fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	d008      	beq.n	80034b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034a0:	4b19      	ldr	r3, [pc, #100]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	4916      	ldr	r1, [pc, #88]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d009      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034be:	4b12      	ldr	r3, [pc, #72]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	490e      	ldr	r1, [pc, #56]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034d2:	f000 f821 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 80034d6:	4602      	mov	r2, r0
 80034d8:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	091b      	lsrs	r3, r3, #4
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	490a      	ldr	r1, [pc, #40]	; (800350c <HAL_RCC_ClockConfig+0x1c0>)
 80034e4:	5ccb      	ldrb	r3, [r1, r3]
 80034e6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ea:	4a09      	ldr	r2, [pc, #36]	; (8003510 <HAL_RCC_ClockConfig+0x1c4>)
 80034ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034ee:	4b09      	ldr	r3, [pc, #36]	; (8003514 <HAL_RCC_ClockConfig+0x1c8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fe f9fa 	bl	80018ec <HAL_InitTick>

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40023c00 	.word	0x40023c00
 8003508:	40023800 	.word	0x40023800
 800350c:	08007408 	.word	0x08007408
 8003510:	20000000 	.word	0x20000000
 8003514:	20000004 	.word	0x20000004

08003518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800351c:	b094      	sub	sp, #80	; 0x50
 800351e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	647b      	str	r3, [r7, #68]	; 0x44
 8003524:	2300      	movs	r3, #0
 8003526:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003528:	2300      	movs	r3, #0
 800352a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003530:	4b79      	ldr	r3, [pc, #484]	; (8003718 <HAL_RCC_GetSysClockFreq+0x200>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 030c 	and.w	r3, r3, #12
 8003538:	2b08      	cmp	r3, #8
 800353a:	d00d      	beq.n	8003558 <HAL_RCC_GetSysClockFreq+0x40>
 800353c:	2b08      	cmp	r3, #8
 800353e:	f200 80e1 	bhi.w	8003704 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <HAL_RCC_GetSysClockFreq+0x34>
 8003546:	2b04      	cmp	r3, #4
 8003548:	d003      	beq.n	8003552 <HAL_RCC_GetSysClockFreq+0x3a>
 800354a:	e0db      	b.n	8003704 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800354c:	4b73      	ldr	r3, [pc, #460]	; (800371c <HAL_RCC_GetSysClockFreq+0x204>)
 800354e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003550:	e0db      	b.n	800370a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003552:	4b73      	ldr	r3, [pc, #460]	; (8003720 <HAL_RCC_GetSysClockFreq+0x208>)
 8003554:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003556:	e0d8      	b.n	800370a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003558:	4b6f      	ldr	r3, [pc, #444]	; (8003718 <HAL_RCC_GetSysClockFreq+0x200>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003560:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003562:	4b6d      	ldr	r3, [pc, #436]	; (8003718 <HAL_RCC_GetSysClockFreq+0x200>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d063      	beq.n	8003636 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800356e:	4b6a      	ldr	r3, [pc, #424]	; (8003718 <HAL_RCC_GetSysClockFreq+0x200>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	099b      	lsrs	r3, r3, #6
 8003574:	2200      	movs	r2, #0
 8003576:	63bb      	str	r3, [r7, #56]	; 0x38
 8003578:	63fa      	str	r2, [r7, #60]	; 0x3c
 800357a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003580:	633b      	str	r3, [r7, #48]	; 0x30
 8003582:	2300      	movs	r3, #0
 8003584:	637b      	str	r3, [r7, #52]	; 0x34
 8003586:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800358a:	4622      	mov	r2, r4
 800358c:	462b      	mov	r3, r5
 800358e:	f04f 0000 	mov.w	r0, #0
 8003592:	f04f 0100 	mov.w	r1, #0
 8003596:	0159      	lsls	r1, r3, #5
 8003598:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800359c:	0150      	lsls	r0, r2, #5
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	4621      	mov	r1, r4
 80035a4:	1a51      	subs	r1, r2, r1
 80035a6:	6139      	str	r1, [r7, #16]
 80035a8:	4629      	mov	r1, r5
 80035aa:	eb63 0301 	sbc.w	r3, r3, r1
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035bc:	4659      	mov	r1, fp
 80035be:	018b      	lsls	r3, r1, #6
 80035c0:	4651      	mov	r1, sl
 80035c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035c6:	4651      	mov	r1, sl
 80035c8:	018a      	lsls	r2, r1, #6
 80035ca:	4651      	mov	r1, sl
 80035cc:	ebb2 0801 	subs.w	r8, r2, r1
 80035d0:	4659      	mov	r1, fp
 80035d2:	eb63 0901 	sbc.w	r9, r3, r1
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035ea:	4690      	mov	r8, r2
 80035ec:	4699      	mov	r9, r3
 80035ee:	4623      	mov	r3, r4
 80035f0:	eb18 0303 	adds.w	r3, r8, r3
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	462b      	mov	r3, r5
 80035f8:	eb49 0303 	adc.w	r3, r9, r3
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	f04f 0300 	mov.w	r3, #0
 8003606:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800360a:	4629      	mov	r1, r5
 800360c:	024b      	lsls	r3, r1, #9
 800360e:	4621      	mov	r1, r4
 8003610:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003614:	4621      	mov	r1, r4
 8003616:	024a      	lsls	r2, r1, #9
 8003618:	4610      	mov	r0, r2
 800361a:	4619      	mov	r1, r3
 800361c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800361e:	2200      	movs	r2, #0
 8003620:	62bb      	str	r3, [r7, #40]	; 0x28
 8003622:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003624:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003628:	f7fd fb16 	bl	8000c58 <__aeabi_uldivmod>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4613      	mov	r3, r2
 8003632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003634:	e058      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003636:	4b38      	ldr	r3, [pc, #224]	; (8003718 <HAL_RCC_GetSysClockFreq+0x200>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	099b      	lsrs	r3, r3, #6
 800363c:	2200      	movs	r2, #0
 800363e:	4618      	mov	r0, r3
 8003640:	4611      	mov	r1, r2
 8003642:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003646:	623b      	str	r3, [r7, #32]
 8003648:	2300      	movs	r3, #0
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
 800364c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003650:	4642      	mov	r2, r8
 8003652:	464b      	mov	r3, r9
 8003654:	f04f 0000 	mov.w	r0, #0
 8003658:	f04f 0100 	mov.w	r1, #0
 800365c:	0159      	lsls	r1, r3, #5
 800365e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003662:	0150      	lsls	r0, r2, #5
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4641      	mov	r1, r8
 800366a:	ebb2 0a01 	subs.w	sl, r2, r1
 800366e:	4649      	mov	r1, r9
 8003670:	eb63 0b01 	sbc.w	fp, r3, r1
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003680:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003684:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003688:	ebb2 040a 	subs.w	r4, r2, sl
 800368c:	eb63 050b 	sbc.w	r5, r3, fp
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	00eb      	lsls	r3, r5, #3
 800369a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800369e:	00e2      	lsls	r2, r4, #3
 80036a0:	4614      	mov	r4, r2
 80036a2:	461d      	mov	r5, r3
 80036a4:	4643      	mov	r3, r8
 80036a6:	18e3      	adds	r3, r4, r3
 80036a8:	603b      	str	r3, [r7, #0]
 80036aa:	464b      	mov	r3, r9
 80036ac:	eb45 0303 	adc.w	r3, r5, r3
 80036b0:	607b      	str	r3, [r7, #4]
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036be:	4629      	mov	r1, r5
 80036c0:	028b      	lsls	r3, r1, #10
 80036c2:	4621      	mov	r1, r4
 80036c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036c8:	4621      	mov	r1, r4
 80036ca:	028a      	lsls	r2, r1, #10
 80036cc:	4610      	mov	r0, r2
 80036ce:	4619      	mov	r1, r3
 80036d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036d2:	2200      	movs	r2, #0
 80036d4:	61bb      	str	r3, [r7, #24]
 80036d6:	61fa      	str	r2, [r7, #28]
 80036d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036dc:	f7fd fabc 	bl	8000c58 <__aeabi_uldivmod>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4613      	mov	r3, r2
 80036e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036e8:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <HAL_RCC_GetSysClockFreq+0x200>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	0c1b      	lsrs	r3, r3, #16
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	3301      	adds	r3, #1
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80036f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003700:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003702:	e002      	b.n	800370a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003704:	4b05      	ldr	r3, [pc, #20]	; (800371c <HAL_RCC_GetSysClockFreq+0x204>)
 8003706:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003708:	bf00      	nop
    }
  }
  return sysclockfreq;
 800370a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800370c:	4618      	mov	r0, r3
 800370e:	3750      	adds	r7, #80	; 0x50
 8003710:	46bd      	mov	sp, r7
 8003712:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800
 800371c:	00f42400 	.word	0x00f42400
 8003720:	007a1200 	.word	0x007a1200

08003724 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003728:	4b03      	ldr	r3, [pc, #12]	; (8003738 <HAL_RCC_GetHCLKFreq+0x14>)
 800372a:	681b      	ldr	r3, [r3, #0]
}
 800372c:	4618      	mov	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	20000000 	.word	0x20000000

0800373c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003740:	f7ff fff0 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 8003744:	4602      	mov	r2, r0
 8003746:	4b05      	ldr	r3, [pc, #20]	; (800375c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	0a9b      	lsrs	r3, r3, #10
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	4903      	ldr	r1, [pc, #12]	; (8003760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003752:	5ccb      	ldrb	r3, [r1, r3]
 8003754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003758:	4618      	mov	r0, r3
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40023800 	.word	0x40023800
 8003760:	08007418 	.word	0x08007418

08003764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003768:	f7ff ffdc 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 800376c:	4602      	mov	r2, r0
 800376e:	4b05      	ldr	r3, [pc, #20]	; (8003784 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	0b5b      	lsrs	r3, r3, #13
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	4903      	ldr	r1, [pc, #12]	; (8003788 <HAL_RCC_GetPCLK2Freq+0x24>)
 800377a:	5ccb      	ldrb	r3, [r1, r3]
 800377c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003780:	4618      	mov	r0, r3
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40023800 	.word	0x40023800
 8003788:	08007418 	.word	0x08007418

0800378c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e03f      	b.n	800381e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7fe f806 	bl	80017c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2224      	movs	r2, #36	; 0x24
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f829 	bl	8003828 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695a      	ldr	r2, [r3, #20]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003804:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
	...

08003828 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800382c:	b0c0      	sub	sp, #256	; 0x100
 800382e:	af00      	add	r7, sp, #0
 8003830:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003844:	68d9      	ldr	r1, [r3, #12]
 8003846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	ea40 0301 	orr.w	r3, r0, r1
 8003850:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	431a      	orrs	r2, r3
 8003860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	431a      	orrs	r2, r3
 8003868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003880:	f021 010c 	bic.w	r1, r1, #12
 8003884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800388e:	430b      	orrs	r3, r1
 8003890:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800389e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a2:	6999      	ldr	r1, [r3, #24]
 80038a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	ea40 0301 	orr.w	r3, r0, r1
 80038ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	4b8f      	ldr	r3, [pc, #572]	; (8003af4 <UART_SetConfig+0x2cc>)
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d005      	beq.n	80038c8 <UART_SetConfig+0xa0>
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	4b8d      	ldr	r3, [pc, #564]	; (8003af8 <UART_SetConfig+0x2d0>)
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d104      	bne.n	80038d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038c8:	f7ff ff4c 	bl	8003764 <HAL_RCC_GetPCLK2Freq>
 80038cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80038d0:	e003      	b.n	80038da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038d2:	f7ff ff33 	bl	800373c <HAL_RCC_GetPCLK1Freq>
 80038d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038e4:	f040 810c 	bne.w	8003b00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038ec:	2200      	movs	r2, #0
 80038ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80038f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80038f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80038fa:	4622      	mov	r2, r4
 80038fc:	462b      	mov	r3, r5
 80038fe:	1891      	adds	r1, r2, r2
 8003900:	65b9      	str	r1, [r7, #88]	; 0x58
 8003902:	415b      	adcs	r3, r3
 8003904:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003906:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800390a:	4621      	mov	r1, r4
 800390c:	eb12 0801 	adds.w	r8, r2, r1
 8003910:	4629      	mov	r1, r5
 8003912:	eb43 0901 	adc.w	r9, r3, r1
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003922:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003926:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800392a:	4690      	mov	r8, r2
 800392c:	4699      	mov	r9, r3
 800392e:	4623      	mov	r3, r4
 8003930:	eb18 0303 	adds.w	r3, r8, r3
 8003934:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003938:	462b      	mov	r3, r5
 800393a:	eb49 0303 	adc.w	r3, r9, r3
 800393e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800394e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003952:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003956:	460b      	mov	r3, r1
 8003958:	18db      	adds	r3, r3, r3
 800395a:	653b      	str	r3, [r7, #80]	; 0x50
 800395c:	4613      	mov	r3, r2
 800395e:	eb42 0303 	adc.w	r3, r2, r3
 8003962:	657b      	str	r3, [r7, #84]	; 0x54
 8003964:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003968:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800396c:	f7fd f974 	bl	8000c58 <__aeabi_uldivmod>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	4b61      	ldr	r3, [pc, #388]	; (8003afc <UART_SetConfig+0x2d4>)
 8003976:	fba3 2302 	umull	r2, r3, r3, r2
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	011c      	lsls	r4, r3, #4
 800397e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003982:	2200      	movs	r2, #0
 8003984:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003988:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800398c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003990:	4642      	mov	r2, r8
 8003992:	464b      	mov	r3, r9
 8003994:	1891      	adds	r1, r2, r2
 8003996:	64b9      	str	r1, [r7, #72]	; 0x48
 8003998:	415b      	adcs	r3, r3
 800399a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800399c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80039a0:	4641      	mov	r1, r8
 80039a2:	eb12 0a01 	adds.w	sl, r2, r1
 80039a6:	4649      	mov	r1, r9
 80039a8:	eb43 0b01 	adc.w	fp, r3, r1
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039c0:	4692      	mov	sl, r2
 80039c2:	469b      	mov	fp, r3
 80039c4:	4643      	mov	r3, r8
 80039c6:	eb1a 0303 	adds.w	r3, sl, r3
 80039ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039ce:	464b      	mov	r3, r9
 80039d0:	eb4b 0303 	adc.w	r3, fp, r3
 80039d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80039d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80039e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80039ec:	460b      	mov	r3, r1
 80039ee:	18db      	adds	r3, r3, r3
 80039f0:	643b      	str	r3, [r7, #64]	; 0x40
 80039f2:	4613      	mov	r3, r2
 80039f4:	eb42 0303 	adc.w	r3, r2, r3
 80039f8:	647b      	str	r3, [r7, #68]	; 0x44
 80039fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a02:	f7fd f929 	bl	8000c58 <__aeabi_uldivmod>
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	4b3b      	ldr	r3, [pc, #236]	; (8003afc <UART_SetConfig+0x2d4>)
 8003a0e:	fba3 2301 	umull	r2, r3, r3, r1
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	2264      	movs	r2, #100	; 0x64
 8003a16:	fb02 f303 	mul.w	r3, r2, r3
 8003a1a:	1acb      	subs	r3, r1, r3
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a22:	4b36      	ldr	r3, [pc, #216]	; (8003afc <UART_SetConfig+0x2d4>)
 8003a24:	fba3 2302 	umull	r2, r3, r3, r2
 8003a28:	095b      	lsrs	r3, r3, #5
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a30:	441c      	add	r4, r3
 8003a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a36:	2200      	movs	r2, #0
 8003a38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a44:	4642      	mov	r2, r8
 8003a46:	464b      	mov	r3, r9
 8003a48:	1891      	adds	r1, r2, r2
 8003a4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a4c:	415b      	adcs	r3, r3
 8003a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a54:	4641      	mov	r1, r8
 8003a56:	1851      	adds	r1, r2, r1
 8003a58:	6339      	str	r1, [r7, #48]	; 0x30
 8003a5a:	4649      	mov	r1, r9
 8003a5c:	414b      	adcs	r3, r1
 8003a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a60:	f04f 0200 	mov.w	r2, #0
 8003a64:	f04f 0300 	mov.w	r3, #0
 8003a68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a6c:	4659      	mov	r1, fp
 8003a6e:	00cb      	lsls	r3, r1, #3
 8003a70:	4651      	mov	r1, sl
 8003a72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a76:	4651      	mov	r1, sl
 8003a78:	00ca      	lsls	r2, r1, #3
 8003a7a:	4610      	mov	r0, r2
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4603      	mov	r3, r0
 8003a80:	4642      	mov	r2, r8
 8003a82:	189b      	adds	r3, r3, r2
 8003a84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a88:	464b      	mov	r3, r9
 8003a8a:	460a      	mov	r2, r1
 8003a8c:	eb42 0303 	adc.w	r3, r2, r3
 8003a90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003aa0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003aa4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	18db      	adds	r3, r3, r3
 8003aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aae:	4613      	mov	r3, r2
 8003ab0:	eb42 0303 	adc.w	r3, r2, r3
 8003ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ab6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003aba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003abe:	f7fd f8cb 	bl	8000c58 <__aeabi_uldivmod>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	4b0d      	ldr	r3, [pc, #52]	; (8003afc <UART_SetConfig+0x2d4>)
 8003ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8003acc:	095b      	lsrs	r3, r3, #5
 8003ace:	2164      	movs	r1, #100	; 0x64
 8003ad0:	fb01 f303 	mul.w	r3, r1, r3
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	3332      	adds	r3, #50	; 0x32
 8003ada:	4a08      	ldr	r2, [pc, #32]	; (8003afc <UART_SetConfig+0x2d4>)
 8003adc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae0:	095b      	lsrs	r3, r3, #5
 8003ae2:	f003 0207 	and.w	r2, r3, #7
 8003ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4422      	add	r2, r4
 8003aee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003af0:	e105      	b.n	8003cfe <UART_SetConfig+0x4d6>
 8003af2:	bf00      	nop
 8003af4:	40011000 	.word	0x40011000
 8003af8:	40011400 	.word	0x40011400
 8003afc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b04:	2200      	movs	r2, #0
 8003b06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b12:	4642      	mov	r2, r8
 8003b14:	464b      	mov	r3, r9
 8003b16:	1891      	adds	r1, r2, r2
 8003b18:	6239      	str	r1, [r7, #32]
 8003b1a:	415b      	adcs	r3, r3
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b22:	4641      	mov	r1, r8
 8003b24:	1854      	adds	r4, r2, r1
 8003b26:	4649      	mov	r1, r9
 8003b28:	eb43 0501 	adc.w	r5, r3, r1
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	00eb      	lsls	r3, r5, #3
 8003b36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b3a:	00e2      	lsls	r2, r4, #3
 8003b3c:	4614      	mov	r4, r2
 8003b3e:	461d      	mov	r5, r3
 8003b40:	4643      	mov	r3, r8
 8003b42:	18e3      	adds	r3, r4, r3
 8003b44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b48:	464b      	mov	r3, r9
 8003b4a:	eb45 0303 	adc.w	r3, r5, r3
 8003b4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	f04f 0300 	mov.w	r3, #0
 8003b6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b6e:	4629      	mov	r1, r5
 8003b70:	008b      	lsls	r3, r1, #2
 8003b72:	4621      	mov	r1, r4
 8003b74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b78:	4621      	mov	r1, r4
 8003b7a:	008a      	lsls	r2, r1, #2
 8003b7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b80:	f7fd f86a 	bl	8000c58 <__aeabi_uldivmod>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4b60      	ldr	r3, [pc, #384]	; (8003d0c <UART_SetConfig+0x4e4>)
 8003b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b8e:	095b      	lsrs	r3, r3, #5
 8003b90:	011c      	lsls	r4, r3, #4
 8003b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b96:	2200      	movs	r2, #0
 8003b98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ba0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003ba4:	4642      	mov	r2, r8
 8003ba6:	464b      	mov	r3, r9
 8003ba8:	1891      	adds	r1, r2, r2
 8003baa:	61b9      	str	r1, [r7, #24]
 8003bac:	415b      	adcs	r3, r3
 8003bae:	61fb      	str	r3, [r7, #28]
 8003bb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bb4:	4641      	mov	r1, r8
 8003bb6:	1851      	adds	r1, r2, r1
 8003bb8:	6139      	str	r1, [r7, #16]
 8003bba:	4649      	mov	r1, r9
 8003bbc:	414b      	adcs	r3, r1
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bcc:	4659      	mov	r1, fp
 8003bce:	00cb      	lsls	r3, r1, #3
 8003bd0:	4651      	mov	r1, sl
 8003bd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bd6:	4651      	mov	r1, sl
 8003bd8:	00ca      	lsls	r2, r1, #3
 8003bda:	4610      	mov	r0, r2
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4603      	mov	r3, r0
 8003be0:	4642      	mov	r2, r8
 8003be2:	189b      	adds	r3, r3, r2
 8003be4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003be8:	464b      	mov	r3, r9
 8003bea:	460a      	mov	r2, r1
 8003bec:	eb42 0303 	adc.w	r3, r2, r3
 8003bf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003bfe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c0c:	4649      	mov	r1, r9
 8003c0e:	008b      	lsls	r3, r1, #2
 8003c10:	4641      	mov	r1, r8
 8003c12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c16:	4641      	mov	r1, r8
 8003c18:	008a      	lsls	r2, r1, #2
 8003c1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c1e:	f7fd f81b 	bl	8000c58 <__aeabi_uldivmod>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4b39      	ldr	r3, [pc, #228]	; (8003d0c <UART_SetConfig+0x4e4>)
 8003c28:	fba3 1302 	umull	r1, r3, r3, r2
 8003c2c:	095b      	lsrs	r3, r3, #5
 8003c2e:	2164      	movs	r1, #100	; 0x64
 8003c30:	fb01 f303 	mul.w	r3, r1, r3
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	3332      	adds	r3, #50	; 0x32
 8003c3a:	4a34      	ldr	r2, [pc, #208]	; (8003d0c <UART_SetConfig+0x4e4>)
 8003c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c40:	095b      	lsrs	r3, r3, #5
 8003c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c46:	441c      	add	r4, r3
 8003c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	673b      	str	r3, [r7, #112]	; 0x70
 8003c50:	677a      	str	r2, [r7, #116]	; 0x74
 8003c52:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c56:	4642      	mov	r2, r8
 8003c58:	464b      	mov	r3, r9
 8003c5a:	1891      	adds	r1, r2, r2
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	415b      	adcs	r3, r3
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c66:	4641      	mov	r1, r8
 8003c68:	1851      	adds	r1, r2, r1
 8003c6a:	6039      	str	r1, [r7, #0]
 8003c6c:	4649      	mov	r1, r9
 8003c6e:	414b      	adcs	r3, r1
 8003c70:	607b      	str	r3, [r7, #4]
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	f04f 0300 	mov.w	r3, #0
 8003c7a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c7e:	4659      	mov	r1, fp
 8003c80:	00cb      	lsls	r3, r1, #3
 8003c82:	4651      	mov	r1, sl
 8003c84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c88:	4651      	mov	r1, sl
 8003c8a:	00ca      	lsls	r2, r1, #3
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4603      	mov	r3, r0
 8003c92:	4642      	mov	r2, r8
 8003c94:	189b      	adds	r3, r3, r2
 8003c96:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c98:	464b      	mov	r3, r9
 8003c9a:	460a      	mov	r2, r1
 8003c9c:	eb42 0303 	adc.w	r3, r2, r3
 8003ca0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	663b      	str	r3, [r7, #96]	; 0x60
 8003cac:	667a      	str	r2, [r7, #100]	; 0x64
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	f04f 0300 	mov.w	r3, #0
 8003cb6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003cba:	4649      	mov	r1, r9
 8003cbc:	008b      	lsls	r3, r1, #2
 8003cbe:	4641      	mov	r1, r8
 8003cc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cc4:	4641      	mov	r1, r8
 8003cc6:	008a      	lsls	r2, r1, #2
 8003cc8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ccc:	f7fc ffc4 	bl	8000c58 <__aeabi_uldivmod>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4b0d      	ldr	r3, [pc, #52]	; (8003d0c <UART_SetConfig+0x4e4>)
 8003cd6:	fba3 1302 	umull	r1, r3, r3, r2
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	2164      	movs	r1, #100	; 0x64
 8003cde:	fb01 f303 	mul.w	r3, r1, r3
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	3332      	adds	r3, #50	; 0x32
 8003ce8:	4a08      	ldr	r2, [pc, #32]	; (8003d0c <UART_SetConfig+0x4e4>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	f003 020f 	and.w	r2, r3, #15
 8003cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4422      	add	r2, r4
 8003cfc:	609a      	str	r2, [r3, #8]
}
 8003cfe:	bf00      	nop
 8003d00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d04:	46bd      	mov	sp, r7
 8003d06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d0a:	bf00      	nop
 8003d0c:	51eb851f 	.word	0x51eb851f

08003d10 <findslot>:
 8003d10:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <findslot+0x2c>)
 8003d12:	b510      	push	{r4, lr}
 8003d14:	4604      	mov	r4, r0
 8003d16:	6818      	ldr	r0, [r3, #0]
 8003d18:	b118      	cbz	r0, 8003d22 <findslot+0x12>
 8003d1a:	6983      	ldr	r3, [r0, #24]
 8003d1c:	b90b      	cbnz	r3, 8003d22 <findslot+0x12>
 8003d1e:	f000 faf9 	bl	8004314 <__sinit>
 8003d22:	2c13      	cmp	r4, #19
 8003d24:	d807      	bhi.n	8003d36 <findslot+0x26>
 8003d26:	4806      	ldr	r0, [pc, #24]	; (8003d40 <findslot+0x30>)
 8003d28:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8003d2c:	3201      	adds	r2, #1
 8003d2e:	d002      	beq.n	8003d36 <findslot+0x26>
 8003d30:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003d34:	bd10      	pop	{r4, pc}
 8003d36:	2000      	movs	r0, #0
 8003d38:	e7fc      	b.n	8003d34 <findslot+0x24>
 8003d3a:	bf00      	nop
 8003d3c:	20000014 	.word	0x20000014
 8003d40:	200002ac 	.word	0x200002ac

08003d44 <error>:
 8003d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d46:	4604      	mov	r4, r0
 8003d48:	f000 fa86 	bl	8004258 <__errno>
 8003d4c:	2613      	movs	r6, #19
 8003d4e:	4605      	mov	r5, r0
 8003d50:	2700      	movs	r7, #0
 8003d52:	4630      	mov	r0, r6
 8003d54:	4639      	mov	r1, r7
 8003d56:	beab      	bkpt	0x00ab
 8003d58:	4606      	mov	r6, r0
 8003d5a:	602e      	str	r6, [r5, #0]
 8003d5c:	4620      	mov	r0, r4
 8003d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003d60 <checkerror>:
 8003d60:	1c43      	adds	r3, r0, #1
 8003d62:	d101      	bne.n	8003d68 <checkerror+0x8>
 8003d64:	f7ff bfee 	b.w	8003d44 <error>
 8003d68:	4770      	bx	lr

08003d6a <_swiread>:
 8003d6a:	b530      	push	{r4, r5, lr}
 8003d6c:	b085      	sub	sp, #20
 8003d6e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003d72:	9203      	str	r2, [sp, #12]
 8003d74:	2406      	movs	r4, #6
 8003d76:	ad01      	add	r5, sp, #4
 8003d78:	4620      	mov	r0, r4
 8003d7a:	4629      	mov	r1, r5
 8003d7c:	beab      	bkpt	0x00ab
 8003d7e:	4604      	mov	r4, r0
 8003d80:	4620      	mov	r0, r4
 8003d82:	f7ff ffed 	bl	8003d60 <checkerror>
 8003d86:	b005      	add	sp, #20
 8003d88:	bd30      	pop	{r4, r5, pc}

08003d8a <_read>:
 8003d8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d8c:	4615      	mov	r5, r2
 8003d8e:	9101      	str	r1, [sp, #4]
 8003d90:	f7ff ffbe 	bl	8003d10 <findslot>
 8003d94:	9901      	ldr	r1, [sp, #4]
 8003d96:	4604      	mov	r4, r0
 8003d98:	b938      	cbnz	r0, 8003daa <_read+0x20>
 8003d9a:	f000 fa5d 	bl	8004258 <__errno>
 8003d9e:	2309      	movs	r3, #9
 8003da0:	6003      	str	r3, [r0, #0]
 8003da2:	f04f 30ff 	mov.w	r0, #4294967295
 8003da6:	b003      	add	sp, #12
 8003da8:	bd30      	pop	{r4, r5, pc}
 8003daa:	6800      	ldr	r0, [r0, #0]
 8003dac:	462a      	mov	r2, r5
 8003dae:	f7ff ffdc 	bl	8003d6a <_swiread>
 8003db2:	1c43      	adds	r3, r0, #1
 8003db4:	d0f7      	beq.n	8003da6 <_read+0x1c>
 8003db6:	6863      	ldr	r3, [r4, #4]
 8003db8:	1a2a      	subs	r2, r5, r0
 8003dba:	4413      	add	r3, r2
 8003dbc:	6063      	str	r3, [r4, #4]
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	e7f1      	b.n	8003da6 <_read+0x1c>

08003dc2 <_swilseek>:
 8003dc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dc4:	460c      	mov	r4, r1
 8003dc6:	4616      	mov	r6, r2
 8003dc8:	f7ff ffa2 	bl	8003d10 <findslot>
 8003dcc:	4605      	mov	r5, r0
 8003dce:	b940      	cbnz	r0, 8003de2 <_swilseek+0x20>
 8003dd0:	f000 fa42 	bl	8004258 <__errno>
 8003dd4:	2309      	movs	r3, #9
 8003dd6:	6003      	str	r3, [r0, #0]
 8003dd8:	f04f 34ff 	mov.w	r4, #4294967295
 8003ddc:	4620      	mov	r0, r4
 8003dde:	b003      	add	sp, #12
 8003de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003de2:	2e02      	cmp	r6, #2
 8003de4:	d903      	bls.n	8003dee <_swilseek+0x2c>
 8003de6:	f000 fa37 	bl	8004258 <__errno>
 8003dea:	2316      	movs	r3, #22
 8003dec:	e7f3      	b.n	8003dd6 <_swilseek+0x14>
 8003dee:	2e01      	cmp	r6, #1
 8003df0:	d112      	bne.n	8003e18 <_swilseek+0x56>
 8003df2:	6843      	ldr	r3, [r0, #4]
 8003df4:	18e4      	adds	r4, r4, r3
 8003df6:	d4f6      	bmi.n	8003de6 <_swilseek+0x24>
 8003df8:	682b      	ldr	r3, [r5, #0]
 8003dfa:	260a      	movs	r6, #10
 8003dfc:	e9cd 3400 	strd	r3, r4, [sp]
 8003e00:	466f      	mov	r7, sp
 8003e02:	4630      	mov	r0, r6
 8003e04:	4639      	mov	r1, r7
 8003e06:	beab      	bkpt	0x00ab
 8003e08:	4606      	mov	r6, r0
 8003e0a:	4630      	mov	r0, r6
 8003e0c:	f7ff ffa8 	bl	8003d60 <checkerror>
 8003e10:	2800      	cmp	r0, #0
 8003e12:	dbe1      	blt.n	8003dd8 <_swilseek+0x16>
 8003e14:	606c      	str	r4, [r5, #4]
 8003e16:	e7e1      	b.n	8003ddc <_swilseek+0x1a>
 8003e18:	2e02      	cmp	r6, #2
 8003e1a:	d1ed      	bne.n	8003df8 <_swilseek+0x36>
 8003e1c:	6803      	ldr	r3, [r0, #0]
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	260c      	movs	r6, #12
 8003e22:	466f      	mov	r7, sp
 8003e24:	4630      	mov	r0, r6
 8003e26:	4639      	mov	r1, r7
 8003e28:	beab      	bkpt	0x00ab
 8003e2a:	4606      	mov	r6, r0
 8003e2c:	4630      	mov	r0, r6
 8003e2e:	f7ff ff97 	bl	8003d60 <checkerror>
 8003e32:	1c43      	adds	r3, r0, #1
 8003e34:	d0d0      	beq.n	8003dd8 <_swilseek+0x16>
 8003e36:	4404      	add	r4, r0
 8003e38:	e7de      	b.n	8003df8 <_swilseek+0x36>

08003e3a <_lseek>:
 8003e3a:	f7ff bfc2 	b.w	8003dc2 <_swilseek>

08003e3e <_swiwrite>:
 8003e3e:	b530      	push	{r4, r5, lr}
 8003e40:	b085      	sub	sp, #20
 8003e42:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003e46:	9203      	str	r2, [sp, #12]
 8003e48:	2405      	movs	r4, #5
 8003e4a:	ad01      	add	r5, sp, #4
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	4629      	mov	r1, r5
 8003e50:	beab      	bkpt	0x00ab
 8003e52:	4604      	mov	r4, r0
 8003e54:	4620      	mov	r0, r4
 8003e56:	f7ff ff83 	bl	8003d60 <checkerror>
 8003e5a:	b005      	add	sp, #20
 8003e5c:	bd30      	pop	{r4, r5, pc}

08003e5e <_write>:
 8003e5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e60:	4615      	mov	r5, r2
 8003e62:	9101      	str	r1, [sp, #4]
 8003e64:	f7ff ff54 	bl	8003d10 <findslot>
 8003e68:	9901      	ldr	r1, [sp, #4]
 8003e6a:	4604      	mov	r4, r0
 8003e6c:	b930      	cbnz	r0, 8003e7c <_write+0x1e>
 8003e6e:	f000 f9f3 	bl	8004258 <__errno>
 8003e72:	2309      	movs	r3, #9
 8003e74:	6003      	str	r3, [r0, #0]
 8003e76:	f04f 30ff 	mov.w	r0, #4294967295
 8003e7a:	e012      	b.n	8003ea2 <_write+0x44>
 8003e7c:	6800      	ldr	r0, [r0, #0]
 8003e7e:	462a      	mov	r2, r5
 8003e80:	f7ff ffdd 	bl	8003e3e <_swiwrite>
 8003e84:	2800      	cmp	r0, #0
 8003e86:	dbf6      	blt.n	8003e76 <_write+0x18>
 8003e88:	6862      	ldr	r2, [r4, #4]
 8003e8a:	1a2b      	subs	r3, r5, r0
 8003e8c:	441a      	add	r2, r3
 8003e8e:	42a8      	cmp	r0, r5
 8003e90:	6062      	str	r2, [r4, #4]
 8003e92:	d105      	bne.n	8003ea0 <_write+0x42>
 8003e94:	2000      	movs	r0, #0
 8003e96:	b003      	add	sp, #12
 8003e98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e9c:	f7ff bf52 	b.w	8003d44 <error>
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	b003      	add	sp, #12
 8003ea4:	bd30      	pop	{r4, r5, pc}

08003ea6 <_swiclose>:
 8003ea6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ea8:	2402      	movs	r4, #2
 8003eaa:	9001      	str	r0, [sp, #4]
 8003eac:	ad01      	add	r5, sp, #4
 8003eae:	4620      	mov	r0, r4
 8003eb0:	4629      	mov	r1, r5
 8003eb2:	beab      	bkpt	0x00ab
 8003eb4:	4604      	mov	r4, r0
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	f7ff ff52 	bl	8003d60 <checkerror>
 8003ebc:	b003      	add	sp, #12
 8003ebe:	bd30      	pop	{r4, r5, pc}

08003ec0 <_close>:
 8003ec0:	b538      	push	{r3, r4, r5, lr}
 8003ec2:	4605      	mov	r5, r0
 8003ec4:	f7ff ff24 	bl	8003d10 <findslot>
 8003ec8:	4604      	mov	r4, r0
 8003eca:	b930      	cbnz	r0, 8003eda <_close+0x1a>
 8003ecc:	f000 f9c4 	bl	8004258 <__errno>
 8003ed0:	2309      	movs	r3, #9
 8003ed2:	6003      	str	r3, [r0, #0]
 8003ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed8:	bd38      	pop	{r3, r4, r5, pc}
 8003eda:	3d01      	subs	r5, #1
 8003edc:	2d01      	cmp	r5, #1
 8003ede:	d809      	bhi.n	8003ef4 <_close+0x34>
 8003ee0:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <_close+0x48>)
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d104      	bne.n	8003ef4 <_close+0x34>
 8003eea:	f04f 33ff 	mov.w	r3, #4294967295
 8003eee:	6003      	str	r3, [r0, #0]
 8003ef0:	2000      	movs	r0, #0
 8003ef2:	e7f1      	b.n	8003ed8 <_close+0x18>
 8003ef4:	6820      	ldr	r0, [r4, #0]
 8003ef6:	f7ff ffd6 	bl	8003ea6 <_swiclose>
 8003efa:	2800      	cmp	r0, #0
 8003efc:	d1ec      	bne.n	8003ed8 <_close+0x18>
 8003efe:	f04f 33ff 	mov.w	r3, #4294967295
 8003f02:	6023      	str	r3, [r4, #0]
 8003f04:	e7e8      	b.n	8003ed8 <_close+0x18>
 8003f06:	bf00      	nop
 8003f08:	200002ac 	.word	0x200002ac

08003f0c <_getpid>:
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	4770      	bx	lr

08003f10 <_swistat>:
 8003f10:	b570      	push	{r4, r5, r6, lr}
 8003f12:	460c      	mov	r4, r1
 8003f14:	f7ff fefc 	bl	8003d10 <findslot>
 8003f18:	4605      	mov	r5, r0
 8003f1a:	b930      	cbnz	r0, 8003f2a <_swistat+0x1a>
 8003f1c:	f000 f99c 	bl	8004258 <__errno>
 8003f20:	2309      	movs	r3, #9
 8003f22:	6003      	str	r3, [r0, #0]
 8003f24:	f04f 30ff 	mov.w	r0, #4294967295
 8003f28:	bd70      	pop	{r4, r5, r6, pc}
 8003f2a:	6863      	ldr	r3, [r4, #4]
 8003f2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f30:	6063      	str	r3, [r4, #4]
 8003f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f36:	64a3      	str	r3, [r4, #72]	; 0x48
 8003f38:	260c      	movs	r6, #12
 8003f3a:	4630      	mov	r0, r6
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	beab      	bkpt	0x00ab
 8003f40:	4605      	mov	r5, r0
 8003f42:	4628      	mov	r0, r5
 8003f44:	f7ff ff0c 	bl	8003d60 <checkerror>
 8003f48:	1c43      	adds	r3, r0, #1
 8003f4a:	bf1c      	itt	ne
 8003f4c:	6120      	strne	r0, [r4, #16]
 8003f4e:	2000      	movne	r0, #0
 8003f50:	e7ea      	b.n	8003f28 <_swistat+0x18>

08003f52 <_fstat>:
 8003f52:	460b      	mov	r3, r1
 8003f54:	b510      	push	{r4, lr}
 8003f56:	2100      	movs	r1, #0
 8003f58:	4604      	mov	r4, r0
 8003f5a:	2258      	movs	r2, #88	; 0x58
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 fa9e 	bl	800449e <memset>
 8003f62:	4601      	mov	r1, r0
 8003f64:	4620      	mov	r0, r4
 8003f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f6a:	f7ff bfd1 	b.w	8003f10 <_swistat>

08003f6e <_stat>:
 8003f6e:	b538      	push	{r3, r4, r5, lr}
 8003f70:	460d      	mov	r5, r1
 8003f72:	4604      	mov	r4, r0
 8003f74:	2258      	movs	r2, #88	; 0x58
 8003f76:	2100      	movs	r1, #0
 8003f78:	4628      	mov	r0, r5
 8003f7a:	f000 fa90 	bl	800449e <memset>
 8003f7e:	4620      	mov	r0, r4
 8003f80:	2100      	movs	r1, #0
 8003f82:	f000 f811 	bl	8003fa8 <_swiopen>
 8003f86:	1c43      	adds	r3, r0, #1
 8003f88:	4604      	mov	r4, r0
 8003f8a:	d00b      	beq.n	8003fa4 <_stat+0x36>
 8003f8c:	686b      	ldr	r3, [r5, #4]
 8003f8e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003f92:	606b      	str	r3, [r5, #4]
 8003f94:	4629      	mov	r1, r5
 8003f96:	f7ff ffbb 	bl	8003f10 <_swistat>
 8003f9a:	4605      	mov	r5, r0
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	f7ff ff8f 	bl	8003ec0 <_close>
 8003fa2:	462c      	mov	r4, r5
 8003fa4:	4620      	mov	r0, r4
 8003fa6:	bd38      	pop	{r3, r4, r5, pc}

08003fa8 <_swiopen>:
 8003fa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003fac:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8004058 <_swiopen+0xb0>
 8003fb0:	b097      	sub	sp, #92	; 0x5c
 8003fb2:	4607      	mov	r7, r0
 8003fb4:	460e      	mov	r6, r1
 8003fb6:	2500      	movs	r5, #0
 8003fb8:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8003fbc:	1c61      	adds	r1, r4, #1
 8003fbe:	d037      	beq.n	8004030 <_swiopen+0x88>
 8003fc0:	3501      	adds	r5, #1
 8003fc2:	2d14      	cmp	r5, #20
 8003fc4:	d1f8      	bne.n	8003fb8 <_swiopen+0x10>
 8003fc6:	f000 f947 	bl	8004258 <__errno>
 8003fca:	2318      	movs	r3, #24
 8003fcc:	6003      	str	r3, [r0, #0]
 8003fce:	f04f 34ff 	mov.w	r4, #4294967295
 8003fd2:	e03d      	b.n	8004050 <_swiopen+0xa8>
 8003fd4:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8003fd8:	f240 6301 	movw	r3, #1537	; 0x601
 8003fdc:	07b2      	lsls	r2, r6, #30
 8003fde:	bf48      	it	mi
 8003fe0:	f044 0402 	orrmi.w	r4, r4, #2
 8003fe4:	421e      	tst	r6, r3
 8003fe6:	bf18      	it	ne
 8003fe8:	f044 0404 	orrne.w	r4, r4, #4
 8003fec:	0733      	lsls	r3, r6, #28
 8003fee:	bf48      	it	mi
 8003ff0:	f024 0404 	bicmi.w	r4, r4, #4
 8003ff4:	4638      	mov	r0, r7
 8003ff6:	bf48      	it	mi
 8003ff8:	f044 0408 	orrmi.w	r4, r4, #8
 8003ffc:	9700      	str	r7, [sp, #0]
 8003ffe:	f7fc f8ef 	bl	80001e0 <strlen>
 8004002:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8004006:	2401      	movs	r4, #1
 8004008:	4620      	mov	r0, r4
 800400a:	4649      	mov	r1, r9
 800400c:	beab      	bkpt	0x00ab
 800400e:	4604      	mov	r4, r0
 8004010:	2c00      	cmp	r4, #0
 8004012:	db08      	blt.n	8004026 <_swiopen+0x7e>
 8004014:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8004018:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 800401c:	2300      	movs	r3, #0
 800401e:	f8c8 3004 	str.w	r3, [r8, #4]
 8004022:	462c      	mov	r4, r5
 8004024:	e014      	b.n	8004050 <_swiopen+0xa8>
 8004026:	4620      	mov	r0, r4
 8004028:	f7ff fe8c 	bl	8003d44 <error>
 800402c:	4604      	mov	r4, r0
 800402e:	e00f      	b.n	8004050 <_swiopen+0xa8>
 8004030:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8004034:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004038:	46e9      	mov	r9, sp
 800403a:	d1cb      	bne.n	8003fd4 <_swiopen+0x2c>
 800403c:	4649      	mov	r1, r9
 800403e:	4638      	mov	r0, r7
 8004040:	f7ff ff95 	bl	8003f6e <_stat>
 8004044:	3001      	adds	r0, #1
 8004046:	d0c5      	beq.n	8003fd4 <_swiopen+0x2c>
 8004048:	f000 f906 	bl	8004258 <__errno>
 800404c:	2311      	movs	r3, #17
 800404e:	6003      	str	r3, [r0, #0]
 8004050:	4620      	mov	r0, r4
 8004052:	b017      	add	sp, #92	; 0x5c
 8004054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004058:	200002ac 	.word	0x200002ac

0800405c <_get_semihosting_exts>:
 800405c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004060:	4606      	mov	r6, r0
 8004062:	460f      	mov	r7, r1
 8004064:	482a      	ldr	r0, [pc, #168]	; (8004110 <_get_semihosting_exts+0xb4>)
 8004066:	2100      	movs	r1, #0
 8004068:	4615      	mov	r5, r2
 800406a:	f7ff ff9d 	bl	8003fa8 <_swiopen>
 800406e:	462a      	mov	r2, r5
 8004070:	4604      	mov	r4, r0
 8004072:	2100      	movs	r1, #0
 8004074:	4630      	mov	r0, r6
 8004076:	f000 fa12 	bl	800449e <memset>
 800407a:	1c63      	adds	r3, r4, #1
 800407c:	d016      	beq.n	80040ac <_get_semihosting_exts+0x50>
 800407e:	4620      	mov	r0, r4
 8004080:	f7ff fe46 	bl	8003d10 <findslot>
 8004084:	f04f 090c 	mov.w	r9, #12
 8004088:	4680      	mov	r8, r0
 800408a:	4648      	mov	r0, r9
 800408c:	4641      	mov	r1, r8
 800408e:	beab      	bkpt	0x00ab
 8004090:	4680      	mov	r8, r0
 8004092:	4640      	mov	r0, r8
 8004094:	f7ff fe64 	bl	8003d60 <checkerror>
 8004098:	2803      	cmp	r0, #3
 800409a:	dd02      	ble.n	80040a2 <_get_semihosting_exts+0x46>
 800409c:	1ec3      	subs	r3, r0, #3
 800409e:	42ab      	cmp	r3, r5
 80040a0:	dc08      	bgt.n	80040b4 <_get_semihosting_exts+0x58>
 80040a2:	4620      	mov	r0, r4
 80040a4:	f7ff ff0c 	bl	8003ec0 <_close>
 80040a8:	f04f 34ff 	mov.w	r4, #4294967295
 80040ac:	4620      	mov	r0, r4
 80040ae:	b003      	add	sp, #12
 80040b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040b4:	2204      	movs	r2, #4
 80040b6:	eb0d 0102 	add.w	r1, sp, r2
 80040ba:	4620      	mov	r0, r4
 80040bc:	f7ff fe65 	bl	8003d8a <_read>
 80040c0:	2803      	cmp	r0, #3
 80040c2:	ddee      	ble.n	80040a2 <_get_semihosting_exts+0x46>
 80040c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80040c8:	2b53      	cmp	r3, #83	; 0x53
 80040ca:	d1ea      	bne.n	80040a2 <_get_semihosting_exts+0x46>
 80040cc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80040d0:	2b48      	cmp	r3, #72	; 0x48
 80040d2:	d1e6      	bne.n	80040a2 <_get_semihosting_exts+0x46>
 80040d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80040d8:	2b46      	cmp	r3, #70	; 0x46
 80040da:	d1e2      	bne.n	80040a2 <_get_semihosting_exts+0x46>
 80040dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80040e0:	2b42      	cmp	r3, #66	; 0x42
 80040e2:	d1de      	bne.n	80040a2 <_get_semihosting_exts+0x46>
 80040e4:	2201      	movs	r2, #1
 80040e6:	4639      	mov	r1, r7
 80040e8:	4620      	mov	r0, r4
 80040ea:	f7ff fe6a 	bl	8003dc2 <_swilseek>
 80040ee:	2800      	cmp	r0, #0
 80040f0:	dbd7      	blt.n	80040a2 <_get_semihosting_exts+0x46>
 80040f2:	462a      	mov	r2, r5
 80040f4:	4631      	mov	r1, r6
 80040f6:	4620      	mov	r0, r4
 80040f8:	f7ff fe47 	bl	8003d8a <_read>
 80040fc:	4605      	mov	r5, r0
 80040fe:	4620      	mov	r0, r4
 8004100:	f7ff fede 	bl	8003ec0 <_close>
 8004104:	4628      	mov	r0, r5
 8004106:	f7ff fe2b 	bl	8003d60 <checkerror>
 800410a:	4604      	mov	r4, r0
 800410c:	e7ce      	b.n	80040ac <_get_semihosting_exts+0x50>
 800410e:	bf00      	nop
 8004110:	08007420 	.word	0x08007420

08004114 <initialise_semihosting_exts>:
 8004114:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004116:	4d0a      	ldr	r5, [pc, #40]	; (8004140 <initialise_semihosting_exts+0x2c>)
 8004118:	4c0a      	ldr	r4, [pc, #40]	; (8004144 <initialise_semihosting_exts+0x30>)
 800411a:	2100      	movs	r1, #0
 800411c:	2201      	movs	r2, #1
 800411e:	a801      	add	r0, sp, #4
 8004120:	6029      	str	r1, [r5, #0]
 8004122:	6022      	str	r2, [r4, #0]
 8004124:	f7ff ff9a 	bl	800405c <_get_semihosting_exts>
 8004128:	2800      	cmp	r0, #0
 800412a:	dd07      	ble.n	800413c <initialise_semihosting_exts+0x28>
 800412c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004130:	f003 0201 	and.w	r2, r3, #1
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	602a      	str	r2, [r5, #0]
 800413a:	6023      	str	r3, [r4, #0]
 800413c:	b003      	add	sp, #12
 800413e:	bd30      	pop	{r4, r5, pc}
 8004140:	2000000c 	.word	0x2000000c
 8004144:	20000010 	.word	0x20000010

08004148 <_has_ext_stdout_stderr>:
 8004148:	b510      	push	{r4, lr}
 800414a:	4c04      	ldr	r4, [pc, #16]	; (800415c <_has_ext_stdout_stderr+0x14>)
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	da01      	bge.n	8004156 <_has_ext_stdout_stderr+0xe>
 8004152:	f7ff ffdf 	bl	8004114 <initialise_semihosting_exts>
 8004156:	6820      	ldr	r0, [r4, #0]
 8004158:	bd10      	pop	{r4, pc}
 800415a:	bf00      	nop
 800415c:	20000010 	.word	0x20000010

08004160 <initialise_monitor_handles>:
 8004160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004164:	b085      	sub	sp, #20
 8004166:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8004218 <initialise_monitor_handles+0xb8>
 800416a:	f8cd 9004 	str.w	r9, [sp, #4]
 800416e:	2303      	movs	r3, #3
 8004170:	2400      	movs	r4, #0
 8004172:	9303      	str	r3, [sp, #12]
 8004174:	af01      	add	r7, sp, #4
 8004176:	9402      	str	r4, [sp, #8]
 8004178:	2501      	movs	r5, #1
 800417a:	4628      	mov	r0, r5
 800417c:	4639      	mov	r1, r7
 800417e:	beab      	bkpt	0x00ab
 8004180:	4605      	mov	r5, r0
 8004182:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800421c <initialise_monitor_handles+0xbc>
 8004186:	4623      	mov	r3, r4
 8004188:	4c20      	ldr	r4, [pc, #128]	; (800420c <initialise_monitor_handles+0xac>)
 800418a:	f8c8 5000 	str.w	r5, [r8]
 800418e:	f04f 32ff 	mov.w	r2, #4294967295
 8004192:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8004196:	3301      	adds	r3, #1
 8004198:	2b14      	cmp	r3, #20
 800419a:	d1fa      	bne.n	8004192 <initialise_monitor_handles+0x32>
 800419c:	f7ff ffd4 	bl	8004148 <_has_ext_stdout_stderr>
 80041a0:	4d1b      	ldr	r5, [pc, #108]	; (8004210 <initialise_monitor_handles+0xb0>)
 80041a2:	b1d0      	cbz	r0, 80041da <initialise_monitor_handles+0x7a>
 80041a4:	f04f 0a03 	mov.w	sl, #3
 80041a8:	2304      	movs	r3, #4
 80041aa:	f8cd 9004 	str.w	r9, [sp, #4]
 80041ae:	2601      	movs	r6, #1
 80041b0:	f8cd a00c 	str.w	sl, [sp, #12]
 80041b4:	9302      	str	r3, [sp, #8]
 80041b6:	4630      	mov	r0, r6
 80041b8:	4639      	mov	r1, r7
 80041ba:	beab      	bkpt	0x00ab
 80041bc:	4683      	mov	fp, r0
 80041be:	4b15      	ldr	r3, [pc, #84]	; (8004214 <initialise_monitor_handles+0xb4>)
 80041c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80041c4:	f8c3 b000 	str.w	fp, [r3]
 80041c8:	2308      	movs	r3, #8
 80041ca:	f8cd a00c 	str.w	sl, [sp, #12]
 80041ce:	9302      	str	r3, [sp, #8]
 80041d0:	4630      	mov	r0, r6
 80041d2:	4639      	mov	r1, r7
 80041d4:	beab      	bkpt	0x00ab
 80041d6:	4606      	mov	r6, r0
 80041d8:	602e      	str	r6, [r5, #0]
 80041da:	682b      	ldr	r3, [r5, #0]
 80041dc:	3301      	adds	r3, #1
 80041de:	bf02      	ittt	eq
 80041e0:	4b0c      	ldreq	r3, [pc, #48]	; (8004214 <initialise_monitor_handles+0xb4>)
 80041e2:	681b      	ldreq	r3, [r3, #0]
 80041e4:	602b      	streq	r3, [r5, #0]
 80041e6:	2600      	movs	r6, #0
 80041e8:	f8d8 3000 	ldr.w	r3, [r8]
 80041ec:	6023      	str	r3, [r4, #0]
 80041ee:	6066      	str	r6, [r4, #4]
 80041f0:	f7ff ffaa 	bl	8004148 <_has_ext_stdout_stderr>
 80041f4:	b130      	cbz	r0, 8004204 <initialise_monitor_handles+0xa4>
 80041f6:	4b07      	ldr	r3, [pc, #28]	; (8004214 <initialise_monitor_handles+0xb4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80041fe:	682b      	ldr	r3, [r5, #0]
 8004200:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8004204:	b005      	add	sp, #20
 8004206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800420a:	bf00      	nop
 800420c:	200002ac 	.word	0x200002ac
 8004210:	200002a0 	.word	0x200002a0
 8004214:	200002a8 	.word	0x200002a8
 8004218:	08007436 	.word	0x08007436
 800421c:	200002a4 	.word	0x200002a4

08004220 <_isatty>:
 8004220:	b570      	push	{r4, r5, r6, lr}
 8004222:	f7ff fd75 	bl	8003d10 <findslot>
 8004226:	2509      	movs	r5, #9
 8004228:	4604      	mov	r4, r0
 800422a:	b920      	cbnz	r0, 8004236 <_isatty+0x16>
 800422c:	f000 f814 	bl	8004258 <__errno>
 8004230:	6005      	str	r5, [r0, #0]
 8004232:	4620      	mov	r0, r4
 8004234:	bd70      	pop	{r4, r5, r6, pc}
 8004236:	4628      	mov	r0, r5
 8004238:	4621      	mov	r1, r4
 800423a:	beab      	bkpt	0x00ab
 800423c:	4604      	mov	r4, r0
 800423e:	2c01      	cmp	r4, #1
 8004240:	d0f7      	beq.n	8004232 <_isatty+0x12>
 8004242:	f000 f809 	bl	8004258 <__errno>
 8004246:	2400      	movs	r4, #0
 8004248:	4605      	mov	r5, r0
 800424a:	2613      	movs	r6, #19
 800424c:	4630      	mov	r0, r6
 800424e:	4621      	mov	r1, r4
 8004250:	beab      	bkpt	0x00ab
 8004252:	4606      	mov	r6, r0
 8004254:	602e      	str	r6, [r5, #0]
 8004256:	e7ec      	b.n	8004232 <_isatty+0x12>

08004258 <__errno>:
 8004258:	4b01      	ldr	r3, [pc, #4]	; (8004260 <__errno+0x8>)
 800425a:	6818      	ldr	r0, [r3, #0]
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	20000014 	.word	0x20000014

08004264 <std>:
 8004264:	2300      	movs	r3, #0
 8004266:	b510      	push	{r4, lr}
 8004268:	4604      	mov	r4, r0
 800426a:	e9c0 3300 	strd	r3, r3, [r0]
 800426e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004272:	6083      	str	r3, [r0, #8]
 8004274:	8181      	strh	r1, [r0, #12]
 8004276:	6643      	str	r3, [r0, #100]	; 0x64
 8004278:	81c2      	strh	r2, [r0, #14]
 800427a:	6183      	str	r3, [r0, #24]
 800427c:	4619      	mov	r1, r3
 800427e:	2208      	movs	r2, #8
 8004280:	305c      	adds	r0, #92	; 0x5c
 8004282:	f000 f90c 	bl	800449e <memset>
 8004286:	4b05      	ldr	r3, [pc, #20]	; (800429c <std+0x38>)
 8004288:	6263      	str	r3, [r4, #36]	; 0x24
 800428a:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <std+0x3c>)
 800428c:	62a3      	str	r3, [r4, #40]	; 0x28
 800428e:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <std+0x40>)
 8004290:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004292:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <std+0x44>)
 8004294:	6224      	str	r4, [r4, #32]
 8004296:	6323      	str	r3, [r4, #48]	; 0x30
 8004298:	bd10      	pop	{r4, pc}
 800429a:	bf00      	nop
 800429c:	08004efd 	.word	0x08004efd
 80042a0:	08004f1f 	.word	0x08004f1f
 80042a4:	08004f57 	.word	0x08004f57
 80042a8:	08004f7b 	.word	0x08004f7b

080042ac <_cleanup_r>:
 80042ac:	4901      	ldr	r1, [pc, #4]	; (80042b4 <_cleanup_r+0x8>)
 80042ae:	f000 b8af 	b.w	8004410 <_fwalk_reent>
 80042b2:	bf00      	nop
 80042b4:	08005dc9 	.word	0x08005dc9

080042b8 <__sfmoreglue>:
 80042b8:	b570      	push	{r4, r5, r6, lr}
 80042ba:	2268      	movs	r2, #104	; 0x68
 80042bc:	1e4d      	subs	r5, r1, #1
 80042be:	4355      	muls	r5, r2
 80042c0:	460e      	mov	r6, r1
 80042c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80042c6:	f000 f913 	bl	80044f0 <_malloc_r>
 80042ca:	4604      	mov	r4, r0
 80042cc:	b140      	cbz	r0, 80042e0 <__sfmoreglue+0x28>
 80042ce:	2100      	movs	r1, #0
 80042d0:	e9c0 1600 	strd	r1, r6, [r0]
 80042d4:	300c      	adds	r0, #12
 80042d6:	60a0      	str	r0, [r4, #8]
 80042d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80042dc:	f000 f8df 	bl	800449e <memset>
 80042e0:	4620      	mov	r0, r4
 80042e2:	bd70      	pop	{r4, r5, r6, pc}

080042e4 <__sfp_lock_acquire>:
 80042e4:	4801      	ldr	r0, [pc, #4]	; (80042ec <__sfp_lock_acquire+0x8>)
 80042e6:	f000 b8d8 	b.w	800449a <__retarget_lock_acquire_recursive>
 80042ea:	bf00      	nop
 80042ec:	2000034d 	.word	0x2000034d

080042f0 <__sfp_lock_release>:
 80042f0:	4801      	ldr	r0, [pc, #4]	; (80042f8 <__sfp_lock_release+0x8>)
 80042f2:	f000 b8d3 	b.w	800449c <__retarget_lock_release_recursive>
 80042f6:	bf00      	nop
 80042f8:	2000034d 	.word	0x2000034d

080042fc <__sinit_lock_acquire>:
 80042fc:	4801      	ldr	r0, [pc, #4]	; (8004304 <__sinit_lock_acquire+0x8>)
 80042fe:	f000 b8cc 	b.w	800449a <__retarget_lock_acquire_recursive>
 8004302:	bf00      	nop
 8004304:	2000034e 	.word	0x2000034e

08004308 <__sinit_lock_release>:
 8004308:	4801      	ldr	r0, [pc, #4]	; (8004310 <__sinit_lock_release+0x8>)
 800430a:	f000 b8c7 	b.w	800449c <__retarget_lock_release_recursive>
 800430e:	bf00      	nop
 8004310:	2000034e 	.word	0x2000034e

08004314 <__sinit>:
 8004314:	b510      	push	{r4, lr}
 8004316:	4604      	mov	r4, r0
 8004318:	f7ff fff0 	bl	80042fc <__sinit_lock_acquire>
 800431c:	69a3      	ldr	r3, [r4, #24]
 800431e:	b11b      	cbz	r3, 8004328 <__sinit+0x14>
 8004320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004324:	f7ff bff0 	b.w	8004308 <__sinit_lock_release>
 8004328:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800432c:	6523      	str	r3, [r4, #80]	; 0x50
 800432e:	4b13      	ldr	r3, [pc, #76]	; (800437c <__sinit+0x68>)
 8004330:	4a13      	ldr	r2, [pc, #76]	; (8004380 <__sinit+0x6c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	62a2      	str	r2, [r4, #40]	; 0x28
 8004336:	42a3      	cmp	r3, r4
 8004338:	bf04      	itt	eq
 800433a:	2301      	moveq	r3, #1
 800433c:	61a3      	streq	r3, [r4, #24]
 800433e:	4620      	mov	r0, r4
 8004340:	f000 f820 	bl	8004384 <__sfp>
 8004344:	6060      	str	r0, [r4, #4]
 8004346:	4620      	mov	r0, r4
 8004348:	f000 f81c 	bl	8004384 <__sfp>
 800434c:	60a0      	str	r0, [r4, #8]
 800434e:	4620      	mov	r0, r4
 8004350:	f000 f818 	bl	8004384 <__sfp>
 8004354:	2200      	movs	r2, #0
 8004356:	60e0      	str	r0, [r4, #12]
 8004358:	2104      	movs	r1, #4
 800435a:	6860      	ldr	r0, [r4, #4]
 800435c:	f7ff ff82 	bl	8004264 <std>
 8004360:	68a0      	ldr	r0, [r4, #8]
 8004362:	2201      	movs	r2, #1
 8004364:	2109      	movs	r1, #9
 8004366:	f7ff ff7d 	bl	8004264 <std>
 800436a:	68e0      	ldr	r0, [r4, #12]
 800436c:	2202      	movs	r2, #2
 800436e:	2112      	movs	r1, #18
 8004370:	f7ff ff78 	bl	8004264 <std>
 8004374:	2301      	movs	r3, #1
 8004376:	61a3      	str	r3, [r4, #24]
 8004378:	e7d2      	b.n	8004320 <__sinit+0xc>
 800437a:	bf00      	nop
 800437c:	0800749c 	.word	0x0800749c
 8004380:	080042ad 	.word	0x080042ad

08004384 <__sfp>:
 8004384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004386:	4607      	mov	r7, r0
 8004388:	f7ff ffac 	bl	80042e4 <__sfp_lock_acquire>
 800438c:	4b1e      	ldr	r3, [pc, #120]	; (8004408 <__sfp+0x84>)
 800438e:	681e      	ldr	r6, [r3, #0]
 8004390:	69b3      	ldr	r3, [r6, #24]
 8004392:	b913      	cbnz	r3, 800439a <__sfp+0x16>
 8004394:	4630      	mov	r0, r6
 8004396:	f7ff ffbd 	bl	8004314 <__sinit>
 800439a:	3648      	adds	r6, #72	; 0x48
 800439c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80043a0:	3b01      	subs	r3, #1
 80043a2:	d503      	bpl.n	80043ac <__sfp+0x28>
 80043a4:	6833      	ldr	r3, [r6, #0]
 80043a6:	b30b      	cbz	r3, 80043ec <__sfp+0x68>
 80043a8:	6836      	ldr	r6, [r6, #0]
 80043aa:	e7f7      	b.n	800439c <__sfp+0x18>
 80043ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80043b0:	b9d5      	cbnz	r5, 80043e8 <__sfp+0x64>
 80043b2:	4b16      	ldr	r3, [pc, #88]	; (800440c <__sfp+0x88>)
 80043b4:	60e3      	str	r3, [r4, #12]
 80043b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80043ba:	6665      	str	r5, [r4, #100]	; 0x64
 80043bc:	f000 f86c 	bl	8004498 <__retarget_lock_init_recursive>
 80043c0:	f7ff ff96 	bl	80042f0 <__sfp_lock_release>
 80043c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80043c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80043cc:	6025      	str	r5, [r4, #0]
 80043ce:	61a5      	str	r5, [r4, #24]
 80043d0:	2208      	movs	r2, #8
 80043d2:	4629      	mov	r1, r5
 80043d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80043d8:	f000 f861 	bl	800449e <memset>
 80043dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80043e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80043e4:	4620      	mov	r0, r4
 80043e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043e8:	3468      	adds	r4, #104	; 0x68
 80043ea:	e7d9      	b.n	80043a0 <__sfp+0x1c>
 80043ec:	2104      	movs	r1, #4
 80043ee:	4638      	mov	r0, r7
 80043f0:	f7ff ff62 	bl	80042b8 <__sfmoreglue>
 80043f4:	4604      	mov	r4, r0
 80043f6:	6030      	str	r0, [r6, #0]
 80043f8:	2800      	cmp	r0, #0
 80043fa:	d1d5      	bne.n	80043a8 <__sfp+0x24>
 80043fc:	f7ff ff78 	bl	80042f0 <__sfp_lock_release>
 8004400:	230c      	movs	r3, #12
 8004402:	603b      	str	r3, [r7, #0]
 8004404:	e7ee      	b.n	80043e4 <__sfp+0x60>
 8004406:	bf00      	nop
 8004408:	0800749c 	.word	0x0800749c
 800440c:	ffff0001 	.word	0xffff0001

08004410 <_fwalk_reent>:
 8004410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004414:	4606      	mov	r6, r0
 8004416:	4688      	mov	r8, r1
 8004418:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800441c:	2700      	movs	r7, #0
 800441e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004422:	f1b9 0901 	subs.w	r9, r9, #1
 8004426:	d505      	bpl.n	8004434 <_fwalk_reent+0x24>
 8004428:	6824      	ldr	r4, [r4, #0]
 800442a:	2c00      	cmp	r4, #0
 800442c:	d1f7      	bne.n	800441e <_fwalk_reent+0xe>
 800442e:	4638      	mov	r0, r7
 8004430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004434:	89ab      	ldrh	r3, [r5, #12]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d907      	bls.n	800444a <_fwalk_reent+0x3a>
 800443a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800443e:	3301      	adds	r3, #1
 8004440:	d003      	beq.n	800444a <_fwalk_reent+0x3a>
 8004442:	4629      	mov	r1, r5
 8004444:	4630      	mov	r0, r6
 8004446:	47c0      	blx	r8
 8004448:	4307      	orrs	r7, r0
 800444a:	3568      	adds	r5, #104	; 0x68
 800444c:	e7e9      	b.n	8004422 <_fwalk_reent+0x12>
	...

08004450 <__libc_init_array>:
 8004450:	b570      	push	{r4, r5, r6, lr}
 8004452:	4d0d      	ldr	r5, [pc, #52]	; (8004488 <__libc_init_array+0x38>)
 8004454:	4c0d      	ldr	r4, [pc, #52]	; (800448c <__libc_init_array+0x3c>)
 8004456:	1b64      	subs	r4, r4, r5
 8004458:	10a4      	asrs	r4, r4, #2
 800445a:	2600      	movs	r6, #0
 800445c:	42a6      	cmp	r6, r4
 800445e:	d109      	bne.n	8004474 <__libc_init_array+0x24>
 8004460:	4d0b      	ldr	r5, [pc, #44]	; (8004490 <__libc_init_array+0x40>)
 8004462:	4c0c      	ldr	r4, [pc, #48]	; (8004494 <__libc_init_array+0x44>)
 8004464:	f002 ffb8 	bl	80073d8 <_init>
 8004468:	1b64      	subs	r4, r4, r5
 800446a:	10a4      	asrs	r4, r4, #2
 800446c:	2600      	movs	r6, #0
 800446e:	42a6      	cmp	r6, r4
 8004470:	d105      	bne.n	800447e <__libc_init_array+0x2e>
 8004472:	bd70      	pop	{r4, r5, r6, pc}
 8004474:	f855 3b04 	ldr.w	r3, [r5], #4
 8004478:	4798      	blx	r3
 800447a:	3601      	adds	r6, #1
 800447c:	e7ee      	b.n	800445c <__libc_init_array+0xc>
 800447e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004482:	4798      	blx	r3
 8004484:	3601      	adds	r6, #1
 8004486:	e7f2      	b.n	800446e <__libc_init_array+0x1e>
 8004488:	08007890 	.word	0x08007890
 800448c:	08007890 	.word	0x08007890
 8004490:	08007890 	.word	0x08007890
 8004494:	08007894 	.word	0x08007894

08004498 <__retarget_lock_init_recursive>:
 8004498:	4770      	bx	lr

0800449a <__retarget_lock_acquire_recursive>:
 800449a:	4770      	bx	lr

0800449c <__retarget_lock_release_recursive>:
 800449c:	4770      	bx	lr

0800449e <memset>:
 800449e:	4402      	add	r2, r0
 80044a0:	4603      	mov	r3, r0
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d100      	bne.n	80044a8 <memset+0xa>
 80044a6:	4770      	bx	lr
 80044a8:	f803 1b01 	strb.w	r1, [r3], #1
 80044ac:	e7f9      	b.n	80044a2 <memset+0x4>
	...

080044b0 <sbrk_aligned>:
 80044b0:	b570      	push	{r4, r5, r6, lr}
 80044b2:	4e0e      	ldr	r6, [pc, #56]	; (80044ec <sbrk_aligned+0x3c>)
 80044b4:	460c      	mov	r4, r1
 80044b6:	6831      	ldr	r1, [r6, #0]
 80044b8:	4605      	mov	r5, r0
 80044ba:	b911      	cbnz	r1, 80044c2 <sbrk_aligned+0x12>
 80044bc:	f000 fd0e 	bl	8004edc <_sbrk_r>
 80044c0:	6030      	str	r0, [r6, #0]
 80044c2:	4621      	mov	r1, r4
 80044c4:	4628      	mov	r0, r5
 80044c6:	f000 fd09 	bl	8004edc <_sbrk_r>
 80044ca:	1c43      	adds	r3, r0, #1
 80044cc:	d00a      	beq.n	80044e4 <sbrk_aligned+0x34>
 80044ce:	1cc4      	adds	r4, r0, #3
 80044d0:	f024 0403 	bic.w	r4, r4, #3
 80044d4:	42a0      	cmp	r0, r4
 80044d6:	d007      	beq.n	80044e8 <sbrk_aligned+0x38>
 80044d8:	1a21      	subs	r1, r4, r0
 80044da:	4628      	mov	r0, r5
 80044dc:	f000 fcfe 	bl	8004edc <_sbrk_r>
 80044e0:	3001      	adds	r0, #1
 80044e2:	d101      	bne.n	80044e8 <sbrk_aligned+0x38>
 80044e4:	f04f 34ff 	mov.w	r4, #4294967295
 80044e8:	4620      	mov	r0, r4
 80044ea:	bd70      	pop	{r4, r5, r6, pc}
 80044ec:	20000354 	.word	0x20000354

080044f0 <_malloc_r>:
 80044f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044f4:	1ccd      	adds	r5, r1, #3
 80044f6:	f025 0503 	bic.w	r5, r5, #3
 80044fa:	3508      	adds	r5, #8
 80044fc:	2d0c      	cmp	r5, #12
 80044fe:	bf38      	it	cc
 8004500:	250c      	movcc	r5, #12
 8004502:	2d00      	cmp	r5, #0
 8004504:	4607      	mov	r7, r0
 8004506:	db01      	blt.n	800450c <_malloc_r+0x1c>
 8004508:	42a9      	cmp	r1, r5
 800450a:	d905      	bls.n	8004518 <_malloc_r+0x28>
 800450c:	230c      	movs	r3, #12
 800450e:	603b      	str	r3, [r7, #0]
 8004510:	2600      	movs	r6, #0
 8004512:	4630      	mov	r0, r6
 8004514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004518:	4e2e      	ldr	r6, [pc, #184]	; (80045d4 <_malloc_r+0xe4>)
 800451a:	f001 fcbd 	bl	8005e98 <__malloc_lock>
 800451e:	6833      	ldr	r3, [r6, #0]
 8004520:	461c      	mov	r4, r3
 8004522:	bb34      	cbnz	r4, 8004572 <_malloc_r+0x82>
 8004524:	4629      	mov	r1, r5
 8004526:	4638      	mov	r0, r7
 8004528:	f7ff ffc2 	bl	80044b0 <sbrk_aligned>
 800452c:	1c43      	adds	r3, r0, #1
 800452e:	4604      	mov	r4, r0
 8004530:	d14d      	bne.n	80045ce <_malloc_r+0xde>
 8004532:	6834      	ldr	r4, [r6, #0]
 8004534:	4626      	mov	r6, r4
 8004536:	2e00      	cmp	r6, #0
 8004538:	d140      	bne.n	80045bc <_malloc_r+0xcc>
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	4631      	mov	r1, r6
 800453e:	4638      	mov	r0, r7
 8004540:	eb04 0803 	add.w	r8, r4, r3
 8004544:	f000 fcca 	bl	8004edc <_sbrk_r>
 8004548:	4580      	cmp	r8, r0
 800454a:	d13a      	bne.n	80045c2 <_malloc_r+0xd2>
 800454c:	6821      	ldr	r1, [r4, #0]
 800454e:	3503      	adds	r5, #3
 8004550:	1a6d      	subs	r5, r5, r1
 8004552:	f025 0503 	bic.w	r5, r5, #3
 8004556:	3508      	adds	r5, #8
 8004558:	2d0c      	cmp	r5, #12
 800455a:	bf38      	it	cc
 800455c:	250c      	movcc	r5, #12
 800455e:	4629      	mov	r1, r5
 8004560:	4638      	mov	r0, r7
 8004562:	f7ff ffa5 	bl	80044b0 <sbrk_aligned>
 8004566:	3001      	adds	r0, #1
 8004568:	d02b      	beq.n	80045c2 <_malloc_r+0xd2>
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	442b      	add	r3, r5
 800456e:	6023      	str	r3, [r4, #0]
 8004570:	e00e      	b.n	8004590 <_malloc_r+0xa0>
 8004572:	6822      	ldr	r2, [r4, #0]
 8004574:	1b52      	subs	r2, r2, r5
 8004576:	d41e      	bmi.n	80045b6 <_malloc_r+0xc6>
 8004578:	2a0b      	cmp	r2, #11
 800457a:	d916      	bls.n	80045aa <_malloc_r+0xba>
 800457c:	1961      	adds	r1, r4, r5
 800457e:	42a3      	cmp	r3, r4
 8004580:	6025      	str	r5, [r4, #0]
 8004582:	bf18      	it	ne
 8004584:	6059      	strne	r1, [r3, #4]
 8004586:	6863      	ldr	r3, [r4, #4]
 8004588:	bf08      	it	eq
 800458a:	6031      	streq	r1, [r6, #0]
 800458c:	5162      	str	r2, [r4, r5]
 800458e:	604b      	str	r3, [r1, #4]
 8004590:	4638      	mov	r0, r7
 8004592:	f104 060b 	add.w	r6, r4, #11
 8004596:	f001 fc85 	bl	8005ea4 <__malloc_unlock>
 800459a:	f026 0607 	bic.w	r6, r6, #7
 800459e:	1d23      	adds	r3, r4, #4
 80045a0:	1af2      	subs	r2, r6, r3
 80045a2:	d0b6      	beq.n	8004512 <_malloc_r+0x22>
 80045a4:	1b9b      	subs	r3, r3, r6
 80045a6:	50a3      	str	r3, [r4, r2]
 80045a8:	e7b3      	b.n	8004512 <_malloc_r+0x22>
 80045aa:	6862      	ldr	r2, [r4, #4]
 80045ac:	42a3      	cmp	r3, r4
 80045ae:	bf0c      	ite	eq
 80045b0:	6032      	streq	r2, [r6, #0]
 80045b2:	605a      	strne	r2, [r3, #4]
 80045b4:	e7ec      	b.n	8004590 <_malloc_r+0xa0>
 80045b6:	4623      	mov	r3, r4
 80045b8:	6864      	ldr	r4, [r4, #4]
 80045ba:	e7b2      	b.n	8004522 <_malloc_r+0x32>
 80045bc:	4634      	mov	r4, r6
 80045be:	6876      	ldr	r6, [r6, #4]
 80045c0:	e7b9      	b.n	8004536 <_malloc_r+0x46>
 80045c2:	230c      	movs	r3, #12
 80045c4:	603b      	str	r3, [r7, #0]
 80045c6:	4638      	mov	r0, r7
 80045c8:	f001 fc6c 	bl	8005ea4 <__malloc_unlock>
 80045cc:	e7a1      	b.n	8004512 <_malloc_r+0x22>
 80045ce:	6025      	str	r5, [r4, #0]
 80045d0:	e7de      	b.n	8004590 <_malloc_r+0xa0>
 80045d2:	bf00      	nop
 80045d4:	20000350 	.word	0x20000350

080045d8 <__cvt>:
 80045d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045dc:	ec55 4b10 	vmov	r4, r5, d0
 80045e0:	2d00      	cmp	r5, #0
 80045e2:	460e      	mov	r6, r1
 80045e4:	4619      	mov	r1, r3
 80045e6:	462b      	mov	r3, r5
 80045e8:	bfbb      	ittet	lt
 80045ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80045ee:	461d      	movlt	r5, r3
 80045f0:	2300      	movge	r3, #0
 80045f2:	232d      	movlt	r3, #45	; 0x2d
 80045f4:	700b      	strb	r3, [r1, #0]
 80045f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80045fc:	4691      	mov	r9, r2
 80045fe:	f023 0820 	bic.w	r8, r3, #32
 8004602:	bfbc      	itt	lt
 8004604:	4622      	movlt	r2, r4
 8004606:	4614      	movlt	r4, r2
 8004608:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800460c:	d005      	beq.n	800461a <__cvt+0x42>
 800460e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004612:	d100      	bne.n	8004616 <__cvt+0x3e>
 8004614:	3601      	adds	r6, #1
 8004616:	2102      	movs	r1, #2
 8004618:	e000      	b.n	800461c <__cvt+0x44>
 800461a:	2103      	movs	r1, #3
 800461c:	ab03      	add	r3, sp, #12
 800461e:	9301      	str	r3, [sp, #4]
 8004620:	ab02      	add	r3, sp, #8
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	ec45 4b10 	vmov	d0, r4, r5
 8004628:	4653      	mov	r3, sl
 800462a:	4632      	mov	r2, r6
 800462c:	f000 fd58 	bl	80050e0 <_dtoa_r>
 8004630:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004634:	4607      	mov	r7, r0
 8004636:	d102      	bne.n	800463e <__cvt+0x66>
 8004638:	f019 0f01 	tst.w	r9, #1
 800463c:	d022      	beq.n	8004684 <__cvt+0xac>
 800463e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004642:	eb07 0906 	add.w	r9, r7, r6
 8004646:	d110      	bne.n	800466a <__cvt+0x92>
 8004648:	783b      	ldrb	r3, [r7, #0]
 800464a:	2b30      	cmp	r3, #48	; 0x30
 800464c:	d10a      	bne.n	8004664 <__cvt+0x8c>
 800464e:	2200      	movs	r2, #0
 8004650:	2300      	movs	r3, #0
 8004652:	4620      	mov	r0, r4
 8004654:	4629      	mov	r1, r5
 8004656:	f7fc fa3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800465a:	b918      	cbnz	r0, 8004664 <__cvt+0x8c>
 800465c:	f1c6 0601 	rsb	r6, r6, #1
 8004660:	f8ca 6000 	str.w	r6, [sl]
 8004664:	f8da 3000 	ldr.w	r3, [sl]
 8004668:	4499      	add	r9, r3
 800466a:	2200      	movs	r2, #0
 800466c:	2300      	movs	r3, #0
 800466e:	4620      	mov	r0, r4
 8004670:	4629      	mov	r1, r5
 8004672:	f7fc fa31 	bl	8000ad8 <__aeabi_dcmpeq>
 8004676:	b108      	cbz	r0, 800467c <__cvt+0xa4>
 8004678:	f8cd 900c 	str.w	r9, [sp, #12]
 800467c:	2230      	movs	r2, #48	; 0x30
 800467e:	9b03      	ldr	r3, [sp, #12]
 8004680:	454b      	cmp	r3, r9
 8004682:	d307      	bcc.n	8004694 <__cvt+0xbc>
 8004684:	9b03      	ldr	r3, [sp, #12]
 8004686:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004688:	1bdb      	subs	r3, r3, r7
 800468a:	4638      	mov	r0, r7
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	b004      	add	sp, #16
 8004690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004694:	1c59      	adds	r1, r3, #1
 8004696:	9103      	str	r1, [sp, #12]
 8004698:	701a      	strb	r2, [r3, #0]
 800469a:	e7f0      	b.n	800467e <__cvt+0xa6>

0800469c <__exponent>:
 800469c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800469e:	4603      	mov	r3, r0
 80046a0:	2900      	cmp	r1, #0
 80046a2:	bfb8      	it	lt
 80046a4:	4249      	neglt	r1, r1
 80046a6:	f803 2b02 	strb.w	r2, [r3], #2
 80046aa:	bfb4      	ite	lt
 80046ac:	222d      	movlt	r2, #45	; 0x2d
 80046ae:	222b      	movge	r2, #43	; 0x2b
 80046b0:	2909      	cmp	r1, #9
 80046b2:	7042      	strb	r2, [r0, #1]
 80046b4:	dd2a      	ble.n	800470c <__exponent+0x70>
 80046b6:	f10d 0407 	add.w	r4, sp, #7
 80046ba:	46a4      	mov	ip, r4
 80046bc:	270a      	movs	r7, #10
 80046be:	46a6      	mov	lr, r4
 80046c0:	460a      	mov	r2, r1
 80046c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80046c6:	fb07 1516 	mls	r5, r7, r6, r1
 80046ca:	3530      	adds	r5, #48	; 0x30
 80046cc:	2a63      	cmp	r2, #99	; 0x63
 80046ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80046d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80046d6:	4631      	mov	r1, r6
 80046d8:	dcf1      	bgt.n	80046be <__exponent+0x22>
 80046da:	3130      	adds	r1, #48	; 0x30
 80046dc:	f1ae 0502 	sub.w	r5, lr, #2
 80046e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80046e4:	1c44      	adds	r4, r0, #1
 80046e6:	4629      	mov	r1, r5
 80046e8:	4561      	cmp	r1, ip
 80046ea:	d30a      	bcc.n	8004702 <__exponent+0x66>
 80046ec:	f10d 0209 	add.w	r2, sp, #9
 80046f0:	eba2 020e 	sub.w	r2, r2, lr
 80046f4:	4565      	cmp	r5, ip
 80046f6:	bf88      	it	hi
 80046f8:	2200      	movhi	r2, #0
 80046fa:	4413      	add	r3, r2
 80046fc:	1a18      	subs	r0, r3, r0
 80046fe:	b003      	add	sp, #12
 8004700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004702:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004706:	f804 2f01 	strb.w	r2, [r4, #1]!
 800470a:	e7ed      	b.n	80046e8 <__exponent+0x4c>
 800470c:	2330      	movs	r3, #48	; 0x30
 800470e:	3130      	adds	r1, #48	; 0x30
 8004710:	7083      	strb	r3, [r0, #2]
 8004712:	70c1      	strb	r1, [r0, #3]
 8004714:	1d03      	adds	r3, r0, #4
 8004716:	e7f1      	b.n	80046fc <__exponent+0x60>

08004718 <_printf_float>:
 8004718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800471c:	ed2d 8b02 	vpush	{d8}
 8004720:	b08d      	sub	sp, #52	; 0x34
 8004722:	460c      	mov	r4, r1
 8004724:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004728:	4616      	mov	r6, r2
 800472a:	461f      	mov	r7, r3
 800472c:	4605      	mov	r5, r0
 800472e:	f001 fb87 	bl	8005e40 <_localeconv_r>
 8004732:	f8d0 a000 	ldr.w	sl, [r0]
 8004736:	4650      	mov	r0, sl
 8004738:	f7fb fd52 	bl	80001e0 <strlen>
 800473c:	2300      	movs	r3, #0
 800473e:	930a      	str	r3, [sp, #40]	; 0x28
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	9305      	str	r3, [sp, #20]
 8004744:	f8d8 3000 	ldr.w	r3, [r8]
 8004748:	f894 b018 	ldrb.w	fp, [r4, #24]
 800474c:	3307      	adds	r3, #7
 800474e:	f023 0307 	bic.w	r3, r3, #7
 8004752:	f103 0208 	add.w	r2, r3, #8
 8004756:	f8c8 2000 	str.w	r2, [r8]
 800475a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004762:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004766:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800476a:	9307      	str	r3, [sp, #28]
 800476c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004770:	ee08 0a10 	vmov	s16, r0
 8004774:	4b9f      	ldr	r3, [pc, #636]	; (80049f4 <_printf_float+0x2dc>)
 8004776:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800477a:	f04f 32ff 	mov.w	r2, #4294967295
 800477e:	f7fc f9dd 	bl	8000b3c <__aeabi_dcmpun>
 8004782:	bb88      	cbnz	r0, 80047e8 <_printf_float+0xd0>
 8004784:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004788:	4b9a      	ldr	r3, [pc, #616]	; (80049f4 <_printf_float+0x2dc>)
 800478a:	f04f 32ff 	mov.w	r2, #4294967295
 800478e:	f7fc f9b7 	bl	8000b00 <__aeabi_dcmple>
 8004792:	bb48      	cbnz	r0, 80047e8 <_printf_float+0xd0>
 8004794:	2200      	movs	r2, #0
 8004796:	2300      	movs	r3, #0
 8004798:	4640      	mov	r0, r8
 800479a:	4649      	mov	r1, r9
 800479c:	f7fc f9a6 	bl	8000aec <__aeabi_dcmplt>
 80047a0:	b110      	cbz	r0, 80047a8 <_printf_float+0x90>
 80047a2:	232d      	movs	r3, #45	; 0x2d
 80047a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047a8:	4b93      	ldr	r3, [pc, #588]	; (80049f8 <_printf_float+0x2e0>)
 80047aa:	4894      	ldr	r0, [pc, #592]	; (80049fc <_printf_float+0x2e4>)
 80047ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80047b0:	bf94      	ite	ls
 80047b2:	4698      	movls	r8, r3
 80047b4:	4680      	movhi	r8, r0
 80047b6:	2303      	movs	r3, #3
 80047b8:	6123      	str	r3, [r4, #16]
 80047ba:	9b05      	ldr	r3, [sp, #20]
 80047bc:	f023 0204 	bic.w	r2, r3, #4
 80047c0:	6022      	str	r2, [r4, #0]
 80047c2:	f04f 0900 	mov.w	r9, #0
 80047c6:	9700      	str	r7, [sp, #0]
 80047c8:	4633      	mov	r3, r6
 80047ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80047cc:	4621      	mov	r1, r4
 80047ce:	4628      	mov	r0, r5
 80047d0:	f000 f9d8 	bl	8004b84 <_printf_common>
 80047d4:	3001      	adds	r0, #1
 80047d6:	f040 8090 	bne.w	80048fa <_printf_float+0x1e2>
 80047da:	f04f 30ff 	mov.w	r0, #4294967295
 80047de:	b00d      	add	sp, #52	; 0x34
 80047e0:	ecbd 8b02 	vpop	{d8}
 80047e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047e8:	4642      	mov	r2, r8
 80047ea:	464b      	mov	r3, r9
 80047ec:	4640      	mov	r0, r8
 80047ee:	4649      	mov	r1, r9
 80047f0:	f7fc f9a4 	bl	8000b3c <__aeabi_dcmpun>
 80047f4:	b140      	cbz	r0, 8004808 <_printf_float+0xf0>
 80047f6:	464b      	mov	r3, r9
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	bfbc      	itt	lt
 80047fc:	232d      	movlt	r3, #45	; 0x2d
 80047fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004802:	487f      	ldr	r0, [pc, #508]	; (8004a00 <_printf_float+0x2e8>)
 8004804:	4b7f      	ldr	r3, [pc, #508]	; (8004a04 <_printf_float+0x2ec>)
 8004806:	e7d1      	b.n	80047ac <_printf_float+0x94>
 8004808:	6863      	ldr	r3, [r4, #4]
 800480a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800480e:	9206      	str	r2, [sp, #24]
 8004810:	1c5a      	adds	r2, r3, #1
 8004812:	d13f      	bne.n	8004894 <_printf_float+0x17c>
 8004814:	2306      	movs	r3, #6
 8004816:	6063      	str	r3, [r4, #4]
 8004818:	9b05      	ldr	r3, [sp, #20]
 800481a:	6861      	ldr	r1, [r4, #4]
 800481c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004820:	2300      	movs	r3, #0
 8004822:	9303      	str	r3, [sp, #12]
 8004824:	ab0a      	add	r3, sp, #40	; 0x28
 8004826:	e9cd b301 	strd	fp, r3, [sp, #4]
 800482a:	ab09      	add	r3, sp, #36	; 0x24
 800482c:	ec49 8b10 	vmov	d0, r8, r9
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	6022      	str	r2, [r4, #0]
 8004834:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004838:	4628      	mov	r0, r5
 800483a:	f7ff fecd 	bl	80045d8 <__cvt>
 800483e:	9b06      	ldr	r3, [sp, #24]
 8004840:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004842:	2b47      	cmp	r3, #71	; 0x47
 8004844:	4680      	mov	r8, r0
 8004846:	d108      	bne.n	800485a <_printf_float+0x142>
 8004848:	1cc8      	adds	r0, r1, #3
 800484a:	db02      	blt.n	8004852 <_printf_float+0x13a>
 800484c:	6863      	ldr	r3, [r4, #4]
 800484e:	4299      	cmp	r1, r3
 8004850:	dd41      	ble.n	80048d6 <_printf_float+0x1be>
 8004852:	f1ab 0b02 	sub.w	fp, fp, #2
 8004856:	fa5f fb8b 	uxtb.w	fp, fp
 800485a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800485e:	d820      	bhi.n	80048a2 <_printf_float+0x18a>
 8004860:	3901      	subs	r1, #1
 8004862:	465a      	mov	r2, fp
 8004864:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004868:	9109      	str	r1, [sp, #36]	; 0x24
 800486a:	f7ff ff17 	bl	800469c <__exponent>
 800486e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004870:	1813      	adds	r3, r2, r0
 8004872:	2a01      	cmp	r2, #1
 8004874:	4681      	mov	r9, r0
 8004876:	6123      	str	r3, [r4, #16]
 8004878:	dc02      	bgt.n	8004880 <_printf_float+0x168>
 800487a:	6822      	ldr	r2, [r4, #0]
 800487c:	07d2      	lsls	r2, r2, #31
 800487e:	d501      	bpl.n	8004884 <_printf_float+0x16c>
 8004880:	3301      	adds	r3, #1
 8004882:	6123      	str	r3, [r4, #16]
 8004884:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004888:	2b00      	cmp	r3, #0
 800488a:	d09c      	beq.n	80047c6 <_printf_float+0xae>
 800488c:	232d      	movs	r3, #45	; 0x2d
 800488e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004892:	e798      	b.n	80047c6 <_printf_float+0xae>
 8004894:	9a06      	ldr	r2, [sp, #24]
 8004896:	2a47      	cmp	r2, #71	; 0x47
 8004898:	d1be      	bne.n	8004818 <_printf_float+0x100>
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1bc      	bne.n	8004818 <_printf_float+0x100>
 800489e:	2301      	movs	r3, #1
 80048a0:	e7b9      	b.n	8004816 <_printf_float+0xfe>
 80048a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80048a6:	d118      	bne.n	80048da <_printf_float+0x1c2>
 80048a8:	2900      	cmp	r1, #0
 80048aa:	6863      	ldr	r3, [r4, #4]
 80048ac:	dd0b      	ble.n	80048c6 <_printf_float+0x1ae>
 80048ae:	6121      	str	r1, [r4, #16]
 80048b0:	b913      	cbnz	r3, 80048b8 <_printf_float+0x1a0>
 80048b2:	6822      	ldr	r2, [r4, #0]
 80048b4:	07d0      	lsls	r0, r2, #31
 80048b6:	d502      	bpl.n	80048be <_printf_float+0x1a6>
 80048b8:	3301      	adds	r3, #1
 80048ba:	440b      	add	r3, r1
 80048bc:	6123      	str	r3, [r4, #16]
 80048be:	65a1      	str	r1, [r4, #88]	; 0x58
 80048c0:	f04f 0900 	mov.w	r9, #0
 80048c4:	e7de      	b.n	8004884 <_printf_float+0x16c>
 80048c6:	b913      	cbnz	r3, 80048ce <_printf_float+0x1b6>
 80048c8:	6822      	ldr	r2, [r4, #0]
 80048ca:	07d2      	lsls	r2, r2, #31
 80048cc:	d501      	bpl.n	80048d2 <_printf_float+0x1ba>
 80048ce:	3302      	adds	r3, #2
 80048d0:	e7f4      	b.n	80048bc <_printf_float+0x1a4>
 80048d2:	2301      	movs	r3, #1
 80048d4:	e7f2      	b.n	80048bc <_printf_float+0x1a4>
 80048d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80048da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048dc:	4299      	cmp	r1, r3
 80048de:	db05      	blt.n	80048ec <_printf_float+0x1d4>
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	6121      	str	r1, [r4, #16]
 80048e4:	07d8      	lsls	r0, r3, #31
 80048e6:	d5ea      	bpl.n	80048be <_printf_float+0x1a6>
 80048e8:	1c4b      	adds	r3, r1, #1
 80048ea:	e7e7      	b.n	80048bc <_printf_float+0x1a4>
 80048ec:	2900      	cmp	r1, #0
 80048ee:	bfd4      	ite	le
 80048f0:	f1c1 0202 	rsble	r2, r1, #2
 80048f4:	2201      	movgt	r2, #1
 80048f6:	4413      	add	r3, r2
 80048f8:	e7e0      	b.n	80048bc <_printf_float+0x1a4>
 80048fa:	6823      	ldr	r3, [r4, #0]
 80048fc:	055a      	lsls	r2, r3, #21
 80048fe:	d407      	bmi.n	8004910 <_printf_float+0x1f8>
 8004900:	6923      	ldr	r3, [r4, #16]
 8004902:	4642      	mov	r2, r8
 8004904:	4631      	mov	r1, r6
 8004906:	4628      	mov	r0, r5
 8004908:	47b8      	blx	r7
 800490a:	3001      	adds	r0, #1
 800490c:	d12c      	bne.n	8004968 <_printf_float+0x250>
 800490e:	e764      	b.n	80047da <_printf_float+0xc2>
 8004910:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004914:	f240 80e0 	bls.w	8004ad8 <_printf_float+0x3c0>
 8004918:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800491c:	2200      	movs	r2, #0
 800491e:	2300      	movs	r3, #0
 8004920:	f7fc f8da 	bl	8000ad8 <__aeabi_dcmpeq>
 8004924:	2800      	cmp	r0, #0
 8004926:	d034      	beq.n	8004992 <_printf_float+0x27a>
 8004928:	4a37      	ldr	r2, [pc, #220]	; (8004a08 <_printf_float+0x2f0>)
 800492a:	2301      	movs	r3, #1
 800492c:	4631      	mov	r1, r6
 800492e:	4628      	mov	r0, r5
 8004930:	47b8      	blx	r7
 8004932:	3001      	adds	r0, #1
 8004934:	f43f af51 	beq.w	80047da <_printf_float+0xc2>
 8004938:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800493c:	429a      	cmp	r2, r3
 800493e:	db02      	blt.n	8004946 <_printf_float+0x22e>
 8004940:	6823      	ldr	r3, [r4, #0]
 8004942:	07d8      	lsls	r0, r3, #31
 8004944:	d510      	bpl.n	8004968 <_printf_float+0x250>
 8004946:	ee18 3a10 	vmov	r3, s16
 800494a:	4652      	mov	r2, sl
 800494c:	4631      	mov	r1, r6
 800494e:	4628      	mov	r0, r5
 8004950:	47b8      	blx	r7
 8004952:	3001      	adds	r0, #1
 8004954:	f43f af41 	beq.w	80047da <_printf_float+0xc2>
 8004958:	f04f 0800 	mov.w	r8, #0
 800495c:	f104 091a 	add.w	r9, r4, #26
 8004960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004962:	3b01      	subs	r3, #1
 8004964:	4543      	cmp	r3, r8
 8004966:	dc09      	bgt.n	800497c <_printf_float+0x264>
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	079b      	lsls	r3, r3, #30
 800496c:	f100 8105 	bmi.w	8004b7a <_printf_float+0x462>
 8004970:	68e0      	ldr	r0, [r4, #12]
 8004972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004974:	4298      	cmp	r0, r3
 8004976:	bfb8      	it	lt
 8004978:	4618      	movlt	r0, r3
 800497a:	e730      	b.n	80047de <_printf_float+0xc6>
 800497c:	2301      	movs	r3, #1
 800497e:	464a      	mov	r2, r9
 8004980:	4631      	mov	r1, r6
 8004982:	4628      	mov	r0, r5
 8004984:	47b8      	blx	r7
 8004986:	3001      	adds	r0, #1
 8004988:	f43f af27 	beq.w	80047da <_printf_float+0xc2>
 800498c:	f108 0801 	add.w	r8, r8, #1
 8004990:	e7e6      	b.n	8004960 <_printf_float+0x248>
 8004992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004994:	2b00      	cmp	r3, #0
 8004996:	dc39      	bgt.n	8004a0c <_printf_float+0x2f4>
 8004998:	4a1b      	ldr	r2, [pc, #108]	; (8004a08 <_printf_float+0x2f0>)
 800499a:	2301      	movs	r3, #1
 800499c:	4631      	mov	r1, r6
 800499e:	4628      	mov	r0, r5
 80049a0:	47b8      	blx	r7
 80049a2:	3001      	adds	r0, #1
 80049a4:	f43f af19 	beq.w	80047da <_printf_float+0xc2>
 80049a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049ac:	4313      	orrs	r3, r2
 80049ae:	d102      	bne.n	80049b6 <_printf_float+0x29e>
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	07d9      	lsls	r1, r3, #31
 80049b4:	d5d8      	bpl.n	8004968 <_printf_float+0x250>
 80049b6:	ee18 3a10 	vmov	r3, s16
 80049ba:	4652      	mov	r2, sl
 80049bc:	4631      	mov	r1, r6
 80049be:	4628      	mov	r0, r5
 80049c0:	47b8      	blx	r7
 80049c2:	3001      	adds	r0, #1
 80049c4:	f43f af09 	beq.w	80047da <_printf_float+0xc2>
 80049c8:	f04f 0900 	mov.w	r9, #0
 80049cc:	f104 0a1a 	add.w	sl, r4, #26
 80049d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049d2:	425b      	negs	r3, r3
 80049d4:	454b      	cmp	r3, r9
 80049d6:	dc01      	bgt.n	80049dc <_printf_float+0x2c4>
 80049d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049da:	e792      	b.n	8004902 <_printf_float+0x1ea>
 80049dc:	2301      	movs	r3, #1
 80049de:	4652      	mov	r2, sl
 80049e0:	4631      	mov	r1, r6
 80049e2:	4628      	mov	r0, r5
 80049e4:	47b8      	blx	r7
 80049e6:	3001      	adds	r0, #1
 80049e8:	f43f aef7 	beq.w	80047da <_printf_float+0xc2>
 80049ec:	f109 0901 	add.w	r9, r9, #1
 80049f0:	e7ee      	b.n	80049d0 <_printf_float+0x2b8>
 80049f2:	bf00      	nop
 80049f4:	7fefffff 	.word	0x7fefffff
 80049f8:	080074a0 	.word	0x080074a0
 80049fc:	080074a4 	.word	0x080074a4
 8004a00:	080074ac 	.word	0x080074ac
 8004a04:	080074a8 	.word	0x080074a8
 8004a08:	080074b0 	.word	0x080074b0
 8004a0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a10:	429a      	cmp	r2, r3
 8004a12:	bfa8      	it	ge
 8004a14:	461a      	movge	r2, r3
 8004a16:	2a00      	cmp	r2, #0
 8004a18:	4691      	mov	r9, r2
 8004a1a:	dc37      	bgt.n	8004a8c <_printf_float+0x374>
 8004a1c:	f04f 0b00 	mov.w	fp, #0
 8004a20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a24:	f104 021a 	add.w	r2, r4, #26
 8004a28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a2a:	9305      	str	r3, [sp, #20]
 8004a2c:	eba3 0309 	sub.w	r3, r3, r9
 8004a30:	455b      	cmp	r3, fp
 8004a32:	dc33      	bgt.n	8004a9c <_printf_float+0x384>
 8004a34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	db3b      	blt.n	8004ab4 <_printf_float+0x39c>
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	07da      	lsls	r2, r3, #31
 8004a40:	d438      	bmi.n	8004ab4 <_printf_float+0x39c>
 8004a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a44:	9a05      	ldr	r2, [sp, #20]
 8004a46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a48:	1a9a      	subs	r2, r3, r2
 8004a4a:	eba3 0901 	sub.w	r9, r3, r1
 8004a4e:	4591      	cmp	r9, r2
 8004a50:	bfa8      	it	ge
 8004a52:	4691      	movge	r9, r2
 8004a54:	f1b9 0f00 	cmp.w	r9, #0
 8004a58:	dc35      	bgt.n	8004ac6 <_printf_float+0x3ae>
 8004a5a:	f04f 0800 	mov.w	r8, #0
 8004a5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a62:	f104 0a1a 	add.w	sl, r4, #26
 8004a66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a6a:	1a9b      	subs	r3, r3, r2
 8004a6c:	eba3 0309 	sub.w	r3, r3, r9
 8004a70:	4543      	cmp	r3, r8
 8004a72:	f77f af79 	ble.w	8004968 <_printf_float+0x250>
 8004a76:	2301      	movs	r3, #1
 8004a78:	4652      	mov	r2, sl
 8004a7a:	4631      	mov	r1, r6
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	47b8      	blx	r7
 8004a80:	3001      	adds	r0, #1
 8004a82:	f43f aeaa 	beq.w	80047da <_printf_float+0xc2>
 8004a86:	f108 0801 	add.w	r8, r8, #1
 8004a8a:	e7ec      	b.n	8004a66 <_printf_float+0x34e>
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	4631      	mov	r1, r6
 8004a90:	4642      	mov	r2, r8
 8004a92:	4628      	mov	r0, r5
 8004a94:	47b8      	blx	r7
 8004a96:	3001      	adds	r0, #1
 8004a98:	d1c0      	bne.n	8004a1c <_printf_float+0x304>
 8004a9a:	e69e      	b.n	80047da <_printf_float+0xc2>
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	4631      	mov	r1, r6
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	9205      	str	r2, [sp, #20]
 8004aa4:	47b8      	blx	r7
 8004aa6:	3001      	adds	r0, #1
 8004aa8:	f43f ae97 	beq.w	80047da <_printf_float+0xc2>
 8004aac:	9a05      	ldr	r2, [sp, #20]
 8004aae:	f10b 0b01 	add.w	fp, fp, #1
 8004ab2:	e7b9      	b.n	8004a28 <_printf_float+0x310>
 8004ab4:	ee18 3a10 	vmov	r3, s16
 8004ab8:	4652      	mov	r2, sl
 8004aba:	4631      	mov	r1, r6
 8004abc:	4628      	mov	r0, r5
 8004abe:	47b8      	blx	r7
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	d1be      	bne.n	8004a42 <_printf_float+0x32a>
 8004ac4:	e689      	b.n	80047da <_printf_float+0xc2>
 8004ac6:	9a05      	ldr	r2, [sp, #20]
 8004ac8:	464b      	mov	r3, r9
 8004aca:	4442      	add	r2, r8
 8004acc:	4631      	mov	r1, r6
 8004ace:	4628      	mov	r0, r5
 8004ad0:	47b8      	blx	r7
 8004ad2:	3001      	adds	r0, #1
 8004ad4:	d1c1      	bne.n	8004a5a <_printf_float+0x342>
 8004ad6:	e680      	b.n	80047da <_printf_float+0xc2>
 8004ad8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ada:	2a01      	cmp	r2, #1
 8004adc:	dc01      	bgt.n	8004ae2 <_printf_float+0x3ca>
 8004ade:	07db      	lsls	r3, r3, #31
 8004ae0:	d538      	bpl.n	8004b54 <_printf_float+0x43c>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	4642      	mov	r2, r8
 8004ae6:	4631      	mov	r1, r6
 8004ae8:	4628      	mov	r0, r5
 8004aea:	47b8      	blx	r7
 8004aec:	3001      	adds	r0, #1
 8004aee:	f43f ae74 	beq.w	80047da <_printf_float+0xc2>
 8004af2:	ee18 3a10 	vmov	r3, s16
 8004af6:	4652      	mov	r2, sl
 8004af8:	4631      	mov	r1, r6
 8004afa:	4628      	mov	r0, r5
 8004afc:	47b8      	blx	r7
 8004afe:	3001      	adds	r0, #1
 8004b00:	f43f ae6b 	beq.w	80047da <_printf_float+0xc2>
 8004b04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b08:	2200      	movs	r2, #0
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	f7fb ffe4 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b10:	b9d8      	cbnz	r0, 8004b4a <_printf_float+0x432>
 8004b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b14:	f108 0201 	add.w	r2, r8, #1
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	4631      	mov	r1, r6
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	47b8      	blx	r7
 8004b20:	3001      	adds	r0, #1
 8004b22:	d10e      	bne.n	8004b42 <_printf_float+0x42a>
 8004b24:	e659      	b.n	80047da <_printf_float+0xc2>
 8004b26:	2301      	movs	r3, #1
 8004b28:	4652      	mov	r2, sl
 8004b2a:	4631      	mov	r1, r6
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	47b8      	blx	r7
 8004b30:	3001      	adds	r0, #1
 8004b32:	f43f ae52 	beq.w	80047da <_printf_float+0xc2>
 8004b36:	f108 0801 	add.w	r8, r8, #1
 8004b3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	4543      	cmp	r3, r8
 8004b40:	dcf1      	bgt.n	8004b26 <_printf_float+0x40e>
 8004b42:	464b      	mov	r3, r9
 8004b44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004b48:	e6dc      	b.n	8004904 <_printf_float+0x1ec>
 8004b4a:	f04f 0800 	mov.w	r8, #0
 8004b4e:	f104 0a1a 	add.w	sl, r4, #26
 8004b52:	e7f2      	b.n	8004b3a <_printf_float+0x422>
 8004b54:	2301      	movs	r3, #1
 8004b56:	4642      	mov	r2, r8
 8004b58:	e7df      	b.n	8004b1a <_printf_float+0x402>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	464a      	mov	r2, r9
 8004b5e:	4631      	mov	r1, r6
 8004b60:	4628      	mov	r0, r5
 8004b62:	47b8      	blx	r7
 8004b64:	3001      	adds	r0, #1
 8004b66:	f43f ae38 	beq.w	80047da <_printf_float+0xc2>
 8004b6a:	f108 0801 	add.w	r8, r8, #1
 8004b6e:	68e3      	ldr	r3, [r4, #12]
 8004b70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b72:	1a5b      	subs	r3, r3, r1
 8004b74:	4543      	cmp	r3, r8
 8004b76:	dcf0      	bgt.n	8004b5a <_printf_float+0x442>
 8004b78:	e6fa      	b.n	8004970 <_printf_float+0x258>
 8004b7a:	f04f 0800 	mov.w	r8, #0
 8004b7e:	f104 0919 	add.w	r9, r4, #25
 8004b82:	e7f4      	b.n	8004b6e <_printf_float+0x456>

08004b84 <_printf_common>:
 8004b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b88:	4616      	mov	r6, r2
 8004b8a:	4699      	mov	r9, r3
 8004b8c:	688a      	ldr	r2, [r1, #8]
 8004b8e:	690b      	ldr	r3, [r1, #16]
 8004b90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b94:	4293      	cmp	r3, r2
 8004b96:	bfb8      	it	lt
 8004b98:	4613      	movlt	r3, r2
 8004b9a:	6033      	str	r3, [r6, #0]
 8004b9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ba0:	4607      	mov	r7, r0
 8004ba2:	460c      	mov	r4, r1
 8004ba4:	b10a      	cbz	r2, 8004baa <_printf_common+0x26>
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	6033      	str	r3, [r6, #0]
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	0699      	lsls	r1, r3, #26
 8004bae:	bf42      	ittt	mi
 8004bb0:	6833      	ldrmi	r3, [r6, #0]
 8004bb2:	3302      	addmi	r3, #2
 8004bb4:	6033      	strmi	r3, [r6, #0]
 8004bb6:	6825      	ldr	r5, [r4, #0]
 8004bb8:	f015 0506 	ands.w	r5, r5, #6
 8004bbc:	d106      	bne.n	8004bcc <_printf_common+0x48>
 8004bbe:	f104 0a19 	add.w	sl, r4, #25
 8004bc2:	68e3      	ldr	r3, [r4, #12]
 8004bc4:	6832      	ldr	r2, [r6, #0]
 8004bc6:	1a9b      	subs	r3, r3, r2
 8004bc8:	42ab      	cmp	r3, r5
 8004bca:	dc26      	bgt.n	8004c1a <_printf_common+0x96>
 8004bcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bd0:	1e13      	subs	r3, r2, #0
 8004bd2:	6822      	ldr	r2, [r4, #0]
 8004bd4:	bf18      	it	ne
 8004bd6:	2301      	movne	r3, #1
 8004bd8:	0692      	lsls	r2, r2, #26
 8004bda:	d42b      	bmi.n	8004c34 <_printf_common+0xb0>
 8004bdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004be0:	4649      	mov	r1, r9
 8004be2:	4638      	mov	r0, r7
 8004be4:	47c0      	blx	r8
 8004be6:	3001      	adds	r0, #1
 8004be8:	d01e      	beq.n	8004c28 <_printf_common+0xa4>
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	68e5      	ldr	r5, [r4, #12]
 8004bee:	6832      	ldr	r2, [r6, #0]
 8004bf0:	f003 0306 	and.w	r3, r3, #6
 8004bf4:	2b04      	cmp	r3, #4
 8004bf6:	bf08      	it	eq
 8004bf8:	1aad      	subeq	r5, r5, r2
 8004bfa:	68a3      	ldr	r3, [r4, #8]
 8004bfc:	6922      	ldr	r2, [r4, #16]
 8004bfe:	bf0c      	ite	eq
 8004c00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c04:	2500      	movne	r5, #0
 8004c06:	4293      	cmp	r3, r2
 8004c08:	bfc4      	itt	gt
 8004c0a:	1a9b      	subgt	r3, r3, r2
 8004c0c:	18ed      	addgt	r5, r5, r3
 8004c0e:	2600      	movs	r6, #0
 8004c10:	341a      	adds	r4, #26
 8004c12:	42b5      	cmp	r5, r6
 8004c14:	d11a      	bne.n	8004c4c <_printf_common+0xc8>
 8004c16:	2000      	movs	r0, #0
 8004c18:	e008      	b.n	8004c2c <_printf_common+0xa8>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	4652      	mov	r2, sl
 8004c1e:	4649      	mov	r1, r9
 8004c20:	4638      	mov	r0, r7
 8004c22:	47c0      	blx	r8
 8004c24:	3001      	adds	r0, #1
 8004c26:	d103      	bne.n	8004c30 <_printf_common+0xac>
 8004c28:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c30:	3501      	adds	r5, #1
 8004c32:	e7c6      	b.n	8004bc2 <_printf_common+0x3e>
 8004c34:	18e1      	adds	r1, r4, r3
 8004c36:	1c5a      	adds	r2, r3, #1
 8004c38:	2030      	movs	r0, #48	; 0x30
 8004c3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c3e:	4422      	add	r2, r4
 8004c40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c48:	3302      	adds	r3, #2
 8004c4a:	e7c7      	b.n	8004bdc <_printf_common+0x58>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	4622      	mov	r2, r4
 8004c50:	4649      	mov	r1, r9
 8004c52:	4638      	mov	r0, r7
 8004c54:	47c0      	blx	r8
 8004c56:	3001      	adds	r0, #1
 8004c58:	d0e6      	beq.n	8004c28 <_printf_common+0xa4>
 8004c5a:	3601      	adds	r6, #1
 8004c5c:	e7d9      	b.n	8004c12 <_printf_common+0x8e>
	...

08004c60 <_printf_i>:
 8004c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c64:	7e0f      	ldrb	r7, [r1, #24]
 8004c66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c68:	2f78      	cmp	r7, #120	; 0x78
 8004c6a:	4691      	mov	r9, r2
 8004c6c:	4680      	mov	r8, r0
 8004c6e:	460c      	mov	r4, r1
 8004c70:	469a      	mov	sl, r3
 8004c72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c76:	d807      	bhi.n	8004c88 <_printf_i+0x28>
 8004c78:	2f62      	cmp	r7, #98	; 0x62
 8004c7a:	d80a      	bhi.n	8004c92 <_printf_i+0x32>
 8004c7c:	2f00      	cmp	r7, #0
 8004c7e:	f000 80d8 	beq.w	8004e32 <_printf_i+0x1d2>
 8004c82:	2f58      	cmp	r7, #88	; 0x58
 8004c84:	f000 80a3 	beq.w	8004dce <_printf_i+0x16e>
 8004c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c90:	e03a      	b.n	8004d08 <_printf_i+0xa8>
 8004c92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c96:	2b15      	cmp	r3, #21
 8004c98:	d8f6      	bhi.n	8004c88 <_printf_i+0x28>
 8004c9a:	a101      	add	r1, pc, #4	; (adr r1, 8004ca0 <_printf_i+0x40>)
 8004c9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ca0:	08004cf9 	.word	0x08004cf9
 8004ca4:	08004d0d 	.word	0x08004d0d
 8004ca8:	08004c89 	.word	0x08004c89
 8004cac:	08004c89 	.word	0x08004c89
 8004cb0:	08004c89 	.word	0x08004c89
 8004cb4:	08004c89 	.word	0x08004c89
 8004cb8:	08004d0d 	.word	0x08004d0d
 8004cbc:	08004c89 	.word	0x08004c89
 8004cc0:	08004c89 	.word	0x08004c89
 8004cc4:	08004c89 	.word	0x08004c89
 8004cc8:	08004c89 	.word	0x08004c89
 8004ccc:	08004e19 	.word	0x08004e19
 8004cd0:	08004d3d 	.word	0x08004d3d
 8004cd4:	08004dfb 	.word	0x08004dfb
 8004cd8:	08004c89 	.word	0x08004c89
 8004cdc:	08004c89 	.word	0x08004c89
 8004ce0:	08004e3b 	.word	0x08004e3b
 8004ce4:	08004c89 	.word	0x08004c89
 8004ce8:	08004d3d 	.word	0x08004d3d
 8004cec:	08004c89 	.word	0x08004c89
 8004cf0:	08004c89 	.word	0x08004c89
 8004cf4:	08004e03 	.word	0x08004e03
 8004cf8:	682b      	ldr	r3, [r5, #0]
 8004cfa:	1d1a      	adds	r2, r3, #4
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	602a      	str	r2, [r5, #0]
 8004d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e0a3      	b.n	8004e54 <_printf_i+0x1f4>
 8004d0c:	6820      	ldr	r0, [r4, #0]
 8004d0e:	6829      	ldr	r1, [r5, #0]
 8004d10:	0606      	lsls	r6, r0, #24
 8004d12:	f101 0304 	add.w	r3, r1, #4
 8004d16:	d50a      	bpl.n	8004d2e <_printf_i+0xce>
 8004d18:	680e      	ldr	r6, [r1, #0]
 8004d1a:	602b      	str	r3, [r5, #0]
 8004d1c:	2e00      	cmp	r6, #0
 8004d1e:	da03      	bge.n	8004d28 <_printf_i+0xc8>
 8004d20:	232d      	movs	r3, #45	; 0x2d
 8004d22:	4276      	negs	r6, r6
 8004d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d28:	485e      	ldr	r0, [pc, #376]	; (8004ea4 <_printf_i+0x244>)
 8004d2a:	230a      	movs	r3, #10
 8004d2c:	e019      	b.n	8004d62 <_printf_i+0x102>
 8004d2e:	680e      	ldr	r6, [r1, #0]
 8004d30:	602b      	str	r3, [r5, #0]
 8004d32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d36:	bf18      	it	ne
 8004d38:	b236      	sxthne	r6, r6
 8004d3a:	e7ef      	b.n	8004d1c <_printf_i+0xbc>
 8004d3c:	682b      	ldr	r3, [r5, #0]
 8004d3e:	6820      	ldr	r0, [r4, #0]
 8004d40:	1d19      	adds	r1, r3, #4
 8004d42:	6029      	str	r1, [r5, #0]
 8004d44:	0601      	lsls	r1, r0, #24
 8004d46:	d501      	bpl.n	8004d4c <_printf_i+0xec>
 8004d48:	681e      	ldr	r6, [r3, #0]
 8004d4a:	e002      	b.n	8004d52 <_printf_i+0xf2>
 8004d4c:	0646      	lsls	r6, r0, #25
 8004d4e:	d5fb      	bpl.n	8004d48 <_printf_i+0xe8>
 8004d50:	881e      	ldrh	r6, [r3, #0]
 8004d52:	4854      	ldr	r0, [pc, #336]	; (8004ea4 <_printf_i+0x244>)
 8004d54:	2f6f      	cmp	r7, #111	; 0x6f
 8004d56:	bf0c      	ite	eq
 8004d58:	2308      	moveq	r3, #8
 8004d5a:	230a      	movne	r3, #10
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d62:	6865      	ldr	r5, [r4, #4]
 8004d64:	60a5      	str	r5, [r4, #8]
 8004d66:	2d00      	cmp	r5, #0
 8004d68:	bfa2      	ittt	ge
 8004d6a:	6821      	ldrge	r1, [r4, #0]
 8004d6c:	f021 0104 	bicge.w	r1, r1, #4
 8004d70:	6021      	strge	r1, [r4, #0]
 8004d72:	b90e      	cbnz	r6, 8004d78 <_printf_i+0x118>
 8004d74:	2d00      	cmp	r5, #0
 8004d76:	d04d      	beq.n	8004e14 <_printf_i+0x1b4>
 8004d78:	4615      	mov	r5, r2
 8004d7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d7e:	fb03 6711 	mls	r7, r3, r1, r6
 8004d82:	5dc7      	ldrb	r7, [r0, r7]
 8004d84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d88:	4637      	mov	r7, r6
 8004d8a:	42bb      	cmp	r3, r7
 8004d8c:	460e      	mov	r6, r1
 8004d8e:	d9f4      	bls.n	8004d7a <_printf_i+0x11a>
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d10b      	bne.n	8004dac <_printf_i+0x14c>
 8004d94:	6823      	ldr	r3, [r4, #0]
 8004d96:	07de      	lsls	r6, r3, #31
 8004d98:	d508      	bpl.n	8004dac <_printf_i+0x14c>
 8004d9a:	6923      	ldr	r3, [r4, #16]
 8004d9c:	6861      	ldr	r1, [r4, #4]
 8004d9e:	4299      	cmp	r1, r3
 8004da0:	bfde      	ittt	le
 8004da2:	2330      	movle	r3, #48	; 0x30
 8004da4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004da8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004dac:	1b52      	subs	r2, r2, r5
 8004dae:	6122      	str	r2, [r4, #16]
 8004db0:	f8cd a000 	str.w	sl, [sp]
 8004db4:	464b      	mov	r3, r9
 8004db6:	aa03      	add	r2, sp, #12
 8004db8:	4621      	mov	r1, r4
 8004dba:	4640      	mov	r0, r8
 8004dbc:	f7ff fee2 	bl	8004b84 <_printf_common>
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	d14c      	bne.n	8004e5e <_printf_i+0x1fe>
 8004dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc8:	b004      	add	sp, #16
 8004dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dce:	4835      	ldr	r0, [pc, #212]	; (8004ea4 <_printf_i+0x244>)
 8004dd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004dd4:	6829      	ldr	r1, [r5, #0]
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ddc:	6029      	str	r1, [r5, #0]
 8004dde:	061d      	lsls	r5, r3, #24
 8004de0:	d514      	bpl.n	8004e0c <_printf_i+0x1ac>
 8004de2:	07df      	lsls	r7, r3, #31
 8004de4:	bf44      	itt	mi
 8004de6:	f043 0320 	orrmi.w	r3, r3, #32
 8004dea:	6023      	strmi	r3, [r4, #0]
 8004dec:	b91e      	cbnz	r6, 8004df6 <_printf_i+0x196>
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	f023 0320 	bic.w	r3, r3, #32
 8004df4:	6023      	str	r3, [r4, #0]
 8004df6:	2310      	movs	r3, #16
 8004df8:	e7b0      	b.n	8004d5c <_printf_i+0xfc>
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	f043 0320 	orr.w	r3, r3, #32
 8004e00:	6023      	str	r3, [r4, #0]
 8004e02:	2378      	movs	r3, #120	; 0x78
 8004e04:	4828      	ldr	r0, [pc, #160]	; (8004ea8 <_printf_i+0x248>)
 8004e06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e0a:	e7e3      	b.n	8004dd4 <_printf_i+0x174>
 8004e0c:	0659      	lsls	r1, r3, #25
 8004e0e:	bf48      	it	mi
 8004e10:	b2b6      	uxthmi	r6, r6
 8004e12:	e7e6      	b.n	8004de2 <_printf_i+0x182>
 8004e14:	4615      	mov	r5, r2
 8004e16:	e7bb      	b.n	8004d90 <_printf_i+0x130>
 8004e18:	682b      	ldr	r3, [r5, #0]
 8004e1a:	6826      	ldr	r6, [r4, #0]
 8004e1c:	6961      	ldr	r1, [r4, #20]
 8004e1e:	1d18      	adds	r0, r3, #4
 8004e20:	6028      	str	r0, [r5, #0]
 8004e22:	0635      	lsls	r5, r6, #24
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	d501      	bpl.n	8004e2c <_printf_i+0x1cc>
 8004e28:	6019      	str	r1, [r3, #0]
 8004e2a:	e002      	b.n	8004e32 <_printf_i+0x1d2>
 8004e2c:	0670      	lsls	r0, r6, #25
 8004e2e:	d5fb      	bpl.n	8004e28 <_printf_i+0x1c8>
 8004e30:	8019      	strh	r1, [r3, #0]
 8004e32:	2300      	movs	r3, #0
 8004e34:	6123      	str	r3, [r4, #16]
 8004e36:	4615      	mov	r5, r2
 8004e38:	e7ba      	b.n	8004db0 <_printf_i+0x150>
 8004e3a:	682b      	ldr	r3, [r5, #0]
 8004e3c:	1d1a      	adds	r2, r3, #4
 8004e3e:	602a      	str	r2, [r5, #0]
 8004e40:	681d      	ldr	r5, [r3, #0]
 8004e42:	6862      	ldr	r2, [r4, #4]
 8004e44:	2100      	movs	r1, #0
 8004e46:	4628      	mov	r0, r5
 8004e48:	f7fb f9d2 	bl	80001f0 <memchr>
 8004e4c:	b108      	cbz	r0, 8004e52 <_printf_i+0x1f2>
 8004e4e:	1b40      	subs	r0, r0, r5
 8004e50:	6060      	str	r0, [r4, #4]
 8004e52:	6863      	ldr	r3, [r4, #4]
 8004e54:	6123      	str	r3, [r4, #16]
 8004e56:	2300      	movs	r3, #0
 8004e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e5c:	e7a8      	b.n	8004db0 <_printf_i+0x150>
 8004e5e:	6923      	ldr	r3, [r4, #16]
 8004e60:	462a      	mov	r2, r5
 8004e62:	4649      	mov	r1, r9
 8004e64:	4640      	mov	r0, r8
 8004e66:	47d0      	blx	sl
 8004e68:	3001      	adds	r0, #1
 8004e6a:	d0ab      	beq.n	8004dc4 <_printf_i+0x164>
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	079b      	lsls	r3, r3, #30
 8004e70:	d413      	bmi.n	8004e9a <_printf_i+0x23a>
 8004e72:	68e0      	ldr	r0, [r4, #12]
 8004e74:	9b03      	ldr	r3, [sp, #12]
 8004e76:	4298      	cmp	r0, r3
 8004e78:	bfb8      	it	lt
 8004e7a:	4618      	movlt	r0, r3
 8004e7c:	e7a4      	b.n	8004dc8 <_printf_i+0x168>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	4632      	mov	r2, r6
 8004e82:	4649      	mov	r1, r9
 8004e84:	4640      	mov	r0, r8
 8004e86:	47d0      	blx	sl
 8004e88:	3001      	adds	r0, #1
 8004e8a:	d09b      	beq.n	8004dc4 <_printf_i+0x164>
 8004e8c:	3501      	adds	r5, #1
 8004e8e:	68e3      	ldr	r3, [r4, #12]
 8004e90:	9903      	ldr	r1, [sp, #12]
 8004e92:	1a5b      	subs	r3, r3, r1
 8004e94:	42ab      	cmp	r3, r5
 8004e96:	dcf2      	bgt.n	8004e7e <_printf_i+0x21e>
 8004e98:	e7eb      	b.n	8004e72 <_printf_i+0x212>
 8004e9a:	2500      	movs	r5, #0
 8004e9c:	f104 0619 	add.w	r6, r4, #25
 8004ea0:	e7f5      	b.n	8004e8e <_printf_i+0x22e>
 8004ea2:	bf00      	nop
 8004ea4:	080074b2 	.word	0x080074b2
 8004ea8:	080074c3 	.word	0x080074c3

08004eac <iprintf>:
 8004eac:	b40f      	push	{r0, r1, r2, r3}
 8004eae:	4b0a      	ldr	r3, [pc, #40]	; (8004ed8 <iprintf+0x2c>)
 8004eb0:	b513      	push	{r0, r1, r4, lr}
 8004eb2:	681c      	ldr	r4, [r3, #0]
 8004eb4:	b124      	cbz	r4, 8004ec0 <iprintf+0x14>
 8004eb6:	69a3      	ldr	r3, [r4, #24]
 8004eb8:	b913      	cbnz	r3, 8004ec0 <iprintf+0x14>
 8004eba:	4620      	mov	r0, r4
 8004ebc:	f7ff fa2a 	bl	8004314 <__sinit>
 8004ec0:	ab05      	add	r3, sp, #20
 8004ec2:	9a04      	ldr	r2, [sp, #16]
 8004ec4:	68a1      	ldr	r1, [r4, #8]
 8004ec6:	9301      	str	r3, [sp, #4]
 8004ec8:	4620      	mov	r0, r4
 8004eca:	f001 fc01 	bl	80066d0 <_vfiprintf_r>
 8004ece:	b002      	add	sp, #8
 8004ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ed4:	b004      	add	sp, #16
 8004ed6:	4770      	bx	lr
 8004ed8:	20000014 	.word	0x20000014

08004edc <_sbrk_r>:
 8004edc:	b538      	push	{r3, r4, r5, lr}
 8004ede:	4d06      	ldr	r5, [pc, #24]	; (8004ef8 <_sbrk_r+0x1c>)
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	4604      	mov	r4, r0
 8004ee4:	4608      	mov	r0, r1
 8004ee6:	602b      	str	r3, [r5, #0]
 8004ee8:	f7fc fbfa 	bl	80016e0 <_sbrk>
 8004eec:	1c43      	adds	r3, r0, #1
 8004eee:	d102      	bne.n	8004ef6 <_sbrk_r+0x1a>
 8004ef0:	682b      	ldr	r3, [r5, #0]
 8004ef2:	b103      	cbz	r3, 8004ef6 <_sbrk_r+0x1a>
 8004ef4:	6023      	str	r3, [r4, #0]
 8004ef6:	bd38      	pop	{r3, r4, r5, pc}
 8004ef8:	20000358 	.word	0x20000358

08004efc <__sread>:
 8004efc:	b510      	push	{r4, lr}
 8004efe:	460c      	mov	r4, r1
 8004f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f04:	f001 fd14 	bl	8006930 <_read_r>
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	bfab      	itete	ge
 8004f0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f0e:	89a3      	ldrhlt	r3, [r4, #12]
 8004f10:	181b      	addge	r3, r3, r0
 8004f12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f16:	bfac      	ite	ge
 8004f18:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f1a:	81a3      	strhlt	r3, [r4, #12]
 8004f1c:	bd10      	pop	{r4, pc}

08004f1e <__swrite>:
 8004f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f22:	461f      	mov	r7, r3
 8004f24:	898b      	ldrh	r3, [r1, #12]
 8004f26:	05db      	lsls	r3, r3, #23
 8004f28:	4605      	mov	r5, r0
 8004f2a:	460c      	mov	r4, r1
 8004f2c:	4616      	mov	r6, r2
 8004f2e:	d505      	bpl.n	8004f3c <__swrite+0x1e>
 8004f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f34:	2302      	movs	r3, #2
 8004f36:	2200      	movs	r2, #0
 8004f38:	f000 ff86 	bl	8005e48 <_lseek_r>
 8004f3c:	89a3      	ldrh	r3, [r4, #12]
 8004f3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f46:	81a3      	strh	r3, [r4, #12]
 8004f48:	4632      	mov	r2, r6
 8004f4a:	463b      	mov	r3, r7
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f52:	f000 b817 	b.w	8004f84 <_write_r>

08004f56 <__sseek>:
 8004f56:	b510      	push	{r4, lr}
 8004f58:	460c      	mov	r4, r1
 8004f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f5e:	f000 ff73 	bl	8005e48 <_lseek_r>
 8004f62:	1c43      	adds	r3, r0, #1
 8004f64:	89a3      	ldrh	r3, [r4, #12]
 8004f66:	bf15      	itete	ne
 8004f68:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f72:	81a3      	strheq	r3, [r4, #12]
 8004f74:	bf18      	it	ne
 8004f76:	81a3      	strhne	r3, [r4, #12]
 8004f78:	bd10      	pop	{r4, pc}

08004f7a <__sclose>:
 8004f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f7e:	f000 b813 	b.w	8004fa8 <_close_r>
	...

08004f84 <_write_r>:
 8004f84:	b538      	push	{r3, r4, r5, lr}
 8004f86:	4d07      	ldr	r5, [pc, #28]	; (8004fa4 <_write_r+0x20>)
 8004f88:	4604      	mov	r4, r0
 8004f8a:	4608      	mov	r0, r1
 8004f8c:	4611      	mov	r1, r2
 8004f8e:	2200      	movs	r2, #0
 8004f90:	602a      	str	r2, [r5, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	f7fe ff63 	bl	8003e5e <_write>
 8004f98:	1c43      	adds	r3, r0, #1
 8004f9a:	d102      	bne.n	8004fa2 <_write_r+0x1e>
 8004f9c:	682b      	ldr	r3, [r5, #0]
 8004f9e:	b103      	cbz	r3, 8004fa2 <_write_r+0x1e>
 8004fa0:	6023      	str	r3, [r4, #0]
 8004fa2:	bd38      	pop	{r3, r4, r5, pc}
 8004fa4:	20000358 	.word	0x20000358

08004fa8 <_close_r>:
 8004fa8:	b538      	push	{r3, r4, r5, lr}
 8004faa:	4d06      	ldr	r5, [pc, #24]	; (8004fc4 <_close_r+0x1c>)
 8004fac:	2300      	movs	r3, #0
 8004fae:	4604      	mov	r4, r0
 8004fb0:	4608      	mov	r0, r1
 8004fb2:	602b      	str	r3, [r5, #0]
 8004fb4:	f7fe ff84 	bl	8003ec0 <_close>
 8004fb8:	1c43      	adds	r3, r0, #1
 8004fba:	d102      	bne.n	8004fc2 <_close_r+0x1a>
 8004fbc:	682b      	ldr	r3, [r5, #0]
 8004fbe:	b103      	cbz	r3, 8004fc2 <_close_r+0x1a>
 8004fc0:	6023      	str	r3, [r4, #0]
 8004fc2:	bd38      	pop	{r3, r4, r5, pc}
 8004fc4:	20000358 	.word	0x20000358

08004fc8 <quorem>:
 8004fc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fcc:	6903      	ldr	r3, [r0, #16]
 8004fce:	690c      	ldr	r4, [r1, #16]
 8004fd0:	42a3      	cmp	r3, r4
 8004fd2:	4607      	mov	r7, r0
 8004fd4:	f2c0 8081 	blt.w	80050da <quorem+0x112>
 8004fd8:	3c01      	subs	r4, #1
 8004fda:	f101 0814 	add.w	r8, r1, #20
 8004fde:	f100 0514 	add.w	r5, r0, #20
 8004fe2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fe6:	9301      	str	r3, [sp, #4]
 8004fe8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004fec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004ff8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004ffc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005000:	d331      	bcc.n	8005066 <quorem+0x9e>
 8005002:	f04f 0e00 	mov.w	lr, #0
 8005006:	4640      	mov	r0, r8
 8005008:	46ac      	mov	ip, r5
 800500a:	46f2      	mov	sl, lr
 800500c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005010:	b293      	uxth	r3, r2
 8005012:	fb06 e303 	mla	r3, r6, r3, lr
 8005016:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800501a:	b29b      	uxth	r3, r3
 800501c:	ebaa 0303 	sub.w	r3, sl, r3
 8005020:	f8dc a000 	ldr.w	sl, [ip]
 8005024:	0c12      	lsrs	r2, r2, #16
 8005026:	fa13 f38a 	uxtah	r3, r3, sl
 800502a:	fb06 e202 	mla	r2, r6, r2, lr
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	9b00      	ldr	r3, [sp, #0]
 8005032:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005036:	b292      	uxth	r2, r2
 8005038:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800503c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005040:	f8bd 3000 	ldrh.w	r3, [sp]
 8005044:	4581      	cmp	r9, r0
 8005046:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800504a:	f84c 3b04 	str.w	r3, [ip], #4
 800504e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005052:	d2db      	bcs.n	800500c <quorem+0x44>
 8005054:	f855 300b 	ldr.w	r3, [r5, fp]
 8005058:	b92b      	cbnz	r3, 8005066 <quorem+0x9e>
 800505a:	9b01      	ldr	r3, [sp, #4]
 800505c:	3b04      	subs	r3, #4
 800505e:	429d      	cmp	r5, r3
 8005060:	461a      	mov	r2, r3
 8005062:	d32e      	bcc.n	80050c2 <quorem+0xfa>
 8005064:	613c      	str	r4, [r7, #16]
 8005066:	4638      	mov	r0, r7
 8005068:	f001 f9a4 	bl	80063b4 <__mcmp>
 800506c:	2800      	cmp	r0, #0
 800506e:	db24      	blt.n	80050ba <quorem+0xf2>
 8005070:	3601      	adds	r6, #1
 8005072:	4628      	mov	r0, r5
 8005074:	f04f 0c00 	mov.w	ip, #0
 8005078:	f858 2b04 	ldr.w	r2, [r8], #4
 800507c:	f8d0 e000 	ldr.w	lr, [r0]
 8005080:	b293      	uxth	r3, r2
 8005082:	ebac 0303 	sub.w	r3, ip, r3
 8005086:	0c12      	lsrs	r2, r2, #16
 8005088:	fa13 f38e 	uxtah	r3, r3, lr
 800508c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005090:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005094:	b29b      	uxth	r3, r3
 8005096:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800509a:	45c1      	cmp	r9, r8
 800509c:	f840 3b04 	str.w	r3, [r0], #4
 80050a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80050a4:	d2e8      	bcs.n	8005078 <quorem+0xb0>
 80050a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80050aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80050ae:	b922      	cbnz	r2, 80050ba <quorem+0xf2>
 80050b0:	3b04      	subs	r3, #4
 80050b2:	429d      	cmp	r5, r3
 80050b4:	461a      	mov	r2, r3
 80050b6:	d30a      	bcc.n	80050ce <quorem+0x106>
 80050b8:	613c      	str	r4, [r7, #16]
 80050ba:	4630      	mov	r0, r6
 80050bc:	b003      	add	sp, #12
 80050be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050c2:	6812      	ldr	r2, [r2, #0]
 80050c4:	3b04      	subs	r3, #4
 80050c6:	2a00      	cmp	r2, #0
 80050c8:	d1cc      	bne.n	8005064 <quorem+0x9c>
 80050ca:	3c01      	subs	r4, #1
 80050cc:	e7c7      	b.n	800505e <quorem+0x96>
 80050ce:	6812      	ldr	r2, [r2, #0]
 80050d0:	3b04      	subs	r3, #4
 80050d2:	2a00      	cmp	r2, #0
 80050d4:	d1f0      	bne.n	80050b8 <quorem+0xf0>
 80050d6:	3c01      	subs	r4, #1
 80050d8:	e7eb      	b.n	80050b2 <quorem+0xea>
 80050da:	2000      	movs	r0, #0
 80050dc:	e7ee      	b.n	80050bc <quorem+0xf4>
	...

080050e0 <_dtoa_r>:
 80050e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050e4:	ed2d 8b04 	vpush	{d8-d9}
 80050e8:	ec57 6b10 	vmov	r6, r7, d0
 80050ec:	b093      	sub	sp, #76	; 0x4c
 80050ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80050f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80050f4:	9106      	str	r1, [sp, #24]
 80050f6:	ee10 aa10 	vmov	sl, s0
 80050fa:	4604      	mov	r4, r0
 80050fc:	9209      	str	r2, [sp, #36]	; 0x24
 80050fe:	930c      	str	r3, [sp, #48]	; 0x30
 8005100:	46bb      	mov	fp, r7
 8005102:	b975      	cbnz	r5, 8005122 <_dtoa_r+0x42>
 8005104:	2010      	movs	r0, #16
 8005106:	f000 feb1 	bl	8005e6c <malloc>
 800510a:	4602      	mov	r2, r0
 800510c:	6260      	str	r0, [r4, #36]	; 0x24
 800510e:	b920      	cbnz	r0, 800511a <_dtoa_r+0x3a>
 8005110:	4ba7      	ldr	r3, [pc, #668]	; (80053b0 <_dtoa_r+0x2d0>)
 8005112:	21ea      	movs	r1, #234	; 0xea
 8005114:	48a7      	ldr	r0, [pc, #668]	; (80053b4 <_dtoa_r+0x2d4>)
 8005116:	f001 fcdd 	bl	8006ad4 <__assert_func>
 800511a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800511e:	6005      	str	r5, [r0, #0]
 8005120:	60c5      	str	r5, [r0, #12]
 8005122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005124:	6819      	ldr	r1, [r3, #0]
 8005126:	b151      	cbz	r1, 800513e <_dtoa_r+0x5e>
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	604a      	str	r2, [r1, #4]
 800512c:	2301      	movs	r3, #1
 800512e:	4093      	lsls	r3, r2
 8005130:	608b      	str	r3, [r1, #8]
 8005132:	4620      	mov	r0, r4
 8005134:	f000 fefc 	bl	8005f30 <_Bfree>
 8005138:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800513a:	2200      	movs	r2, #0
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	1e3b      	subs	r3, r7, #0
 8005140:	bfaa      	itet	ge
 8005142:	2300      	movge	r3, #0
 8005144:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005148:	f8c8 3000 	strge.w	r3, [r8]
 800514c:	4b9a      	ldr	r3, [pc, #616]	; (80053b8 <_dtoa_r+0x2d8>)
 800514e:	bfbc      	itt	lt
 8005150:	2201      	movlt	r2, #1
 8005152:	f8c8 2000 	strlt.w	r2, [r8]
 8005156:	ea33 030b 	bics.w	r3, r3, fp
 800515a:	d11b      	bne.n	8005194 <_dtoa_r+0xb4>
 800515c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800515e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005162:	6013      	str	r3, [r2, #0]
 8005164:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005168:	4333      	orrs	r3, r6
 800516a:	f000 8592 	beq.w	8005c92 <_dtoa_r+0xbb2>
 800516e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005170:	b963      	cbnz	r3, 800518c <_dtoa_r+0xac>
 8005172:	4b92      	ldr	r3, [pc, #584]	; (80053bc <_dtoa_r+0x2dc>)
 8005174:	e022      	b.n	80051bc <_dtoa_r+0xdc>
 8005176:	4b92      	ldr	r3, [pc, #584]	; (80053c0 <_dtoa_r+0x2e0>)
 8005178:	9301      	str	r3, [sp, #4]
 800517a:	3308      	adds	r3, #8
 800517c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800517e:	6013      	str	r3, [r2, #0]
 8005180:	9801      	ldr	r0, [sp, #4]
 8005182:	b013      	add	sp, #76	; 0x4c
 8005184:	ecbd 8b04 	vpop	{d8-d9}
 8005188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800518c:	4b8b      	ldr	r3, [pc, #556]	; (80053bc <_dtoa_r+0x2dc>)
 800518e:	9301      	str	r3, [sp, #4]
 8005190:	3303      	adds	r3, #3
 8005192:	e7f3      	b.n	800517c <_dtoa_r+0x9c>
 8005194:	2200      	movs	r2, #0
 8005196:	2300      	movs	r3, #0
 8005198:	4650      	mov	r0, sl
 800519a:	4659      	mov	r1, fp
 800519c:	f7fb fc9c 	bl	8000ad8 <__aeabi_dcmpeq>
 80051a0:	ec4b ab19 	vmov	d9, sl, fp
 80051a4:	4680      	mov	r8, r0
 80051a6:	b158      	cbz	r0, 80051c0 <_dtoa_r+0xe0>
 80051a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051aa:	2301      	movs	r3, #1
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 856b 	beq.w	8005c8c <_dtoa_r+0xbac>
 80051b6:	4883      	ldr	r0, [pc, #524]	; (80053c4 <_dtoa_r+0x2e4>)
 80051b8:	6018      	str	r0, [r3, #0]
 80051ba:	1e43      	subs	r3, r0, #1
 80051bc:	9301      	str	r3, [sp, #4]
 80051be:	e7df      	b.n	8005180 <_dtoa_r+0xa0>
 80051c0:	ec4b ab10 	vmov	d0, sl, fp
 80051c4:	aa10      	add	r2, sp, #64	; 0x40
 80051c6:	a911      	add	r1, sp, #68	; 0x44
 80051c8:	4620      	mov	r0, r4
 80051ca:	f001 f999 	bl	8006500 <__d2b>
 80051ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80051d2:	ee08 0a10 	vmov	s16, r0
 80051d6:	2d00      	cmp	r5, #0
 80051d8:	f000 8084 	beq.w	80052e4 <_dtoa_r+0x204>
 80051dc:	ee19 3a90 	vmov	r3, s19
 80051e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80051e8:	4656      	mov	r6, sl
 80051ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80051ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80051f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80051f6:	4b74      	ldr	r3, [pc, #464]	; (80053c8 <_dtoa_r+0x2e8>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	4630      	mov	r0, r6
 80051fc:	4639      	mov	r1, r7
 80051fe:	f7fb f84b 	bl	8000298 <__aeabi_dsub>
 8005202:	a365      	add	r3, pc, #404	; (adr r3, 8005398 <_dtoa_r+0x2b8>)
 8005204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005208:	f7fb f9fe 	bl	8000608 <__aeabi_dmul>
 800520c:	a364      	add	r3, pc, #400	; (adr r3, 80053a0 <_dtoa_r+0x2c0>)
 800520e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005212:	f7fb f843 	bl	800029c <__adddf3>
 8005216:	4606      	mov	r6, r0
 8005218:	4628      	mov	r0, r5
 800521a:	460f      	mov	r7, r1
 800521c:	f7fb f98a 	bl	8000534 <__aeabi_i2d>
 8005220:	a361      	add	r3, pc, #388	; (adr r3, 80053a8 <_dtoa_r+0x2c8>)
 8005222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005226:	f7fb f9ef 	bl	8000608 <__aeabi_dmul>
 800522a:	4602      	mov	r2, r0
 800522c:	460b      	mov	r3, r1
 800522e:	4630      	mov	r0, r6
 8005230:	4639      	mov	r1, r7
 8005232:	f7fb f833 	bl	800029c <__adddf3>
 8005236:	4606      	mov	r6, r0
 8005238:	460f      	mov	r7, r1
 800523a:	f7fb fc95 	bl	8000b68 <__aeabi_d2iz>
 800523e:	2200      	movs	r2, #0
 8005240:	9000      	str	r0, [sp, #0]
 8005242:	2300      	movs	r3, #0
 8005244:	4630      	mov	r0, r6
 8005246:	4639      	mov	r1, r7
 8005248:	f7fb fc50 	bl	8000aec <__aeabi_dcmplt>
 800524c:	b150      	cbz	r0, 8005264 <_dtoa_r+0x184>
 800524e:	9800      	ldr	r0, [sp, #0]
 8005250:	f7fb f970 	bl	8000534 <__aeabi_i2d>
 8005254:	4632      	mov	r2, r6
 8005256:	463b      	mov	r3, r7
 8005258:	f7fb fc3e 	bl	8000ad8 <__aeabi_dcmpeq>
 800525c:	b910      	cbnz	r0, 8005264 <_dtoa_r+0x184>
 800525e:	9b00      	ldr	r3, [sp, #0]
 8005260:	3b01      	subs	r3, #1
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	9b00      	ldr	r3, [sp, #0]
 8005266:	2b16      	cmp	r3, #22
 8005268:	d85a      	bhi.n	8005320 <_dtoa_r+0x240>
 800526a:	9a00      	ldr	r2, [sp, #0]
 800526c:	4b57      	ldr	r3, [pc, #348]	; (80053cc <_dtoa_r+0x2ec>)
 800526e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005276:	ec51 0b19 	vmov	r0, r1, d9
 800527a:	f7fb fc37 	bl	8000aec <__aeabi_dcmplt>
 800527e:	2800      	cmp	r0, #0
 8005280:	d050      	beq.n	8005324 <_dtoa_r+0x244>
 8005282:	9b00      	ldr	r3, [sp, #0]
 8005284:	3b01      	subs	r3, #1
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	2300      	movs	r3, #0
 800528a:	930b      	str	r3, [sp, #44]	; 0x2c
 800528c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800528e:	1b5d      	subs	r5, r3, r5
 8005290:	1e6b      	subs	r3, r5, #1
 8005292:	9305      	str	r3, [sp, #20]
 8005294:	bf45      	ittet	mi
 8005296:	f1c5 0301 	rsbmi	r3, r5, #1
 800529a:	9304      	strmi	r3, [sp, #16]
 800529c:	2300      	movpl	r3, #0
 800529e:	2300      	movmi	r3, #0
 80052a0:	bf4c      	ite	mi
 80052a2:	9305      	strmi	r3, [sp, #20]
 80052a4:	9304      	strpl	r3, [sp, #16]
 80052a6:	9b00      	ldr	r3, [sp, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	db3d      	blt.n	8005328 <_dtoa_r+0x248>
 80052ac:	9b05      	ldr	r3, [sp, #20]
 80052ae:	9a00      	ldr	r2, [sp, #0]
 80052b0:	920a      	str	r2, [sp, #40]	; 0x28
 80052b2:	4413      	add	r3, r2
 80052b4:	9305      	str	r3, [sp, #20]
 80052b6:	2300      	movs	r3, #0
 80052b8:	9307      	str	r3, [sp, #28]
 80052ba:	9b06      	ldr	r3, [sp, #24]
 80052bc:	2b09      	cmp	r3, #9
 80052be:	f200 8089 	bhi.w	80053d4 <_dtoa_r+0x2f4>
 80052c2:	2b05      	cmp	r3, #5
 80052c4:	bfc4      	itt	gt
 80052c6:	3b04      	subgt	r3, #4
 80052c8:	9306      	strgt	r3, [sp, #24]
 80052ca:	9b06      	ldr	r3, [sp, #24]
 80052cc:	f1a3 0302 	sub.w	r3, r3, #2
 80052d0:	bfcc      	ite	gt
 80052d2:	2500      	movgt	r5, #0
 80052d4:	2501      	movle	r5, #1
 80052d6:	2b03      	cmp	r3, #3
 80052d8:	f200 8087 	bhi.w	80053ea <_dtoa_r+0x30a>
 80052dc:	e8df f003 	tbb	[pc, r3]
 80052e0:	59383a2d 	.word	0x59383a2d
 80052e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80052e8:	441d      	add	r5, r3
 80052ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80052ee:	2b20      	cmp	r3, #32
 80052f0:	bfc1      	itttt	gt
 80052f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80052f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80052fa:	fa0b f303 	lslgt.w	r3, fp, r3
 80052fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005302:	bfda      	itte	le
 8005304:	f1c3 0320 	rsble	r3, r3, #32
 8005308:	fa06 f003 	lslle.w	r0, r6, r3
 800530c:	4318      	orrgt	r0, r3
 800530e:	f7fb f901 	bl	8000514 <__aeabi_ui2d>
 8005312:	2301      	movs	r3, #1
 8005314:	4606      	mov	r6, r0
 8005316:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800531a:	3d01      	subs	r5, #1
 800531c:	930e      	str	r3, [sp, #56]	; 0x38
 800531e:	e76a      	b.n	80051f6 <_dtoa_r+0x116>
 8005320:	2301      	movs	r3, #1
 8005322:	e7b2      	b.n	800528a <_dtoa_r+0x1aa>
 8005324:	900b      	str	r0, [sp, #44]	; 0x2c
 8005326:	e7b1      	b.n	800528c <_dtoa_r+0x1ac>
 8005328:	9b04      	ldr	r3, [sp, #16]
 800532a:	9a00      	ldr	r2, [sp, #0]
 800532c:	1a9b      	subs	r3, r3, r2
 800532e:	9304      	str	r3, [sp, #16]
 8005330:	4253      	negs	r3, r2
 8005332:	9307      	str	r3, [sp, #28]
 8005334:	2300      	movs	r3, #0
 8005336:	930a      	str	r3, [sp, #40]	; 0x28
 8005338:	e7bf      	b.n	80052ba <_dtoa_r+0x1da>
 800533a:	2300      	movs	r3, #0
 800533c:	9308      	str	r3, [sp, #32]
 800533e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005340:	2b00      	cmp	r3, #0
 8005342:	dc55      	bgt.n	80053f0 <_dtoa_r+0x310>
 8005344:	2301      	movs	r3, #1
 8005346:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800534a:	461a      	mov	r2, r3
 800534c:	9209      	str	r2, [sp, #36]	; 0x24
 800534e:	e00c      	b.n	800536a <_dtoa_r+0x28a>
 8005350:	2301      	movs	r3, #1
 8005352:	e7f3      	b.n	800533c <_dtoa_r+0x25c>
 8005354:	2300      	movs	r3, #0
 8005356:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005358:	9308      	str	r3, [sp, #32]
 800535a:	9b00      	ldr	r3, [sp, #0]
 800535c:	4413      	add	r3, r2
 800535e:	9302      	str	r3, [sp, #8]
 8005360:	3301      	adds	r3, #1
 8005362:	2b01      	cmp	r3, #1
 8005364:	9303      	str	r3, [sp, #12]
 8005366:	bfb8      	it	lt
 8005368:	2301      	movlt	r3, #1
 800536a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800536c:	2200      	movs	r2, #0
 800536e:	6042      	str	r2, [r0, #4]
 8005370:	2204      	movs	r2, #4
 8005372:	f102 0614 	add.w	r6, r2, #20
 8005376:	429e      	cmp	r6, r3
 8005378:	6841      	ldr	r1, [r0, #4]
 800537a:	d93d      	bls.n	80053f8 <_dtoa_r+0x318>
 800537c:	4620      	mov	r0, r4
 800537e:	f000 fd97 	bl	8005eb0 <_Balloc>
 8005382:	9001      	str	r0, [sp, #4]
 8005384:	2800      	cmp	r0, #0
 8005386:	d13b      	bne.n	8005400 <_dtoa_r+0x320>
 8005388:	4b11      	ldr	r3, [pc, #68]	; (80053d0 <_dtoa_r+0x2f0>)
 800538a:	4602      	mov	r2, r0
 800538c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005390:	e6c0      	b.n	8005114 <_dtoa_r+0x34>
 8005392:	2301      	movs	r3, #1
 8005394:	e7df      	b.n	8005356 <_dtoa_r+0x276>
 8005396:	bf00      	nop
 8005398:	636f4361 	.word	0x636f4361
 800539c:	3fd287a7 	.word	0x3fd287a7
 80053a0:	8b60c8b3 	.word	0x8b60c8b3
 80053a4:	3fc68a28 	.word	0x3fc68a28
 80053a8:	509f79fb 	.word	0x509f79fb
 80053ac:	3fd34413 	.word	0x3fd34413
 80053b0:	080074e1 	.word	0x080074e1
 80053b4:	080074f8 	.word	0x080074f8
 80053b8:	7ff00000 	.word	0x7ff00000
 80053bc:	080074dd 	.word	0x080074dd
 80053c0:	080074d4 	.word	0x080074d4
 80053c4:	080074b1 	.word	0x080074b1
 80053c8:	3ff80000 	.word	0x3ff80000
 80053cc:	080075e8 	.word	0x080075e8
 80053d0:	08007553 	.word	0x08007553
 80053d4:	2501      	movs	r5, #1
 80053d6:	2300      	movs	r3, #0
 80053d8:	9306      	str	r3, [sp, #24]
 80053da:	9508      	str	r5, [sp, #32]
 80053dc:	f04f 33ff 	mov.w	r3, #4294967295
 80053e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80053e4:	2200      	movs	r2, #0
 80053e6:	2312      	movs	r3, #18
 80053e8:	e7b0      	b.n	800534c <_dtoa_r+0x26c>
 80053ea:	2301      	movs	r3, #1
 80053ec:	9308      	str	r3, [sp, #32]
 80053ee:	e7f5      	b.n	80053dc <_dtoa_r+0x2fc>
 80053f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80053f6:	e7b8      	b.n	800536a <_dtoa_r+0x28a>
 80053f8:	3101      	adds	r1, #1
 80053fa:	6041      	str	r1, [r0, #4]
 80053fc:	0052      	lsls	r2, r2, #1
 80053fe:	e7b8      	b.n	8005372 <_dtoa_r+0x292>
 8005400:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005402:	9a01      	ldr	r2, [sp, #4]
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	9b03      	ldr	r3, [sp, #12]
 8005408:	2b0e      	cmp	r3, #14
 800540a:	f200 809d 	bhi.w	8005548 <_dtoa_r+0x468>
 800540e:	2d00      	cmp	r5, #0
 8005410:	f000 809a 	beq.w	8005548 <_dtoa_r+0x468>
 8005414:	9b00      	ldr	r3, [sp, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	dd32      	ble.n	8005480 <_dtoa_r+0x3a0>
 800541a:	4ab7      	ldr	r2, [pc, #732]	; (80056f8 <_dtoa_r+0x618>)
 800541c:	f003 030f 	and.w	r3, r3, #15
 8005420:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005424:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005428:	9b00      	ldr	r3, [sp, #0]
 800542a:	05d8      	lsls	r0, r3, #23
 800542c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005430:	d516      	bpl.n	8005460 <_dtoa_r+0x380>
 8005432:	4bb2      	ldr	r3, [pc, #712]	; (80056fc <_dtoa_r+0x61c>)
 8005434:	ec51 0b19 	vmov	r0, r1, d9
 8005438:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800543c:	f7fb fa0e 	bl	800085c <__aeabi_ddiv>
 8005440:	f007 070f 	and.w	r7, r7, #15
 8005444:	4682      	mov	sl, r0
 8005446:	468b      	mov	fp, r1
 8005448:	2503      	movs	r5, #3
 800544a:	4eac      	ldr	r6, [pc, #688]	; (80056fc <_dtoa_r+0x61c>)
 800544c:	b957      	cbnz	r7, 8005464 <_dtoa_r+0x384>
 800544e:	4642      	mov	r2, r8
 8005450:	464b      	mov	r3, r9
 8005452:	4650      	mov	r0, sl
 8005454:	4659      	mov	r1, fp
 8005456:	f7fb fa01 	bl	800085c <__aeabi_ddiv>
 800545a:	4682      	mov	sl, r0
 800545c:	468b      	mov	fp, r1
 800545e:	e028      	b.n	80054b2 <_dtoa_r+0x3d2>
 8005460:	2502      	movs	r5, #2
 8005462:	e7f2      	b.n	800544a <_dtoa_r+0x36a>
 8005464:	07f9      	lsls	r1, r7, #31
 8005466:	d508      	bpl.n	800547a <_dtoa_r+0x39a>
 8005468:	4640      	mov	r0, r8
 800546a:	4649      	mov	r1, r9
 800546c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005470:	f7fb f8ca 	bl	8000608 <__aeabi_dmul>
 8005474:	3501      	adds	r5, #1
 8005476:	4680      	mov	r8, r0
 8005478:	4689      	mov	r9, r1
 800547a:	107f      	asrs	r7, r7, #1
 800547c:	3608      	adds	r6, #8
 800547e:	e7e5      	b.n	800544c <_dtoa_r+0x36c>
 8005480:	f000 809b 	beq.w	80055ba <_dtoa_r+0x4da>
 8005484:	9b00      	ldr	r3, [sp, #0]
 8005486:	4f9d      	ldr	r7, [pc, #628]	; (80056fc <_dtoa_r+0x61c>)
 8005488:	425e      	negs	r6, r3
 800548a:	4b9b      	ldr	r3, [pc, #620]	; (80056f8 <_dtoa_r+0x618>)
 800548c:	f006 020f 	and.w	r2, r6, #15
 8005490:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005498:	ec51 0b19 	vmov	r0, r1, d9
 800549c:	f7fb f8b4 	bl	8000608 <__aeabi_dmul>
 80054a0:	1136      	asrs	r6, r6, #4
 80054a2:	4682      	mov	sl, r0
 80054a4:	468b      	mov	fp, r1
 80054a6:	2300      	movs	r3, #0
 80054a8:	2502      	movs	r5, #2
 80054aa:	2e00      	cmp	r6, #0
 80054ac:	d17a      	bne.n	80055a4 <_dtoa_r+0x4c4>
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1d3      	bne.n	800545a <_dtoa_r+0x37a>
 80054b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 8082 	beq.w	80055be <_dtoa_r+0x4de>
 80054ba:	4b91      	ldr	r3, [pc, #580]	; (8005700 <_dtoa_r+0x620>)
 80054bc:	2200      	movs	r2, #0
 80054be:	4650      	mov	r0, sl
 80054c0:	4659      	mov	r1, fp
 80054c2:	f7fb fb13 	bl	8000aec <__aeabi_dcmplt>
 80054c6:	2800      	cmp	r0, #0
 80054c8:	d079      	beq.n	80055be <_dtoa_r+0x4de>
 80054ca:	9b03      	ldr	r3, [sp, #12]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d076      	beq.n	80055be <_dtoa_r+0x4de>
 80054d0:	9b02      	ldr	r3, [sp, #8]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	dd36      	ble.n	8005544 <_dtoa_r+0x464>
 80054d6:	9b00      	ldr	r3, [sp, #0]
 80054d8:	4650      	mov	r0, sl
 80054da:	4659      	mov	r1, fp
 80054dc:	1e5f      	subs	r7, r3, #1
 80054de:	2200      	movs	r2, #0
 80054e0:	4b88      	ldr	r3, [pc, #544]	; (8005704 <_dtoa_r+0x624>)
 80054e2:	f7fb f891 	bl	8000608 <__aeabi_dmul>
 80054e6:	9e02      	ldr	r6, [sp, #8]
 80054e8:	4682      	mov	sl, r0
 80054ea:	468b      	mov	fp, r1
 80054ec:	3501      	adds	r5, #1
 80054ee:	4628      	mov	r0, r5
 80054f0:	f7fb f820 	bl	8000534 <__aeabi_i2d>
 80054f4:	4652      	mov	r2, sl
 80054f6:	465b      	mov	r3, fp
 80054f8:	f7fb f886 	bl	8000608 <__aeabi_dmul>
 80054fc:	4b82      	ldr	r3, [pc, #520]	; (8005708 <_dtoa_r+0x628>)
 80054fe:	2200      	movs	r2, #0
 8005500:	f7fa fecc 	bl	800029c <__adddf3>
 8005504:	46d0      	mov	r8, sl
 8005506:	46d9      	mov	r9, fp
 8005508:	4682      	mov	sl, r0
 800550a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800550e:	2e00      	cmp	r6, #0
 8005510:	d158      	bne.n	80055c4 <_dtoa_r+0x4e4>
 8005512:	4b7e      	ldr	r3, [pc, #504]	; (800570c <_dtoa_r+0x62c>)
 8005514:	2200      	movs	r2, #0
 8005516:	4640      	mov	r0, r8
 8005518:	4649      	mov	r1, r9
 800551a:	f7fa febd 	bl	8000298 <__aeabi_dsub>
 800551e:	4652      	mov	r2, sl
 8005520:	465b      	mov	r3, fp
 8005522:	4680      	mov	r8, r0
 8005524:	4689      	mov	r9, r1
 8005526:	f7fb faff 	bl	8000b28 <__aeabi_dcmpgt>
 800552a:	2800      	cmp	r0, #0
 800552c:	f040 8295 	bne.w	8005a5a <_dtoa_r+0x97a>
 8005530:	4652      	mov	r2, sl
 8005532:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005536:	4640      	mov	r0, r8
 8005538:	4649      	mov	r1, r9
 800553a:	f7fb fad7 	bl	8000aec <__aeabi_dcmplt>
 800553e:	2800      	cmp	r0, #0
 8005540:	f040 8289 	bne.w	8005a56 <_dtoa_r+0x976>
 8005544:	ec5b ab19 	vmov	sl, fp, d9
 8005548:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800554a:	2b00      	cmp	r3, #0
 800554c:	f2c0 8148 	blt.w	80057e0 <_dtoa_r+0x700>
 8005550:	9a00      	ldr	r2, [sp, #0]
 8005552:	2a0e      	cmp	r2, #14
 8005554:	f300 8144 	bgt.w	80057e0 <_dtoa_r+0x700>
 8005558:	4b67      	ldr	r3, [pc, #412]	; (80056f8 <_dtoa_r+0x618>)
 800555a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800555e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005564:	2b00      	cmp	r3, #0
 8005566:	f280 80d5 	bge.w	8005714 <_dtoa_r+0x634>
 800556a:	9b03      	ldr	r3, [sp, #12]
 800556c:	2b00      	cmp	r3, #0
 800556e:	f300 80d1 	bgt.w	8005714 <_dtoa_r+0x634>
 8005572:	f040 826f 	bne.w	8005a54 <_dtoa_r+0x974>
 8005576:	4b65      	ldr	r3, [pc, #404]	; (800570c <_dtoa_r+0x62c>)
 8005578:	2200      	movs	r2, #0
 800557a:	4640      	mov	r0, r8
 800557c:	4649      	mov	r1, r9
 800557e:	f7fb f843 	bl	8000608 <__aeabi_dmul>
 8005582:	4652      	mov	r2, sl
 8005584:	465b      	mov	r3, fp
 8005586:	f7fb fac5 	bl	8000b14 <__aeabi_dcmpge>
 800558a:	9e03      	ldr	r6, [sp, #12]
 800558c:	4637      	mov	r7, r6
 800558e:	2800      	cmp	r0, #0
 8005590:	f040 8245 	bne.w	8005a1e <_dtoa_r+0x93e>
 8005594:	9d01      	ldr	r5, [sp, #4]
 8005596:	2331      	movs	r3, #49	; 0x31
 8005598:	f805 3b01 	strb.w	r3, [r5], #1
 800559c:	9b00      	ldr	r3, [sp, #0]
 800559e:	3301      	adds	r3, #1
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	e240      	b.n	8005a26 <_dtoa_r+0x946>
 80055a4:	07f2      	lsls	r2, r6, #31
 80055a6:	d505      	bpl.n	80055b4 <_dtoa_r+0x4d4>
 80055a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055ac:	f7fb f82c 	bl	8000608 <__aeabi_dmul>
 80055b0:	3501      	adds	r5, #1
 80055b2:	2301      	movs	r3, #1
 80055b4:	1076      	asrs	r6, r6, #1
 80055b6:	3708      	adds	r7, #8
 80055b8:	e777      	b.n	80054aa <_dtoa_r+0x3ca>
 80055ba:	2502      	movs	r5, #2
 80055bc:	e779      	b.n	80054b2 <_dtoa_r+0x3d2>
 80055be:	9f00      	ldr	r7, [sp, #0]
 80055c0:	9e03      	ldr	r6, [sp, #12]
 80055c2:	e794      	b.n	80054ee <_dtoa_r+0x40e>
 80055c4:	9901      	ldr	r1, [sp, #4]
 80055c6:	4b4c      	ldr	r3, [pc, #304]	; (80056f8 <_dtoa_r+0x618>)
 80055c8:	4431      	add	r1, r6
 80055ca:	910d      	str	r1, [sp, #52]	; 0x34
 80055cc:	9908      	ldr	r1, [sp, #32]
 80055ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80055d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80055d6:	2900      	cmp	r1, #0
 80055d8:	d043      	beq.n	8005662 <_dtoa_r+0x582>
 80055da:	494d      	ldr	r1, [pc, #308]	; (8005710 <_dtoa_r+0x630>)
 80055dc:	2000      	movs	r0, #0
 80055de:	f7fb f93d 	bl	800085c <__aeabi_ddiv>
 80055e2:	4652      	mov	r2, sl
 80055e4:	465b      	mov	r3, fp
 80055e6:	f7fa fe57 	bl	8000298 <__aeabi_dsub>
 80055ea:	9d01      	ldr	r5, [sp, #4]
 80055ec:	4682      	mov	sl, r0
 80055ee:	468b      	mov	fp, r1
 80055f0:	4649      	mov	r1, r9
 80055f2:	4640      	mov	r0, r8
 80055f4:	f7fb fab8 	bl	8000b68 <__aeabi_d2iz>
 80055f8:	4606      	mov	r6, r0
 80055fa:	f7fa ff9b 	bl	8000534 <__aeabi_i2d>
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	4640      	mov	r0, r8
 8005604:	4649      	mov	r1, r9
 8005606:	f7fa fe47 	bl	8000298 <__aeabi_dsub>
 800560a:	3630      	adds	r6, #48	; 0x30
 800560c:	f805 6b01 	strb.w	r6, [r5], #1
 8005610:	4652      	mov	r2, sl
 8005612:	465b      	mov	r3, fp
 8005614:	4680      	mov	r8, r0
 8005616:	4689      	mov	r9, r1
 8005618:	f7fb fa68 	bl	8000aec <__aeabi_dcmplt>
 800561c:	2800      	cmp	r0, #0
 800561e:	d163      	bne.n	80056e8 <_dtoa_r+0x608>
 8005620:	4642      	mov	r2, r8
 8005622:	464b      	mov	r3, r9
 8005624:	4936      	ldr	r1, [pc, #216]	; (8005700 <_dtoa_r+0x620>)
 8005626:	2000      	movs	r0, #0
 8005628:	f7fa fe36 	bl	8000298 <__aeabi_dsub>
 800562c:	4652      	mov	r2, sl
 800562e:	465b      	mov	r3, fp
 8005630:	f7fb fa5c 	bl	8000aec <__aeabi_dcmplt>
 8005634:	2800      	cmp	r0, #0
 8005636:	f040 80b5 	bne.w	80057a4 <_dtoa_r+0x6c4>
 800563a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800563c:	429d      	cmp	r5, r3
 800563e:	d081      	beq.n	8005544 <_dtoa_r+0x464>
 8005640:	4b30      	ldr	r3, [pc, #192]	; (8005704 <_dtoa_r+0x624>)
 8005642:	2200      	movs	r2, #0
 8005644:	4650      	mov	r0, sl
 8005646:	4659      	mov	r1, fp
 8005648:	f7fa ffde 	bl	8000608 <__aeabi_dmul>
 800564c:	4b2d      	ldr	r3, [pc, #180]	; (8005704 <_dtoa_r+0x624>)
 800564e:	4682      	mov	sl, r0
 8005650:	468b      	mov	fp, r1
 8005652:	4640      	mov	r0, r8
 8005654:	4649      	mov	r1, r9
 8005656:	2200      	movs	r2, #0
 8005658:	f7fa ffd6 	bl	8000608 <__aeabi_dmul>
 800565c:	4680      	mov	r8, r0
 800565e:	4689      	mov	r9, r1
 8005660:	e7c6      	b.n	80055f0 <_dtoa_r+0x510>
 8005662:	4650      	mov	r0, sl
 8005664:	4659      	mov	r1, fp
 8005666:	f7fa ffcf 	bl	8000608 <__aeabi_dmul>
 800566a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800566c:	9d01      	ldr	r5, [sp, #4]
 800566e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005670:	4682      	mov	sl, r0
 8005672:	468b      	mov	fp, r1
 8005674:	4649      	mov	r1, r9
 8005676:	4640      	mov	r0, r8
 8005678:	f7fb fa76 	bl	8000b68 <__aeabi_d2iz>
 800567c:	4606      	mov	r6, r0
 800567e:	f7fa ff59 	bl	8000534 <__aeabi_i2d>
 8005682:	3630      	adds	r6, #48	; 0x30
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4640      	mov	r0, r8
 800568a:	4649      	mov	r1, r9
 800568c:	f7fa fe04 	bl	8000298 <__aeabi_dsub>
 8005690:	f805 6b01 	strb.w	r6, [r5], #1
 8005694:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005696:	429d      	cmp	r5, r3
 8005698:	4680      	mov	r8, r0
 800569a:	4689      	mov	r9, r1
 800569c:	f04f 0200 	mov.w	r2, #0
 80056a0:	d124      	bne.n	80056ec <_dtoa_r+0x60c>
 80056a2:	4b1b      	ldr	r3, [pc, #108]	; (8005710 <_dtoa_r+0x630>)
 80056a4:	4650      	mov	r0, sl
 80056a6:	4659      	mov	r1, fp
 80056a8:	f7fa fdf8 	bl	800029c <__adddf3>
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	4640      	mov	r0, r8
 80056b2:	4649      	mov	r1, r9
 80056b4:	f7fb fa38 	bl	8000b28 <__aeabi_dcmpgt>
 80056b8:	2800      	cmp	r0, #0
 80056ba:	d173      	bne.n	80057a4 <_dtoa_r+0x6c4>
 80056bc:	4652      	mov	r2, sl
 80056be:	465b      	mov	r3, fp
 80056c0:	4913      	ldr	r1, [pc, #76]	; (8005710 <_dtoa_r+0x630>)
 80056c2:	2000      	movs	r0, #0
 80056c4:	f7fa fde8 	bl	8000298 <__aeabi_dsub>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	4640      	mov	r0, r8
 80056ce:	4649      	mov	r1, r9
 80056d0:	f7fb fa0c 	bl	8000aec <__aeabi_dcmplt>
 80056d4:	2800      	cmp	r0, #0
 80056d6:	f43f af35 	beq.w	8005544 <_dtoa_r+0x464>
 80056da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80056dc:	1e6b      	subs	r3, r5, #1
 80056de:	930f      	str	r3, [sp, #60]	; 0x3c
 80056e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80056e4:	2b30      	cmp	r3, #48	; 0x30
 80056e6:	d0f8      	beq.n	80056da <_dtoa_r+0x5fa>
 80056e8:	9700      	str	r7, [sp, #0]
 80056ea:	e049      	b.n	8005780 <_dtoa_r+0x6a0>
 80056ec:	4b05      	ldr	r3, [pc, #20]	; (8005704 <_dtoa_r+0x624>)
 80056ee:	f7fa ff8b 	bl	8000608 <__aeabi_dmul>
 80056f2:	4680      	mov	r8, r0
 80056f4:	4689      	mov	r9, r1
 80056f6:	e7bd      	b.n	8005674 <_dtoa_r+0x594>
 80056f8:	080075e8 	.word	0x080075e8
 80056fc:	080075c0 	.word	0x080075c0
 8005700:	3ff00000 	.word	0x3ff00000
 8005704:	40240000 	.word	0x40240000
 8005708:	401c0000 	.word	0x401c0000
 800570c:	40140000 	.word	0x40140000
 8005710:	3fe00000 	.word	0x3fe00000
 8005714:	9d01      	ldr	r5, [sp, #4]
 8005716:	4656      	mov	r6, sl
 8005718:	465f      	mov	r7, fp
 800571a:	4642      	mov	r2, r8
 800571c:	464b      	mov	r3, r9
 800571e:	4630      	mov	r0, r6
 8005720:	4639      	mov	r1, r7
 8005722:	f7fb f89b 	bl	800085c <__aeabi_ddiv>
 8005726:	f7fb fa1f 	bl	8000b68 <__aeabi_d2iz>
 800572a:	4682      	mov	sl, r0
 800572c:	f7fa ff02 	bl	8000534 <__aeabi_i2d>
 8005730:	4642      	mov	r2, r8
 8005732:	464b      	mov	r3, r9
 8005734:	f7fa ff68 	bl	8000608 <__aeabi_dmul>
 8005738:	4602      	mov	r2, r0
 800573a:	460b      	mov	r3, r1
 800573c:	4630      	mov	r0, r6
 800573e:	4639      	mov	r1, r7
 8005740:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005744:	f7fa fda8 	bl	8000298 <__aeabi_dsub>
 8005748:	f805 6b01 	strb.w	r6, [r5], #1
 800574c:	9e01      	ldr	r6, [sp, #4]
 800574e:	9f03      	ldr	r7, [sp, #12]
 8005750:	1bae      	subs	r6, r5, r6
 8005752:	42b7      	cmp	r7, r6
 8005754:	4602      	mov	r2, r0
 8005756:	460b      	mov	r3, r1
 8005758:	d135      	bne.n	80057c6 <_dtoa_r+0x6e6>
 800575a:	f7fa fd9f 	bl	800029c <__adddf3>
 800575e:	4642      	mov	r2, r8
 8005760:	464b      	mov	r3, r9
 8005762:	4606      	mov	r6, r0
 8005764:	460f      	mov	r7, r1
 8005766:	f7fb f9df 	bl	8000b28 <__aeabi_dcmpgt>
 800576a:	b9d0      	cbnz	r0, 80057a2 <_dtoa_r+0x6c2>
 800576c:	4642      	mov	r2, r8
 800576e:	464b      	mov	r3, r9
 8005770:	4630      	mov	r0, r6
 8005772:	4639      	mov	r1, r7
 8005774:	f7fb f9b0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005778:	b110      	cbz	r0, 8005780 <_dtoa_r+0x6a0>
 800577a:	f01a 0f01 	tst.w	sl, #1
 800577e:	d110      	bne.n	80057a2 <_dtoa_r+0x6c2>
 8005780:	4620      	mov	r0, r4
 8005782:	ee18 1a10 	vmov	r1, s16
 8005786:	f000 fbd3 	bl	8005f30 <_Bfree>
 800578a:	2300      	movs	r3, #0
 800578c:	9800      	ldr	r0, [sp, #0]
 800578e:	702b      	strb	r3, [r5, #0]
 8005790:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005792:	3001      	adds	r0, #1
 8005794:	6018      	str	r0, [r3, #0]
 8005796:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005798:	2b00      	cmp	r3, #0
 800579a:	f43f acf1 	beq.w	8005180 <_dtoa_r+0xa0>
 800579e:	601d      	str	r5, [r3, #0]
 80057a0:	e4ee      	b.n	8005180 <_dtoa_r+0xa0>
 80057a2:	9f00      	ldr	r7, [sp, #0]
 80057a4:	462b      	mov	r3, r5
 80057a6:	461d      	mov	r5, r3
 80057a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057ac:	2a39      	cmp	r2, #57	; 0x39
 80057ae:	d106      	bne.n	80057be <_dtoa_r+0x6de>
 80057b0:	9a01      	ldr	r2, [sp, #4]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d1f7      	bne.n	80057a6 <_dtoa_r+0x6c6>
 80057b6:	9901      	ldr	r1, [sp, #4]
 80057b8:	2230      	movs	r2, #48	; 0x30
 80057ba:	3701      	adds	r7, #1
 80057bc:	700a      	strb	r2, [r1, #0]
 80057be:	781a      	ldrb	r2, [r3, #0]
 80057c0:	3201      	adds	r2, #1
 80057c2:	701a      	strb	r2, [r3, #0]
 80057c4:	e790      	b.n	80056e8 <_dtoa_r+0x608>
 80057c6:	4ba6      	ldr	r3, [pc, #664]	; (8005a60 <_dtoa_r+0x980>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	f7fa ff1d 	bl	8000608 <__aeabi_dmul>
 80057ce:	2200      	movs	r2, #0
 80057d0:	2300      	movs	r3, #0
 80057d2:	4606      	mov	r6, r0
 80057d4:	460f      	mov	r7, r1
 80057d6:	f7fb f97f 	bl	8000ad8 <__aeabi_dcmpeq>
 80057da:	2800      	cmp	r0, #0
 80057dc:	d09d      	beq.n	800571a <_dtoa_r+0x63a>
 80057de:	e7cf      	b.n	8005780 <_dtoa_r+0x6a0>
 80057e0:	9a08      	ldr	r2, [sp, #32]
 80057e2:	2a00      	cmp	r2, #0
 80057e4:	f000 80d7 	beq.w	8005996 <_dtoa_r+0x8b6>
 80057e8:	9a06      	ldr	r2, [sp, #24]
 80057ea:	2a01      	cmp	r2, #1
 80057ec:	f300 80ba 	bgt.w	8005964 <_dtoa_r+0x884>
 80057f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057f2:	2a00      	cmp	r2, #0
 80057f4:	f000 80b2 	beq.w	800595c <_dtoa_r+0x87c>
 80057f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80057fc:	9e07      	ldr	r6, [sp, #28]
 80057fe:	9d04      	ldr	r5, [sp, #16]
 8005800:	9a04      	ldr	r2, [sp, #16]
 8005802:	441a      	add	r2, r3
 8005804:	9204      	str	r2, [sp, #16]
 8005806:	9a05      	ldr	r2, [sp, #20]
 8005808:	2101      	movs	r1, #1
 800580a:	441a      	add	r2, r3
 800580c:	4620      	mov	r0, r4
 800580e:	9205      	str	r2, [sp, #20]
 8005810:	f000 fc46 	bl	80060a0 <__i2b>
 8005814:	4607      	mov	r7, r0
 8005816:	2d00      	cmp	r5, #0
 8005818:	dd0c      	ble.n	8005834 <_dtoa_r+0x754>
 800581a:	9b05      	ldr	r3, [sp, #20]
 800581c:	2b00      	cmp	r3, #0
 800581e:	dd09      	ble.n	8005834 <_dtoa_r+0x754>
 8005820:	42ab      	cmp	r3, r5
 8005822:	9a04      	ldr	r2, [sp, #16]
 8005824:	bfa8      	it	ge
 8005826:	462b      	movge	r3, r5
 8005828:	1ad2      	subs	r2, r2, r3
 800582a:	9204      	str	r2, [sp, #16]
 800582c:	9a05      	ldr	r2, [sp, #20]
 800582e:	1aed      	subs	r5, r5, r3
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	9305      	str	r3, [sp, #20]
 8005834:	9b07      	ldr	r3, [sp, #28]
 8005836:	b31b      	cbz	r3, 8005880 <_dtoa_r+0x7a0>
 8005838:	9b08      	ldr	r3, [sp, #32]
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 80af 	beq.w	800599e <_dtoa_r+0x8be>
 8005840:	2e00      	cmp	r6, #0
 8005842:	dd13      	ble.n	800586c <_dtoa_r+0x78c>
 8005844:	4639      	mov	r1, r7
 8005846:	4632      	mov	r2, r6
 8005848:	4620      	mov	r0, r4
 800584a:	f000 fce9 	bl	8006220 <__pow5mult>
 800584e:	ee18 2a10 	vmov	r2, s16
 8005852:	4601      	mov	r1, r0
 8005854:	4607      	mov	r7, r0
 8005856:	4620      	mov	r0, r4
 8005858:	f000 fc38 	bl	80060cc <__multiply>
 800585c:	ee18 1a10 	vmov	r1, s16
 8005860:	4680      	mov	r8, r0
 8005862:	4620      	mov	r0, r4
 8005864:	f000 fb64 	bl	8005f30 <_Bfree>
 8005868:	ee08 8a10 	vmov	s16, r8
 800586c:	9b07      	ldr	r3, [sp, #28]
 800586e:	1b9a      	subs	r2, r3, r6
 8005870:	d006      	beq.n	8005880 <_dtoa_r+0x7a0>
 8005872:	ee18 1a10 	vmov	r1, s16
 8005876:	4620      	mov	r0, r4
 8005878:	f000 fcd2 	bl	8006220 <__pow5mult>
 800587c:	ee08 0a10 	vmov	s16, r0
 8005880:	2101      	movs	r1, #1
 8005882:	4620      	mov	r0, r4
 8005884:	f000 fc0c 	bl	80060a0 <__i2b>
 8005888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800588a:	2b00      	cmp	r3, #0
 800588c:	4606      	mov	r6, r0
 800588e:	f340 8088 	ble.w	80059a2 <_dtoa_r+0x8c2>
 8005892:	461a      	mov	r2, r3
 8005894:	4601      	mov	r1, r0
 8005896:	4620      	mov	r0, r4
 8005898:	f000 fcc2 	bl	8006220 <__pow5mult>
 800589c:	9b06      	ldr	r3, [sp, #24]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	4606      	mov	r6, r0
 80058a2:	f340 8081 	ble.w	80059a8 <_dtoa_r+0x8c8>
 80058a6:	f04f 0800 	mov.w	r8, #0
 80058aa:	6933      	ldr	r3, [r6, #16]
 80058ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80058b0:	6918      	ldr	r0, [r3, #16]
 80058b2:	f000 fba5 	bl	8006000 <__hi0bits>
 80058b6:	f1c0 0020 	rsb	r0, r0, #32
 80058ba:	9b05      	ldr	r3, [sp, #20]
 80058bc:	4418      	add	r0, r3
 80058be:	f010 001f 	ands.w	r0, r0, #31
 80058c2:	f000 8092 	beq.w	80059ea <_dtoa_r+0x90a>
 80058c6:	f1c0 0320 	rsb	r3, r0, #32
 80058ca:	2b04      	cmp	r3, #4
 80058cc:	f340 808a 	ble.w	80059e4 <_dtoa_r+0x904>
 80058d0:	f1c0 001c 	rsb	r0, r0, #28
 80058d4:	9b04      	ldr	r3, [sp, #16]
 80058d6:	4403      	add	r3, r0
 80058d8:	9304      	str	r3, [sp, #16]
 80058da:	9b05      	ldr	r3, [sp, #20]
 80058dc:	4403      	add	r3, r0
 80058de:	4405      	add	r5, r0
 80058e0:	9305      	str	r3, [sp, #20]
 80058e2:	9b04      	ldr	r3, [sp, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	dd07      	ble.n	80058f8 <_dtoa_r+0x818>
 80058e8:	ee18 1a10 	vmov	r1, s16
 80058ec:	461a      	mov	r2, r3
 80058ee:	4620      	mov	r0, r4
 80058f0:	f000 fcf0 	bl	80062d4 <__lshift>
 80058f4:	ee08 0a10 	vmov	s16, r0
 80058f8:	9b05      	ldr	r3, [sp, #20]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	dd05      	ble.n	800590a <_dtoa_r+0x82a>
 80058fe:	4631      	mov	r1, r6
 8005900:	461a      	mov	r2, r3
 8005902:	4620      	mov	r0, r4
 8005904:	f000 fce6 	bl	80062d4 <__lshift>
 8005908:	4606      	mov	r6, r0
 800590a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800590c:	2b00      	cmp	r3, #0
 800590e:	d06e      	beq.n	80059ee <_dtoa_r+0x90e>
 8005910:	ee18 0a10 	vmov	r0, s16
 8005914:	4631      	mov	r1, r6
 8005916:	f000 fd4d 	bl	80063b4 <__mcmp>
 800591a:	2800      	cmp	r0, #0
 800591c:	da67      	bge.n	80059ee <_dtoa_r+0x90e>
 800591e:	9b00      	ldr	r3, [sp, #0]
 8005920:	3b01      	subs	r3, #1
 8005922:	ee18 1a10 	vmov	r1, s16
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	220a      	movs	r2, #10
 800592a:	2300      	movs	r3, #0
 800592c:	4620      	mov	r0, r4
 800592e:	f000 fb21 	bl	8005f74 <__multadd>
 8005932:	9b08      	ldr	r3, [sp, #32]
 8005934:	ee08 0a10 	vmov	s16, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 81b1 	beq.w	8005ca0 <_dtoa_r+0xbc0>
 800593e:	2300      	movs	r3, #0
 8005940:	4639      	mov	r1, r7
 8005942:	220a      	movs	r2, #10
 8005944:	4620      	mov	r0, r4
 8005946:	f000 fb15 	bl	8005f74 <__multadd>
 800594a:	9b02      	ldr	r3, [sp, #8]
 800594c:	2b00      	cmp	r3, #0
 800594e:	4607      	mov	r7, r0
 8005950:	f300 808e 	bgt.w	8005a70 <_dtoa_r+0x990>
 8005954:	9b06      	ldr	r3, [sp, #24]
 8005956:	2b02      	cmp	r3, #2
 8005958:	dc51      	bgt.n	80059fe <_dtoa_r+0x91e>
 800595a:	e089      	b.n	8005a70 <_dtoa_r+0x990>
 800595c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800595e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005962:	e74b      	b.n	80057fc <_dtoa_r+0x71c>
 8005964:	9b03      	ldr	r3, [sp, #12]
 8005966:	1e5e      	subs	r6, r3, #1
 8005968:	9b07      	ldr	r3, [sp, #28]
 800596a:	42b3      	cmp	r3, r6
 800596c:	bfbf      	itttt	lt
 800596e:	9b07      	ldrlt	r3, [sp, #28]
 8005970:	9607      	strlt	r6, [sp, #28]
 8005972:	1af2      	sublt	r2, r6, r3
 8005974:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005976:	bfb6      	itet	lt
 8005978:	189b      	addlt	r3, r3, r2
 800597a:	1b9e      	subge	r6, r3, r6
 800597c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800597e:	9b03      	ldr	r3, [sp, #12]
 8005980:	bfb8      	it	lt
 8005982:	2600      	movlt	r6, #0
 8005984:	2b00      	cmp	r3, #0
 8005986:	bfb7      	itett	lt
 8005988:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800598c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005990:	1a9d      	sublt	r5, r3, r2
 8005992:	2300      	movlt	r3, #0
 8005994:	e734      	b.n	8005800 <_dtoa_r+0x720>
 8005996:	9e07      	ldr	r6, [sp, #28]
 8005998:	9d04      	ldr	r5, [sp, #16]
 800599a:	9f08      	ldr	r7, [sp, #32]
 800599c:	e73b      	b.n	8005816 <_dtoa_r+0x736>
 800599e:	9a07      	ldr	r2, [sp, #28]
 80059a0:	e767      	b.n	8005872 <_dtoa_r+0x792>
 80059a2:	9b06      	ldr	r3, [sp, #24]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	dc18      	bgt.n	80059da <_dtoa_r+0x8fa>
 80059a8:	f1ba 0f00 	cmp.w	sl, #0
 80059ac:	d115      	bne.n	80059da <_dtoa_r+0x8fa>
 80059ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80059b2:	b993      	cbnz	r3, 80059da <_dtoa_r+0x8fa>
 80059b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80059b8:	0d1b      	lsrs	r3, r3, #20
 80059ba:	051b      	lsls	r3, r3, #20
 80059bc:	b183      	cbz	r3, 80059e0 <_dtoa_r+0x900>
 80059be:	9b04      	ldr	r3, [sp, #16]
 80059c0:	3301      	adds	r3, #1
 80059c2:	9304      	str	r3, [sp, #16]
 80059c4:	9b05      	ldr	r3, [sp, #20]
 80059c6:	3301      	adds	r3, #1
 80059c8:	9305      	str	r3, [sp, #20]
 80059ca:	f04f 0801 	mov.w	r8, #1
 80059ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f47f af6a 	bne.w	80058aa <_dtoa_r+0x7ca>
 80059d6:	2001      	movs	r0, #1
 80059d8:	e76f      	b.n	80058ba <_dtoa_r+0x7da>
 80059da:	f04f 0800 	mov.w	r8, #0
 80059de:	e7f6      	b.n	80059ce <_dtoa_r+0x8ee>
 80059e0:	4698      	mov	r8, r3
 80059e2:	e7f4      	b.n	80059ce <_dtoa_r+0x8ee>
 80059e4:	f43f af7d 	beq.w	80058e2 <_dtoa_r+0x802>
 80059e8:	4618      	mov	r0, r3
 80059ea:	301c      	adds	r0, #28
 80059ec:	e772      	b.n	80058d4 <_dtoa_r+0x7f4>
 80059ee:	9b03      	ldr	r3, [sp, #12]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	dc37      	bgt.n	8005a64 <_dtoa_r+0x984>
 80059f4:	9b06      	ldr	r3, [sp, #24]
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	dd34      	ble.n	8005a64 <_dtoa_r+0x984>
 80059fa:	9b03      	ldr	r3, [sp, #12]
 80059fc:	9302      	str	r3, [sp, #8]
 80059fe:	9b02      	ldr	r3, [sp, #8]
 8005a00:	b96b      	cbnz	r3, 8005a1e <_dtoa_r+0x93e>
 8005a02:	4631      	mov	r1, r6
 8005a04:	2205      	movs	r2, #5
 8005a06:	4620      	mov	r0, r4
 8005a08:	f000 fab4 	bl	8005f74 <__multadd>
 8005a0c:	4601      	mov	r1, r0
 8005a0e:	4606      	mov	r6, r0
 8005a10:	ee18 0a10 	vmov	r0, s16
 8005a14:	f000 fcce 	bl	80063b4 <__mcmp>
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	f73f adbb 	bgt.w	8005594 <_dtoa_r+0x4b4>
 8005a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a20:	9d01      	ldr	r5, [sp, #4]
 8005a22:	43db      	mvns	r3, r3
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	f04f 0800 	mov.w	r8, #0
 8005a2a:	4631      	mov	r1, r6
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	f000 fa7f 	bl	8005f30 <_Bfree>
 8005a32:	2f00      	cmp	r7, #0
 8005a34:	f43f aea4 	beq.w	8005780 <_dtoa_r+0x6a0>
 8005a38:	f1b8 0f00 	cmp.w	r8, #0
 8005a3c:	d005      	beq.n	8005a4a <_dtoa_r+0x96a>
 8005a3e:	45b8      	cmp	r8, r7
 8005a40:	d003      	beq.n	8005a4a <_dtoa_r+0x96a>
 8005a42:	4641      	mov	r1, r8
 8005a44:	4620      	mov	r0, r4
 8005a46:	f000 fa73 	bl	8005f30 <_Bfree>
 8005a4a:	4639      	mov	r1, r7
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	f000 fa6f 	bl	8005f30 <_Bfree>
 8005a52:	e695      	b.n	8005780 <_dtoa_r+0x6a0>
 8005a54:	2600      	movs	r6, #0
 8005a56:	4637      	mov	r7, r6
 8005a58:	e7e1      	b.n	8005a1e <_dtoa_r+0x93e>
 8005a5a:	9700      	str	r7, [sp, #0]
 8005a5c:	4637      	mov	r7, r6
 8005a5e:	e599      	b.n	8005594 <_dtoa_r+0x4b4>
 8005a60:	40240000 	.word	0x40240000
 8005a64:	9b08      	ldr	r3, [sp, #32]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f000 80ca 	beq.w	8005c00 <_dtoa_r+0xb20>
 8005a6c:	9b03      	ldr	r3, [sp, #12]
 8005a6e:	9302      	str	r3, [sp, #8]
 8005a70:	2d00      	cmp	r5, #0
 8005a72:	dd05      	ble.n	8005a80 <_dtoa_r+0x9a0>
 8005a74:	4639      	mov	r1, r7
 8005a76:	462a      	mov	r2, r5
 8005a78:	4620      	mov	r0, r4
 8005a7a:	f000 fc2b 	bl	80062d4 <__lshift>
 8005a7e:	4607      	mov	r7, r0
 8005a80:	f1b8 0f00 	cmp.w	r8, #0
 8005a84:	d05b      	beq.n	8005b3e <_dtoa_r+0xa5e>
 8005a86:	6879      	ldr	r1, [r7, #4]
 8005a88:	4620      	mov	r0, r4
 8005a8a:	f000 fa11 	bl	8005eb0 <_Balloc>
 8005a8e:	4605      	mov	r5, r0
 8005a90:	b928      	cbnz	r0, 8005a9e <_dtoa_r+0x9be>
 8005a92:	4b87      	ldr	r3, [pc, #540]	; (8005cb0 <_dtoa_r+0xbd0>)
 8005a94:	4602      	mov	r2, r0
 8005a96:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005a9a:	f7ff bb3b 	b.w	8005114 <_dtoa_r+0x34>
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	3202      	adds	r2, #2
 8005aa2:	0092      	lsls	r2, r2, #2
 8005aa4:	f107 010c 	add.w	r1, r7, #12
 8005aa8:	300c      	adds	r0, #12
 8005aaa:	f000 f9e7 	bl	8005e7c <memcpy>
 8005aae:	2201      	movs	r2, #1
 8005ab0:	4629      	mov	r1, r5
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f000 fc0e 	bl	80062d4 <__lshift>
 8005ab8:	9b01      	ldr	r3, [sp, #4]
 8005aba:	f103 0901 	add.w	r9, r3, #1
 8005abe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	9305      	str	r3, [sp, #20]
 8005ac6:	f00a 0301 	and.w	r3, sl, #1
 8005aca:	46b8      	mov	r8, r7
 8005acc:	9304      	str	r3, [sp, #16]
 8005ace:	4607      	mov	r7, r0
 8005ad0:	4631      	mov	r1, r6
 8005ad2:	ee18 0a10 	vmov	r0, s16
 8005ad6:	f7ff fa77 	bl	8004fc8 <quorem>
 8005ada:	4641      	mov	r1, r8
 8005adc:	9002      	str	r0, [sp, #8]
 8005ade:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005ae2:	ee18 0a10 	vmov	r0, s16
 8005ae6:	f000 fc65 	bl	80063b4 <__mcmp>
 8005aea:	463a      	mov	r2, r7
 8005aec:	9003      	str	r0, [sp, #12]
 8005aee:	4631      	mov	r1, r6
 8005af0:	4620      	mov	r0, r4
 8005af2:	f000 fc7b 	bl	80063ec <__mdiff>
 8005af6:	68c2      	ldr	r2, [r0, #12]
 8005af8:	f109 3bff 	add.w	fp, r9, #4294967295
 8005afc:	4605      	mov	r5, r0
 8005afe:	bb02      	cbnz	r2, 8005b42 <_dtoa_r+0xa62>
 8005b00:	4601      	mov	r1, r0
 8005b02:	ee18 0a10 	vmov	r0, s16
 8005b06:	f000 fc55 	bl	80063b4 <__mcmp>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	4629      	mov	r1, r5
 8005b0e:	4620      	mov	r0, r4
 8005b10:	9207      	str	r2, [sp, #28]
 8005b12:	f000 fa0d 	bl	8005f30 <_Bfree>
 8005b16:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005b1a:	ea43 0102 	orr.w	r1, r3, r2
 8005b1e:	9b04      	ldr	r3, [sp, #16]
 8005b20:	430b      	orrs	r3, r1
 8005b22:	464d      	mov	r5, r9
 8005b24:	d10f      	bne.n	8005b46 <_dtoa_r+0xa66>
 8005b26:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005b2a:	d02a      	beq.n	8005b82 <_dtoa_r+0xaa2>
 8005b2c:	9b03      	ldr	r3, [sp, #12]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	dd02      	ble.n	8005b38 <_dtoa_r+0xa58>
 8005b32:	9b02      	ldr	r3, [sp, #8]
 8005b34:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005b38:	f88b a000 	strb.w	sl, [fp]
 8005b3c:	e775      	b.n	8005a2a <_dtoa_r+0x94a>
 8005b3e:	4638      	mov	r0, r7
 8005b40:	e7ba      	b.n	8005ab8 <_dtoa_r+0x9d8>
 8005b42:	2201      	movs	r2, #1
 8005b44:	e7e2      	b.n	8005b0c <_dtoa_r+0xa2c>
 8005b46:	9b03      	ldr	r3, [sp, #12]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	db04      	blt.n	8005b56 <_dtoa_r+0xa76>
 8005b4c:	9906      	ldr	r1, [sp, #24]
 8005b4e:	430b      	orrs	r3, r1
 8005b50:	9904      	ldr	r1, [sp, #16]
 8005b52:	430b      	orrs	r3, r1
 8005b54:	d122      	bne.n	8005b9c <_dtoa_r+0xabc>
 8005b56:	2a00      	cmp	r2, #0
 8005b58:	ddee      	ble.n	8005b38 <_dtoa_r+0xa58>
 8005b5a:	ee18 1a10 	vmov	r1, s16
 8005b5e:	2201      	movs	r2, #1
 8005b60:	4620      	mov	r0, r4
 8005b62:	f000 fbb7 	bl	80062d4 <__lshift>
 8005b66:	4631      	mov	r1, r6
 8005b68:	ee08 0a10 	vmov	s16, r0
 8005b6c:	f000 fc22 	bl	80063b4 <__mcmp>
 8005b70:	2800      	cmp	r0, #0
 8005b72:	dc03      	bgt.n	8005b7c <_dtoa_r+0xa9c>
 8005b74:	d1e0      	bne.n	8005b38 <_dtoa_r+0xa58>
 8005b76:	f01a 0f01 	tst.w	sl, #1
 8005b7a:	d0dd      	beq.n	8005b38 <_dtoa_r+0xa58>
 8005b7c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005b80:	d1d7      	bne.n	8005b32 <_dtoa_r+0xa52>
 8005b82:	2339      	movs	r3, #57	; 0x39
 8005b84:	f88b 3000 	strb.w	r3, [fp]
 8005b88:	462b      	mov	r3, r5
 8005b8a:	461d      	mov	r5, r3
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005b92:	2a39      	cmp	r2, #57	; 0x39
 8005b94:	d071      	beq.n	8005c7a <_dtoa_r+0xb9a>
 8005b96:	3201      	adds	r2, #1
 8005b98:	701a      	strb	r2, [r3, #0]
 8005b9a:	e746      	b.n	8005a2a <_dtoa_r+0x94a>
 8005b9c:	2a00      	cmp	r2, #0
 8005b9e:	dd07      	ble.n	8005bb0 <_dtoa_r+0xad0>
 8005ba0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005ba4:	d0ed      	beq.n	8005b82 <_dtoa_r+0xaa2>
 8005ba6:	f10a 0301 	add.w	r3, sl, #1
 8005baa:	f88b 3000 	strb.w	r3, [fp]
 8005bae:	e73c      	b.n	8005a2a <_dtoa_r+0x94a>
 8005bb0:	9b05      	ldr	r3, [sp, #20]
 8005bb2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005bb6:	4599      	cmp	r9, r3
 8005bb8:	d047      	beq.n	8005c4a <_dtoa_r+0xb6a>
 8005bba:	ee18 1a10 	vmov	r1, s16
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	220a      	movs	r2, #10
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	f000 f9d6 	bl	8005f74 <__multadd>
 8005bc8:	45b8      	cmp	r8, r7
 8005bca:	ee08 0a10 	vmov	s16, r0
 8005bce:	f04f 0300 	mov.w	r3, #0
 8005bd2:	f04f 020a 	mov.w	r2, #10
 8005bd6:	4641      	mov	r1, r8
 8005bd8:	4620      	mov	r0, r4
 8005bda:	d106      	bne.n	8005bea <_dtoa_r+0xb0a>
 8005bdc:	f000 f9ca 	bl	8005f74 <__multadd>
 8005be0:	4680      	mov	r8, r0
 8005be2:	4607      	mov	r7, r0
 8005be4:	f109 0901 	add.w	r9, r9, #1
 8005be8:	e772      	b.n	8005ad0 <_dtoa_r+0x9f0>
 8005bea:	f000 f9c3 	bl	8005f74 <__multadd>
 8005bee:	4639      	mov	r1, r7
 8005bf0:	4680      	mov	r8, r0
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	220a      	movs	r2, #10
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	f000 f9bc 	bl	8005f74 <__multadd>
 8005bfc:	4607      	mov	r7, r0
 8005bfe:	e7f1      	b.n	8005be4 <_dtoa_r+0xb04>
 8005c00:	9b03      	ldr	r3, [sp, #12]
 8005c02:	9302      	str	r3, [sp, #8]
 8005c04:	9d01      	ldr	r5, [sp, #4]
 8005c06:	ee18 0a10 	vmov	r0, s16
 8005c0a:	4631      	mov	r1, r6
 8005c0c:	f7ff f9dc 	bl	8004fc8 <quorem>
 8005c10:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005c14:	9b01      	ldr	r3, [sp, #4]
 8005c16:	f805 ab01 	strb.w	sl, [r5], #1
 8005c1a:	1aea      	subs	r2, r5, r3
 8005c1c:	9b02      	ldr	r3, [sp, #8]
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	dd09      	ble.n	8005c36 <_dtoa_r+0xb56>
 8005c22:	ee18 1a10 	vmov	r1, s16
 8005c26:	2300      	movs	r3, #0
 8005c28:	220a      	movs	r2, #10
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	f000 f9a2 	bl	8005f74 <__multadd>
 8005c30:	ee08 0a10 	vmov	s16, r0
 8005c34:	e7e7      	b.n	8005c06 <_dtoa_r+0xb26>
 8005c36:	9b02      	ldr	r3, [sp, #8]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	bfc8      	it	gt
 8005c3c:	461d      	movgt	r5, r3
 8005c3e:	9b01      	ldr	r3, [sp, #4]
 8005c40:	bfd8      	it	le
 8005c42:	2501      	movle	r5, #1
 8005c44:	441d      	add	r5, r3
 8005c46:	f04f 0800 	mov.w	r8, #0
 8005c4a:	ee18 1a10 	vmov	r1, s16
 8005c4e:	2201      	movs	r2, #1
 8005c50:	4620      	mov	r0, r4
 8005c52:	f000 fb3f 	bl	80062d4 <__lshift>
 8005c56:	4631      	mov	r1, r6
 8005c58:	ee08 0a10 	vmov	s16, r0
 8005c5c:	f000 fbaa 	bl	80063b4 <__mcmp>
 8005c60:	2800      	cmp	r0, #0
 8005c62:	dc91      	bgt.n	8005b88 <_dtoa_r+0xaa8>
 8005c64:	d102      	bne.n	8005c6c <_dtoa_r+0xb8c>
 8005c66:	f01a 0f01 	tst.w	sl, #1
 8005c6a:	d18d      	bne.n	8005b88 <_dtoa_r+0xaa8>
 8005c6c:	462b      	mov	r3, r5
 8005c6e:	461d      	mov	r5, r3
 8005c70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c74:	2a30      	cmp	r2, #48	; 0x30
 8005c76:	d0fa      	beq.n	8005c6e <_dtoa_r+0xb8e>
 8005c78:	e6d7      	b.n	8005a2a <_dtoa_r+0x94a>
 8005c7a:	9a01      	ldr	r2, [sp, #4]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d184      	bne.n	8005b8a <_dtoa_r+0xaaa>
 8005c80:	9b00      	ldr	r3, [sp, #0]
 8005c82:	3301      	adds	r3, #1
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	2331      	movs	r3, #49	; 0x31
 8005c88:	7013      	strb	r3, [r2, #0]
 8005c8a:	e6ce      	b.n	8005a2a <_dtoa_r+0x94a>
 8005c8c:	4b09      	ldr	r3, [pc, #36]	; (8005cb4 <_dtoa_r+0xbd4>)
 8005c8e:	f7ff ba95 	b.w	80051bc <_dtoa_r+0xdc>
 8005c92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f47f aa6e 	bne.w	8005176 <_dtoa_r+0x96>
 8005c9a:	4b07      	ldr	r3, [pc, #28]	; (8005cb8 <_dtoa_r+0xbd8>)
 8005c9c:	f7ff ba8e 	b.w	80051bc <_dtoa_r+0xdc>
 8005ca0:	9b02      	ldr	r3, [sp, #8]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	dcae      	bgt.n	8005c04 <_dtoa_r+0xb24>
 8005ca6:	9b06      	ldr	r3, [sp, #24]
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	f73f aea8 	bgt.w	80059fe <_dtoa_r+0x91e>
 8005cae:	e7a9      	b.n	8005c04 <_dtoa_r+0xb24>
 8005cb0:	08007553 	.word	0x08007553
 8005cb4:	080074b0 	.word	0x080074b0
 8005cb8:	080074d4 	.word	0x080074d4

08005cbc <__sflush_r>:
 8005cbc:	898a      	ldrh	r2, [r1, #12]
 8005cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cc2:	4605      	mov	r5, r0
 8005cc4:	0710      	lsls	r0, r2, #28
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	d458      	bmi.n	8005d7c <__sflush_r+0xc0>
 8005cca:	684b      	ldr	r3, [r1, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	dc05      	bgt.n	8005cdc <__sflush_r+0x20>
 8005cd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	dc02      	bgt.n	8005cdc <__sflush_r+0x20>
 8005cd6:	2000      	movs	r0, #0
 8005cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cde:	2e00      	cmp	r6, #0
 8005ce0:	d0f9      	beq.n	8005cd6 <__sflush_r+0x1a>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ce8:	682f      	ldr	r7, [r5, #0]
 8005cea:	602b      	str	r3, [r5, #0]
 8005cec:	d032      	beq.n	8005d54 <__sflush_r+0x98>
 8005cee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005cf0:	89a3      	ldrh	r3, [r4, #12]
 8005cf2:	075a      	lsls	r2, r3, #29
 8005cf4:	d505      	bpl.n	8005d02 <__sflush_r+0x46>
 8005cf6:	6863      	ldr	r3, [r4, #4]
 8005cf8:	1ac0      	subs	r0, r0, r3
 8005cfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005cfc:	b10b      	cbz	r3, 8005d02 <__sflush_r+0x46>
 8005cfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d00:	1ac0      	subs	r0, r0, r3
 8005d02:	2300      	movs	r3, #0
 8005d04:	4602      	mov	r2, r0
 8005d06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d08:	6a21      	ldr	r1, [r4, #32]
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	47b0      	blx	r6
 8005d0e:	1c43      	adds	r3, r0, #1
 8005d10:	89a3      	ldrh	r3, [r4, #12]
 8005d12:	d106      	bne.n	8005d22 <__sflush_r+0x66>
 8005d14:	6829      	ldr	r1, [r5, #0]
 8005d16:	291d      	cmp	r1, #29
 8005d18:	d82c      	bhi.n	8005d74 <__sflush_r+0xb8>
 8005d1a:	4a2a      	ldr	r2, [pc, #168]	; (8005dc4 <__sflush_r+0x108>)
 8005d1c:	40ca      	lsrs	r2, r1
 8005d1e:	07d6      	lsls	r6, r2, #31
 8005d20:	d528      	bpl.n	8005d74 <__sflush_r+0xb8>
 8005d22:	2200      	movs	r2, #0
 8005d24:	6062      	str	r2, [r4, #4]
 8005d26:	04d9      	lsls	r1, r3, #19
 8005d28:	6922      	ldr	r2, [r4, #16]
 8005d2a:	6022      	str	r2, [r4, #0]
 8005d2c:	d504      	bpl.n	8005d38 <__sflush_r+0x7c>
 8005d2e:	1c42      	adds	r2, r0, #1
 8005d30:	d101      	bne.n	8005d36 <__sflush_r+0x7a>
 8005d32:	682b      	ldr	r3, [r5, #0]
 8005d34:	b903      	cbnz	r3, 8005d38 <__sflush_r+0x7c>
 8005d36:	6560      	str	r0, [r4, #84]	; 0x54
 8005d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d3a:	602f      	str	r7, [r5, #0]
 8005d3c:	2900      	cmp	r1, #0
 8005d3e:	d0ca      	beq.n	8005cd6 <__sflush_r+0x1a>
 8005d40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d44:	4299      	cmp	r1, r3
 8005d46:	d002      	beq.n	8005d4e <__sflush_r+0x92>
 8005d48:	4628      	mov	r0, r5
 8005d4a:	f000 fc4b 	bl	80065e4 <_free_r>
 8005d4e:	2000      	movs	r0, #0
 8005d50:	6360      	str	r0, [r4, #52]	; 0x34
 8005d52:	e7c1      	b.n	8005cd8 <__sflush_r+0x1c>
 8005d54:	6a21      	ldr	r1, [r4, #32]
 8005d56:	2301      	movs	r3, #1
 8005d58:	4628      	mov	r0, r5
 8005d5a:	47b0      	blx	r6
 8005d5c:	1c41      	adds	r1, r0, #1
 8005d5e:	d1c7      	bne.n	8005cf0 <__sflush_r+0x34>
 8005d60:	682b      	ldr	r3, [r5, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d0c4      	beq.n	8005cf0 <__sflush_r+0x34>
 8005d66:	2b1d      	cmp	r3, #29
 8005d68:	d001      	beq.n	8005d6e <__sflush_r+0xb2>
 8005d6a:	2b16      	cmp	r3, #22
 8005d6c:	d101      	bne.n	8005d72 <__sflush_r+0xb6>
 8005d6e:	602f      	str	r7, [r5, #0]
 8005d70:	e7b1      	b.n	8005cd6 <__sflush_r+0x1a>
 8005d72:	89a3      	ldrh	r3, [r4, #12]
 8005d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d78:	81a3      	strh	r3, [r4, #12]
 8005d7a:	e7ad      	b.n	8005cd8 <__sflush_r+0x1c>
 8005d7c:	690f      	ldr	r7, [r1, #16]
 8005d7e:	2f00      	cmp	r7, #0
 8005d80:	d0a9      	beq.n	8005cd6 <__sflush_r+0x1a>
 8005d82:	0793      	lsls	r3, r2, #30
 8005d84:	680e      	ldr	r6, [r1, #0]
 8005d86:	bf08      	it	eq
 8005d88:	694b      	ldreq	r3, [r1, #20]
 8005d8a:	600f      	str	r7, [r1, #0]
 8005d8c:	bf18      	it	ne
 8005d8e:	2300      	movne	r3, #0
 8005d90:	eba6 0807 	sub.w	r8, r6, r7
 8005d94:	608b      	str	r3, [r1, #8]
 8005d96:	f1b8 0f00 	cmp.w	r8, #0
 8005d9a:	dd9c      	ble.n	8005cd6 <__sflush_r+0x1a>
 8005d9c:	6a21      	ldr	r1, [r4, #32]
 8005d9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005da0:	4643      	mov	r3, r8
 8005da2:	463a      	mov	r2, r7
 8005da4:	4628      	mov	r0, r5
 8005da6:	47b0      	blx	r6
 8005da8:	2800      	cmp	r0, #0
 8005daa:	dc06      	bgt.n	8005dba <__sflush_r+0xfe>
 8005dac:	89a3      	ldrh	r3, [r4, #12]
 8005dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005db2:	81a3      	strh	r3, [r4, #12]
 8005db4:	f04f 30ff 	mov.w	r0, #4294967295
 8005db8:	e78e      	b.n	8005cd8 <__sflush_r+0x1c>
 8005dba:	4407      	add	r7, r0
 8005dbc:	eba8 0800 	sub.w	r8, r8, r0
 8005dc0:	e7e9      	b.n	8005d96 <__sflush_r+0xda>
 8005dc2:	bf00      	nop
 8005dc4:	20400001 	.word	0x20400001

08005dc8 <_fflush_r>:
 8005dc8:	b538      	push	{r3, r4, r5, lr}
 8005dca:	690b      	ldr	r3, [r1, #16]
 8005dcc:	4605      	mov	r5, r0
 8005dce:	460c      	mov	r4, r1
 8005dd0:	b913      	cbnz	r3, 8005dd8 <_fflush_r+0x10>
 8005dd2:	2500      	movs	r5, #0
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	bd38      	pop	{r3, r4, r5, pc}
 8005dd8:	b118      	cbz	r0, 8005de2 <_fflush_r+0x1a>
 8005dda:	6983      	ldr	r3, [r0, #24]
 8005ddc:	b90b      	cbnz	r3, 8005de2 <_fflush_r+0x1a>
 8005dde:	f7fe fa99 	bl	8004314 <__sinit>
 8005de2:	4b14      	ldr	r3, [pc, #80]	; (8005e34 <_fflush_r+0x6c>)
 8005de4:	429c      	cmp	r4, r3
 8005de6:	d11b      	bne.n	8005e20 <_fflush_r+0x58>
 8005de8:	686c      	ldr	r4, [r5, #4]
 8005dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d0ef      	beq.n	8005dd2 <_fflush_r+0xa>
 8005df2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005df4:	07d0      	lsls	r0, r2, #31
 8005df6:	d404      	bmi.n	8005e02 <_fflush_r+0x3a>
 8005df8:	0599      	lsls	r1, r3, #22
 8005dfa:	d402      	bmi.n	8005e02 <_fflush_r+0x3a>
 8005dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dfe:	f7fe fb4c 	bl	800449a <__retarget_lock_acquire_recursive>
 8005e02:	4628      	mov	r0, r5
 8005e04:	4621      	mov	r1, r4
 8005e06:	f7ff ff59 	bl	8005cbc <__sflush_r>
 8005e0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e0c:	07da      	lsls	r2, r3, #31
 8005e0e:	4605      	mov	r5, r0
 8005e10:	d4e0      	bmi.n	8005dd4 <_fflush_r+0xc>
 8005e12:	89a3      	ldrh	r3, [r4, #12]
 8005e14:	059b      	lsls	r3, r3, #22
 8005e16:	d4dd      	bmi.n	8005dd4 <_fflush_r+0xc>
 8005e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e1a:	f7fe fb3f 	bl	800449c <__retarget_lock_release_recursive>
 8005e1e:	e7d9      	b.n	8005dd4 <_fflush_r+0xc>
 8005e20:	4b05      	ldr	r3, [pc, #20]	; (8005e38 <_fflush_r+0x70>)
 8005e22:	429c      	cmp	r4, r3
 8005e24:	d101      	bne.n	8005e2a <_fflush_r+0x62>
 8005e26:	68ac      	ldr	r4, [r5, #8]
 8005e28:	e7df      	b.n	8005dea <_fflush_r+0x22>
 8005e2a:	4b04      	ldr	r3, [pc, #16]	; (8005e3c <_fflush_r+0x74>)
 8005e2c:	429c      	cmp	r4, r3
 8005e2e:	bf08      	it	eq
 8005e30:	68ec      	ldreq	r4, [r5, #12]
 8005e32:	e7da      	b.n	8005dea <_fflush_r+0x22>
 8005e34:	0800745c 	.word	0x0800745c
 8005e38:	0800747c 	.word	0x0800747c
 8005e3c:	0800743c 	.word	0x0800743c

08005e40 <_localeconv_r>:
 8005e40:	4800      	ldr	r0, [pc, #0]	; (8005e44 <_localeconv_r+0x4>)
 8005e42:	4770      	bx	lr
 8005e44:	20000168 	.word	0x20000168

08005e48 <_lseek_r>:
 8005e48:	b538      	push	{r3, r4, r5, lr}
 8005e4a:	4d07      	ldr	r5, [pc, #28]	; (8005e68 <_lseek_r+0x20>)
 8005e4c:	4604      	mov	r4, r0
 8005e4e:	4608      	mov	r0, r1
 8005e50:	4611      	mov	r1, r2
 8005e52:	2200      	movs	r2, #0
 8005e54:	602a      	str	r2, [r5, #0]
 8005e56:	461a      	mov	r2, r3
 8005e58:	f7fd ffef 	bl	8003e3a <_lseek>
 8005e5c:	1c43      	adds	r3, r0, #1
 8005e5e:	d102      	bne.n	8005e66 <_lseek_r+0x1e>
 8005e60:	682b      	ldr	r3, [r5, #0]
 8005e62:	b103      	cbz	r3, 8005e66 <_lseek_r+0x1e>
 8005e64:	6023      	str	r3, [r4, #0]
 8005e66:	bd38      	pop	{r3, r4, r5, pc}
 8005e68:	20000358 	.word	0x20000358

08005e6c <malloc>:
 8005e6c:	4b02      	ldr	r3, [pc, #8]	; (8005e78 <malloc+0xc>)
 8005e6e:	4601      	mov	r1, r0
 8005e70:	6818      	ldr	r0, [r3, #0]
 8005e72:	f7fe bb3d 	b.w	80044f0 <_malloc_r>
 8005e76:	bf00      	nop
 8005e78:	20000014 	.word	0x20000014

08005e7c <memcpy>:
 8005e7c:	440a      	add	r2, r1
 8005e7e:	4291      	cmp	r1, r2
 8005e80:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e84:	d100      	bne.n	8005e88 <memcpy+0xc>
 8005e86:	4770      	bx	lr
 8005e88:	b510      	push	{r4, lr}
 8005e8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e92:	4291      	cmp	r1, r2
 8005e94:	d1f9      	bne.n	8005e8a <memcpy+0xe>
 8005e96:	bd10      	pop	{r4, pc}

08005e98 <__malloc_lock>:
 8005e98:	4801      	ldr	r0, [pc, #4]	; (8005ea0 <__malloc_lock+0x8>)
 8005e9a:	f7fe bafe 	b.w	800449a <__retarget_lock_acquire_recursive>
 8005e9e:	bf00      	nop
 8005ea0:	2000034c 	.word	0x2000034c

08005ea4 <__malloc_unlock>:
 8005ea4:	4801      	ldr	r0, [pc, #4]	; (8005eac <__malloc_unlock+0x8>)
 8005ea6:	f7fe baf9 	b.w	800449c <__retarget_lock_release_recursive>
 8005eaa:	bf00      	nop
 8005eac:	2000034c 	.word	0x2000034c

08005eb0 <_Balloc>:
 8005eb0:	b570      	push	{r4, r5, r6, lr}
 8005eb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	460d      	mov	r5, r1
 8005eb8:	b976      	cbnz	r6, 8005ed8 <_Balloc+0x28>
 8005eba:	2010      	movs	r0, #16
 8005ebc:	f7ff ffd6 	bl	8005e6c <malloc>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	6260      	str	r0, [r4, #36]	; 0x24
 8005ec4:	b920      	cbnz	r0, 8005ed0 <_Balloc+0x20>
 8005ec6:	4b18      	ldr	r3, [pc, #96]	; (8005f28 <_Balloc+0x78>)
 8005ec8:	4818      	ldr	r0, [pc, #96]	; (8005f2c <_Balloc+0x7c>)
 8005eca:	2166      	movs	r1, #102	; 0x66
 8005ecc:	f000 fe02 	bl	8006ad4 <__assert_func>
 8005ed0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ed4:	6006      	str	r6, [r0, #0]
 8005ed6:	60c6      	str	r6, [r0, #12]
 8005ed8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005eda:	68f3      	ldr	r3, [r6, #12]
 8005edc:	b183      	cbz	r3, 8005f00 <_Balloc+0x50>
 8005ede:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ee6:	b9b8      	cbnz	r0, 8005f18 <_Balloc+0x68>
 8005ee8:	2101      	movs	r1, #1
 8005eea:	fa01 f605 	lsl.w	r6, r1, r5
 8005eee:	1d72      	adds	r2, r6, #5
 8005ef0:	0092      	lsls	r2, r2, #2
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f000 fb60 	bl	80065b8 <_calloc_r>
 8005ef8:	b160      	cbz	r0, 8005f14 <_Balloc+0x64>
 8005efa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005efe:	e00e      	b.n	8005f1e <_Balloc+0x6e>
 8005f00:	2221      	movs	r2, #33	; 0x21
 8005f02:	2104      	movs	r1, #4
 8005f04:	4620      	mov	r0, r4
 8005f06:	f000 fb57 	bl	80065b8 <_calloc_r>
 8005f0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f0c:	60f0      	str	r0, [r6, #12]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1e4      	bne.n	8005ede <_Balloc+0x2e>
 8005f14:	2000      	movs	r0, #0
 8005f16:	bd70      	pop	{r4, r5, r6, pc}
 8005f18:	6802      	ldr	r2, [r0, #0]
 8005f1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f1e:	2300      	movs	r3, #0
 8005f20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f24:	e7f7      	b.n	8005f16 <_Balloc+0x66>
 8005f26:	bf00      	nop
 8005f28:	080074e1 	.word	0x080074e1
 8005f2c:	08007564 	.word	0x08007564

08005f30 <_Bfree>:
 8005f30:	b570      	push	{r4, r5, r6, lr}
 8005f32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f34:	4605      	mov	r5, r0
 8005f36:	460c      	mov	r4, r1
 8005f38:	b976      	cbnz	r6, 8005f58 <_Bfree+0x28>
 8005f3a:	2010      	movs	r0, #16
 8005f3c:	f7ff ff96 	bl	8005e6c <malloc>
 8005f40:	4602      	mov	r2, r0
 8005f42:	6268      	str	r0, [r5, #36]	; 0x24
 8005f44:	b920      	cbnz	r0, 8005f50 <_Bfree+0x20>
 8005f46:	4b09      	ldr	r3, [pc, #36]	; (8005f6c <_Bfree+0x3c>)
 8005f48:	4809      	ldr	r0, [pc, #36]	; (8005f70 <_Bfree+0x40>)
 8005f4a:	218a      	movs	r1, #138	; 0x8a
 8005f4c:	f000 fdc2 	bl	8006ad4 <__assert_func>
 8005f50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f54:	6006      	str	r6, [r0, #0]
 8005f56:	60c6      	str	r6, [r0, #12]
 8005f58:	b13c      	cbz	r4, 8005f6a <_Bfree+0x3a>
 8005f5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f5c:	6862      	ldr	r2, [r4, #4]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f64:	6021      	str	r1, [r4, #0]
 8005f66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f6a:	bd70      	pop	{r4, r5, r6, pc}
 8005f6c:	080074e1 	.word	0x080074e1
 8005f70:	08007564 	.word	0x08007564

08005f74 <__multadd>:
 8005f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f78:	690d      	ldr	r5, [r1, #16]
 8005f7a:	4607      	mov	r7, r0
 8005f7c:	460c      	mov	r4, r1
 8005f7e:	461e      	mov	r6, r3
 8005f80:	f101 0c14 	add.w	ip, r1, #20
 8005f84:	2000      	movs	r0, #0
 8005f86:	f8dc 3000 	ldr.w	r3, [ip]
 8005f8a:	b299      	uxth	r1, r3
 8005f8c:	fb02 6101 	mla	r1, r2, r1, r6
 8005f90:	0c1e      	lsrs	r6, r3, #16
 8005f92:	0c0b      	lsrs	r3, r1, #16
 8005f94:	fb02 3306 	mla	r3, r2, r6, r3
 8005f98:	b289      	uxth	r1, r1
 8005f9a:	3001      	adds	r0, #1
 8005f9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005fa0:	4285      	cmp	r5, r0
 8005fa2:	f84c 1b04 	str.w	r1, [ip], #4
 8005fa6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005faa:	dcec      	bgt.n	8005f86 <__multadd+0x12>
 8005fac:	b30e      	cbz	r6, 8005ff2 <__multadd+0x7e>
 8005fae:	68a3      	ldr	r3, [r4, #8]
 8005fb0:	42ab      	cmp	r3, r5
 8005fb2:	dc19      	bgt.n	8005fe8 <__multadd+0x74>
 8005fb4:	6861      	ldr	r1, [r4, #4]
 8005fb6:	4638      	mov	r0, r7
 8005fb8:	3101      	adds	r1, #1
 8005fba:	f7ff ff79 	bl	8005eb0 <_Balloc>
 8005fbe:	4680      	mov	r8, r0
 8005fc0:	b928      	cbnz	r0, 8005fce <__multadd+0x5a>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	4b0c      	ldr	r3, [pc, #48]	; (8005ff8 <__multadd+0x84>)
 8005fc6:	480d      	ldr	r0, [pc, #52]	; (8005ffc <__multadd+0x88>)
 8005fc8:	21b5      	movs	r1, #181	; 0xb5
 8005fca:	f000 fd83 	bl	8006ad4 <__assert_func>
 8005fce:	6922      	ldr	r2, [r4, #16]
 8005fd0:	3202      	adds	r2, #2
 8005fd2:	f104 010c 	add.w	r1, r4, #12
 8005fd6:	0092      	lsls	r2, r2, #2
 8005fd8:	300c      	adds	r0, #12
 8005fda:	f7ff ff4f 	bl	8005e7c <memcpy>
 8005fde:	4621      	mov	r1, r4
 8005fe0:	4638      	mov	r0, r7
 8005fe2:	f7ff ffa5 	bl	8005f30 <_Bfree>
 8005fe6:	4644      	mov	r4, r8
 8005fe8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005fec:	3501      	adds	r5, #1
 8005fee:	615e      	str	r6, [r3, #20]
 8005ff0:	6125      	str	r5, [r4, #16]
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ff8:	08007553 	.word	0x08007553
 8005ffc:	08007564 	.word	0x08007564

08006000 <__hi0bits>:
 8006000:	0c03      	lsrs	r3, r0, #16
 8006002:	041b      	lsls	r3, r3, #16
 8006004:	b9d3      	cbnz	r3, 800603c <__hi0bits+0x3c>
 8006006:	0400      	lsls	r0, r0, #16
 8006008:	2310      	movs	r3, #16
 800600a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800600e:	bf04      	itt	eq
 8006010:	0200      	lsleq	r0, r0, #8
 8006012:	3308      	addeq	r3, #8
 8006014:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006018:	bf04      	itt	eq
 800601a:	0100      	lsleq	r0, r0, #4
 800601c:	3304      	addeq	r3, #4
 800601e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006022:	bf04      	itt	eq
 8006024:	0080      	lsleq	r0, r0, #2
 8006026:	3302      	addeq	r3, #2
 8006028:	2800      	cmp	r0, #0
 800602a:	db05      	blt.n	8006038 <__hi0bits+0x38>
 800602c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006030:	f103 0301 	add.w	r3, r3, #1
 8006034:	bf08      	it	eq
 8006036:	2320      	moveq	r3, #32
 8006038:	4618      	mov	r0, r3
 800603a:	4770      	bx	lr
 800603c:	2300      	movs	r3, #0
 800603e:	e7e4      	b.n	800600a <__hi0bits+0xa>

08006040 <__lo0bits>:
 8006040:	6803      	ldr	r3, [r0, #0]
 8006042:	f013 0207 	ands.w	r2, r3, #7
 8006046:	4601      	mov	r1, r0
 8006048:	d00b      	beq.n	8006062 <__lo0bits+0x22>
 800604a:	07da      	lsls	r2, r3, #31
 800604c:	d423      	bmi.n	8006096 <__lo0bits+0x56>
 800604e:	0798      	lsls	r0, r3, #30
 8006050:	bf49      	itett	mi
 8006052:	085b      	lsrmi	r3, r3, #1
 8006054:	089b      	lsrpl	r3, r3, #2
 8006056:	2001      	movmi	r0, #1
 8006058:	600b      	strmi	r3, [r1, #0]
 800605a:	bf5c      	itt	pl
 800605c:	600b      	strpl	r3, [r1, #0]
 800605e:	2002      	movpl	r0, #2
 8006060:	4770      	bx	lr
 8006062:	b298      	uxth	r0, r3
 8006064:	b9a8      	cbnz	r0, 8006092 <__lo0bits+0x52>
 8006066:	0c1b      	lsrs	r3, r3, #16
 8006068:	2010      	movs	r0, #16
 800606a:	b2da      	uxtb	r2, r3
 800606c:	b90a      	cbnz	r2, 8006072 <__lo0bits+0x32>
 800606e:	3008      	adds	r0, #8
 8006070:	0a1b      	lsrs	r3, r3, #8
 8006072:	071a      	lsls	r2, r3, #28
 8006074:	bf04      	itt	eq
 8006076:	091b      	lsreq	r3, r3, #4
 8006078:	3004      	addeq	r0, #4
 800607a:	079a      	lsls	r2, r3, #30
 800607c:	bf04      	itt	eq
 800607e:	089b      	lsreq	r3, r3, #2
 8006080:	3002      	addeq	r0, #2
 8006082:	07da      	lsls	r2, r3, #31
 8006084:	d403      	bmi.n	800608e <__lo0bits+0x4e>
 8006086:	085b      	lsrs	r3, r3, #1
 8006088:	f100 0001 	add.w	r0, r0, #1
 800608c:	d005      	beq.n	800609a <__lo0bits+0x5a>
 800608e:	600b      	str	r3, [r1, #0]
 8006090:	4770      	bx	lr
 8006092:	4610      	mov	r0, r2
 8006094:	e7e9      	b.n	800606a <__lo0bits+0x2a>
 8006096:	2000      	movs	r0, #0
 8006098:	4770      	bx	lr
 800609a:	2020      	movs	r0, #32
 800609c:	4770      	bx	lr
	...

080060a0 <__i2b>:
 80060a0:	b510      	push	{r4, lr}
 80060a2:	460c      	mov	r4, r1
 80060a4:	2101      	movs	r1, #1
 80060a6:	f7ff ff03 	bl	8005eb0 <_Balloc>
 80060aa:	4602      	mov	r2, r0
 80060ac:	b928      	cbnz	r0, 80060ba <__i2b+0x1a>
 80060ae:	4b05      	ldr	r3, [pc, #20]	; (80060c4 <__i2b+0x24>)
 80060b0:	4805      	ldr	r0, [pc, #20]	; (80060c8 <__i2b+0x28>)
 80060b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80060b6:	f000 fd0d 	bl	8006ad4 <__assert_func>
 80060ba:	2301      	movs	r3, #1
 80060bc:	6144      	str	r4, [r0, #20]
 80060be:	6103      	str	r3, [r0, #16]
 80060c0:	bd10      	pop	{r4, pc}
 80060c2:	bf00      	nop
 80060c4:	08007553 	.word	0x08007553
 80060c8:	08007564 	.word	0x08007564

080060cc <__multiply>:
 80060cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d0:	4691      	mov	r9, r2
 80060d2:	690a      	ldr	r2, [r1, #16]
 80060d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80060d8:	429a      	cmp	r2, r3
 80060da:	bfb8      	it	lt
 80060dc:	460b      	movlt	r3, r1
 80060de:	460c      	mov	r4, r1
 80060e0:	bfbc      	itt	lt
 80060e2:	464c      	movlt	r4, r9
 80060e4:	4699      	movlt	r9, r3
 80060e6:	6927      	ldr	r7, [r4, #16]
 80060e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80060ec:	68a3      	ldr	r3, [r4, #8]
 80060ee:	6861      	ldr	r1, [r4, #4]
 80060f0:	eb07 060a 	add.w	r6, r7, sl
 80060f4:	42b3      	cmp	r3, r6
 80060f6:	b085      	sub	sp, #20
 80060f8:	bfb8      	it	lt
 80060fa:	3101      	addlt	r1, #1
 80060fc:	f7ff fed8 	bl	8005eb0 <_Balloc>
 8006100:	b930      	cbnz	r0, 8006110 <__multiply+0x44>
 8006102:	4602      	mov	r2, r0
 8006104:	4b44      	ldr	r3, [pc, #272]	; (8006218 <__multiply+0x14c>)
 8006106:	4845      	ldr	r0, [pc, #276]	; (800621c <__multiply+0x150>)
 8006108:	f240 115d 	movw	r1, #349	; 0x15d
 800610c:	f000 fce2 	bl	8006ad4 <__assert_func>
 8006110:	f100 0514 	add.w	r5, r0, #20
 8006114:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006118:	462b      	mov	r3, r5
 800611a:	2200      	movs	r2, #0
 800611c:	4543      	cmp	r3, r8
 800611e:	d321      	bcc.n	8006164 <__multiply+0x98>
 8006120:	f104 0314 	add.w	r3, r4, #20
 8006124:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006128:	f109 0314 	add.w	r3, r9, #20
 800612c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006130:	9202      	str	r2, [sp, #8]
 8006132:	1b3a      	subs	r2, r7, r4
 8006134:	3a15      	subs	r2, #21
 8006136:	f022 0203 	bic.w	r2, r2, #3
 800613a:	3204      	adds	r2, #4
 800613c:	f104 0115 	add.w	r1, r4, #21
 8006140:	428f      	cmp	r7, r1
 8006142:	bf38      	it	cc
 8006144:	2204      	movcc	r2, #4
 8006146:	9201      	str	r2, [sp, #4]
 8006148:	9a02      	ldr	r2, [sp, #8]
 800614a:	9303      	str	r3, [sp, #12]
 800614c:	429a      	cmp	r2, r3
 800614e:	d80c      	bhi.n	800616a <__multiply+0x9e>
 8006150:	2e00      	cmp	r6, #0
 8006152:	dd03      	ble.n	800615c <__multiply+0x90>
 8006154:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006158:	2b00      	cmp	r3, #0
 800615a:	d05a      	beq.n	8006212 <__multiply+0x146>
 800615c:	6106      	str	r6, [r0, #16]
 800615e:	b005      	add	sp, #20
 8006160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006164:	f843 2b04 	str.w	r2, [r3], #4
 8006168:	e7d8      	b.n	800611c <__multiply+0x50>
 800616a:	f8b3 a000 	ldrh.w	sl, [r3]
 800616e:	f1ba 0f00 	cmp.w	sl, #0
 8006172:	d024      	beq.n	80061be <__multiply+0xf2>
 8006174:	f104 0e14 	add.w	lr, r4, #20
 8006178:	46a9      	mov	r9, r5
 800617a:	f04f 0c00 	mov.w	ip, #0
 800617e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006182:	f8d9 1000 	ldr.w	r1, [r9]
 8006186:	fa1f fb82 	uxth.w	fp, r2
 800618a:	b289      	uxth	r1, r1
 800618c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006190:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006194:	f8d9 2000 	ldr.w	r2, [r9]
 8006198:	4461      	add	r1, ip
 800619a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800619e:	fb0a c20b 	mla	r2, sl, fp, ip
 80061a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80061a6:	b289      	uxth	r1, r1
 80061a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80061ac:	4577      	cmp	r7, lr
 80061ae:	f849 1b04 	str.w	r1, [r9], #4
 80061b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80061b6:	d8e2      	bhi.n	800617e <__multiply+0xb2>
 80061b8:	9a01      	ldr	r2, [sp, #4]
 80061ba:	f845 c002 	str.w	ip, [r5, r2]
 80061be:	9a03      	ldr	r2, [sp, #12]
 80061c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80061c4:	3304      	adds	r3, #4
 80061c6:	f1b9 0f00 	cmp.w	r9, #0
 80061ca:	d020      	beq.n	800620e <__multiply+0x142>
 80061cc:	6829      	ldr	r1, [r5, #0]
 80061ce:	f104 0c14 	add.w	ip, r4, #20
 80061d2:	46ae      	mov	lr, r5
 80061d4:	f04f 0a00 	mov.w	sl, #0
 80061d8:	f8bc b000 	ldrh.w	fp, [ip]
 80061dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80061e0:	fb09 220b 	mla	r2, r9, fp, r2
 80061e4:	4492      	add	sl, r2
 80061e6:	b289      	uxth	r1, r1
 80061e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80061ec:	f84e 1b04 	str.w	r1, [lr], #4
 80061f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80061f4:	f8be 1000 	ldrh.w	r1, [lr]
 80061f8:	0c12      	lsrs	r2, r2, #16
 80061fa:	fb09 1102 	mla	r1, r9, r2, r1
 80061fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006202:	4567      	cmp	r7, ip
 8006204:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006208:	d8e6      	bhi.n	80061d8 <__multiply+0x10c>
 800620a:	9a01      	ldr	r2, [sp, #4]
 800620c:	50a9      	str	r1, [r5, r2]
 800620e:	3504      	adds	r5, #4
 8006210:	e79a      	b.n	8006148 <__multiply+0x7c>
 8006212:	3e01      	subs	r6, #1
 8006214:	e79c      	b.n	8006150 <__multiply+0x84>
 8006216:	bf00      	nop
 8006218:	08007553 	.word	0x08007553
 800621c:	08007564 	.word	0x08007564

08006220 <__pow5mult>:
 8006220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006224:	4615      	mov	r5, r2
 8006226:	f012 0203 	ands.w	r2, r2, #3
 800622a:	4606      	mov	r6, r0
 800622c:	460f      	mov	r7, r1
 800622e:	d007      	beq.n	8006240 <__pow5mult+0x20>
 8006230:	4c25      	ldr	r4, [pc, #148]	; (80062c8 <__pow5mult+0xa8>)
 8006232:	3a01      	subs	r2, #1
 8006234:	2300      	movs	r3, #0
 8006236:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800623a:	f7ff fe9b 	bl	8005f74 <__multadd>
 800623e:	4607      	mov	r7, r0
 8006240:	10ad      	asrs	r5, r5, #2
 8006242:	d03d      	beq.n	80062c0 <__pow5mult+0xa0>
 8006244:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006246:	b97c      	cbnz	r4, 8006268 <__pow5mult+0x48>
 8006248:	2010      	movs	r0, #16
 800624a:	f7ff fe0f 	bl	8005e6c <malloc>
 800624e:	4602      	mov	r2, r0
 8006250:	6270      	str	r0, [r6, #36]	; 0x24
 8006252:	b928      	cbnz	r0, 8006260 <__pow5mult+0x40>
 8006254:	4b1d      	ldr	r3, [pc, #116]	; (80062cc <__pow5mult+0xac>)
 8006256:	481e      	ldr	r0, [pc, #120]	; (80062d0 <__pow5mult+0xb0>)
 8006258:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800625c:	f000 fc3a 	bl	8006ad4 <__assert_func>
 8006260:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006264:	6004      	str	r4, [r0, #0]
 8006266:	60c4      	str	r4, [r0, #12]
 8006268:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800626c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006270:	b94c      	cbnz	r4, 8006286 <__pow5mult+0x66>
 8006272:	f240 2171 	movw	r1, #625	; 0x271
 8006276:	4630      	mov	r0, r6
 8006278:	f7ff ff12 	bl	80060a0 <__i2b>
 800627c:	2300      	movs	r3, #0
 800627e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006282:	4604      	mov	r4, r0
 8006284:	6003      	str	r3, [r0, #0]
 8006286:	f04f 0900 	mov.w	r9, #0
 800628a:	07eb      	lsls	r3, r5, #31
 800628c:	d50a      	bpl.n	80062a4 <__pow5mult+0x84>
 800628e:	4639      	mov	r1, r7
 8006290:	4622      	mov	r2, r4
 8006292:	4630      	mov	r0, r6
 8006294:	f7ff ff1a 	bl	80060cc <__multiply>
 8006298:	4639      	mov	r1, r7
 800629a:	4680      	mov	r8, r0
 800629c:	4630      	mov	r0, r6
 800629e:	f7ff fe47 	bl	8005f30 <_Bfree>
 80062a2:	4647      	mov	r7, r8
 80062a4:	106d      	asrs	r5, r5, #1
 80062a6:	d00b      	beq.n	80062c0 <__pow5mult+0xa0>
 80062a8:	6820      	ldr	r0, [r4, #0]
 80062aa:	b938      	cbnz	r0, 80062bc <__pow5mult+0x9c>
 80062ac:	4622      	mov	r2, r4
 80062ae:	4621      	mov	r1, r4
 80062b0:	4630      	mov	r0, r6
 80062b2:	f7ff ff0b 	bl	80060cc <__multiply>
 80062b6:	6020      	str	r0, [r4, #0]
 80062b8:	f8c0 9000 	str.w	r9, [r0]
 80062bc:	4604      	mov	r4, r0
 80062be:	e7e4      	b.n	800628a <__pow5mult+0x6a>
 80062c0:	4638      	mov	r0, r7
 80062c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062c6:	bf00      	nop
 80062c8:	080076b0 	.word	0x080076b0
 80062cc:	080074e1 	.word	0x080074e1
 80062d0:	08007564 	.word	0x08007564

080062d4 <__lshift>:
 80062d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062d8:	460c      	mov	r4, r1
 80062da:	6849      	ldr	r1, [r1, #4]
 80062dc:	6923      	ldr	r3, [r4, #16]
 80062de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80062e2:	68a3      	ldr	r3, [r4, #8]
 80062e4:	4607      	mov	r7, r0
 80062e6:	4691      	mov	r9, r2
 80062e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80062ec:	f108 0601 	add.w	r6, r8, #1
 80062f0:	42b3      	cmp	r3, r6
 80062f2:	db0b      	blt.n	800630c <__lshift+0x38>
 80062f4:	4638      	mov	r0, r7
 80062f6:	f7ff fddb 	bl	8005eb0 <_Balloc>
 80062fa:	4605      	mov	r5, r0
 80062fc:	b948      	cbnz	r0, 8006312 <__lshift+0x3e>
 80062fe:	4602      	mov	r2, r0
 8006300:	4b2a      	ldr	r3, [pc, #168]	; (80063ac <__lshift+0xd8>)
 8006302:	482b      	ldr	r0, [pc, #172]	; (80063b0 <__lshift+0xdc>)
 8006304:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006308:	f000 fbe4 	bl	8006ad4 <__assert_func>
 800630c:	3101      	adds	r1, #1
 800630e:	005b      	lsls	r3, r3, #1
 8006310:	e7ee      	b.n	80062f0 <__lshift+0x1c>
 8006312:	2300      	movs	r3, #0
 8006314:	f100 0114 	add.w	r1, r0, #20
 8006318:	f100 0210 	add.w	r2, r0, #16
 800631c:	4618      	mov	r0, r3
 800631e:	4553      	cmp	r3, sl
 8006320:	db37      	blt.n	8006392 <__lshift+0xbe>
 8006322:	6920      	ldr	r0, [r4, #16]
 8006324:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006328:	f104 0314 	add.w	r3, r4, #20
 800632c:	f019 091f 	ands.w	r9, r9, #31
 8006330:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006334:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006338:	d02f      	beq.n	800639a <__lshift+0xc6>
 800633a:	f1c9 0e20 	rsb	lr, r9, #32
 800633e:	468a      	mov	sl, r1
 8006340:	f04f 0c00 	mov.w	ip, #0
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	fa02 f209 	lsl.w	r2, r2, r9
 800634a:	ea42 020c 	orr.w	r2, r2, ip
 800634e:	f84a 2b04 	str.w	r2, [sl], #4
 8006352:	f853 2b04 	ldr.w	r2, [r3], #4
 8006356:	4298      	cmp	r0, r3
 8006358:	fa22 fc0e 	lsr.w	ip, r2, lr
 800635c:	d8f2      	bhi.n	8006344 <__lshift+0x70>
 800635e:	1b03      	subs	r3, r0, r4
 8006360:	3b15      	subs	r3, #21
 8006362:	f023 0303 	bic.w	r3, r3, #3
 8006366:	3304      	adds	r3, #4
 8006368:	f104 0215 	add.w	r2, r4, #21
 800636c:	4290      	cmp	r0, r2
 800636e:	bf38      	it	cc
 8006370:	2304      	movcc	r3, #4
 8006372:	f841 c003 	str.w	ip, [r1, r3]
 8006376:	f1bc 0f00 	cmp.w	ip, #0
 800637a:	d001      	beq.n	8006380 <__lshift+0xac>
 800637c:	f108 0602 	add.w	r6, r8, #2
 8006380:	3e01      	subs	r6, #1
 8006382:	4638      	mov	r0, r7
 8006384:	612e      	str	r6, [r5, #16]
 8006386:	4621      	mov	r1, r4
 8006388:	f7ff fdd2 	bl	8005f30 <_Bfree>
 800638c:	4628      	mov	r0, r5
 800638e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006392:	f842 0f04 	str.w	r0, [r2, #4]!
 8006396:	3301      	adds	r3, #1
 8006398:	e7c1      	b.n	800631e <__lshift+0x4a>
 800639a:	3904      	subs	r1, #4
 800639c:	f853 2b04 	ldr.w	r2, [r3], #4
 80063a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80063a4:	4298      	cmp	r0, r3
 80063a6:	d8f9      	bhi.n	800639c <__lshift+0xc8>
 80063a8:	e7ea      	b.n	8006380 <__lshift+0xac>
 80063aa:	bf00      	nop
 80063ac:	08007553 	.word	0x08007553
 80063b0:	08007564 	.word	0x08007564

080063b4 <__mcmp>:
 80063b4:	b530      	push	{r4, r5, lr}
 80063b6:	6902      	ldr	r2, [r0, #16]
 80063b8:	690c      	ldr	r4, [r1, #16]
 80063ba:	1b12      	subs	r2, r2, r4
 80063bc:	d10e      	bne.n	80063dc <__mcmp+0x28>
 80063be:	f100 0314 	add.w	r3, r0, #20
 80063c2:	3114      	adds	r1, #20
 80063c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80063c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80063cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80063d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80063d4:	42a5      	cmp	r5, r4
 80063d6:	d003      	beq.n	80063e0 <__mcmp+0x2c>
 80063d8:	d305      	bcc.n	80063e6 <__mcmp+0x32>
 80063da:	2201      	movs	r2, #1
 80063dc:	4610      	mov	r0, r2
 80063de:	bd30      	pop	{r4, r5, pc}
 80063e0:	4283      	cmp	r3, r0
 80063e2:	d3f3      	bcc.n	80063cc <__mcmp+0x18>
 80063e4:	e7fa      	b.n	80063dc <__mcmp+0x28>
 80063e6:	f04f 32ff 	mov.w	r2, #4294967295
 80063ea:	e7f7      	b.n	80063dc <__mcmp+0x28>

080063ec <__mdiff>:
 80063ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f0:	460c      	mov	r4, r1
 80063f2:	4606      	mov	r6, r0
 80063f4:	4611      	mov	r1, r2
 80063f6:	4620      	mov	r0, r4
 80063f8:	4690      	mov	r8, r2
 80063fa:	f7ff ffdb 	bl	80063b4 <__mcmp>
 80063fe:	1e05      	subs	r5, r0, #0
 8006400:	d110      	bne.n	8006424 <__mdiff+0x38>
 8006402:	4629      	mov	r1, r5
 8006404:	4630      	mov	r0, r6
 8006406:	f7ff fd53 	bl	8005eb0 <_Balloc>
 800640a:	b930      	cbnz	r0, 800641a <__mdiff+0x2e>
 800640c:	4b3a      	ldr	r3, [pc, #232]	; (80064f8 <__mdiff+0x10c>)
 800640e:	4602      	mov	r2, r0
 8006410:	f240 2132 	movw	r1, #562	; 0x232
 8006414:	4839      	ldr	r0, [pc, #228]	; (80064fc <__mdiff+0x110>)
 8006416:	f000 fb5d 	bl	8006ad4 <__assert_func>
 800641a:	2301      	movs	r3, #1
 800641c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006420:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006424:	bfa4      	itt	ge
 8006426:	4643      	movge	r3, r8
 8006428:	46a0      	movge	r8, r4
 800642a:	4630      	mov	r0, r6
 800642c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006430:	bfa6      	itte	ge
 8006432:	461c      	movge	r4, r3
 8006434:	2500      	movge	r5, #0
 8006436:	2501      	movlt	r5, #1
 8006438:	f7ff fd3a 	bl	8005eb0 <_Balloc>
 800643c:	b920      	cbnz	r0, 8006448 <__mdiff+0x5c>
 800643e:	4b2e      	ldr	r3, [pc, #184]	; (80064f8 <__mdiff+0x10c>)
 8006440:	4602      	mov	r2, r0
 8006442:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006446:	e7e5      	b.n	8006414 <__mdiff+0x28>
 8006448:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800644c:	6926      	ldr	r6, [r4, #16]
 800644e:	60c5      	str	r5, [r0, #12]
 8006450:	f104 0914 	add.w	r9, r4, #20
 8006454:	f108 0514 	add.w	r5, r8, #20
 8006458:	f100 0e14 	add.w	lr, r0, #20
 800645c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006460:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006464:	f108 0210 	add.w	r2, r8, #16
 8006468:	46f2      	mov	sl, lr
 800646a:	2100      	movs	r1, #0
 800646c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006470:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006474:	fa1f f883 	uxth.w	r8, r3
 8006478:	fa11 f18b 	uxtah	r1, r1, fp
 800647c:	0c1b      	lsrs	r3, r3, #16
 800647e:	eba1 0808 	sub.w	r8, r1, r8
 8006482:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006486:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800648a:	fa1f f888 	uxth.w	r8, r8
 800648e:	1419      	asrs	r1, r3, #16
 8006490:	454e      	cmp	r6, r9
 8006492:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006496:	f84a 3b04 	str.w	r3, [sl], #4
 800649a:	d8e7      	bhi.n	800646c <__mdiff+0x80>
 800649c:	1b33      	subs	r3, r6, r4
 800649e:	3b15      	subs	r3, #21
 80064a0:	f023 0303 	bic.w	r3, r3, #3
 80064a4:	3304      	adds	r3, #4
 80064a6:	3415      	adds	r4, #21
 80064a8:	42a6      	cmp	r6, r4
 80064aa:	bf38      	it	cc
 80064ac:	2304      	movcc	r3, #4
 80064ae:	441d      	add	r5, r3
 80064b0:	4473      	add	r3, lr
 80064b2:	469e      	mov	lr, r3
 80064b4:	462e      	mov	r6, r5
 80064b6:	4566      	cmp	r6, ip
 80064b8:	d30e      	bcc.n	80064d8 <__mdiff+0xec>
 80064ba:	f10c 0203 	add.w	r2, ip, #3
 80064be:	1b52      	subs	r2, r2, r5
 80064c0:	f022 0203 	bic.w	r2, r2, #3
 80064c4:	3d03      	subs	r5, #3
 80064c6:	45ac      	cmp	ip, r5
 80064c8:	bf38      	it	cc
 80064ca:	2200      	movcc	r2, #0
 80064cc:	441a      	add	r2, r3
 80064ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80064d2:	b17b      	cbz	r3, 80064f4 <__mdiff+0x108>
 80064d4:	6107      	str	r7, [r0, #16]
 80064d6:	e7a3      	b.n	8006420 <__mdiff+0x34>
 80064d8:	f856 8b04 	ldr.w	r8, [r6], #4
 80064dc:	fa11 f288 	uxtah	r2, r1, r8
 80064e0:	1414      	asrs	r4, r2, #16
 80064e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80064e6:	b292      	uxth	r2, r2
 80064e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80064ec:	f84e 2b04 	str.w	r2, [lr], #4
 80064f0:	1421      	asrs	r1, r4, #16
 80064f2:	e7e0      	b.n	80064b6 <__mdiff+0xca>
 80064f4:	3f01      	subs	r7, #1
 80064f6:	e7ea      	b.n	80064ce <__mdiff+0xe2>
 80064f8:	08007553 	.word	0x08007553
 80064fc:	08007564 	.word	0x08007564

08006500 <__d2b>:
 8006500:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006504:	4689      	mov	r9, r1
 8006506:	2101      	movs	r1, #1
 8006508:	ec57 6b10 	vmov	r6, r7, d0
 800650c:	4690      	mov	r8, r2
 800650e:	f7ff fccf 	bl	8005eb0 <_Balloc>
 8006512:	4604      	mov	r4, r0
 8006514:	b930      	cbnz	r0, 8006524 <__d2b+0x24>
 8006516:	4602      	mov	r2, r0
 8006518:	4b25      	ldr	r3, [pc, #148]	; (80065b0 <__d2b+0xb0>)
 800651a:	4826      	ldr	r0, [pc, #152]	; (80065b4 <__d2b+0xb4>)
 800651c:	f240 310a 	movw	r1, #778	; 0x30a
 8006520:	f000 fad8 	bl	8006ad4 <__assert_func>
 8006524:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006528:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800652c:	bb35      	cbnz	r5, 800657c <__d2b+0x7c>
 800652e:	2e00      	cmp	r6, #0
 8006530:	9301      	str	r3, [sp, #4]
 8006532:	d028      	beq.n	8006586 <__d2b+0x86>
 8006534:	4668      	mov	r0, sp
 8006536:	9600      	str	r6, [sp, #0]
 8006538:	f7ff fd82 	bl	8006040 <__lo0bits>
 800653c:	9900      	ldr	r1, [sp, #0]
 800653e:	b300      	cbz	r0, 8006582 <__d2b+0x82>
 8006540:	9a01      	ldr	r2, [sp, #4]
 8006542:	f1c0 0320 	rsb	r3, r0, #32
 8006546:	fa02 f303 	lsl.w	r3, r2, r3
 800654a:	430b      	orrs	r3, r1
 800654c:	40c2      	lsrs	r2, r0
 800654e:	6163      	str	r3, [r4, #20]
 8006550:	9201      	str	r2, [sp, #4]
 8006552:	9b01      	ldr	r3, [sp, #4]
 8006554:	61a3      	str	r3, [r4, #24]
 8006556:	2b00      	cmp	r3, #0
 8006558:	bf14      	ite	ne
 800655a:	2202      	movne	r2, #2
 800655c:	2201      	moveq	r2, #1
 800655e:	6122      	str	r2, [r4, #16]
 8006560:	b1d5      	cbz	r5, 8006598 <__d2b+0x98>
 8006562:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006566:	4405      	add	r5, r0
 8006568:	f8c9 5000 	str.w	r5, [r9]
 800656c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006570:	f8c8 0000 	str.w	r0, [r8]
 8006574:	4620      	mov	r0, r4
 8006576:	b003      	add	sp, #12
 8006578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800657c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006580:	e7d5      	b.n	800652e <__d2b+0x2e>
 8006582:	6161      	str	r1, [r4, #20]
 8006584:	e7e5      	b.n	8006552 <__d2b+0x52>
 8006586:	a801      	add	r0, sp, #4
 8006588:	f7ff fd5a 	bl	8006040 <__lo0bits>
 800658c:	9b01      	ldr	r3, [sp, #4]
 800658e:	6163      	str	r3, [r4, #20]
 8006590:	2201      	movs	r2, #1
 8006592:	6122      	str	r2, [r4, #16]
 8006594:	3020      	adds	r0, #32
 8006596:	e7e3      	b.n	8006560 <__d2b+0x60>
 8006598:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800659c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80065a0:	f8c9 0000 	str.w	r0, [r9]
 80065a4:	6918      	ldr	r0, [r3, #16]
 80065a6:	f7ff fd2b 	bl	8006000 <__hi0bits>
 80065aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80065ae:	e7df      	b.n	8006570 <__d2b+0x70>
 80065b0:	08007553 	.word	0x08007553
 80065b4:	08007564 	.word	0x08007564

080065b8 <_calloc_r>:
 80065b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065ba:	fba1 2402 	umull	r2, r4, r1, r2
 80065be:	b94c      	cbnz	r4, 80065d4 <_calloc_r+0x1c>
 80065c0:	4611      	mov	r1, r2
 80065c2:	9201      	str	r2, [sp, #4]
 80065c4:	f7fd ff94 	bl	80044f0 <_malloc_r>
 80065c8:	9a01      	ldr	r2, [sp, #4]
 80065ca:	4605      	mov	r5, r0
 80065cc:	b930      	cbnz	r0, 80065dc <_calloc_r+0x24>
 80065ce:	4628      	mov	r0, r5
 80065d0:	b003      	add	sp, #12
 80065d2:	bd30      	pop	{r4, r5, pc}
 80065d4:	220c      	movs	r2, #12
 80065d6:	6002      	str	r2, [r0, #0]
 80065d8:	2500      	movs	r5, #0
 80065da:	e7f8      	b.n	80065ce <_calloc_r+0x16>
 80065dc:	4621      	mov	r1, r4
 80065de:	f7fd ff5e 	bl	800449e <memset>
 80065e2:	e7f4      	b.n	80065ce <_calloc_r+0x16>

080065e4 <_free_r>:
 80065e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065e6:	2900      	cmp	r1, #0
 80065e8:	d044      	beq.n	8006674 <_free_r+0x90>
 80065ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065ee:	9001      	str	r0, [sp, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f1a1 0404 	sub.w	r4, r1, #4
 80065f6:	bfb8      	it	lt
 80065f8:	18e4      	addlt	r4, r4, r3
 80065fa:	f7ff fc4d 	bl	8005e98 <__malloc_lock>
 80065fe:	4a1e      	ldr	r2, [pc, #120]	; (8006678 <_free_r+0x94>)
 8006600:	9801      	ldr	r0, [sp, #4]
 8006602:	6813      	ldr	r3, [r2, #0]
 8006604:	b933      	cbnz	r3, 8006614 <_free_r+0x30>
 8006606:	6063      	str	r3, [r4, #4]
 8006608:	6014      	str	r4, [r2, #0]
 800660a:	b003      	add	sp, #12
 800660c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006610:	f7ff bc48 	b.w	8005ea4 <__malloc_unlock>
 8006614:	42a3      	cmp	r3, r4
 8006616:	d908      	bls.n	800662a <_free_r+0x46>
 8006618:	6825      	ldr	r5, [r4, #0]
 800661a:	1961      	adds	r1, r4, r5
 800661c:	428b      	cmp	r3, r1
 800661e:	bf01      	itttt	eq
 8006620:	6819      	ldreq	r1, [r3, #0]
 8006622:	685b      	ldreq	r3, [r3, #4]
 8006624:	1949      	addeq	r1, r1, r5
 8006626:	6021      	streq	r1, [r4, #0]
 8006628:	e7ed      	b.n	8006606 <_free_r+0x22>
 800662a:	461a      	mov	r2, r3
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	b10b      	cbz	r3, 8006634 <_free_r+0x50>
 8006630:	42a3      	cmp	r3, r4
 8006632:	d9fa      	bls.n	800662a <_free_r+0x46>
 8006634:	6811      	ldr	r1, [r2, #0]
 8006636:	1855      	adds	r5, r2, r1
 8006638:	42a5      	cmp	r5, r4
 800663a:	d10b      	bne.n	8006654 <_free_r+0x70>
 800663c:	6824      	ldr	r4, [r4, #0]
 800663e:	4421      	add	r1, r4
 8006640:	1854      	adds	r4, r2, r1
 8006642:	42a3      	cmp	r3, r4
 8006644:	6011      	str	r1, [r2, #0]
 8006646:	d1e0      	bne.n	800660a <_free_r+0x26>
 8006648:	681c      	ldr	r4, [r3, #0]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	6053      	str	r3, [r2, #4]
 800664e:	4421      	add	r1, r4
 8006650:	6011      	str	r1, [r2, #0]
 8006652:	e7da      	b.n	800660a <_free_r+0x26>
 8006654:	d902      	bls.n	800665c <_free_r+0x78>
 8006656:	230c      	movs	r3, #12
 8006658:	6003      	str	r3, [r0, #0]
 800665a:	e7d6      	b.n	800660a <_free_r+0x26>
 800665c:	6825      	ldr	r5, [r4, #0]
 800665e:	1961      	adds	r1, r4, r5
 8006660:	428b      	cmp	r3, r1
 8006662:	bf04      	itt	eq
 8006664:	6819      	ldreq	r1, [r3, #0]
 8006666:	685b      	ldreq	r3, [r3, #4]
 8006668:	6063      	str	r3, [r4, #4]
 800666a:	bf04      	itt	eq
 800666c:	1949      	addeq	r1, r1, r5
 800666e:	6021      	streq	r1, [r4, #0]
 8006670:	6054      	str	r4, [r2, #4]
 8006672:	e7ca      	b.n	800660a <_free_r+0x26>
 8006674:	b003      	add	sp, #12
 8006676:	bd30      	pop	{r4, r5, pc}
 8006678:	20000350 	.word	0x20000350

0800667c <__sfputc_r>:
 800667c:	6893      	ldr	r3, [r2, #8]
 800667e:	3b01      	subs	r3, #1
 8006680:	2b00      	cmp	r3, #0
 8006682:	b410      	push	{r4}
 8006684:	6093      	str	r3, [r2, #8]
 8006686:	da08      	bge.n	800669a <__sfputc_r+0x1e>
 8006688:	6994      	ldr	r4, [r2, #24]
 800668a:	42a3      	cmp	r3, r4
 800668c:	db01      	blt.n	8006692 <__sfputc_r+0x16>
 800668e:	290a      	cmp	r1, #10
 8006690:	d103      	bne.n	800669a <__sfputc_r+0x1e>
 8006692:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006696:	f000 b95d 	b.w	8006954 <__swbuf_r>
 800669a:	6813      	ldr	r3, [r2, #0]
 800669c:	1c58      	adds	r0, r3, #1
 800669e:	6010      	str	r0, [r2, #0]
 80066a0:	7019      	strb	r1, [r3, #0]
 80066a2:	4608      	mov	r0, r1
 80066a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <__sfputs_r>:
 80066aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ac:	4606      	mov	r6, r0
 80066ae:	460f      	mov	r7, r1
 80066b0:	4614      	mov	r4, r2
 80066b2:	18d5      	adds	r5, r2, r3
 80066b4:	42ac      	cmp	r4, r5
 80066b6:	d101      	bne.n	80066bc <__sfputs_r+0x12>
 80066b8:	2000      	movs	r0, #0
 80066ba:	e007      	b.n	80066cc <__sfputs_r+0x22>
 80066bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066c0:	463a      	mov	r2, r7
 80066c2:	4630      	mov	r0, r6
 80066c4:	f7ff ffda 	bl	800667c <__sfputc_r>
 80066c8:	1c43      	adds	r3, r0, #1
 80066ca:	d1f3      	bne.n	80066b4 <__sfputs_r+0xa>
 80066cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080066d0 <_vfiprintf_r>:
 80066d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d4:	460d      	mov	r5, r1
 80066d6:	b09d      	sub	sp, #116	; 0x74
 80066d8:	4614      	mov	r4, r2
 80066da:	4698      	mov	r8, r3
 80066dc:	4606      	mov	r6, r0
 80066de:	b118      	cbz	r0, 80066e8 <_vfiprintf_r+0x18>
 80066e0:	6983      	ldr	r3, [r0, #24]
 80066e2:	b90b      	cbnz	r3, 80066e8 <_vfiprintf_r+0x18>
 80066e4:	f7fd fe16 	bl	8004314 <__sinit>
 80066e8:	4b89      	ldr	r3, [pc, #548]	; (8006910 <_vfiprintf_r+0x240>)
 80066ea:	429d      	cmp	r5, r3
 80066ec:	d11b      	bne.n	8006726 <_vfiprintf_r+0x56>
 80066ee:	6875      	ldr	r5, [r6, #4]
 80066f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066f2:	07d9      	lsls	r1, r3, #31
 80066f4:	d405      	bmi.n	8006702 <_vfiprintf_r+0x32>
 80066f6:	89ab      	ldrh	r3, [r5, #12]
 80066f8:	059a      	lsls	r2, r3, #22
 80066fa:	d402      	bmi.n	8006702 <_vfiprintf_r+0x32>
 80066fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066fe:	f7fd fecc 	bl	800449a <__retarget_lock_acquire_recursive>
 8006702:	89ab      	ldrh	r3, [r5, #12]
 8006704:	071b      	lsls	r3, r3, #28
 8006706:	d501      	bpl.n	800670c <_vfiprintf_r+0x3c>
 8006708:	692b      	ldr	r3, [r5, #16]
 800670a:	b9eb      	cbnz	r3, 8006748 <_vfiprintf_r+0x78>
 800670c:	4629      	mov	r1, r5
 800670e:	4630      	mov	r0, r6
 8006710:	f000 f972 	bl	80069f8 <__swsetup_r>
 8006714:	b1c0      	cbz	r0, 8006748 <_vfiprintf_r+0x78>
 8006716:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006718:	07dc      	lsls	r4, r3, #31
 800671a:	d50e      	bpl.n	800673a <_vfiprintf_r+0x6a>
 800671c:	f04f 30ff 	mov.w	r0, #4294967295
 8006720:	b01d      	add	sp, #116	; 0x74
 8006722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006726:	4b7b      	ldr	r3, [pc, #492]	; (8006914 <_vfiprintf_r+0x244>)
 8006728:	429d      	cmp	r5, r3
 800672a:	d101      	bne.n	8006730 <_vfiprintf_r+0x60>
 800672c:	68b5      	ldr	r5, [r6, #8]
 800672e:	e7df      	b.n	80066f0 <_vfiprintf_r+0x20>
 8006730:	4b79      	ldr	r3, [pc, #484]	; (8006918 <_vfiprintf_r+0x248>)
 8006732:	429d      	cmp	r5, r3
 8006734:	bf08      	it	eq
 8006736:	68f5      	ldreq	r5, [r6, #12]
 8006738:	e7da      	b.n	80066f0 <_vfiprintf_r+0x20>
 800673a:	89ab      	ldrh	r3, [r5, #12]
 800673c:	0598      	lsls	r0, r3, #22
 800673e:	d4ed      	bmi.n	800671c <_vfiprintf_r+0x4c>
 8006740:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006742:	f7fd feab 	bl	800449c <__retarget_lock_release_recursive>
 8006746:	e7e9      	b.n	800671c <_vfiprintf_r+0x4c>
 8006748:	2300      	movs	r3, #0
 800674a:	9309      	str	r3, [sp, #36]	; 0x24
 800674c:	2320      	movs	r3, #32
 800674e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006752:	f8cd 800c 	str.w	r8, [sp, #12]
 8006756:	2330      	movs	r3, #48	; 0x30
 8006758:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800691c <_vfiprintf_r+0x24c>
 800675c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006760:	f04f 0901 	mov.w	r9, #1
 8006764:	4623      	mov	r3, r4
 8006766:	469a      	mov	sl, r3
 8006768:	f813 2b01 	ldrb.w	r2, [r3], #1
 800676c:	b10a      	cbz	r2, 8006772 <_vfiprintf_r+0xa2>
 800676e:	2a25      	cmp	r2, #37	; 0x25
 8006770:	d1f9      	bne.n	8006766 <_vfiprintf_r+0x96>
 8006772:	ebba 0b04 	subs.w	fp, sl, r4
 8006776:	d00b      	beq.n	8006790 <_vfiprintf_r+0xc0>
 8006778:	465b      	mov	r3, fp
 800677a:	4622      	mov	r2, r4
 800677c:	4629      	mov	r1, r5
 800677e:	4630      	mov	r0, r6
 8006780:	f7ff ff93 	bl	80066aa <__sfputs_r>
 8006784:	3001      	adds	r0, #1
 8006786:	f000 80aa 	beq.w	80068de <_vfiprintf_r+0x20e>
 800678a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800678c:	445a      	add	r2, fp
 800678e:	9209      	str	r2, [sp, #36]	; 0x24
 8006790:	f89a 3000 	ldrb.w	r3, [sl]
 8006794:	2b00      	cmp	r3, #0
 8006796:	f000 80a2 	beq.w	80068de <_vfiprintf_r+0x20e>
 800679a:	2300      	movs	r3, #0
 800679c:	f04f 32ff 	mov.w	r2, #4294967295
 80067a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067a4:	f10a 0a01 	add.w	sl, sl, #1
 80067a8:	9304      	str	r3, [sp, #16]
 80067aa:	9307      	str	r3, [sp, #28]
 80067ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067b0:	931a      	str	r3, [sp, #104]	; 0x68
 80067b2:	4654      	mov	r4, sl
 80067b4:	2205      	movs	r2, #5
 80067b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067ba:	4858      	ldr	r0, [pc, #352]	; (800691c <_vfiprintf_r+0x24c>)
 80067bc:	f7f9 fd18 	bl	80001f0 <memchr>
 80067c0:	9a04      	ldr	r2, [sp, #16]
 80067c2:	b9d8      	cbnz	r0, 80067fc <_vfiprintf_r+0x12c>
 80067c4:	06d1      	lsls	r1, r2, #27
 80067c6:	bf44      	itt	mi
 80067c8:	2320      	movmi	r3, #32
 80067ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067ce:	0713      	lsls	r3, r2, #28
 80067d0:	bf44      	itt	mi
 80067d2:	232b      	movmi	r3, #43	; 0x2b
 80067d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067d8:	f89a 3000 	ldrb.w	r3, [sl]
 80067dc:	2b2a      	cmp	r3, #42	; 0x2a
 80067de:	d015      	beq.n	800680c <_vfiprintf_r+0x13c>
 80067e0:	9a07      	ldr	r2, [sp, #28]
 80067e2:	4654      	mov	r4, sl
 80067e4:	2000      	movs	r0, #0
 80067e6:	f04f 0c0a 	mov.w	ip, #10
 80067ea:	4621      	mov	r1, r4
 80067ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067f0:	3b30      	subs	r3, #48	; 0x30
 80067f2:	2b09      	cmp	r3, #9
 80067f4:	d94e      	bls.n	8006894 <_vfiprintf_r+0x1c4>
 80067f6:	b1b0      	cbz	r0, 8006826 <_vfiprintf_r+0x156>
 80067f8:	9207      	str	r2, [sp, #28]
 80067fa:	e014      	b.n	8006826 <_vfiprintf_r+0x156>
 80067fc:	eba0 0308 	sub.w	r3, r0, r8
 8006800:	fa09 f303 	lsl.w	r3, r9, r3
 8006804:	4313      	orrs	r3, r2
 8006806:	9304      	str	r3, [sp, #16]
 8006808:	46a2      	mov	sl, r4
 800680a:	e7d2      	b.n	80067b2 <_vfiprintf_r+0xe2>
 800680c:	9b03      	ldr	r3, [sp, #12]
 800680e:	1d19      	adds	r1, r3, #4
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	9103      	str	r1, [sp, #12]
 8006814:	2b00      	cmp	r3, #0
 8006816:	bfbb      	ittet	lt
 8006818:	425b      	neglt	r3, r3
 800681a:	f042 0202 	orrlt.w	r2, r2, #2
 800681e:	9307      	strge	r3, [sp, #28]
 8006820:	9307      	strlt	r3, [sp, #28]
 8006822:	bfb8      	it	lt
 8006824:	9204      	strlt	r2, [sp, #16]
 8006826:	7823      	ldrb	r3, [r4, #0]
 8006828:	2b2e      	cmp	r3, #46	; 0x2e
 800682a:	d10c      	bne.n	8006846 <_vfiprintf_r+0x176>
 800682c:	7863      	ldrb	r3, [r4, #1]
 800682e:	2b2a      	cmp	r3, #42	; 0x2a
 8006830:	d135      	bne.n	800689e <_vfiprintf_r+0x1ce>
 8006832:	9b03      	ldr	r3, [sp, #12]
 8006834:	1d1a      	adds	r2, r3, #4
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	9203      	str	r2, [sp, #12]
 800683a:	2b00      	cmp	r3, #0
 800683c:	bfb8      	it	lt
 800683e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006842:	3402      	adds	r4, #2
 8006844:	9305      	str	r3, [sp, #20]
 8006846:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800692c <_vfiprintf_r+0x25c>
 800684a:	7821      	ldrb	r1, [r4, #0]
 800684c:	2203      	movs	r2, #3
 800684e:	4650      	mov	r0, sl
 8006850:	f7f9 fcce 	bl	80001f0 <memchr>
 8006854:	b140      	cbz	r0, 8006868 <_vfiprintf_r+0x198>
 8006856:	2340      	movs	r3, #64	; 0x40
 8006858:	eba0 000a 	sub.w	r0, r0, sl
 800685c:	fa03 f000 	lsl.w	r0, r3, r0
 8006860:	9b04      	ldr	r3, [sp, #16]
 8006862:	4303      	orrs	r3, r0
 8006864:	3401      	adds	r4, #1
 8006866:	9304      	str	r3, [sp, #16]
 8006868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800686c:	482c      	ldr	r0, [pc, #176]	; (8006920 <_vfiprintf_r+0x250>)
 800686e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006872:	2206      	movs	r2, #6
 8006874:	f7f9 fcbc 	bl	80001f0 <memchr>
 8006878:	2800      	cmp	r0, #0
 800687a:	d03f      	beq.n	80068fc <_vfiprintf_r+0x22c>
 800687c:	4b29      	ldr	r3, [pc, #164]	; (8006924 <_vfiprintf_r+0x254>)
 800687e:	bb1b      	cbnz	r3, 80068c8 <_vfiprintf_r+0x1f8>
 8006880:	9b03      	ldr	r3, [sp, #12]
 8006882:	3307      	adds	r3, #7
 8006884:	f023 0307 	bic.w	r3, r3, #7
 8006888:	3308      	adds	r3, #8
 800688a:	9303      	str	r3, [sp, #12]
 800688c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800688e:	443b      	add	r3, r7
 8006890:	9309      	str	r3, [sp, #36]	; 0x24
 8006892:	e767      	b.n	8006764 <_vfiprintf_r+0x94>
 8006894:	fb0c 3202 	mla	r2, ip, r2, r3
 8006898:	460c      	mov	r4, r1
 800689a:	2001      	movs	r0, #1
 800689c:	e7a5      	b.n	80067ea <_vfiprintf_r+0x11a>
 800689e:	2300      	movs	r3, #0
 80068a0:	3401      	adds	r4, #1
 80068a2:	9305      	str	r3, [sp, #20]
 80068a4:	4619      	mov	r1, r3
 80068a6:	f04f 0c0a 	mov.w	ip, #10
 80068aa:	4620      	mov	r0, r4
 80068ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068b0:	3a30      	subs	r2, #48	; 0x30
 80068b2:	2a09      	cmp	r2, #9
 80068b4:	d903      	bls.n	80068be <_vfiprintf_r+0x1ee>
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d0c5      	beq.n	8006846 <_vfiprintf_r+0x176>
 80068ba:	9105      	str	r1, [sp, #20]
 80068bc:	e7c3      	b.n	8006846 <_vfiprintf_r+0x176>
 80068be:	fb0c 2101 	mla	r1, ip, r1, r2
 80068c2:	4604      	mov	r4, r0
 80068c4:	2301      	movs	r3, #1
 80068c6:	e7f0      	b.n	80068aa <_vfiprintf_r+0x1da>
 80068c8:	ab03      	add	r3, sp, #12
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	462a      	mov	r2, r5
 80068ce:	4b16      	ldr	r3, [pc, #88]	; (8006928 <_vfiprintf_r+0x258>)
 80068d0:	a904      	add	r1, sp, #16
 80068d2:	4630      	mov	r0, r6
 80068d4:	f7fd ff20 	bl	8004718 <_printf_float>
 80068d8:	4607      	mov	r7, r0
 80068da:	1c78      	adds	r0, r7, #1
 80068dc:	d1d6      	bne.n	800688c <_vfiprintf_r+0x1bc>
 80068de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068e0:	07d9      	lsls	r1, r3, #31
 80068e2:	d405      	bmi.n	80068f0 <_vfiprintf_r+0x220>
 80068e4:	89ab      	ldrh	r3, [r5, #12]
 80068e6:	059a      	lsls	r2, r3, #22
 80068e8:	d402      	bmi.n	80068f0 <_vfiprintf_r+0x220>
 80068ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068ec:	f7fd fdd6 	bl	800449c <__retarget_lock_release_recursive>
 80068f0:	89ab      	ldrh	r3, [r5, #12]
 80068f2:	065b      	lsls	r3, r3, #25
 80068f4:	f53f af12 	bmi.w	800671c <_vfiprintf_r+0x4c>
 80068f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068fa:	e711      	b.n	8006720 <_vfiprintf_r+0x50>
 80068fc:	ab03      	add	r3, sp, #12
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	462a      	mov	r2, r5
 8006902:	4b09      	ldr	r3, [pc, #36]	; (8006928 <_vfiprintf_r+0x258>)
 8006904:	a904      	add	r1, sp, #16
 8006906:	4630      	mov	r0, r6
 8006908:	f7fe f9aa 	bl	8004c60 <_printf_i>
 800690c:	e7e4      	b.n	80068d8 <_vfiprintf_r+0x208>
 800690e:	bf00      	nop
 8006910:	0800745c 	.word	0x0800745c
 8006914:	0800747c 	.word	0x0800747c
 8006918:	0800743c 	.word	0x0800743c
 800691c:	080076bc 	.word	0x080076bc
 8006920:	080076c6 	.word	0x080076c6
 8006924:	08004719 	.word	0x08004719
 8006928:	080066ab 	.word	0x080066ab
 800692c:	080076c2 	.word	0x080076c2

08006930 <_read_r>:
 8006930:	b538      	push	{r3, r4, r5, lr}
 8006932:	4d07      	ldr	r5, [pc, #28]	; (8006950 <_read_r+0x20>)
 8006934:	4604      	mov	r4, r0
 8006936:	4608      	mov	r0, r1
 8006938:	4611      	mov	r1, r2
 800693a:	2200      	movs	r2, #0
 800693c:	602a      	str	r2, [r5, #0]
 800693e:	461a      	mov	r2, r3
 8006940:	f7fd fa23 	bl	8003d8a <_read>
 8006944:	1c43      	adds	r3, r0, #1
 8006946:	d102      	bne.n	800694e <_read_r+0x1e>
 8006948:	682b      	ldr	r3, [r5, #0]
 800694a:	b103      	cbz	r3, 800694e <_read_r+0x1e>
 800694c:	6023      	str	r3, [r4, #0]
 800694e:	bd38      	pop	{r3, r4, r5, pc}
 8006950:	20000358 	.word	0x20000358

08006954 <__swbuf_r>:
 8006954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006956:	460e      	mov	r6, r1
 8006958:	4614      	mov	r4, r2
 800695a:	4605      	mov	r5, r0
 800695c:	b118      	cbz	r0, 8006966 <__swbuf_r+0x12>
 800695e:	6983      	ldr	r3, [r0, #24]
 8006960:	b90b      	cbnz	r3, 8006966 <__swbuf_r+0x12>
 8006962:	f7fd fcd7 	bl	8004314 <__sinit>
 8006966:	4b21      	ldr	r3, [pc, #132]	; (80069ec <__swbuf_r+0x98>)
 8006968:	429c      	cmp	r4, r3
 800696a:	d12b      	bne.n	80069c4 <__swbuf_r+0x70>
 800696c:	686c      	ldr	r4, [r5, #4]
 800696e:	69a3      	ldr	r3, [r4, #24]
 8006970:	60a3      	str	r3, [r4, #8]
 8006972:	89a3      	ldrh	r3, [r4, #12]
 8006974:	071a      	lsls	r2, r3, #28
 8006976:	d52f      	bpl.n	80069d8 <__swbuf_r+0x84>
 8006978:	6923      	ldr	r3, [r4, #16]
 800697a:	b36b      	cbz	r3, 80069d8 <__swbuf_r+0x84>
 800697c:	6923      	ldr	r3, [r4, #16]
 800697e:	6820      	ldr	r0, [r4, #0]
 8006980:	1ac0      	subs	r0, r0, r3
 8006982:	6963      	ldr	r3, [r4, #20]
 8006984:	b2f6      	uxtb	r6, r6
 8006986:	4283      	cmp	r3, r0
 8006988:	4637      	mov	r7, r6
 800698a:	dc04      	bgt.n	8006996 <__swbuf_r+0x42>
 800698c:	4621      	mov	r1, r4
 800698e:	4628      	mov	r0, r5
 8006990:	f7ff fa1a 	bl	8005dc8 <_fflush_r>
 8006994:	bb30      	cbnz	r0, 80069e4 <__swbuf_r+0x90>
 8006996:	68a3      	ldr	r3, [r4, #8]
 8006998:	3b01      	subs	r3, #1
 800699a:	60a3      	str	r3, [r4, #8]
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	6022      	str	r2, [r4, #0]
 80069a2:	701e      	strb	r6, [r3, #0]
 80069a4:	6963      	ldr	r3, [r4, #20]
 80069a6:	3001      	adds	r0, #1
 80069a8:	4283      	cmp	r3, r0
 80069aa:	d004      	beq.n	80069b6 <__swbuf_r+0x62>
 80069ac:	89a3      	ldrh	r3, [r4, #12]
 80069ae:	07db      	lsls	r3, r3, #31
 80069b0:	d506      	bpl.n	80069c0 <__swbuf_r+0x6c>
 80069b2:	2e0a      	cmp	r6, #10
 80069b4:	d104      	bne.n	80069c0 <__swbuf_r+0x6c>
 80069b6:	4621      	mov	r1, r4
 80069b8:	4628      	mov	r0, r5
 80069ba:	f7ff fa05 	bl	8005dc8 <_fflush_r>
 80069be:	b988      	cbnz	r0, 80069e4 <__swbuf_r+0x90>
 80069c0:	4638      	mov	r0, r7
 80069c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069c4:	4b0a      	ldr	r3, [pc, #40]	; (80069f0 <__swbuf_r+0x9c>)
 80069c6:	429c      	cmp	r4, r3
 80069c8:	d101      	bne.n	80069ce <__swbuf_r+0x7a>
 80069ca:	68ac      	ldr	r4, [r5, #8]
 80069cc:	e7cf      	b.n	800696e <__swbuf_r+0x1a>
 80069ce:	4b09      	ldr	r3, [pc, #36]	; (80069f4 <__swbuf_r+0xa0>)
 80069d0:	429c      	cmp	r4, r3
 80069d2:	bf08      	it	eq
 80069d4:	68ec      	ldreq	r4, [r5, #12]
 80069d6:	e7ca      	b.n	800696e <__swbuf_r+0x1a>
 80069d8:	4621      	mov	r1, r4
 80069da:	4628      	mov	r0, r5
 80069dc:	f000 f80c 	bl	80069f8 <__swsetup_r>
 80069e0:	2800      	cmp	r0, #0
 80069e2:	d0cb      	beq.n	800697c <__swbuf_r+0x28>
 80069e4:	f04f 37ff 	mov.w	r7, #4294967295
 80069e8:	e7ea      	b.n	80069c0 <__swbuf_r+0x6c>
 80069ea:	bf00      	nop
 80069ec:	0800745c 	.word	0x0800745c
 80069f0:	0800747c 	.word	0x0800747c
 80069f4:	0800743c 	.word	0x0800743c

080069f8 <__swsetup_r>:
 80069f8:	4b32      	ldr	r3, [pc, #200]	; (8006ac4 <__swsetup_r+0xcc>)
 80069fa:	b570      	push	{r4, r5, r6, lr}
 80069fc:	681d      	ldr	r5, [r3, #0]
 80069fe:	4606      	mov	r6, r0
 8006a00:	460c      	mov	r4, r1
 8006a02:	b125      	cbz	r5, 8006a0e <__swsetup_r+0x16>
 8006a04:	69ab      	ldr	r3, [r5, #24]
 8006a06:	b913      	cbnz	r3, 8006a0e <__swsetup_r+0x16>
 8006a08:	4628      	mov	r0, r5
 8006a0a:	f7fd fc83 	bl	8004314 <__sinit>
 8006a0e:	4b2e      	ldr	r3, [pc, #184]	; (8006ac8 <__swsetup_r+0xd0>)
 8006a10:	429c      	cmp	r4, r3
 8006a12:	d10f      	bne.n	8006a34 <__swsetup_r+0x3c>
 8006a14:	686c      	ldr	r4, [r5, #4]
 8006a16:	89a3      	ldrh	r3, [r4, #12]
 8006a18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a1c:	0719      	lsls	r1, r3, #28
 8006a1e:	d42c      	bmi.n	8006a7a <__swsetup_r+0x82>
 8006a20:	06dd      	lsls	r5, r3, #27
 8006a22:	d411      	bmi.n	8006a48 <__swsetup_r+0x50>
 8006a24:	2309      	movs	r3, #9
 8006a26:	6033      	str	r3, [r6, #0]
 8006a28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a2c:	81a3      	strh	r3, [r4, #12]
 8006a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a32:	e03e      	b.n	8006ab2 <__swsetup_r+0xba>
 8006a34:	4b25      	ldr	r3, [pc, #148]	; (8006acc <__swsetup_r+0xd4>)
 8006a36:	429c      	cmp	r4, r3
 8006a38:	d101      	bne.n	8006a3e <__swsetup_r+0x46>
 8006a3a:	68ac      	ldr	r4, [r5, #8]
 8006a3c:	e7eb      	b.n	8006a16 <__swsetup_r+0x1e>
 8006a3e:	4b24      	ldr	r3, [pc, #144]	; (8006ad0 <__swsetup_r+0xd8>)
 8006a40:	429c      	cmp	r4, r3
 8006a42:	bf08      	it	eq
 8006a44:	68ec      	ldreq	r4, [r5, #12]
 8006a46:	e7e6      	b.n	8006a16 <__swsetup_r+0x1e>
 8006a48:	0758      	lsls	r0, r3, #29
 8006a4a:	d512      	bpl.n	8006a72 <__swsetup_r+0x7a>
 8006a4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a4e:	b141      	cbz	r1, 8006a62 <__swsetup_r+0x6a>
 8006a50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a54:	4299      	cmp	r1, r3
 8006a56:	d002      	beq.n	8006a5e <__swsetup_r+0x66>
 8006a58:	4630      	mov	r0, r6
 8006a5a:	f7ff fdc3 	bl	80065e4 <_free_r>
 8006a5e:	2300      	movs	r3, #0
 8006a60:	6363      	str	r3, [r4, #52]	; 0x34
 8006a62:	89a3      	ldrh	r3, [r4, #12]
 8006a64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a68:	81a3      	strh	r3, [r4, #12]
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	6063      	str	r3, [r4, #4]
 8006a6e:	6923      	ldr	r3, [r4, #16]
 8006a70:	6023      	str	r3, [r4, #0]
 8006a72:	89a3      	ldrh	r3, [r4, #12]
 8006a74:	f043 0308 	orr.w	r3, r3, #8
 8006a78:	81a3      	strh	r3, [r4, #12]
 8006a7a:	6923      	ldr	r3, [r4, #16]
 8006a7c:	b94b      	cbnz	r3, 8006a92 <__swsetup_r+0x9a>
 8006a7e:	89a3      	ldrh	r3, [r4, #12]
 8006a80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a88:	d003      	beq.n	8006a92 <__swsetup_r+0x9a>
 8006a8a:	4621      	mov	r1, r4
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	f000 f877 	bl	8006b80 <__smakebuf_r>
 8006a92:	89a0      	ldrh	r0, [r4, #12]
 8006a94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a98:	f010 0301 	ands.w	r3, r0, #1
 8006a9c:	d00a      	beq.n	8006ab4 <__swsetup_r+0xbc>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	60a3      	str	r3, [r4, #8]
 8006aa2:	6963      	ldr	r3, [r4, #20]
 8006aa4:	425b      	negs	r3, r3
 8006aa6:	61a3      	str	r3, [r4, #24]
 8006aa8:	6923      	ldr	r3, [r4, #16]
 8006aaa:	b943      	cbnz	r3, 8006abe <__swsetup_r+0xc6>
 8006aac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ab0:	d1ba      	bne.n	8006a28 <__swsetup_r+0x30>
 8006ab2:	bd70      	pop	{r4, r5, r6, pc}
 8006ab4:	0781      	lsls	r1, r0, #30
 8006ab6:	bf58      	it	pl
 8006ab8:	6963      	ldrpl	r3, [r4, #20]
 8006aba:	60a3      	str	r3, [r4, #8]
 8006abc:	e7f4      	b.n	8006aa8 <__swsetup_r+0xb0>
 8006abe:	2000      	movs	r0, #0
 8006ac0:	e7f7      	b.n	8006ab2 <__swsetup_r+0xba>
 8006ac2:	bf00      	nop
 8006ac4:	20000014 	.word	0x20000014
 8006ac8:	0800745c 	.word	0x0800745c
 8006acc:	0800747c 	.word	0x0800747c
 8006ad0:	0800743c 	.word	0x0800743c

08006ad4 <__assert_func>:
 8006ad4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ad6:	4614      	mov	r4, r2
 8006ad8:	461a      	mov	r2, r3
 8006ada:	4b09      	ldr	r3, [pc, #36]	; (8006b00 <__assert_func+0x2c>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4605      	mov	r5, r0
 8006ae0:	68d8      	ldr	r0, [r3, #12]
 8006ae2:	b14c      	cbz	r4, 8006af8 <__assert_func+0x24>
 8006ae4:	4b07      	ldr	r3, [pc, #28]	; (8006b04 <__assert_func+0x30>)
 8006ae6:	9100      	str	r1, [sp, #0]
 8006ae8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006aec:	4906      	ldr	r1, [pc, #24]	; (8006b08 <__assert_func+0x34>)
 8006aee:	462b      	mov	r3, r5
 8006af0:	f000 f80e 	bl	8006b10 <fiprintf>
 8006af4:	f000 f8a3 	bl	8006c3e <abort>
 8006af8:	4b04      	ldr	r3, [pc, #16]	; (8006b0c <__assert_func+0x38>)
 8006afa:	461c      	mov	r4, r3
 8006afc:	e7f3      	b.n	8006ae6 <__assert_func+0x12>
 8006afe:	bf00      	nop
 8006b00:	20000014 	.word	0x20000014
 8006b04:	080076cd 	.word	0x080076cd
 8006b08:	080076da 	.word	0x080076da
 8006b0c:	08007708 	.word	0x08007708

08006b10 <fiprintf>:
 8006b10:	b40e      	push	{r1, r2, r3}
 8006b12:	b503      	push	{r0, r1, lr}
 8006b14:	4601      	mov	r1, r0
 8006b16:	ab03      	add	r3, sp, #12
 8006b18:	4805      	ldr	r0, [pc, #20]	; (8006b30 <fiprintf+0x20>)
 8006b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b1e:	6800      	ldr	r0, [r0, #0]
 8006b20:	9301      	str	r3, [sp, #4]
 8006b22:	f7ff fdd5 	bl	80066d0 <_vfiprintf_r>
 8006b26:	b002      	add	sp, #8
 8006b28:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b2c:	b003      	add	sp, #12
 8006b2e:	4770      	bx	lr
 8006b30:	20000014 	.word	0x20000014

08006b34 <__swhatbuf_r>:
 8006b34:	b570      	push	{r4, r5, r6, lr}
 8006b36:	460e      	mov	r6, r1
 8006b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b3c:	2900      	cmp	r1, #0
 8006b3e:	b096      	sub	sp, #88	; 0x58
 8006b40:	4614      	mov	r4, r2
 8006b42:	461d      	mov	r5, r3
 8006b44:	da08      	bge.n	8006b58 <__swhatbuf_r+0x24>
 8006b46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	602a      	str	r2, [r5, #0]
 8006b4e:	061a      	lsls	r2, r3, #24
 8006b50:	d410      	bmi.n	8006b74 <__swhatbuf_r+0x40>
 8006b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b56:	e00e      	b.n	8006b76 <__swhatbuf_r+0x42>
 8006b58:	466a      	mov	r2, sp
 8006b5a:	f000 f877 	bl	8006c4c <_fstat_r>
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	dbf1      	blt.n	8006b46 <__swhatbuf_r+0x12>
 8006b62:	9a01      	ldr	r2, [sp, #4]
 8006b64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b6c:	425a      	negs	r2, r3
 8006b6e:	415a      	adcs	r2, r3
 8006b70:	602a      	str	r2, [r5, #0]
 8006b72:	e7ee      	b.n	8006b52 <__swhatbuf_r+0x1e>
 8006b74:	2340      	movs	r3, #64	; 0x40
 8006b76:	2000      	movs	r0, #0
 8006b78:	6023      	str	r3, [r4, #0]
 8006b7a:	b016      	add	sp, #88	; 0x58
 8006b7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006b80 <__smakebuf_r>:
 8006b80:	898b      	ldrh	r3, [r1, #12]
 8006b82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b84:	079d      	lsls	r5, r3, #30
 8006b86:	4606      	mov	r6, r0
 8006b88:	460c      	mov	r4, r1
 8006b8a:	d507      	bpl.n	8006b9c <__smakebuf_r+0x1c>
 8006b8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b90:	6023      	str	r3, [r4, #0]
 8006b92:	6123      	str	r3, [r4, #16]
 8006b94:	2301      	movs	r3, #1
 8006b96:	6163      	str	r3, [r4, #20]
 8006b98:	b002      	add	sp, #8
 8006b9a:	bd70      	pop	{r4, r5, r6, pc}
 8006b9c:	ab01      	add	r3, sp, #4
 8006b9e:	466a      	mov	r2, sp
 8006ba0:	f7ff ffc8 	bl	8006b34 <__swhatbuf_r>
 8006ba4:	9900      	ldr	r1, [sp, #0]
 8006ba6:	4605      	mov	r5, r0
 8006ba8:	4630      	mov	r0, r6
 8006baa:	f7fd fca1 	bl	80044f0 <_malloc_r>
 8006bae:	b948      	cbnz	r0, 8006bc4 <__smakebuf_r+0x44>
 8006bb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bb4:	059a      	lsls	r2, r3, #22
 8006bb6:	d4ef      	bmi.n	8006b98 <__smakebuf_r+0x18>
 8006bb8:	f023 0303 	bic.w	r3, r3, #3
 8006bbc:	f043 0302 	orr.w	r3, r3, #2
 8006bc0:	81a3      	strh	r3, [r4, #12]
 8006bc2:	e7e3      	b.n	8006b8c <__smakebuf_r+0xc>
 8006bc4:	4b0d      	ldr	r3, [pc, #52]	; (8006bfc <__smakebuf_r+0x7c>)
 8006bc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8006bc8:	89a3      	ldrh	r3, [r4, #12]
 8006bca:	6020      	str	r0, [r4, #0]
 8006bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bd0:	81a3      	strh	r3, [r4, #12]
 8006bd2:	9b00      	ldr	r3, [sp, #0]
 8006bd4:	6163      	str	r3, [r4, #20]
 8006bd6:	9b01      	ldr	r3, [sp, #4]
 8006bd8:	6120      	str	r0, [r4, #16]
 8006bda:	b15b      	cbz	r3, 8006bf4 <__smakebuf_r+0x74>
 8006bdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006be0:	4630      	mov	r0, r6
 8006be2:	f000 f845 	bl	8006c70 <_isatty_r>
 8006be6:	b128      	cbz	r0, 8006bf4 <__smakebuf_r+0x74>
 8006be8:	89a3      	ldrh	r3, [r4, #12]
 8006bea:	f023 0303 	bic.w	r3, r3, #3
 8006bee:	f043 0301 	orr.w	r3, r3, #1
 8006bf2:	81a3      	strh	r3, [r4, #12]
 8006bf4:	89a0      	ldrh	r0, [r4, #12]
 8006bf6:	4305      	orrs	r5, r0
 8006bf8:	81a5      	strh	r5, [r4, #12]
 8006bfa:	e7cd      	b.n	8006b98 <__smakebuf_r+0x18>
 8006bfc:	080042ad 	.word	0x080042ad

08006c00 <__ascii_mbtowc>:
 8006c00:	b082      	sub	sp, #8
 8006c02:	b901      	cbnz	r1, 8006c06 <__ascii_mbtowc+0x6>
 8006c04:	a901      	add	r1, sp, #4
 8006c06:	b142      	cbz	r2, 8006c1a <__ascii_mbtowc+0x1a>
 8006c08:	b14b      	cbz	r3, 8006c1e <__ascii_mbtowc+0x1e>
 8006c0a:	7813      	ldrb	r3, [r2, #0]
 8006c0c:	600b      	str	r3, [r1, #0]
 8006c0e:	7812      	ldrb	r2, [r2, #0]
 8006c10:	1e10      	subs	r0, r2, #0
 8006c12:	bf18      	it	ne
 8006c14:	2001      	movne	r0, #1
 8006c16:	b002      	add	sp, #8
 8006c18:	4770      	bx	lr
 8006c1a:	4610      	mov	r0, r2
 8006c1c:	e7fb      	b.n	8006c16 <__ascii_mbtowc+0x16>
 8006c1e:	f06f 0001 	mvn.w	r0, #1
 8006c22:	e7f8      	b.n	8006c16 <__ascii_mbtowc+0x16>

08006c24 <__ascii_wctomb>:
 8006c24:	b149      	cbz	r1, 8006c3a <__ascii_wctomb+0x16>
 8006c26:	2aff      	cmp	r2, #255	; 0xff
 8006c28:	bf85      	ittet	hi
 8006c2a:	238a      	movhi	r3, #138	; 0x8a
 8006c2c:	6003      	strhi	r3, [r0, #0]
 8006c2e:	700a      	strbls	r2, [r1, #0]
 8006c30:	f04f 30ff 	movhi.w	r0, #4294967295
 8006c34:	bf98      	it	ls
 8006c36:	2001      	movls	r0, #1
 8006c38:	4770      	bx	lr
 8006c3a:	4608      	mov	r0, r1
 8006c3c:	4770      	bx	lr

08006c3e <abort>:
 8006c3e:	b508      	push	{r3, lr}
 8006c40:	2006      	movs	r0, #6
 8006c42:	f000 f84d 	bl	8006ce0 <raise>
 8006c46:	2001      	movs	r0, #1
 8006c48:	f000 fbc4 	bl	80073d4 <_exit>

08006c4c <_fstat_r>:
 8006c4c:	b538      	push	{r3, r4, r5, lr}
 8006c4e:	4d07      	ldr	r5, [pc, #28]	; (8006c6c <_fstat_r+0x20>)
 8006c50:	2300      	movs	r3, #0
 8006c52:	4604      	mov	r4, r0
 8006c54:	4608      	mov	r0, r1
 8006c56:	4611      	mov	r1, r2
 8006c58:	602b      	str	r3, [r5, #0]
 8006c5a:	f7fd f97a 	bl	8003f52 <_fstat>
 8006c5e:	1c43      	adds	r3, r0, #1
 8006c60:	d102      	bne.n	8006c68 <_fstat_r+0x1c>
 8006c62:	682b      	ldr	r3, [r5, #0]
 8006c64:	b103      	cbz	r3, 8006c68 <_fstat_r+0x1c>
 8006c66:	6023      	str	r3, [r4, #0]
 8006c68:	bd38      	pop	{r3, r4, r5, pc}
 8006c6a:	bf00      	nop
 8006c6c:	20000358 	.word	0x20000358

08006c70 <_isatty_r>:
 8006c70:	b538      	push	{r3, r4, r5, lr}
 8006c72:	4d06      	ldr	r5, [pc, #24]	; (8006c8c <_isatty_r+0x1c>)
 8006c74:	2300      	movs	r3, #0
 8006c76:	4604      	mov	r4, r0
 8006c78:	4608      	mov	r0, r1
 8006c7a:	602b      	str	r3, [r5, #0]
 8006c7c:	f7fd fad0 	bl	8004220 <_isatty>
 8006c80:	1c43      	adds	r3, r0, #1
 8006c82:	d102      	bne.n	8006c8a <_isatty_r+0x1a>
 8006c84:	682b      	ldr	r3, [r5, #0]
 8006c86:	b103      	cbz	r3, 8006c8a <_isatty_r+0x1a>
 8006c88:	6023      	str	r3, [r4, #0]
 8006c8a:	bd38      	pop	{r3, r4, r5, pc}
 8006c8c:	20000358 	.word	0x20000358

08006c90 <_raise_r>:
 8006c90:	291f      	cmp	r1, #31
 8006c92:	b538      	push	{r3, r4, r5, lr}
 8006c94:	4604      	mov	r4, r0
 8006c96:	460d      	mov	r5, r1
 8006c98:	d904      	bls.n	8006ca4 <_raise_r+0x14>
 8006c9a:	2316      	movs	r3, #22
 8006c9c:	6003      	str	r3, [r0, #0]
 8006c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca2:	bd38      	pop	{r3, r4, r5, pc}
 8006ca4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006ca6:	b112      	cbz	r2, 8006cae <_raise_r+0x1e>
 8006ca8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006cac:	b94b      	cbnz	r3, 8006cc2 <_raise_r+0x32>
 8006cae:	4620      	mov	r0, r4
 8006cb0:	f000 f830 	bl	8006d14 <_getpid_r>
 8006cb4:	462a      	mov	r2, r5
 8006cb6:	4601      	mov	r1, r0
 8006cb8:	4620      	mov	r0, r4
 8006cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cbe:	f000 b817 	b.w	8006cf0 <_kill_r>
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d00a      	beq.n	8006cdc <_raise_r+0x4c>
 8006cc6:	1c59      	adds	r1, r3, #1
 8006cc8:	d103      	bne.n	8006cd2 <_raise_r+0x42>
 8006cca:	2316      	movs	r3, #22
 8006ccc:	6003      	str	r3, [r0, #0]
 8006cce:	2001      	movs	r0, #1
 8006cd0:	e7e7      	b.n	8006ca2 <_raise_r+0x12>
 8006cd2:	2400      	movs	r4, #0
 8006cd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006cd8:	4628      	mov	r0, r5
 8006cda:	4798      	blx	r3
 8006cdc:	2000      	movs	r0, #0
 8006cde:	e7e0      	b.n	8006ca2 <_raise_r+0x12>

08006ce0 <raise>:
 8006ce0:	4b02      	ldr	r3, [pc, #8]	; (8006cec <raise+0xc>)
 8006ce2:	4601      	mov	r1, r0
 8006ce4:	6818      	ldr	r0, [r3, #0]
 8006ce6:	f7ff bfd3 	b.w	8006c90 <_raise_r>
 8006cea:	bf00      	nop
 8006cec:	20000014 	.word	0x20000014

08006cf0 <_kill_r>:
 8006cf0:	b538      	push	{r3, r4, r5, lr}
 8006cf2:	4d07      	ldr	r5, [pc, #28]	; (8006d10 <_kill_r+0x20>)
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	4604      	mov	r4, r0
 8006cf8:	4608      	mov	r0, r1
 8006cfa:	4611      	mov	r1, r2
 8006cfc:	602b      	str	r3, [r5, #0]
 8006cfe:	f000 fb61 	bl	80073c4 <_kill>
 8006d02:	1c43      	adds	r3, r0, #1
 8006d04:	d102      	bne.n	8006d0c <_kill_r+0x1c>
 8006d06:	682b      	ldr	r3, [r5, #0]
 8006d08:	b103      	cbz	r3, 8006d0c <_kill_r+0x1c>
 8006d0a:	6023      	str	r3, [r4, #0]
 8006d0c:	bd38      	pop	{r3, r4, r5, pc}
 8006d0e:	bf00      	nop
 8006d10:	20000358 	.word	0x20000358

08006d14 <_getpid_r>:
 8006d14:	f7fd b8fa 	b.w	8003f0c <_getpid>

08006d18 <atan2>:
 8006d18:	f000 b82e 	b.w	8006d78 <__ieee754_atan2>

08006d1c <sqrt>:
 8006d1c:	b538      	push	{r3, r4, r5, lr}
 8006d1e:	ed2d 8b02 	vpush	{d8}
 8006d22:	ec55 4b10 	vmov	r4, r5, d0
 8006d26:	f000 f8f1 	bl	8006f0c <__ieee754_sqrt>
 8006d2a:	4622      	mov	r2, r4
 8006d2c:	462b      	mov	r3, r5
 8006d2e:	4620      	mov	r0, r4
 8006d30:	4629      	mov	r1, r5
 8006d32:	eeb0 8a40 	vmov.f32	s16, s0
 8006d36:	eef0 8a60 	vmov.f32	s17, s1
 8006d3a:	f7f9 feff 	bl	8000b3c <__aeabi_dcmpun>
 8006d3e:	b990      	cbnz	r0, 8006d66 <sqrt+0x4a>
 8006d40:	2200      	movs	r2, #0
 8006d42:	2300      	movs	r3, #0
 8006d44:	4620      	mov	r0, r4
 8006d46:	4629      	mov	r1, r5
 8006d48:	f7f9 fed0 	bl	8000aec <__aeabi_dcmplt>
 8006d4c:	b158      	cbz	r0, 8006d66 <sqrt+0x4a>
 8006d4e:	f7fd fa83 	bl	8004258 <__errno>
 8006d52:	2321      	movs	r3, #33	; 0x21
 8006d54:	6003      	str	r3, [r0, #0]
 8006d56:	2200      	movs	r2, #0
 8006d58:	2300      	movs	r3, #0
 8006d5a:	4610      	mov	r0, r2
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	f7f9 fd7d 	bl	800085c <__aeabi_ddiv>
 8006d62:	ec41 0b18 	vmov	d8, r0, r1
 8006d66:	eeb0 0a48 	vmov.f32	s0, s16
 8006d6a:	eef0 0a68 	vmov.f32	s1, s17
 8006d6e:	ecbd 8b02 	vpop	{d8}
 8006d72:	bd38      	pop	{r3, r4, r5, pc}
 8006d74:	0000      	movs	r0, r0
	...

08006d78 <__ieee754_atan2>:
 8006d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d7c:	ec57 6b11 	vmov	r6, r7, d1
 8006d80:	4273      	negs	r3, r6
 8006d82:	f8df e184 	ldr.w	lr, [pc, #388]	; 8006f08 <__ieee754_atan2+0x190>
 8006d86:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8006d8a:	4333      	orrs	r3, r6
 8006d8c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006d90:	4573      	cmp	r3, lr
 8006d92:	ec51 0b10 	vmov	r0, r1, d0
 8006d96:	ee11 8a10 	vmov	r8, s2
 8006d9a:	d80a      	bhi.n	8006db2 <__ieee754_atan2+0x3a>
 8006d9c:	4244      	negs	r4, r0
 8006d9e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006da2:	4304      	orrs	r4, r0
 8006da4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006da8:	4574      	cmp	r4, lr
 8006daa:	ee10 9a10 	vmov	r9, s0
 8006dae:	468c      	mov	ip, r1
 8006db0:	d907      	bls.n	8006dc2 <__ieee754_atan2+0x4a>
 8006db2:	4632      	mov	r2, r6
 8006db4:	463b      	mov	r3, r7
 8006db6:	f7f9 fa71 	bl	800029c <__adddf3>
 8006dba:	ec41 0b10 	vmov	d0, r0, r1
 8006dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dc2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8006dc6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006dca:	4334      	orrs	r4, r6
 8006dcc:	d103      	bne.n	8006dd6 <__ieee754_atan2+0x5e>
 8006dce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dd2:	f000 b94d 	b.w	8007070 <atan>
 8006dd6:	17bc      	asrs	r4, r7, #30
 8006dd8:	f004 0402 	and.w	r4, r4, #2
 8006ddc:	ea53 0909 	orrs.w	r9, r3, r9
 8006de0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006de4:	d107      	bne.n	8006df6 <__ieee754_atan2+0x7e>
 8006de6:	2c02      	cmp	r4, #2
 8006de8:	d060      	beq.n	8006eac <__ieee754_atan2+0x134>
 8006dea:	2c03      	cmp	r4, #3
 8006dec:	d1e5      	bne.n	8006dba <__ieee754_atan2+0x42>
 8006dee:	a142      	add	r1, pc, #264	; (adr r1, 8006ef8 <__ieee754_atan2+0x180>)
 8006df0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006df4:	e7e1      	b.n	8006dba <__ieee754_atan2+0x42>
 8006df6:	ea52 0808 	orrs.w	r8, r2, r8
 8006dfa:	d106      	bne.n	8006e0a <__ieee754_atan2+0x92>
 8006dfc:	f1bc 0f00 	cmp.w	ip, #0
 8006e00:	da5f      	bge.n	8006ec2 <__ieee754_atan2+0x14a>
 8006e02:	a13f      	add	r1, pc, #252	; (adr r1, 8006f00 <__ieee754_atan2+0x188>)
 8006e04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e08:	e7d7      	b.n	8006dba <__ieee754_atan2+0x42>
 8006e0a:	4572      	cmp	r2, lr
 8006e0c:	d10f      	bne.n	8006e2e <__ieee754_atan2+0xb6>
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	f104 34ff 	add.w	r4, r4, #4294967295
 8006e14:	d107      	bne.n	8006e26 <__ieee754_atan2+0xae>
 8006e16:	2c02      	cmp	r4, #2
 8006e18:	d84c      	bhi.n	8006eb4 <__ieee754_atan2+0x13c>
 8006e1a:	4b35      	ldr	r3, [pc, #212]	; (8006ef0 <__ieee754_atan2+0x178>)
 8006e1c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8006e20:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006e24:	e7c9      	b.n	8006dba <__ieee754_atan2+0x42>
 8006e26:	2c02      	cmp	r4, #2
 8006e28:	d848      	bhi.n	8006ebc <__ieee754_atan2+0x144>
 8006e2a:	4b32      	ldr	r3, [pc, #200]	; (8006ef4 <__ieee754_atan2+0x17c>)
 8006e2c:	e7f6      	b.n	8006e1c <__ieee754_atan2+0xa4>
 8006e2e:	4573      	cmp	r3, lr
 8006e30:	d0e4      	beq.n	8006dfc <__ieee754_atan2+0x84>
 8006e32:	1a9b      	subs	r3, r3, r2
 8006e34:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8006e38:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006e3c:	da1e      	bge.n	8006e7c <__ieee754_atan2+0x104>
 8006e3e:	2f00      	cmp	r7, #0
 8006e40:	da01      	bge.n	8006e46 <__ieee754_atan2+0xce>
 8006e42:	323c      	adds	r2, #60	; 0x3c
 8006e44:	db1e      	blt.n	8006e84 <__ieee754_atan2+0x10c>
 8006e46:	4632      	mov	r2, r6
 8006e48:	463b      	mov	r3, r7
 8006e4a:	f7f9 fd07 	bl	800085c <__aeabi_ddiv>
 8006e4e:	ec41 0b10 	vmov	d0, r0, r1
 8006e52:	f000 faad 	bl	80073b0 <fabs>
 8006e56:	f000 f90b 	bl	8007070 <atan>
 8006e5a:	ec51 0b10 	vmov	r0, r1, d0
 8006e5e:	2c01      	cmp	r4, #1
 8006e60:	d013      	beq.n	8006e8a <__ieee754_atan2+0x112>
 8006e62:	2c02      	cmp	r4, #2
 8006e64:	d015      	beq.n	8006e92 <__ieee754_atan2+0x11a>
 8006e66:	2c00      	cmp	r4, #0
 8006e68:	d0a7      	beq.n	8006dba <__ieee754_atan2+0x42>
 8006e6a:	a319      	add	r3, pc, #100	; (adr r3, 8006ed0 <__ieee754_atan2+0x158>)
 8006e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e70:	f7f9 fa12 	bl	8000298 <__aeabi_dsub>
 8006e74:	a318      	add	r3, pc, #96	; (adr r3, 8006ed8 <__ieee754_atan2+0x160>)
 8006e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7a:	e014      	b.n	8006ea6 <__ieee754_atan2+0x12e>
 8006e7c:	a118      	add	r1, pc, #96	; (adr r1, 8006ee0 <__ieee754_atan2+0x168>)
 8006e7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e82:	e7ec      	b.n	8006e5e <__ieee754_atan2+0xe6>
 8006e84:	2000      	movs	r0, #0
 8006e86:	2100      	movs	r1, #0
 8006e88:	e7e9      	b.n	8006e5e <__ieee754_atan2+0xe6>
 8006e8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e8e:	4619      	mov	r1, r3
 8006e90:	e793      	b.n	8006dba <__ieee754_atan2+0x42>
 8006e92:	a30f      	add	r3, pc, #60	; (adr r3, 8006ed0 <__ieee754_atan2+0x158>)
 8006e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e98:	f7f9 f9fe 	bl	8000298 <__aeabi_dsub>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	a10d      	add	r1, pc, #52	; (adr r1, 8006ed8 <__ieee754_atan2+0x160>)
 8006ea2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ea6:	f7f9 f9f7 	bl	8000298 <__aeabi_dsub>
 8006eaa:	e786      	b.n	8006dba <__ieee754_atan2+0x42>
 8006eac:	a10a      	add	r1, pc, #40	; (adr r1, 8006ed8 <__ieee754_atan2+0x160>)
 8006eae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006eb2:	e782      	b.n	8006dba <__ieee754_atan2+0x42>
 8006eb4:	a10c      	add	r1, pc, #48	; (adr r1, 8006ee8 <__ieee754_atan2+0x170>)
 8006eb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006eba:	e77e      	b.n	8006dba <__ieee754_atan2+0x42>
 8006ebc:	2000      	movs	r0, #0
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	e77b      	b.n	8006dba <__ieee754_atan2+0x42>
 8006ec2:	a107      	add	r1, pc, #28	; (adr r1, 8006ee0 <__ieee754_atan2+0x168>)
 8006ec4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ec8:	e777      	b.n	8006dba <__ieee754_atan2+0x42>
 8006eca:	bf00      	nop
 8006ecc:	f3af 8000 	nop.w
 8006ed0:	33145c07 	.word	0x33145c07
 8006ed4:	3ca1a626 	.word	0x3ca1a626
 8006ed8:	54442d18 	.word	0x54442d18
 8006edc:	400921fb 	.word	0x400921fb
 8006ee0:	54442d18 	.word	0x54442d18
 8006ee4:	3ff921fb 	.word	0x3ff921fb
 8006ee8:	54442d18 	.word	0x54442d18
 8006eec:	3fe921fb 	.word	0x3fe921fb
 8006ef0:	08007818 	.word	0x08007818
 8006ef4:	08007830 	.word	0x08007830
 8006ef8:	54442d18 	.word	0x54442d18
 8006efc:	c00921fb 	.word	0xc00921fb
 8006f00:	54442d18 	.word	0x54442d18
 8006f04:	bff921fb 	.word	0xbff921fb
 8006f08:	7ff00000 	.word	0x7ff00000

08006f0c <__ieee754_sqrt>:
 8006f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f10:	ec55 4b10 	vmov	r4, r5, d0
 8006f14:	4e55      	ldr	r6, [pc, #340]	; (800706c <__ieee754_sqrt+0x160>)
 8006f16:	43ae      	bics	r6, r5
 8006f18:	ee10 0a10 	vmov	r0, s0
 8006f1c:	ee10 3a10 	vmov	r3, s0
 8006f20:	462a      	mov	r2, r5
 8006f22:	4629      	mov	r1, r5
 8006f24:	d110      	bne.n	8006f48 <__ieee754_sqrt+0x3c>
 8006f26:	ee10 2a10 	vmov	r2, s0
 8006f2a:	462b      	mov	r3, r5
 8006f2c:	f7f9 fb6c 	bl	8000608 <__aeabi_dmul>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	4620      	mov	r0, r4
 8006f36:	4629      	mov	r1, r5
 8006f38:	f7f9 f9b0 	bl	800029c <__adddf3>
 8006f3c:	4604      	mov	r4, r0
 8006f3e:	460d      	mov	r5, r1
 8006f40:	ec45 4b10 	vmov	d0, r4, r5
 8006f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f48:	2d00      	cmp	r5, #0
 8006f4a:	dc10      	bgt.n	8006f6e <__ieee754_sqrt+0x62>
 8006f4c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006f50:	4330      	orrs	r0, r6
 8006f52:	d0f5      	beq.n	8006f40 <__ieee754_sqrt+0x34>
 8006f54:	b15d      	cbz	r5, 8006f6e <__ieee754_sqrt+0x62>
 8006f56:	ee10 2a10 	vmov	r2, s0
 8006f5a:	462b      	mov	r3, r5
 8006f5c:	ee10 0a10 	vmov	r0, s0
 8006f60:	f7f9 f99a 	bl	8000298 <__aeabi_dsub>
 8006f64:	4602      	mov	r2, r0
 8006f66:	460b      	mov	r3, r1
 8006f68:	f7f9 fc78 	bl	800085c <__aeabi_ddiv>
 8006f6c:	e7e6      	b.n	8006f3c <__ieee754_sqrt+0x30>
 8006f6e:	1512      	asrs	r2, r2, #20
 8006f70:	d074      	beq.n	800705c <__ieee754_sqrt+0x150>
 8006f72:	07d4      	lsls	r4, r2, #31
 8006f74:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006f78:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8006f7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006f80:	bf5e      	ittt	pl
 8006f82:	0fda      	lsrpl	r2, r3, #31
 8006f84:	005b      	lslpl	r3, r3, #1
 8006f86:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8006f8a:	2400      	movs	r4, #0
 8006f8c:	0fda      	lsrs	r2, r3, #31
 8006f8e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006f92:	107f      	asrs	r7, r7, #1
 8006f94:	005b      	lsls	r3, r3, #1
 8006f96:	2516      	movs	r5, #22
 8006f98:	4620      	mov	r0, r4
 8006f9a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006f9e:	1886      	adds	r6, r0, r2
 8006fa0:	428e      	cmp	r6, r1
 8006fa2:	bfde      	ittt	le
 8006fa4:	1b89      	suble	r1, r1, r6
 8006fa6:	18b0      	addle	r0, r6, r2
 8006fa8:	18a4      	addle	r4, r4, r2
 8006faa:	0049      	lsls	r1, r1, #1
 8006fac:	3d01      	subs	r5, #1
 8006fae:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8006fb2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006fb6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006fba:	d1f0      	bne.n	8006f9e <__ieee754_sqrt+0x92>
 8006fbc:	462a      	mov	r2, r5
 8006fbe:	f04f 0e20 	mov.w	lr, #32
 8006fc2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006fc6:	4281      	cmp	r1, r0
 8006fc8:	eb06 0c05 	add.w	ip, r6, r5
 8006fcc:	dc02      	bgt.n	8006fd4 <__ieee754_sqrt+0xc8>
 8006fce:	d113      	bne.n	8006ff8 <__ieee754_sqrt+0xec>
 8006fd0:	459c      	cmp	ip, r3
 8006fd2:	d811      	bhi.n	8006ff8 <__ieee754_sqrt+0xec>
 8006fd4:	f1bc 0f00 	cmp.w	ip, #0
 8006fd8:	eb0c 0506 	add.w	r5, ip, r6
 8006fdc:	da43      	bge.n	8007066 <__ieee754_sqrt+0x15a>
 8006fde:	2d00      	cmp	r5, #0
 8006fe0:	db41      	blt.n	8007066 <__ieee754_sqrt+0x15a>
 8006fe2:	f100 0801 	add.w	r8, r0, #1
 8006fe6:	1a09      	subs	r1, r1, r0
 8006fe8:	459c      	cmp	ip, r3
 8006fea:	bf88      	it	hi
 8006fec:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8006ff0:	eba3 030c 	sub.w	r3, r3, ip
 8006ff4:	4432      	add	r2, r6
 8006ff6:	4640      	mov	r0, r8
 8006ff8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006ffc:	f1be 0e01 	subs.w	lr, lr, #1
 8007000:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007004:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007008:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800700c:	d1db      	bne.n	8006fc6 <__ieee754_sqrt+0xba>
 800700e:	430b      	orrs	r3, r1
 8007010:	d006      	beq.n	8007020 <__ieee754_sqrt+0x114>
 8007012:	1c50      	adds	r0, r2, #1
 8007014:	bf13      	iteet	ne
 8007016:	3201      	addne	r2, #1
 8007018:	3401      	addeq	r4, #1
 800701a:	4672      	moveq	r2, lr
 800701c:	f022 0201 	bicne.w	r2, r2, #1
 8007020:	1063      	asrs	r3, r4, #1
 8007022:	0852      	lsrs	r2, r2, #1
 8007024:	07e1      	lsls	r1, r4, #31
 8007026:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800702a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800702e:	bf48      	it	mi
 8007030:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007034:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007038:	4614      	mov	r4, r2
 800703a:	e781      	b.n	8006f40 <__ieee754_sqrt+0x34>
 800703c:	0ad9      	lsrs	r1, r3, #11
 800703e:	3815      	subs	r0, #21
 8007040:	055b      	lsls	r3, r3, #21
 8007042:	2900      	cmp	r1, #0
 8007044:	d0fa      	beq.n	800703c <__ieee754_sqrt+0x130>
 8007046:	02cd      	lsls	r5, r1, #11
 8007048:	d50a      	bpl.n	8007060 <__ieee754_sqrt+0x154>
 800704a:	f1c2 0420 	rsb	r4, r2, #32
 800704e:	fa23 f404 	lsr.w	r4, r3, r4
 8007052:	1e55      	subs	r5, r2, #1
 8007054:	4093      	lsls	r3, r2
 8007056:	4321      	orrs	r1, r4
 8007058:	1b42      	subs	r2, r0, r5
 800705a:	e78a      	b.n	8006f72 <__ieee754_sqrt+0x66>
 800705c:	4610      	mov	r0, r2
 800705e:	e7f0      	b.n	8007042 <__ieee754_sqrt+0x136>
 8007060:	0049      	lsls	r1, r1, #1
 8007062:	3201      	adds	r2, #1
 8007064:	e7ef      	b.n	8007046 <__ieee754_sqrt+0x13a>
 8007066:	4680      	mov	r8, r0
 8007068:	e7bd      	b.n	8006fe6 <__ieee754_sqrt+0xda>
 800706a:	bf00      	nop
 800706c:	7ff00000 	.word	0x7ff00000

08007070 <atan>:
 8007070:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007074:	ec55 4b10 	vmov	r4, r5, d0
 8007078:	4bc3      	ldr	r3, [pc, #780]	; (8007388 <atan+0x318>)
 800707a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800707e:	429e      	cmp	r6, r3
 8007080:	46ab      	mov	fp, r5
 8007082:	dd18      	ble.n	80070b6 <atan+0x46>
 8007084:	4bc1      	ldr	r3, [pc, #772]	; (800738c <atan+0x31c>)
 8007086:	429e      	cmp	r6, r3
 8007088:	dc01      	bgt.n	800708e <atan+0x1e>
 800708a:	d109      	bne.n	80070a0 <atan+0x30>
 800708c:	b144      	cbz	r4, 80070a0 <atan+0x30>
 800708e:	4622      	mov	r2, r4
 8007090:	462b      	mov	r3, r5
 8007092:	4620      	mov	r0, r4
 8007094:	4629      	mov	r1, r5
 8007096:	f7f9 f901 	bl	800029c <__adddf3>
 800709a:	4604      	mov	r4, r0
 800709c:	460d      	mov	r5, r1
 800709e:	e006      	b.n	80070ae <atan+0x3e>
 80070a0:	f1bb 0f00 	cmp.w	fp, #0
 80070a4:	f300 8131 	bgt.w	800730a <atan+0x29a>
 80070a8:	a59b      	add	r5, pc, #620	; (adr r5, 8007318 <atan+0x2a8>)
 80070aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80070ae:	ec45 4b10 	vmov	d0, r4, r5
 80070b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b6:	4bb6      	ldr	r3, [pc, #728]	; (8007390 <atan+0x320>)
 80070b8:	429e      	cmp	r6, r3
 80070ba:	dc14      	bgt.n	80070e6 <atan+0x76>
 80070bc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80070c0:	429e      	cmp	r6, r3
 80070c2:	dc0d      	bgt.n	80070e0 <atan+0x70>
 80070c4:	a396      	add	r3, pc, #600	; (adr r3, 8007320 <atan+0x2b0>)
 80070c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ca:	ee10 0a10 	vmov	r0, s0
 80070ce:	4629      	mov	r1, r5
 80070d0:	f7f9 f8e4 	bl	800029c <__adddf3>
 80070d4:	4baf      	ldr	r3, [pc, #700]	; (8007394 <atan+0x324>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	f7f9 fd26 	bl	8000b28 <__aeabi_dcmpgt>
 80070dc:	2800      	cmp	r0, #0
 80070de:	d1e6      	bne.n	80070ae <atan+0x3e>
 80070e0:	f04f 3aff 	mov.w	sl, #4294967295
 80070e4:	e02b      	b.n	800713e <atan+0xce>
 80070e6:	f000 f963 	bl	80073b0 <fabs>
 80070ea:	4bab      	ldr	r3, [pc, #684]	; (8007398 <atan+0x328>)
 80070ec:	429e      	cmp	r6, r3
 80070ee:	ec55 4b10 	vmov	r4, r5, d0
 80070f2:	f300 80bf 	bgt.w	8007274 <atan+0x204>
 80070f6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80070fa:	429e      	cmp	r6, r3
 80070fc:	f300 80a0 	bgt.w	8007240 <atan+0x1d0>
 8007100:	ee10 2a10 	vmov	r2, s0
 8007104:	ee10 0a10 	vmov	r0, s0
 8007108:	462b      	mov	r3, r5
 800710a:	4629      	mov	r1, r5
 800710c:	f7f9 f8c6 	bl	800029c <__adddf3>
 8007110:	4ba0      	ldr	r3, [pc, #640]	; (8007394 <atan+0x324>)
 8007112:	2200      	movs	r2, #0
 8007114:	f7f9 f8c0 	bl	8000298 <__aeabi_dsub>
 8007118:	2200      	movs	r2, #0
 800711a:	4606      	mov	r6, r0
 800711c:	460f      	mov	r7, r1
 800711e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007122:	4620      	mov	r0, r4
 8007124:	4629      	mov	r1, r5
 8007126:	f7f9 f8b9 	bl	800029c <__adddf3>
 800712a:	4602      	mov	r2, r0
 800712c:	460b      	mov	r3, r1
 800712e:	4630      	mov	r0, r6
 8007130:	4639      	mov	r1, r7
 8007132:	f7f9 fb93 	bl	800085c <__aeabi_ddiv>
 8007136:	f04f 0a00 	mov.w	sl, #0
 800713a:	4604      	mov	r4, r0
 800713c:	460d      	mov	r5, r1
 800713e:	4622      	mov	r2, r4
 8007140:	462b      	mov	r3, r5
 8007142:	4620      	mov	r0, r4
 8007144:	4629      	mov	r1, r5
 8007146:	f7f9 fa5f 	bl	8000608 <__aeabi_dmul>
 800714a:	4602      	mov	r2, r0
 800714c:	460b      	mov	r3, r1
 800714e:	4680      	mov	r8, r0
 8007150:	4689      	mov	r9, r1
 8007152:	f7f9 fa59 	bl	8000608 <__aeabi_dmul>
 8007156:	a374      	add	r3, pc, #464	; (adr r3, 8007328 <atan+0x2b8>)
 8007158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715c:	4606      	mov	r6, r0
 800715e:	460f      	mov	r7, r1
 8007160:	f7f9 fa52 	bl	8000608 <__aeabi_dmul>
 8007164:	a372      	add	r3, pc, #456	; (adr r3, 8007330 <atan+0x2c0>)
 8007166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716a:	f7f9 f897 	bl	800029c <__adddf3>
 800716e:	4632      	mov	r2, r6
 8007170:	463b      	mov	r3, r7
 8007172:	f7f9 fa49 	bl	8000608 <__aeabi_dmul>
 8007176:	a370      	add	r3, pc, #448	; (adr r3, 8007338 <atan+0x2c8>)
 8007178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717c:	f7f9 f88e 	bl	800029c <__adddf3>
 8007180:	4632      	mov	r2, r6
 8007182:	463b      	mov	r3, r7
 8007184:	f7f9 fa40 	bl	8000608 <__aeabi_dmul>
 8007188:	a36d      	add	r3, pc, #436	; (adr r3, 8007340 <atan+0x2d0>)
 800718a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718e:	f7f9 f885 	bl	800029c <__adddf3>
 8007192:	4632      	mov	r2, r6
 8007194:	463b      	mov	r3, r7
 8007196:	f7f9 fa37 	bl	8000608 <__aeabi_dmul>
 800719a:	a36b      	add	r3, pc, #428	; (adr r3, 8007348 <atan+0x2d8>)
 800719c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a0:	f7f9 f87c 	bl	800029c <__adddf3>
 80071a4:	4632      	mov	r2, r6
 80071a6:	463b      	mov	r3, r7
 80071a8:	f7f9 fa2e 	bl	8000608 <__aeabi_dmul>
 80071ac:	a368      	add	r3, pc, #416	; (adr r3, 8007350 <atan+0x2e0>)
 80071ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b2:	f7f9 f873 	bl	800029c <__adddf3>
 80071b6:	4642      	mov	r2, r8
 80071b8:	464b      	mov	r3, r9
 80071ba:	f7f9 fa25 	bl	8000608 <__aeabi_dmul>
 80071be:	a366      	add	r3, pc, #408	; (adr r3, 8007358 <atan+0x2e8>)
 80071c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c4:	4680      	mov	r8, r0
 80071c6:	4689      	mov	r9, r1
 80071c8:	4630      	mov	r0, r6
 80071ca:	4639      	mov	r1, r7
 80071cc:	f7f9 fa1c 	bl	8000608 <__aeabi_dmul>
 80071d0:	a363      	add	r3, pc, #396	; (adr r3, 8007360 <atan+0x2f0>)
 80071d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d6:	f7f9 f85f 	bl	8000298 <__aeabi_dsub>
 80071da:	4632      	mov	r2, r6
 80071dc:	463b      	mov	r3, r7
 80071de:	f7f9 fa13 	bl	8000608 <__aeabi_dmul>
 80071e2:	a361      	add	r3, pc, #388	; (adr r3, 8007368 <atan+0x2f8>)
 80071e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e8:	f7f9 f856 	bl	8000298 <__aeabi_dsub>
 80071ec:	4632      	mov	r2, r6
 80071ee:	463b      	mov	r3, r7
 80071f0:	f7f9 fa0a 	bl	8000608 <__aeabi_dmul>
 80071f4:	a35e      	add	r3, pc, #376	; (adr r3, 8007370 <atan+0x300>)
 80071f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fa:	f7f9 f84d 	bl	8000298 <__aeabi_dsub>
 80071fe:	4632      	mov	r2, r6
 8007200:	463b      	mov	r3, r7
 8007202:	f7f9 fa01 	bl	8000608 <__aeabi_dmul>
 8007206:	a35c      	add	r3, pc, #368	; (adr r3, 8007378 <atan+0x308>)
 8007208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720c:	f7f9 f844 	bl	8000298 <__aeabi_dsub>
 8007210:	4632      	mov	r2, r6
 8007212:	463b      	mov	r3, r7
 8007214:	f7f9 f9f8 	bl	8000608 <__aeabi_dmul>
 8007218:	4602      	mov	r2, r0
 800721a:	460b      	mov	r3, r1
 800721c:	4640      	mov	r0, r8
 800721e:	4649      	mov	r1, r9
 8007220:	f7f9 f83c 	bl	800029c <__adddf3>
 8007224:	4622      	mov	r2, r4
 8007226:	462b      	mov	r3, r5
 8007228:	f7f9 f9ee 	bl	8000608 <__aeabi_dmul>
 800722c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007230:	4602      	mov	r2, r0
 8007232:	460b      	mov	r3, r1
 8007234:	d14b      	bne.n	80072ce <atan+0x25e>
 8007236:	4620      	mov	r0, r4
 8007238:	4629      	mov	r1, r5
 800723a:	f7f9 f82d 	bl	8000298 <__aeabi_dsub>
 800723e:	e72c      	b.n	800709a <atan+0x2a>
 8007240:	ee10 0a10 	vmov	r0, s0
 8007244:	4b53      	ldr	r3, [pc, #332]	; (8007394 <atan+0x324>)
 8007246:	2200      	movs	r2, #0
 8007248:	4629      	mov	r1, r5
 800724a:	f7f9 f825 	bl	8000298 <__aeabi_dsub>
 800724e:	4b51      	ldr	r3, [pc, #324]	; (8007394 <atan+0x324>)
 8007250:	4606      	mov	r6, r0
 8007252:	460f      	mov	r7, r1
 8007254:	2200      	movs	r2, #0
 8007256:	4620      	mov	r0, r4
 8007258:	4629      	mov	r1, r5
 800725a:	f7f9 f81f 	bl	800029c <__adddf3>
 800725e:	4602      	mov	r2, r0
 8007260:	460b      	mov	r3, r1
 8007262:	4630      	mov	r0, r6
 8007264:	4639      	mov	r1, r7
 8007266:	f7f9 faf9 	bl	800085c <__aeabi_ddiv>
 800726a:	f04f 0a01 	mov.w	sl, #1
 800726e:	4604      	mov	r4, r0
 8007270:	460d      	mov	r5, r1
 8007272:	e764      	b.n	800713e <atan+0xce>
 8007274:	4b49      	ldr	r3, [pc, #292]	; (800739c <atan+0x32c>)
 8007276:	429e      	cmp	r6, r3
 8007278:	da1d      	bge.n	80072b6 <atan+0x246>
 800727a:	ee10 0a10 	vmov	r0, s0
 800727e:	4b48      	ldr	r3, [pc, #288]	; (80073a0 <atan+0x330>)
 8007280:	2200      	movs	r2, #0
 8007282:	4629      	mov	r1, r5
 8007284:	f7f9 f808 	bl	8000298 <__aeabi_dsub>
 8007288:	4b45      	ldr	r3, [pc, #276]	; (80073a0 <atan+0x330>)
 800728a:	4606      	mov	r6, r0
 800728c:	460f      	mov	r7, r1
 800728e:	2200      	movs	r2, #0
 8007290:	4620      	mov	r0, r4
 8007292:	4629      	mov	r1, r5
 8007294:	f7f9 f9b8 	bl	8000608 <__aeabi_dmul>
 8007298:	4b3e      	ldr	r3, [pc, #248]	; (8007394 <atan+0x324>)
 800729a:	2200      	movs	r2, #0
 800729c:	f7f8 fffe 	bl	800029c <__adddf3>
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	4630      	mov	r0, r6
 80072a6:	4639      	mov	r1, r7
 80072a8:	f7f9 fad8 	bl	800085c <__aeabi_ddiv>
 80072ac:	f04f 0a02 	mov.w	sl, #2
 80072b0:	4604      	mov	r4, r0
 80072b2:	460d      	mov	r5, r1
 80072b4:	e743      	b.n	800713e <atan+0xce>
 80072b6:	462b      	mov	r3, r5
 80072b8:	ee10 2a10 	vmov	r2, s0
 80072bc:	4939      	ldr	r1, [pc, #228]	; (80073a4 <atan+0x334>)
 80072be:	2000      	movs	r0, #0
 80072c0:	f7f9 facc 	bl	800085c <__aeabi_ddiv>
 80072c4:	f04f 0a03 	mov.w	sl, #3
 80072c8:	4604      	mov	r4, r0
 80072ca:	460d      	mov	r5, r1
 80072cc:	e737      	b.n	800713e <atan+0xce>
 80072ce:	4b36      	ldr	r3, [pc, #216]	; (80073a8 <atan+0x338>)
 80072d0:	4e36      	ldr	r6, [pc, #216]	; (80073ac <atan+0x33c>)
 80072d2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80072d6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80072da:	e9da 2300 	ldrd	r2, r3, [sl]
 80072de:	f7f8 ffdb 	bl	8000298 <__aeabi_dsub>
 80072e2:	4622      	mov	r2, r4
 80072e4:	462b      	mov	r3, r5
 80072e6:	f7f8 ffd7 	bl	8000298 <__aeabi_dsub>
 80072ea:	4602      	mov	r2, r0
 80072ec:	460b      	mov	r3, r1
 80072ee:	e9d6 0100 	ldrd	r0, r1, [r6]
 80072f2:	f7f8 ffd1 	bl	8000298 <__aeabi_dsub>
 80072f6:	f1bb 0f00 	cmp.w	fp, #0
 80072fa:	4604      	mov	r4, r0
 80072fc:	460d      	mov	r5, r1
 80072fe:	f6bf aed6 	bge.w	80070ae <atan+0x3e>
 8007302:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007306:	461d      	mov	r5, r3
 8007308:	e6d1      	b.n	80070ae <atan+0x3e>
 800730a:	a51d      	add	r5, pc, #116	; (adr r5, 8007380 <atan+0x310>)
 800730c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007310:	e6cd      	b.n	80070ae <atan+0x3e>
 8007312:	bf00      	nop
 8007314:	f3af 8000 	nop.w
 8007318:	54442d18 	.word	0x54442d18
 800731c:	bff921fb 	.word	0xbff921fb
 8007320:	8800759c 	.word	0x8800759c
 8007324:	7e37e43c 	.word	0x7e37e43c
 8007328:	e322da11 	.word	0xe322da11
 800732c:	3f90ad3a 	.word	0x3f90ad3a
 8007330:	24760deb 	.word	0x24760deb
 8007334:	3fa97b4b 	.word	0x3fa97b4b
 8007338:	a0d03d51 	.word	0xa0d03d51
 800733c:	3fb10d66 	.word	0x3fb10d66
 8007340:	c54c206e 	.word	0xc54c206e
 8007344:	3fb745cd 	.word	0x3fb745cd
 8007348:	920083ff 	.word	0x920083ff
 800734c:	3fc24924 	.word	0x3fc24924
 8007350:	5555550d 	.word	0x5555550d
 8007354:	3fd55555 	.word	0x3fd55555
 8007358:	2c6a6c2f 	.word	0x2c6a6c2f
 800735c:	bfa2b444 	.word	0xbfa2b444
 8007360:	52defd9a 	.word	0x52defd9a
 8007364:	3fadde2d 	.word	0x3fadde2d
 8007368:	af749a6d 	.word	0xaf749a6d
 800736c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007370:	fe231671 	.word	0xfe231671
 8007374:	3fbc71c6 	.word	0x3fbc71c6
 8007378:	9998ebc4 	.word	0x9998ebc4
 800737c:	3fc99999 	.word	0x3fc99999
 8007380:	54442d18 	.word	0x54442d18
 8007384:	3ff921fb 	.word	0x3ff921fb
 8007388:	440fffff 	.word	0x440fffff
 800738c:	7ff00000 	.word	0x7ff00000
 8007390:	3fdbffff 	.word	0x3fdbffff
 8007394:	3ff00000 	.word	0x3ff00000
 8007398:	3ff2ffff 	.word	0x3ff2ffff
 800739c:	40038000 	.word	0x40038000
 80073a0:	3ff80000 	.word	0x3ff80000
 80073a4:	bff00000 	.word	0xbff00000
 80073a8:	08007868 	.word	0x08007868
 80073ac:	08007848 	.word	0x08007848

080073b0 <fabs>:
 80073b0:	ec51 0b10 	vmov	r0, r1, d0
 80073b4:	ee10 2a10 	vmov	r2, s0
 80073b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80073bc:	ec43 2b10 	vmov	d0, r2, r3
 80073c0:	4770      	bx	lr
	...

080073c4 <_kill>:
 80073c4:	4b02      	ldr	r3, [pc, #8]	; (80073d0 <_kill+0xc>)
 80073c6:	2258      	movs	r2, #88	; 0x58
 80073c8:	601a      	str	r2, [r3, #0]
 80073ca:	f04f 30ff 	mov.w	r0, #4294967295
 80073ce:	4770      	bx	lr
 80073d0:	20000358 	.word	0x20000358

080073d4 <_exit>:
 80073d4:	e7fe      	b.n	80073d4 <_exit>
	...

080073d8 <_init>:
 80073d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073da:	bf00      	nop
 80073dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073de:	bc08      	pop	{r3}
 80073e0:	469e      	mov	lr, r3
 80073e2:	4770      	bx	lr

080073e4 <_fini>:
 80073e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e6:	bf00      	nop
 80073e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ea:	bc08      	pop	{r3}
 80073ec:	469e      	mov	lr, r3
 80073ee:	4770      	bx	lr
