
MPU6050_Moje.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009db4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08009f58  08009f58  00019f58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a38c  0800a38c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a38c  0800a38c  0001a38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a394  0800a394  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a394  0800a394  0001a394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a398  0800a398  0001a398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a39c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  200001e0  0800a57c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  0800a57c  00020504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001577e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f08  00000000  00000000  0003598e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00038898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001070  00000000  00000000  00039a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019afb  00000000  00000000  0003aab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017dda  00000000  00000000  000545b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d4d0  00000000  00000000  0006c38d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010985d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c50  00000000  00000000  001098b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0010f500  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0010f5cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009f3c 	.word	0x08009f3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08009f3c 	.word	0x08009f3c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	0000      	movs	r0, r0
	...

08000f60 <ACS711EX_Convert_To_mA>:

#include "ACS711EX.h"
#include "adc.h"

void ACS711EX_Convert_To_mA( uint16_t * bufforTemp,float* buffor)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
	static float tempBufforADC[3];

	for ( int i =0; i <3; i ++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	e059      	b.n	8001024 <ACS711EX_Convert_To_mA+0xc4>
	{
		tempBufforADC[i] = ((float)bufforTemp[i]/4095)*3.3;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	4413      	add	r3, r2
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	ee07 3a90 	vmov	s15, r3
 8000f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f82:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001050 <ACS711EX_Convert_To_mA+0xf0>
 8000f86:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000f8a:	ee16 0a90 	vmov	r0, s13
 8000f8e:	f7ff fae3 	bl	8000558 <__aeabi_f2d>
 8000f92:	a329      	add	r3, pc, #164	; (adr r3, 8001038 <ACS711EX_Convert_To_mA+0xd8>)
 8000f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f98:	f7ff fb36 	bl	8000608 <__aeabi_dmul>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	4610      	mov	r0, r2
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f7ff fe08 	bl	8000bb8 <__aeabi_d2f>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	492a      	ldr	r1, [pc, #168]	; (8001054 <ACS711EX_Convert_To_mA+0xf4>)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	601a      	str	r2, [r3, #0]
		tempBufforADC[i]=  (73.3*(tempBufforADC[i]/3.3)-36.7);
 8000fb4:	4a27      	ldr	r2, [pc, #156]	; (8001054 <ACS711EX_Convert_To_mA+0xf4>)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff faca 	bl	8000558 <__aeabi_f2d>
 8000fc4:	a31c      	add	r3, pc, #112	; (adr r3, 8001038 <ACS711EX_Convert_To_mA+0xd8>)
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	f7ff fc47 	bl	800085c <__aeabi_ddiv>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	a31a      	add	r3, pc, #104	; (adr r3, 8001040 <ACS711EX_Convert_To_mA+0xe0>)
 8000fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fdc:	f7ff fb14 	bl	8000608 <__aeabi_dmul>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	a317      	add	r3, pc, #92	; (adr r3, 8001048 <ACS711EX_Convert_To_mA+0xe8>)
 8000fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fee:	f7ff f953 	bl	8000298 <__aeabi_dsub>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f7ff fddd 	bl	8000bb8 <__aeabi_d2f>
 8000ffe:	4602      	mov	r2, r0
 8001000:	4914      	ldr	r1, [pc, #80]	; (8001054 <ACS711EX_Convert_To_mA+0xf4>)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	440b      	add	r3, r1
 8001008:	601a      	str	r2, [r3, #0]
		buffor[i] = (float)tempBufforADC[i];
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	4413      	add	r3, r2
 8001012:	4910      	ldr	r1, [pc, #64]	; (8001054 <ACS711EX_Convert_To_mA+0xf4>)
 8001014:	68fa      	ldr	r2, [r7, #12]
 8001016:	0092      	lsls	r2, r2, #2
 8001018:	440a      	add	r2, r1
 800101a:	6812      	ldr	r2, [r2, #0]
 800101c:	601a      	str	r2, [r3, #0]
	for ( int i =0; i <3; i ++)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	3301      	adds	r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2b02      	cmp	r3, #2
 8001028:	dda2      	ble.n	8000f70 <ACS711EX_Convert_To_mA+0x10>


	}

}
 800102a:	bf00      	nop
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	f3af 8000 	nop.w
 8001038:	66666666 	.word	0x66666666
 800103c:	400a6666 	.word	0x400a6666
 8001040:	33333333 	.word	0x33333333
 8001044:	40525333 	.word	0x40525333
 8001048:	9999999a 	.word	0x9999999a
 800104c:	40425999 	.word	0x40425999
 8001050:	457ff000 	.word	0x457ff000
 8001054:	200001fc 	.word	0x200001fc

08001058 <MPU6050_Init>:

	}MPU6050_Config_TypeDef;
	  *
  */
void MPU6050_Init(I2C_HandleTypeDef* I2C,MPU6050_Config_TypeDef* mpu6050)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af04      	add	r7, sp, #16
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
	uint8_t temp = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]

	/* Check if MPU6050 is present under 0x68 slave address */
	HAL_I2C_Mem_Read(I2C, MPU6050_DEV_ADDRESS, MPU6050_WHOAMI, 1, &temp, 1, 10);
 8001066:	230a      	movs	r3, #10
 8001068:	9302      	str	r3, [sp, #8]
 800106a:	2301      	movs	r3, #1
 800106c:	9301      	str	r3, [sp, #4]
 800106e:	f107 030f 	add.w	r3, r7, #15
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2301      	movs	r3, #1
 8001076:	2275      	movs	r2, #117	; 0x75
 8001078:	21d0      	movs	r1, #208	; 0xd0
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f002 ff64 	bl	8003f48 <HAL_I2C_Mem_Read>
	if (temp == 0x68)
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	2b68      	cmp	r3, #104	; 0x68
 8001084:	d15e      	bne.n	8001144 <MPU6050_Init+0xec>
	{
		/* Restart of the device */
		HAL_I2C_Mem_Write(I2C, MPU6050_DEV_ADDRESS, MPU6050_POWER_MANAGMENT_1, 1,0x00, 1, 10);
 8001086:	230a      	movs	r3, #10
 8001088:	9302      	str	r3, [sp, #8]
 800108a:	2301      	movs	r3, #1
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	2300      	movs	r3, #0
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2301      	movs	r3, #1
 8001094:	226b      	movs	r2, #107	; 0x6b
 8001096:	21d0      	movs	r1, #208	; 0xd0
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f002 fe5b 	bl	8003d54 <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 800109e:	2064      	movs	r0, #100	; 0x64
 80010a0:	f001 f8da 	bl	8002258 <HAL_Delay>
		/* Initialization of clock and tempr sensor */
		if (mpu6050->TEMP_ON_OFF == DISABLE)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	789b      	ldrb	r3, [r3, #2]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d10b      	bne.n	80010c4 <MPU6050_Init+0x6c>
		{
			temp  |= mpu6050->CLOCK + MPU6050_TEMP_DIS;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	3308      	adds	r3, #8
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	b25a      	sxtb	r2, r3
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	b25b      	sxtb	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b25b      	sxtb	r3, r3
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	73fb      	strb	r3, [r7, #15]
 80010c2:	e002      	b.n	80010ca <MPU6050_Init+0x72>
		}
		else
		{
			temp  = mpu6050->CLOCK;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	73fb      	strb	r3, [r7, #15]
		}
		/* Restart all sensors */
		HAL_I2C_Mem_Write(I2C, MPU6050_DEV_ADDRESS, MPU6050_USER_CONTROL, 1,(uint8_t*) MPU6050_USER_RESET_ALL_SENS, 1, 1000);
 80010ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ce:	9302      	str	r3, [sp, #8]
 80010d0:	2301      	movs	r3, #1
 80010d2:	9301      	str	r3, [sp, #4]
 80010d4:	2301      	movs	r3, #1
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	226a      	movs	r2, #106	; 0x6a
 80010dc:	21d0      	movs	r1, #208	; 0xd0
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f002 fe38 	bl	8003d54 <HAL_I2C_Mem_Write>
		/* Set lowpass filter ad dpfl */
		temp = mpu6050->FILTER;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	785b      	ldrb	r3, [r3, #1]
 80010e8:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(I2C, MPU6050_DEV_ADDRESS, MPU6050_LOW_PASS_FILTER, 1,&temp, 1, 10);
 80010ea:	230a      	movs	r3, #10
 80010ec:	9302      	str	r3, [sp, #8]
 80010ee:	2301      	movs	r3, #1
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	f107 030f 	add.w	r3, r7, #15
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2301      	movs	r3, #1
 80010fa:	221a      	movs	r2, #26
 80010fc:	21d0      	movs	r1, #208	; 0xd0
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f002 fe28 	bl	8003d54 <HAL_I2C_Mem_Write>

		/* Setting range for accelerometer and gyroscope */
		temp = mpu6050->ACC_RANGE;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	78db      	ldrb	r3, [r3, #3]
 8001108:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(I2C, MPU6050_DEV_ADDRESS, MPU6050_ACC_CONFIG, 1,&temp, 1, 10);
 800110a:	230a      	movs	r3, #10
 800110c:	9302      	str	r3, [sp, #8]
 800110e:	2301      	movs	r3, #1
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	f107 030f 	add.w	r3, r7, #15
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2301      	movs	r3, #1
 800111a:	221c      	movs	r2, #28
 800111c:	21d0      	movs	r1, #208	; 0xd0
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f002 fe18 	bl	8003d54 <HAL_I2C_Mem_Write>
		temp = mpu6050->GYRO_RANGE;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	791b      	ldrb	r3, [r3, #4]
 8001128:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(I2C, MPU6050_DEV_ADDRESS, MPU6050_GYRO_CONFIG, 1,&temp, 1, 10);
 800112a:	230a      	movs	r3, #10
 800112c:	9302      	str	r3, [sp, #8]
 800112e:	2301      	movs	r3, #1
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	f107 030f 	add.w	r3, r7, #15
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2301      	movs	r3, #1
 800113a:	221b      	movs	r2, #27
 800113c:	21d0      	movs	r1, #208	; 0xd0
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f002 fe08 	bl	8003d54 <HAL_I2C_Mem_Write>

		/*
		 * TODO Configuration of Interrupts
		 */
	}
}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <MPU6050_Get_Gyro_RAW>:
  * int16_t* gyroBuff -> pointer to gyroscope data array
  * where [0] = X axis, [1] = Y axis, [2] = Z axis
  * @retval None
  */
void MPU6050_Get_Gyro_RAW(I2C_HandleTypeDef* I2C,int16_t* gyroBuff)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af04      	add	r7, sp, #16
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]

	uint8_t temp[6];
	HAL_I2C_Mem_Read(I2C, MPU6050_DEV_ADDRESS, MPU6050_GYRO_MEAS, 1, temp, 6, 10);
 8001156:	230a      	movs	r3, #10
 8001158:	9302      	str	r3, [sp, #8]
 800115a:	2306      	movs	r3, #6
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	2243      	movs	r2, #67	; 0x43
 8001168:	21d0      	movs	r1, #208	; 0xd0
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f002 feec 	bl	8003f48 <HAL_I2C_Mem_Read>

	gyroBuff[0] = (int16_t) (temp[0]<<8) | temp[1];
 8001170:	7a3b      	ldrb	r3, [r7, #8]
 8001172:	021b      	lsls	r3, r3, #8
 8001174:	b21a      	sxth	r2, r3
 8001176:	7a7b      	ldrb	r3, [r7, #9]
 8001178:	b21b      	sxth	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	b21a      	sxth	r2, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	801a      	strh	r2, [r3, #0]
	gyroBuff[1] = (int16_t) (temp[2]<<8) | temp[3];
 8001182:	7abb      	ldrb	r3, [r7, #10]
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	b219      	sxth	r1, r3
 8001188:	7afb      	ldrb	r3, [r7, #11]
 800118a:	b21a      	sxth	r2, r3
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	3302      	adds	r3, #2
 8001190:	430a      	orrs	r2, r1
 8001192:	b212      	sxth	r2, r2
 8001194:	801a      	strh	r2, [r3, #0]
	gyroBuff[2] = (int16_t) (temp[4]<<8) | temp[5];
 8001196:	7b3b      	ldrb	r3, [r7, #12]
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	b219      	sxth	r1, r3
 800119c:	7b7b      	ldrb	r3, [r7, #13]
 800119e:	b21a      	sxth	r2, r3
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	3304      	adds	r3, #4
 80011a4:	430a      	orrs	r2, r1
 80011a6:	b212      	sxth	r2, r2
 80011a8:	801a      	strh	r2, [r3, #0]

}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <MPU6050_Get_Acc_RAW>:
  * int16_t* accBuff -> pointer to acceleroscope data array
  * where [0] = X axis, [1] = Y axis, [2] = Z axis
  * @retval None
  */
void MPU6050_Get_Acc_RAW(I2C_HandleTypeDef* I2C, int16_t* accBuff)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b088      	sub	sp, #32
 80011b6:	af04      	add	r7, sp, #16
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	6039      	str	r1, [r7, #0]

	uint8_t  temp[6];
	HAL_I2C_Mem_Read(I2C, MPU6050_DEV_ADDRESS, MPU6050_ACC_MEAS, 1, temp, 6, 10);
 80011bc:	230a      	movs	r3, #10
 80011be:	9302      	str	r3, [sp, #8]
 80011c0:	2306      	movs	r3, #6
 80011c2:	9301      	str	r3, [sp, #4]
 80011c4:	f107 0308 	add.w	r3, r7, #8
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2301      	movs	r3, #1
 80011cc:	223b      	movs	r2, #59	; 0x3b
 80011ce:	21d0      	movs	r1, #208	; 0xd0
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f002 feb9 	bl	8003f48 <HAL_I2C_Mem_Read>

	accBuff[0] = (int16_t) (temp[0]<<8) | temp[1];
 80011d6:	7a3b      	ldrb	r3, [r7, #8]
 80011d8:	021b      	lsls	r3, r3, #8
 80011da:	b21a      	sxth	r2, r3
 80011dc:	7a7b      	ldrb	r3, [r7, #9]
 80011de:	b21b      	sxth	r3, r3
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	801a      	strh	r2, [r3, #0]
	accBuff[1] = (int16_t) (temp[2]<<8) | temp[3];
 80011e8:	7abb      	ldrb	r3, [r7, #10]
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	b219      	sxth	r1, r3
 80011ee:	7afb      	ldrb	r3, [r7, #11]
 80011f0:	b21a      	sxth	r2, r3
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	3302      	adds	r3, #2
 80011f6:	430a      	orrs	r2, r1
 80011f8:	b212      	sxth	r2, r2
 80011fa:	801a      	strh	r2, [r3, #0]
	accBuff[2] = (int16_t) (temp[4]<<8) | temp[5];
 80011fc:	7b3b      	ldrb	r3, [r7, #12]
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	b219      	sxth	r1, r3
 8001202:	7b7b      	ldrb	r3, [r7, #13]
 8001204:	b21a      	sxth	r2, r3
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	3304      	adds	r3, #4
 800120a:	430a      	orrs	r2, r1
 800120c:	b212      	sxth	r2, r2
 800120e:	801a      	strh	r2, [r3, #0]

}
 8001210:	bf00      	nop
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <MPU6050_Get_Acc_Value>:
	tempv = (int16_t) (temp[0]<<8) | temp[1];
	*tempr  = (tempv/340)+36.53;
}

void MPU6050_Get_Acc_Value(I2C_HandleTypeDef* I2C,MPU6050_Config_TypeDef* mpu6050,float* accvalue)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	; 0x28
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
	int16_t accBuff[3];
	//assert_param(sizeof(accvalue)==12);
	MPU6050_Get_Acc_RAW(I2C, accBuff);
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	4619      	mov	r1, r3
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f7ff ffc1 	bl	80011b2 <MPU6050_Get_Acc_RAW>


	if (mpu6050->ACC_RANGE == MPU6050_ACC_AFS_2G)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	78db      	ldrb	r3, [r3, #3]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d11c      	bne.n	8001272 <MPU6050_Get_Acc_Value+0x5a>
		for ( int i=0;i<3;i++)
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
 800123c:	e016      	b.n	800126c <MPU6050_Get_Acc_Value+0x54>
		{
			accvalue[i]  = (float)accBuff[i]/(float)16384;
 800123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	3328      	adds	r3, #40	; 0x28
 8001244:	443b      	add	r3, r7
 8001246:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800124a:	ee07 3a90 	vmov	s15, r3
 800124e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	eddf 6a39 	vldr	s13, [pc, #228]	; 8001340 <MPU6050_Get_Acc_Value+0x128>
 800125e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001262:	edc3 7a00 	vstr	s15, [r3]
		for ( int i=0;i<3;i++)
 8001266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001268:	3301      	adds	r3, #1
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
 800126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126e:	2b02      	cmp	r3, #2
 8001270:	dde5      	ble.n	800123e <MPU6050_Get_Acc_Value+0x26>
		}
	if (mpu6050->ACC_RANGE == MPU6050_ACC_AFS_4G)
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	78db      	ldrb	r3, [r3, #3]
 8001276:	2b08      	cmp	r3, #8
 8001278:	d11c      	bne.n	80012b4 <MPU6050_Get_Acc_Value+0x9c>
		for ( int i=0;i<3;i++)
 800127a:	2300      	movs	r3, #0
 800127c:	623b      	str	r3, [r7, #32]
 800127e:	e016      	b.n	80012ae <MPU6050_Get_Acc_Value+0x96>
		{
			accvalue[i]  = (float)accBuff[i]/(float)8192;
 8001280:	6a3b      	ldr	r3, [r7, #32]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	3328      	adds	r3, #40	; 0x28
 8001286:	443b      	add	r3, r7
 8001288:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800128c:	ee07 3a90 	vmov	s15, r3
 8001290:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001294:	6a3b      	ldr	r3, [r7, #32]
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	4413      	add	r3, r2
 800129c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001344 <MPU6050_Get_Acc_Value+0x12c>
 80012a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012a4:	edc3 7a00 	vstr	s15, [r3]
		for ( int i=0;i<3;i++)
 80012a8:	6a3b      	ldr	r3, [r7, #32]
 80012aa:	3301      	adds	r3, #1
 80012ac:	623b      	str	r3, [r7, #32]
 80012ae:	6a3b      	ldr	r3, [r7, #32]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	dde5      	ble.n	8001280 <MPU6050_Get_Acc_Value+0x68>
		}
	if (mpu6050->ACC_RANGE == MPU6050_ACC_AFS_8G)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	78db      	ldrb	r3, [r3, #3]
 80012b8:	2b10      	cmp	r3, #16
 80012ba:	d11c      	bne.n	80012f6 <MPU6050_Get_Acc_Value+0xde>
		for ( int i=0;i<3;i++)
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	e016      	b.n	80012f0 <MPU6050_Get_Acc_Value+0xd8>
		{
			accvalue[i]  = (float)accBuff[i]/(float)4096;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	3328      	adds	r3, #40	; 0x28
 80012c8:	443b      	add	r3, r7
 80012ca:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001348 <MPU6050_Get_Acc_Value+0x130>
 80012e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012e6:	edc3 7a00 	vstr	s15, [r3]
		for ( int i=0;i<3;i++)
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3301      	adds	r3, #1
 80012ee:	61fb      	str	r3, [r7, #28]
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	dde5      	ble.n	80012c2 <MPU6050_Get_Acc_Value+0xaa>
		}
	if (mpu6050->ACC_RANGE == MPU6050_ACC_AFS_16G)
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	78db      	ldrb	r3, [r3, #3]
 80012fa:	2b18      	cmp	r3, #24
 80012fc:	d11c      	bne.n	8001338 <MPU6050_Get_Acc_Value+0x120>
		for ( int i=0;i<3;i++)
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
 8001302:	e016      	b.n	8001332 <MPU6050_Get_Acc_Value+0x11a>
		{
			accvalue[i]  = (float)accBuff[i]/(float)2048;
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	3328      	adds	r3, #40	; 0x28
 800130a:	443b      	add	r3, r7
 800130c:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001310:	ee07 3a90 	vmov	s15, r3
 8001314:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	4413      	add	r3, r2
 8001320:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800134c <MPU6050_Get_Acc_Value+0x134>
 8001324:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001328:	edc3 7a00 	vstr	s15, [r3]
		for ( int i=0;i<3;i++)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	3301      	adds	r3, #1
 8001330:	61bb      	str	r3, [r7, #24]
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	2b02      	cmp	r3, #2
 8001336:	dde5      	ble.n	8001304 <MPU6050_Get_Acc_Value+0xec>
		}

}
 8001338:	bf00      	nop
 800133a:	3728      	adds	r7, #40	; 0x28
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	46800000 	.word	0x46800000
 8001344:	46000000 	.word	0x46000000
 8001348:	45800000 	.word	0x45800000
 800134c:	45000000 	.word	0x45000000

08001350 <MPU6050_Get_Gyro_Value>:
void MPU6050_Get_Gyro_Value(I2C_HandleTypeDef* I2C,MPU6050_Config_TypeDef* mpu6050,float* gyrovalue)
{
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b08b      	sub	sp, #44	; 0x2c
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
	int16_t gyroBuff[3];
	//assert_param(sizeof(gyrovalue)==12);
	MPU6050_Get_Gyro_RAW(I2C, gyroBuff);
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	4619      	mov	r1, r3
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f7ff fef2 	bl	800114c <MPU6050_Get_Gyro_RAW>
	if (mpu6050->GYRO_RANGE == MPU6050_GYRO_FS_250)
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	791b      	ldrb	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d11f      	bne.n	80013b0 <MPU6050_Get_Gyro_Value+0x60>
		for ( int i=0;i<3;i++)
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
 8001374:	e019      	b.n	80013aa <MPU6050_Get_Gyro_Value+0x5a>
		{
			gyrovalue[i]  = gyroBuff[i]/131;
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	3328      	adds	r3, #40	; 0x28
 800137c:	443b      	add	r3, r7
 800137e:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001382:	4a4f      	ldr	r2, [pc, #316]	; (80014c0 <MPU6050_Get_Gyro_Value+0x170>)
 8001384:	fb82 1203 	smull	r1, r2, r2, r3
 8001388:	1152      	asrs	r2, r2, #5
 800138a:	17db      	asrs	r3, r3, #31
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	b219      	sxth	r1, r3
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	4413      	add	r3, r2
 8001398:	ee07 1a90 	vmov	s15, r1
 800139c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a0:	edc3 7a00 	vstr	s15, [r3]
		for ( int i=0;i<3;i++)
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	3301      	adds	r3, #1
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	dde2      	ble.n	8001376 <MPU6050_Get_Gyro_Value+0x26>
		}
	if (mpu6050->GYRO_RANGE == MPU6050_GYRO_FS_500)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	791b      	ldrb	r3, [r3, #4]
 80013b4:	2b08      	cmp	r3, #8
 80013b6:	d122      	bne.n	80013fe <MPU6050_Get_Gyro_Value+0xae>
		for ( int i=0;i<3;i++)
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
 80013bc:	e01c      	b.n	80013f8 <MPU6050_Get_Gyro_Value+0xa8>
		{
			gyrovalue[i]  = gyroBuff[i]/65.5;
 80013be:	6a3b      	ldr	r3, [r7, #32]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	3328      	adds	r3, #40	; 0x28
 80013c4:	443b      	add	r3, r7
 80013c6:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f8b2 	bl	8000534 <__aeabi_i2d>
 80013d0:	a335      	add	r3, pc, #212	; (adr r3, 80014a8 <MPU6050_Get_Gyro_Value+0x158>)
 80013d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d6:	f7ff fa41 	bl	800085c <__aeabi_ddiv>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4610      	mov	r0, r2
 80013e0:	4619      	mov	r1, r3
 80013e2:	6a3b      	ldr	r3, [r7, #32]
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	18d4      	adds	r4, r2, r3
 80013ea:	f7ff fbe5 	bl	8000bb8 <__aeabi_d2f>
 80013ee:	4603      	mov	r3, r0
 80013f0:	6023      	str	r3, [r4, #0]
		for ( int i=0;i<3;i++)
 80013f2:	6a3b      	ldr	r3, [r7, #32]
 80013f4:	3301      	adds	r3, #1
 80013f6:	623b      	str	r3, [r7, #32]
 80013f8:	6a3b      	ldr	r3, [r7, #32]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	dddf      	ble.n	80013be <MPU6050_Get_Gyro_Value+0x6e>
		}
	if (mpu6050->GYRO_RANGE == MPU6050_GYRO_FS_1000)
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	791b      	ldrb	r3, [r3, #4]
 8001402:	2b10      	cmp	r3, #16
 8001404:	d122      	bne.n	800144c <MPU6050_Get_Gyro_Value+0xfc>
		for ( int i=0;i<3;i++)
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
 800140a:	e01c      	b.n	8001446 <MPU6050_Get_Gyro_Value+0xf6>
		{
			gyrovalue[i]  = gyroBuff[i]/32.8;
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	3328      	adds	r3, #40	; 0x28
 8001412:	443b      	add	r3, r7
 8001414:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f88b 	bl	8000534 <__aeabi_i2d>
 800141e:	a324      	add	r3, pc, #144	; (adr r3, 80014b0 <MPU6050_Get_Gyro_Value+0x160>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7ff fa1a 	bl	800085c <__aeabi_ddiv>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	18d4      	adds	r4, r2, r3
 8001438:	f7ff fbbe 	bl	8000bb8 <__aeabi_d2f>
 800143c:	4603      	mov	r3, r0
 800143e:	6023      	str	r3, [r4, #0]
		for ( int i=0;i<3;i++)
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	3301      	adds	r3, #1
 8001444:	61fb      	str	r3, [r7, #28]
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	2b02      	cmp	r3, #2
 800144a:	dddf      	ble.n	800140c <MPU6050_Get_Gyro_Value+0xbc>
		}
	if (mpu6050->GYRO_RANGE == MPU6050_GYRO_FS_2000)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	791b      	ldrb	r3, [r3, #4]
 8001450:	2b18      	cmp	r3, #24
 8001452:	d122      	bne.n	800149a <MPU6050_Get_Gyro_Value+0x14a>
		for ( int i=0;i<3;i++)
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
 8001458:	e01c      	b.n	8001494 <MPU6050_Get_Gyro_Value+0x144>
		{
			gyrovalue[i]  = gyroBuff[i]/16.4;
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	3328      	adds	r3, #40	; 0x28
 8001460:	443b      	add	r3, r7
 8001462:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f864 	bl	8000534 <__aeabi_i2d>
 800146c:	a312      	add	r3, pc, #72	; (adr r3, 80014b8 <MPU6050_Get_Gyro_Value+0x168>)
 800146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001472:	f7ff f9f3 	bl	800085c <__aeabi_ddiv>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4610      	mov	r0, r2
 800147c:	4619      	mov	r1, r3
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	18d4      	adds	r4, r2, r3
 8001486:	f7ff fb97 	bl	8000bb8 <__aeabi_d2f>
 800148a:	4603      	mov	r3, r0
 800148c:	6023      	str	r3, [r4, #0]
		for ( int i=0;i<3;i++)
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	3301      	adds	r3, #1
 8001492:	61bb      	str	r3, [r7, #24]
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	2b02      	cmp	r3, #2
 8001498:	dddf      	ble.n	800145a <MPU6050_Get_Gyro_Value+0x10a>
		}

}
 800149a:	bf00      	nop
 800149c:	372c      	adds	r7, #44	; 0x2c
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd90      	pop	{r4, r7, pc}
 80014a2:	bf00      	nop
 80014a4:	f3af 8000 	nop.w
 80014a8:	00000000 	.word	0x00000000
 80014ac:	40506000 	.word	0x40506000
 80014b0:	66666666 	.word	0x66666666
 80014b4:	40406666 	.word	0x40406666
 80014b8:	66666666 	.word	0x66666666
 80014bc:	40306666 	.word	0x40306666
 80014c0:	3e88cb3d 	.word	0x3e88cb3d

080014c4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ca:	463b      	mov	r3, r7
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014d6:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <MX_ADC1_Init+0xd0>)
 80014d8:	4a2f      	ldr	r2, [pc, #188]	; (8001598 <MX_ADC1_Init+0xd4>)
 80014da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014dc:	4b2d      	ldr	r3, [pc, #180]	; (8001594 <MX_ADC1_Init+0xd0>)
 80014de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014e4:	4b2b      	ldr	r3, [pc, #172]	; (8001594 <MX_ADC1_Init+0xd0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80014ea:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <MX_ADC1_Init+0xd0>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014f0:	4b28      	ldr	r3, [pc, #160]	; (8001594 <MX_ADC1_Init+0xd0>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014f6:	4b27      	ldr	r3, [pc, #156]	; (8001594 <MX_ADC1_Init+0xd0>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014fe:	4b25      	ldr	r3, [pc, #148]	; (8001594 <MX_ADC1_Init+0xd0>)
 8001500:	2200      	movs	r2, #0
 8001502:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001504:	4b23      	ldr	r3, [pc, #140]	; (8001594 <MX_ADC1_Init+0xd0>)
 8001506:	4a25      	ldr	r2, [pc, #148]	; (800159c <MX_ADC1_Init+0xd8>)
 8001508:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800150a:	4b22      	ldr	r3, [pc, #136]	; (8001594 <MX_ADC1_Init+0xd0>)
 800150c:	2200      	movs	r2, #0
 800150e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001510:	4b20      	ldr	r3, [pc, #128]	; (8001594 <MX_ADC1_Init+0xd0>)
 8001512:	2203      	movs	r2, #3
 8001514:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001516:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <MX_ADC1_Init+0xd0>)
 8001518:	2201      	movs	r2, #1
 800151a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800151e:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <MX_ADC1_Init+0xd0>)
 8001520:	2200      	movs	r2, #0
 8001522:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001524:	481b      	ldr	r0, [pc, #108]	; (8001594 <MX_ADC1_Init+0xd0>)
 8001526:	f000 febb 	bl	80022a0 <HAL_ADC_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001530:	f000 fb72 	bl	8001c18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001534:	2300      	movs	r3, #0
 8001536:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001538:	2301      	movs	r3, #1
 800153a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800153c:	2307      	movs	r3, #7
 800153e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001540:	463b      	mov	r3, r7
 8001542:	4619      	mov	r1, r3
 8001544:	4813      	ldr	r0, [pc, #76]	; (8001594 <MX_ADC1_Init+0xd0>)
 8001546:	f001 f917 	bl	8002778 <HAL_ADC_ConfigChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001550:	f000 fb62 	bl	8001c18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001554:	2301      	movs	r3, #1
 8001556:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001558:	2302      	movs	r3, #2
 800155a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800155c:	463b      	mov	r3, r7
 800155e:	4619      	mov	r1, r3
 8001560:	480c      	ldr	r0, [pc, #48]	; (8001594 <MX_ADC1_Init+0xd0>)
 8001562:	f001 f909 	bl	8002778 <HAL_ADC_ConfigChannel>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800156c:	f000 fb54 	bl	8001c18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001570:	2304      	movs	r3, #4
 8001572:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001574:	2303      	movs	r3, #3
 8001576:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001578:	463b      	mov	r3, r7
 800157a:	4619      	mov	r1, r3
 800157c:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_ADC1_Init+0xd0>)
 800157e:	f001 f8fb 	bl	8002778 <HAL_ADC_ConfigChannel>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001588:	f000 fb46 	bl	8001c18 <Error_Handler>



  /* USER CODE END ADC1_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000208 	.word	0x20000208
 8001598:	40012000 	.word	0x40012000
 800159c:	0f000001 	.word	0x0f000001

080015a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	; 0x28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a32      	ldr	r2, [pc, #200]	; (8001688 <HAL_ADC_MspInit+0xe8>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d15e      	bne.n	8001680 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	4b31      	ldr	r3, [pc, #196]	; (800168c <HAL_ADC_MspInit+0xec>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	4a30      	ldr	r2, [pc, #192]	; (800168c <HAL_ADC_MspInit+0xec>)
 80015cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d0:	6453      	str	r3, [r2, #68]	; 0x44
 80015d2:	4b2e      	ldr	r3, [pc, #184]	; (800168c <HAL_ADC_MspInit+0xec>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	4b2a      	ldr	r3, [pc, #168]	; (800168c <HAL_ADC_MspInit+0xec>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a29      	ldr	r2, [pc, #164]	; (800168c <HAL_ADC_MspInit+0xec>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b27      	ldr	r3, [pc, #156]	; (800168c <HAL_ADC_MspInit+0xec>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80015fa:	2313      	movs	r3, #19
 80015fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015fe:	2303      	movs	r3, #3
 8001600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	4820      	ldr	r0, [pc, #128]	; (8001690 <HAL_ADC_MspInit+0xf0>)
 800160e:	f002 f881 	bl	8003714 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001612:	4b20      	ldr	r3, [pc, #128]	; (8001694 <HAL_ADC_MspInit+0xf4>)
 8001614:	4a20      	ldr	r2, [pc, #128]	; (8001698 <HAL_ADC_MspInit+0xf8>)
 8001616:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001618:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <HAL_ADC_MspInit+0xf4>)
 800161a:	2200      	movs	r2, #0
 800161c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800161e:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <HAL_ADC_MspInit+0xf4>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001624:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <HAL_ADC_MspInit+0xf4>)
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800162a:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <HAL_ADC_MspInit+0xf4>)
 800162c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001630:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001632:	4b18      	ldr	r3, [pc, #96]	; (8001694 <HAL_ADC_MspInit+0xf4>)
 8001634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001638:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800163a:	4b16      	ldr	r3, [pc, #88]	; (8001694 <HAL_ADC_MspInit+0xf4>)
 800163c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001640:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001642:	4b14      	ldr	r3, [pc, #80]	; (8001694 <HAL_ADC_MspInit+0xf4>)
 8001644:	2200      	movs	r2, #0
 8001646:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_ADC_MspInit+0xf4>)
 800164a:	2200      	movs	r2, #0
 800164c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <HAL_ADC_MspInit+0xf4>)
 8001650:	2200      	movs	r2, #0
 8001652:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001654:	480f      	ldr	r0, [pc, #60]	; (8001694 <HAL_ADC_MspInit+0xf4>)
 8001656:	f001 fc5b 	bl	8002f10 <HAL_DMA_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001660:	f000 fada 	bl	8001c18 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a0b      	ldr	r2, [pc, #44]	; (8001694 <HAL_ADC_MspInit+0xf4>)
 8001668:	639a      	str	r2, [r3, #56]	; 0x38
 800166a:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <HAL_ADC_MspInit+0xf4>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001670:	2200      	movs	r2, #0
 8001672:	2100      	movs	r1, #0
 8001674:	2012      	movs	r0, #18
 8001676:	f001 fc14 	bl	8002ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800167a:	2012      	movs	r0, #18
 800167c:	f001 fc2d 	bl	8002eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001680:	bf00      	nop
 8001682:	3728      	adds	r7, #40	; 0x28
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40012000 	.word	0x40012000
 800168c:	40023800 	.word	0x40023800
 8001690:	40020000 	.word	0x40020000
 8001694:	20000250 	.word	0x20000250
 8001698:	40026410 	.word	0x40026410

0800169c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <MX_DMA_Init+0x78>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a1a      	ldr	r2, [pc, #104]	; (8001714 <MX_DMA_Init+0x78>)
 80016ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b18      	ldr	r3, [pc, #96]	; (8001714 <MX_DMA_Init+0x78>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	603b      	str	r3, [r7, #0]
 80016c2:	4b14      	ldr	r3, [pc, #80]	; (8001714 <MX_DMA_Init+0x78>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a13      	ldr	r2, [pc, #76]	; (8001714 <MX_DMA_Init+0x78>)
 80016c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <MX_DMA_Init+0x78>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	2100      	movs	r1, #0
 80016de:	2010      	movs	r0, #16
 80016e0:	f001 fbdf 	bl	8002ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80016e4:	2010      	movs	r0, #16
 80016e6:	f001 fbf8 	bl	8002eda <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2100      	movs	r1, #0
 80016ee:	2011      	movs	r0, #17
 80016f0:	f001 fbd7 	bl	8002ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80016f4:	2011      	movs	r0, #17
 80016f6:	f001 fbf0 	bl	8002eda <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	2038      	movs	r0, #56	; 0x38
 8001700:	f001 fbcf 	bl	8002ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001704:	2038      	movs	r0, #56	; 0x38
 8001706:	f001 fbe8 	bl	8002eda <HAL_NVIC_EnableIRQ>

}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800

08001718 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	; 0x28
 800171c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	4b38      	ldr	r3, [pc, #224]	; (8001814 <MX_GPIO_Init+0xfc>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a37      	ldr	r2, [pc, #220]	; (8001814 <MX_GPIO_Init+0xfc>)
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b35      	ldr	r3, [pc, #212]	; (8001814 <MX_GPIO_Init+0xfc>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b31      	ldr	r3, [pc, #196]	; (8001814 <MX_GPIO_Init+0xfc>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a30      	ldr	r2, [pc, #192]	; (8001814 <MX_GPIO_Init+0xfc>)
 8001754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b2e      	ldr	r3, [pc, #184]	; (8001814 <MX_GPIO_Init+0xfc>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	4b2a      	ldr	r3, [pc, #168]	; (8001814 <MX_GPIO_Init+0xfc>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a29      	ldr	r2, [pc, #164]	; (8001814 <MX_GPIO_Init+0xfc>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b27      	ldr	r3, [pc, #156]	; (8001814 <MX_GPIO_Init+0xfc>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	4b23      	ldr	r3, [pc, #140]	; (8001814 <MX_GPIO_Init+0xfc>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a22      	ldr	r2, [pc, #136]	; (8001814 <MX_GPIO_Init+0xfc>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b20      	ldr	r3, [pc, #128]	; (8001814 <MX_GPIO_Init+0xfc>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	2120      	movs	r1, #32
 80017a2:	481d      	ldr	r0, [pc, #116]	; (8001818 <MX_GPIO_Init+0x100>)
 80017a4:	f002 f93a 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017ae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	4619      	mov	r1, r3
 80017be:	4817      	ldr	r0, [pc, #92]	; (800181c <MX_GPIO_Init+0x104>)
 80017c0:	f001 ffa8 	bl	8003714 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU6050_Interrupt_Pin;
 80017c4:	2302      	movs	r3, #2
 80017c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MPU6050_Interrupt_GPIO_Port, &GPIO_InitStruct);
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	4619      	mov	r1, r3
 80017d8:	4810      	ldr	r0, [pc, #64]	; (800181c <MX_GPIO_Init+0x104>)
 80017da:	f001 ff9b 	bl	8003714 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017de:	2320      	movs	r3, #32
 80017e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e2:	2301      	movs	r3, #1
 80017e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4619      	mov	r1, r3
 80017f4:	4808      	ldr	r0, [pc, #32]	; (8001818 <MX_GPIO_Init+0x100>)
 80017f6:	f001 ff8d 	bl	8003714 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2100      	movs	r1, #0
 80017fe:	2007      	movs	r0, #7
 8001800:	f001 fb4f 	bl	8002ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001804:	2007      	movs	r0, #7
 8001806:	f001 fb68 	bl	8002eda <HAL_NVIC_EnableIRQ>

}
 800180a:	bf00      	nop
 800180c:	3728      	adds	r7, #40	; 0x28
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	40020000 	.word	0x40020000
 800181c:	40020800 	.word	0x40020800

08001820 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <MX_I2C1_Init+0x50>)
 8001826:	4a13      	ldr	r2, [pc, #76]	; (8001874 <MX_I2C1_Init+0x54>)
 8001828:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <MX_I2C1_Init+0x50>)
 800182c:	4a12      	ldr	r2, [pc, #72]	; (8001878 <MX_I2C1_Init+0x58>)
 800182e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001830:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <MX_I2C1_Init+0x50>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001836:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <MX_I2C1_Init+0x50>)
 8001838:	2200      	movs	r2, #0
 800183a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <MX_I2C1_Init+0x50>)
 800183e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001842:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001844:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <MX_I2C1_Init+0x50>)
 8001846:	2200      	movs	r2, #0
 8001848:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <MX_I2C1_Init+0x50>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001850:	4b07      	ldr	r3, [pc, #28]	; (8001870 <MX_I2C1_Init+0x50>)
 8001852:	2200      	movs	r2, #0
 8001854:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <MX_I2C1_Init+0x50>)
 8001858:	2200      	movs	r2, #0
 800185a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800185c:	4804      	ldr	r0, [pc, #16]	; (8001870 <MX_I2C1_Init+0x50>)
 800185e:	f002 f935 	bl	8003acc <HAL_I2C_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001868:	f000 f9d6 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	200002b0 	.word	0x200002b0
 8001874:	40005400 	.word	0x40005400
 8001878:	00061a80 	.word	0x00061a80

0800187c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08a      	sub	sp, #40	; 0x28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a19      	ldr	r2, [pc, #100]	; (8001900 <HAL_I2C_MspInit+0x84>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d12c      	bne.n	80018f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <HAL_I2C_MspInit+0x88>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a17      	ldr	r2, [pc, #92]	; (8001904 <HAL_I2C_MspInit+0x88>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <HAL_I2C_MspInit+0x88>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c0:	2312      	movs	r3, #18
 80018c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018c4:	2301      	movs	r3, #1
 80018c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c8:	2303      	movs	r3, #3
 80018ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018cc:	2304      	movs	r3, #4
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	4619      	mov	r1, r3
 80018d6:	480c      	ldr	r0, [pc, #48]	; (8001908 <HAL_I2C_MspInit+0x8c>)
 80018d8:	f001 ff1c 	bl	8003714 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <HAL_I2C_MspInit+0x88>)
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	4a07      	ldr	r2, [pc, #28]	; (8001904 <HAL_I2C_MspInit+0x88>)
 80018e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018ea:	6413      	str	r3, [r2, #64]	; 0x40
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_I2C_MspInit+0x88>)
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018f8:	bf00      	nop
 80018fa:	3728      	adds	r7, #40	; 0x28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40005400 	.word	0x40005400
 8001904:	40023800 	.word	0x40023800
 8001908:	40020400 	.word	0x40020400

0800190c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800190c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001910:	b0ab      	sub	sp, #172	; 0xac
 8001912:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
	MPU6050_Config_TypeDef mpu6050;volatile int SAMPLE = 0 ;
 8001914:	2300      	movs	r3, #0
 8001916:	657b      	str	r3, [r7, #84]	; 0x54
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001918:	f000 fc2c 	bl	8002174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800191c:	f000 f8d0 	bl	8001ac0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  mpu6050.ACC_RANGE = MPU6050_ACC_AFS_2G;
 8001920:	2300      	movs	r3, #0
 8001922:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  mpu6050.CLOCK = MPU6050_CLOCK_SOURCE_0;
 8001926:	2300      	movs	r3, #0
 8001928:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
  mpu6050.FILTER = MPU6050_LOW_PASS_FILTER_0;
 800192c:	2300      	movs	r3, #0
 800192e:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
  mpu6050.GYRO_RANGE = MPU6050_GYRO_FS_500;
 8001932:	2308      	movs	r3, #8
 8001934:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  mpu6050.TEMP_ON_OFF = ENABLE;
 8001938:	2301      	movs	r3, #1
 800193a:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800193e:	f7ff feeb 	bl	8001718 <MX_GPIO_Init>
  MX_DMA_Init();
 8001942:	f7ff feab 	bl	800169c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001946:	f000 fb0d 	bl	8001f64 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800194a:	f7ff ff69 	bl	8001820 <MX_I2C1_Init>
  MX_TIM3_Init();
 800194e:	f000 fa51 	bl	8001df4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001952:	f7ff fdb7 	bl	80014c4 <MX_ADC1_Init>
  MX_TIM10_Init();
 8001956:	f000 fa9b 	bl	8001e90 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(15);
 800195a:	200f      	movs	r0, #15
 800195c:	f000 fc7c 	bl	8002258 <HAL_Delay>
  MPU6050_Init(&hi2c1, &mpu6050);
 8001960:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001964:	4619      	mov	r1, r3
 8001966:	484d      	ldr	r0, [pc, #308]	; (8001a9c <main+0x190>)
 8001968:	f7ff fb76 	bl	8001058 <MPU6050_Init>

  HAL_UART_Receive_DMA(&huart2, (uint8_t*)bufforStartStop, 1);
 800196c:	2201      	movs	r2, #1
 800196e:	494c      	ldr	r1, [pc, #304]	; (8001aa0 <main+0x194>)
 8001970:	484c      	ldr	r0, [pc, #304]	; (8001aa4 <main+0x198>)
 8001972:	f004 fa60 	bl	8005e36 <HAL_UART_Receive_DMA>

  //HAL_TIM_Base_Start_IT(&htim3);

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)bufforCalib, 3);
 8001976:	2203      	movs	r2, #3
 8001978:	494b      	ldr	r1, [pc, #300]	; (8001aa8 <main+0x19c>)
 800197a:	484c      	ldr	r0, [pc, #304]	; (8001aac <main+0x1a0>)
 800197c:	f000 fde4 	bl	8002548 <HAL_ADC_Start_DMA>
  HAL_Delay(1);
 8001980:	2001      	movs	r0, #1
 8001982:	f000 fc69 	bl	8002258 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim10);
 8001986:	484a      	ldr	r0, [pc, #296]	; (8001ab0 <main+0x1a4>)
 8001988:	f003 fd48 	bl	800541c <HAL_TIM_Base_Start_IT>
  {




    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800198c:	2120      	movs	r1, #32
 800198e:	4849      	ldr	r0, [pc, #292]	; (8001ab4 <main+0x1a8>)
 8001990:	f002 f85d 	bl	8003a4e <HAL_GPIO_TogglePin>
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)bufforADC, 3);
 8001994:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001998:	2203      	movs	r2, #3
 800199a:	4619      	mov	r1, r3
 800199c:	4843      	ldr	r0, [pc, #268]	; (8001aac <main+0x1a0>)
 800199e:	f000 fdd3 	bl	8002548 <HAL_ADC_Start_DMA>
    SAMPLE +=1;
 80019a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019a4:	3301      	adds	r3, #1
 80019a6:	657b      	str	r3, [r7, #84]	; 0x54
    MPU6050_Get_Acc_Value(&hi2c1,&mpu6050,accBuffor);
 80019a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80019ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019b0:	4619      	mov	r1, r3
 80019b2:	483a      	ldr	r0, [pc, #232]	; (8001a9c <main+0x190>)
 80019b4:	f7ff fc30 	bl	8001218 <MPU6050_Get_Acc_Value>
	MPU6050_Get_Gyro_Value(&hi2c1,&mpu6050,gyroBuffor);
 80019b8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80019bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019c0:	4619      	mov	r1, r3
 80019c2:	4836      	ldr	r0, [pc, #216]	; (8001a9c <main+0x190>)
 80019c4:	f7ff fcc4 	bl	8001350 <MPU6050_Get_Gyro_Value>


	ACS711EX_Convert_To_mA(bufforADC, bufforADCOUput);
 80019c8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019d0:	4611      	mov	r1, r2
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fac4 	bl	8000f60 <ACS711EX_Convert_To_mA>
//	HAL_UART_Transmit(&huart2, (uint8_t*)"S", sizeof("S"), 1);
//	HAL_UART_Transmit(&huart2, (uint8_t*)&DataToSend,sizeof(DataToSend),1000);
//	HAL_UART_Transmit(&huart2, (uint8_t*)"E", sizeof("E"), 1);


	snprintf(buffor,100,"%d;%0.3f;%0.3f;%0.3f;%0.3f;%0.3f;%0.3f;%0.3f;%0.3f;%0.3f\n",SAMPLE,accBuffor[0],accBuffor[1],accBuffor[2],gyroBuffor[0],gyroBuffor[1],gyroBuffor[2],bufforADCOUput[0],bufforADCOUput[1],bufforADCOUput[2]);
 80019d8:	6d7e      	ldr	r6, [r7, #84]	; 0x54
 80019da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fdbb 	bl	8000558 <__aeabi_f2d>
 80019e2:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80019e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fdb5 	bl	8000558 <__aeabi_f2d>
 80019ee:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80019f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fdaf 	bl	8000558 <__aeabi_f2d>
 80019fa:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80019fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fda9 	bl	8000558 <__aeabi_f2d>
 8001a06:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fda3 	bl	8000558 <__aeabi_f2d>
 8001a12:	e9c7 0100 	strd	r0, r1, [r7]
 8001a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe fd9d 	bl	8000558 <__aeabi_f2d>
 8001a1e:	4682      	mov	sl, r0
 8001a20:	468b      	mov	fp, r1
 8001a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe fd97 	bl	8000558 <__aeabi_f2d>
 8001a2a:	4680      	mov	r8, r0
 8001a2c:	4689      	mov	r9, r1
 8001a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fd91 	bl	8000558 <__aeabi_f2d>
 8001a36:	4604      	mov	r4, r0
 8001a38:	460d      	mov	r5, r1
 8001a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fd8b 	bl	8000558 <__aeabi_f2d>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8001a4a:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8001a4e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8001a52:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8001a56:	ed97 7b00 	vldr	d7, [r7]
 8001a5a:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001a5e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001a62:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001a66:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a6a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001a6e:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a72:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001a76:	ed97 7b08 	vldr	d7, [r7, #32]
 8001a7a:	ed8d 7b00 	vstr	d7, [sp]
 8001a7e:	4633      	mov	r3, r6
 8001a80:	4a0d      	ldr	r2, [pc, #52]	; (8001ab8 <main+0x1ac>)
 8001a82:	2164      	movs	r1, #100	; 0x64
 8001a84:	480d      	ldr	r0, [pc, #52]	; (8001abc <main+0x1b0>)
 8001a86:	f005 ff8b 	bl	80079a0 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffor	,sizeof(buffor),10000);
 8001a8a:	f242 7310 	movw	r3, #10000	; 0x2710
 8001a8e:	2246      	movs	r2, #70	; 0x46
 8001a90:	490a      	ldr	r1, [pc, #40]	; (8001abc <main+0x1b0>)
 8001a92:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <main+0x198>)
 8001a94:	f004 f93d 	bl	8005d12 <HAL_UART_Transmit>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001a98:	e778      	b.n	800198c <main+0x80>
 8001a9a:	bf00      	nop
 8001a9c:	200002b0 	.word	0x200002b0
 8001aa0:	20000354 	.word	0x20000354
 8001aa4:	200003ec 	.word	0x200003ec
 8001aa8:	20000304 	.word	0x20000304
 8001aac:	20000208 	.word	0x20000208
 8001ab0:	200003a4 	.word	0x200003a4
 8001ab4:	40020000 	.word	0x40020000
 8001ab8:	08009f58 	.word	0x08009f58
 8001abc:	2000030c 	.word	0x2000030c

08001ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b094      	sub	sp, #80	; 0x50
 8001ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ac6:	f107 0320 	add.w	r3, r7, #32
 8001aca:	2230      	movs	r2, #48	; 0x30
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f005 faf4 	bl	80070bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <SystemClock_Config+0xcc>)
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	4a27      	ldr	r2, [pc, #156]	; (8001b8c <SystemClock_Config+0xcc>)
 8001aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af2:	6413      	str	r3, [r2, #64]	; 0x40
 8001af4:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <SystemClock_Config+0xcc>)
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b00:	2300      	movs	r3, #0
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	4b22      	ldr	r3, [pc, #136]	; (8001b90 <SystemClock_Config+0xd0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a21      	ldr	r2, [pc, #132]	; (8001b90 <SystemClock_Config+0xd0>)
 8001b0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	4b1f      	ldr	r3, [pc, #124]	; (8001b90 <SystemClock_Config+0xd0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001b20:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b26:	2302      	movs	r3, #2
 8001b28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b30:	2308      	movs	r3, #8
 8001b32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001b34:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001b38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b3e:	2304      	movs	r3, #4
 8001b40:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b42:	f107 0320 	add.w	r3, r7, #32
 8001b46:	4618      	mov	r0, r3
 8001b48:	f002 ff80 	bl	8004a4c <HAL_RCC_OscConfig>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001b52:	f000 f861 	bl	8001c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b56:	230f      	movs	r3, #15
 8001b58:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b6c:	f107 030c 	add.w	r3, r7, #12
 8001b70:	2103      	movs	r1, #3
 8001b72:	4618      	mov	r0, r3
 8001b74:	f003 f9e2 	bl	8004f3c <HAL_RCC_ClockConfig>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b7e:	f000 f84b 	bl	8001c18 <Error_Handler>
  }
}
 8001b82:	bf00      	nop
 8001b84:	3750      	adds	r7, #80	; 0x50
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40007000 	.word	0x40007000

08001b94 <HAL_UART_TxCpltCallback>:
//
//			//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	;
//}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]

	//cmplt = 0;
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
	memset(buffor,0,sizeof(buffor));
 8001b9c:	2246      	movs	r2, #70	; 0x46
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4804      	ldr	r0, [pc, #16]	; (8001bb4 <HAL_UART_TxCpltCallback+0x20>)
 8001ba2:	f005 fa8b 	bl	80070bc <memset>
    cmplt = 0;
 8001ba6:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <HAL_UART_TxCpltCallback+0x24>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	2000030c 	.word	0x2000030c
 8001bb8:	20000000 	.word	0x20000000

08001bbc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if (huart==&huart2)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a11      	ldr	r2, [pc, #68]	; (8001c0c <HAL_UART_RxCpltCallback+0x50>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d11a      	bne.n	8001c02 <HAL_UART_RxCpltCallback+0x46>
  {
    if (huart->Instance->DR == 's')
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b73      	cmp	r3, #115	; 0x73
 8001bd4:	d108      	bne.n	8001be8 <HAL_UART_RxCpltCallback+0x2c>
    {
    	HAL_TIM_Base_Start_IT(&htim3);
 8001bd6:	480e      	ldr	r0, [pc, #56]	; (8001c10 <HAL_UART_RxCpltCallback+0x54>)
 8001bd8:	f003 fc20 	bl	800541c <HAL_TIM_Base_Start_IT>
      HAL_UART_Receive_DMA(&huart2, (uint8_t*)bufforStartStop, 1);
 8001bdc:	2201      	movs	r2, #1
 8001bde:	490d      	ldr	r1, [pc, #52]	; (8001c14 <HAL_UART_RxCpltCallback+0x58>)
 8001be0:	480a      	ldr	r0, [pc, #40]	; (8001c0c <HAL_UART_RxCpltCallback+0x50>)
 8001be2:	f004 f928 	bl	8005e36 <HAL_UART_Receive_DMA>
    {
    	HAL_TIM_Base_Stop_IT(&htim3);
      HAL_UART_Receive_DMA(&huart2, (uint8_t*)bufforStartStop, 1);
    }
  }
}
 8001be6:	e00c      	b.n	8001c02 <HAL_UART_RxCpltCallback+0x46>
    else if (huart->Instance->DR == 'e')
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b65      	cmp	r3, #101	; 0x65
 8001bf0:	d107      	bne.n	8001c02 <HAL_UART_RxCpltCallback+0x46>
    	HAL_TIM_Base_Stop_IT(&htim3);
 8001bf2:	4807      	ldr	r0, [pc, #28]	; (8001c10 <HAL_UART_RxCpltCallback+0x54>)
 8001bf4:	f003 fc74 	bl	80054e0 <HAL_TIM_Base_Stop_IT>
      HAL_UART_Receive_DMA(&huart2, (uint8_t*)bufforStartStop, 1);
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	4906      	ldr	r1, [pc, #24]	; (8001c14 <HAL_UART_RxCpltCallback+0x58>)
 8001bfc:	4803      	ldr	r0, [pc, #12]	; (8001c0c <HAL_UART_RxCpltCallback+0x50>)
 8001bfe:	f004 f91a 	bl	8005e36 <HAL_UART_Receive_DMA>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200003ec 	.word	0x200003ec
 8001c10:	2000035c 	.word	0x2000035c
 8001c14:	20000354 	.word	0x20000354

08001c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c1c:	b672      	cpsid	i
}
 8001c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c20:	e7fe      	b.n	8001c20 <Error_Handler+0x8>
	...

08001c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <HAL_MspInit+0x4c>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	4a0f      	ldr	r2, [pc, #60]	; (8001c70 <HAL_MspInit+0x4c>)
 8001c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c38:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <HAL_MspInit+0x4c>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	603b      	str	r3, [r7, #0]
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_MspInit+0x4c>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	4a08      	ldr	r2, [pc, #32]	; (8001c70 <HAL_MspInit+0x4c>)
 8001c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c54:	6413      	str	r3, [r2, #64]	; 0x40
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_MspInit+0x4c>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c62:	2007      	movs	r0, #7
 8001c64:	f001 f912 	bl	8002e8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40023800 	.word	0x40023800

08001c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <NMI_Handler+0x4>

08001c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c7e:	e7fe      	b.n	8001c7e <HardFault_Handler+0x4>

08001c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c84:	e7fe      	b.n	8001c84 <MemManage_Handler+0x4>

08001c86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c8a:	e7fe      	b.n	8001c8a <BusFault_Handler+0x4>

08001c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c90:	e7fe      	b.n	8001c90 <UsageFault_Handler+0x4>

08001c92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cc0:	f000 faaa 	bl	8002218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MPU6050_Interrupt_Pin);
 8001ccc:	2002      	movs	r0, #2
 8001cce:	f001 fed9 	bl	8003a84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001cdc:	4802      	ldr	r0, [pc, #8]	; (8001ce8 <DMA1_Stream5_IRQHandler+0x10>)
 8001cde:	f001 faaf 	bl	8003240 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000490 	.word	0x20000490

08001cec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001cf0:	4802      	ldr	r0, [pc, #8]	; (8001cfc <DMA1_Stream6_IRQHandler+0x10>)
 8001cf2:	f001 faa5 	bl	8003240 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000430 	.word	0x20000430

08001d00 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d04:	4802      	ldr	r0, [pc, #8]	; (8001d10 <ADC_IRQHandler+0x10>)
 8001d06:	f000 fb0e 	bl	8002326 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000208 	.word	0x20000208

08001d14 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001d18:	4802      	ldr	r0, [pc, #8]	; (8001d24 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001d1a:	f003 fc10 	bl	800553e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200003a4 	.word	0x200003a4

08001d28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d2c:	4802      	ldr	r0, [pc, #8]	; (8001d38 <TIM3_IRQHandler+0x10>)
 8001d2e:	f003 fc06 	bl	800553e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	2000035c 	.word	0x2000035c

08001d3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d40:	4802      	ldr	r0, [pc, #8]	; (8001d4c <USART2_IRQHandler+0x10>)
 8001d42:	f004 f8a9 	bl	8005e98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200003ec 	.word	0x200003ec

08001d50 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d54:	4802      	ldr	r0, [pc, #8]	; (8001d60 <DMA2_Stream0_IRQHandler+0x10>)
 8001d56:	f001 fa73 	bl	8003240 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000250 	.word	0x20000250

08001d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d6c:	4a14      	ldr	r2, [pc, #80]	; (8001dc0 <_sbrk+0x5c>)
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <_sbrk+0x60>)
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d78:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <_sbrk+0x64>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d102      	bne.n	8001d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d80:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <_sbrk+0x64>)
 8001d82:	4a12      	ldr	r2, [pc, #72]	; (8001dcc <_sbrk+0x68>)
 8001d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d86:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <_sbrk+0x64>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d207      	bcs.n	8001da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d94:	f005 f968 	bl	8007068 <__errno>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	220c      	movs	r2, #12
 8001d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001da2:	e009      	b.n	8001db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <_sbrk+0x64>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001daa:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <_sbrk+0x64>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	4a05      	ldr	r2, [pc, #20]	; (8001dc8 <_sbrk+0x64>)
 8001db4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001db6:	68fb      	ldr	r3, [r7, #12]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20020000 	.word	0x20020000
 8001dc4:	00000400 	.word	0x00000400
 8001dc8:	20000358 	.word	0x20000358
 8001dcc:	20000508 	.word	0x20000508

08001dd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <SystemInit+0x20>)
 8001dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dda:	4a05      	ldr	r2, [pc, #20]	; (8001df0 <SystemInit+0x20>)
 8001ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dfa:	f107 0308 	add.w	r3, r7, #8
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e08:	463b      	mov	r3, r7
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e10:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <MX_TIM3_Init+0x94>)
 8001e12:	4a1e      	ldr	r2, [pc, #120]	; (8001e8c <MX_TIM3_Init+0x98>)
 8001e14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8001e16:	4b1c      	ldr	r3, [pc, #112]	; (8001e88 <MX_TIM3_Init+0x94>)
 8001e18:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1e:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <MX_TIM3_Init+0x94>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20-1;
 8001e24:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <MX_TIM3_Init+0x94>)
 8001e26:	2213      	movs	r2, #19
 8001e28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2a:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <MX_TIM3_Init+0x94>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e30:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <MX_TIM3_Init+0x94>)
 8001e32:	2280      	movs	r2, #128	; 0x80
 8001e34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e36:	4814      	ldr	r0, [pc, #80]	; (8001e88 <MX_TIM3_Init+0x94>)
 8001e38:	f003 faa0 	bl	800537c <HAL_TIM_Base_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001e42:	f7ff fee9 	bl	8001c18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e4c:	f107 0308 	add.w	r3, r7, #8
 8001e50:	4619      	mov	r1, r3
 8001e52:	480d      	ldr	r0, [pc, #52]	; (8001e88 <MX_TIM3_Init+0x94>)
 8001e54:	f003 fc7b 	bl	800574e <HAL_TIM_ConfigClockSource>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001e5e:	f7ff fedb 	bl	8001c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e62:	2320      	movs	r3, #32
 8001e64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e6a:	463b      	mov	r3, r7
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4806      	ldr	r0, [pc, #24]	; (8001e88 <MX_TIM3_Init+0x94>)
 8001e70:	f003 fe80 	bl	8005b74 <HAL_TIMEx_MasterConfigSynchronization>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001e7a:	f7ff fecd 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e7e:	bf00      	nop
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	2000035c 	.word	0x2000035c
 8001e8c:	40000400 	.word	0x40000400

08001e90 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001e94:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <MX_TIM10_Init+0x40>)
 8001e96:	4a0f      	ldr	r2, [pc, #60]	; (8001ed4 <MX_TIM10_Init+0x44>)
 8001e98:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 20-1;
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <MX_TIM10_Init+0x40>)
 8001e9c:	2213      	movs	r2, #19
 8001e9e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <MX_TIM10_Init+0x40>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <MX_TIM10_Init+0x40>)
 8001ea8:	f242 720f 	movw	r2, #9999	; 0x270f
 8001eac:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <MX_TIM10_Init+0x40>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <MX_TIM10_Init+0x40>)
 8001eb6:	2280      	movs	r2, #128	; 0x80
 8001eb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001eba:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <MX_TIM10_Init+0x40>)
 8001ebc:	f003 fa5e 	bl	800537c <HAL_TIM_Base_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001ec6:	f7ff fea7 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	200003a4 	.word	0x200003a4
 8001ed4:	40014400 	.word	0x40014400

08001ed8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a1c      	ldr	r2, [pc, #112]	; (8001f58 <HAL_TIM_Base_MspInit+0x80>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d116      	bne.n	8001f18 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <HAL_TIM_Base_MspInit+0x84>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	4a1a      	ldr	r2, [pc, #104]	; (8001f5c <HAL_TIM_Base_MspInit+0x84>)
 8001ef4:	f043 0302 	orr.w	r3, r3, #2
 8001ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8001efa:	4b18      	ldr	r3, [pc, #96]	; (8001f5c <HAL_TIM_Base_MspInit+0x84>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2100      	movs	r1, #0
 8001f0a:	201d      	movs	r0, #29
 8001f0c:	f000 ffc9 	bl	8002ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f10:	201d      	movs	r0, #29
 8001f12:	f000 ffe2 	bl	8002eda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001f16:	e01a      	b.n	8001f4e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM10)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a10      	ldr	r2, [pc, #64]	; (8001f60 <HAL_TIM_Base_MspInit+0x88>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d115      	bne.n	8001f4e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <HAL_TIM_Base_MspInit+0x84>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	4a0c      	ldr	r2, [pc, #48]	; (8001f5c <HAL_TIM_Base_MspInit+0x84>)
 8001f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f30:	6453      	str	r3, [r2, #68]	; 0x44
 8001f32:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <HAL_TIM_Base_MspInit+0x84>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2100      	movs	r1, #0
 8001f42:	2019      	movs	r0, #25
 8001f44:	f000 ffad 	bl	8002ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f48:	2019      	movs	r0, #25
 8001f4a:	f000 ffc6 	bl	8002eda <HAL_NVIC_EnableIRQ>
}
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40000400 	.word	0x40000400
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40014400 	.word	0x40014400

08001f64 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f6a:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <MX_USART2_UART_Init+0x50>)
 8001f6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f70:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001f74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f9a:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f9c:	f003 fe6c 	bl	8005c78 <HAL_UART_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fa6:	f7ff fe37 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200003ec 	.word	0x200003ec
 8001fb4:	40004400 	.word	0x40004400

08001fb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	; 0x28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a4b      	ldr	r2, [pc, #300]	; (8002104 <HAL_UART_MspInit+0x14c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	f040 8090 	bne.w	80020fc <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fdc:	2300      	movs	r3, #0
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	4b49      	ldr	r3, [pc, #292]	; (8002108 <HAL_UART_MspInit+0x150>)
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	4a48      	ldr	r2, [pc, #288]	; (8002108 <HAL_UART_MspInit+0x150>)
 8001fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fea:	6413      	str	r3, [r2, #64]	; 0x40
 8001fec:	4b46      	ldr	r3, [pc, #280]	; (8002108 <HAL_UART_MspInit+0x150>)
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	4b42      	ldr	r3, [pc, #264]	; (8002108 <HAL_UART_MspInit+0x150>)
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002000:	4a41      	ldr	r2, [pc, #260]	; (8002108 <HAL_UART_MspInit+0x150>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6313      	str	r3, [r2, #48]	; 0x30
 8002008:	4b3f      	ldr	r3, [pc, #252]	; (8002108 <HAL_UART_MspInit+0x150>)
 800200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002014:	230c      	movs	r3, #12
 8002016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002018:	2302      	movs	r3, #2
 800201a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002020:	2303      	movs	r3, #3
 8002022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002024:	2307      	movs	r3, #7
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	4619      	mov	r1, r3
 800202e:	4837      	ldr	r0, [pc, #220]	; (800210c <HAL_UART_MspInit+0x154>)
 8002030:	f001 fb70 	bl	8003714 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002034:	4b36      	ldr	r3, [pc, #216]	; (8002110 <HAL_UART_MspInit+0x158>)
 8002036:	4a37      	ldr	r2, [pc, #220]	; (8002114 <HAL_UART_MspInit+0x15c>)
 8002038:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800203a:	4b35      	ldr	r3, [pc, #212]	; (8002110 <HAL_UART_MspInit+0x158>)
 800203c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002040:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002042:	4b33      	ldr	r3, [pc, #204]	; (8002110 <HAL_UART_MspInit+0x158>)
 8002044:	2240      	movs	r2, #64	; 0x40
 8002046:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002048:	4b31      	ldr	r3, [pc, #196]	; (8002110 <HAL_UART_MspInit+0x158>)
 800204a:	2200      	movs	r2, #0
 800204c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800204e:	4b30      	ldr	r3, [pc, #192]	; (8002110 <HAL_UART_MspInit+0x158>)
 8002050:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002054:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002056:	4b2e      	ldr	r3, [pc, #184]	; (8002110 <HAL_UART_MspInit+0x158>)
 8002058:	2200      	movs	r2, #0
 800205a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800205c:	4b2c      	ldr	r3, [pc, #176]	; (8002110 <HAL_UART_MspInit+0x158>)
 800205e:	2200      	movs	r2, #0
 8002060:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002062:	4b2b      	ldr	r3, [pc, #172]	; (8002110 <HAL_UART_MspInit+0x158>)
 8002064:	2200      	movs	r2, #0
 8002066:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002068:	4b29      	ldr	r3, [pc, #164]	; (8002110 <HAL_UART_MspInit+0x158>)
 800206a:	2200      	movs	r2, #0
 800206c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800206e:	4b28      	ldr	r3, [pc, #160]	; (8002110 <HAL_UART_MspInit+0x158>)
 8002070:	2200      	movs	r2, #0
 8002072:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002074:	4826      	ldr	r0, [pc, #152]	; (8002110 <HAL_UART_MspInit+0x158>)
 8002076:	f000 ff4b 	bl	8002f10 <HAL_DMA_Init>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002080:	f7ff fdca 	bl	8001c18 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a22      	ldr	r2, [pc, #136]	; (8002110 <HAL_UART_MspInit+0x158>)
 8002088:	635a      	str	r2, [r3, #52]	; 0x34
 800208a:	4a21      	ldr	r2, [pc, #132]	; (8002110 <HAL_UART_MspInit+0x158>)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002090:	4b21      	ldr	r3, [pc, #132]	; (8002118 <HAL_UART_MspInit+0x160>)
 8002092:	4a22      	ldr	r2, [pc, #136]	; (800211c <HAL_UART_MspInit+0x164>)
 8002094:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002096:	4b20      	ldr	r3, [pc, #128]	; (8002118 <HAL_UART_MspInit+0x160>)
 8002098:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800209c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800209e:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <HAL_UART_MspInit+0x160>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020a4:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <HAL_UART_MspInit+0x160>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020aa:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <HAL_UART_MspInit+0x160>)
 80020ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020b0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020b2:	4b19      	ldr	r3, [pc, #100]	; (8002118 <HAL_UART_MspInit+0x160>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020b8:	4b17      	ldr	r3, [pc, #92]	; (8002118 <HAL_UART_MspInit+0x160>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80020be:	4b16      	ldr	r3, [pc, #88]	; (8002118 <HAL_UART_MspInit+0x160>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020c4:	4b14      	ldr	r3, [pc, #80]	; (8002118 <HAL_UART_MspInit+0x160>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020ca:	4b13      	ldr	r3, [pc, #76]	; (8002118 <HAL_UART_MspInit+0x160>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80020d0:	4811      	ldr	r0, [pc, #68]	; (8002118 <HAL_UART_MspInit+0x160>)
 80020d2:	f000 ff1d 	bl	8002f10 <HAL_DMA_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80020dc:	f7ff fd9c 	bl	8001c18 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a0d      	ldr	r2, [pc, #52]	; (8002118 <HAL_UART_MspInit+0x160>)
 80020e4:	639a      	str	r2, [r3, #56]	; 0x38
 80020e6:	4a0c      	ldr	r2, [pc, #48]	; (8002118 <HAL_UART_MspInit+0x160>)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020ec:	2200      	movs	r2, #0
 80020ee:	2100      	movs	r1, #0
 80020f0:	2026      	movs	r0, #38	; 0x26
 80020f2:	f000 fed6 	bl	8002ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020f6:	2026      	movs	r0, #38	; 0x26
 80020f8:	f000 feef 	bl	8002eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80020fc:	bf00      	nop
 80020fe:	3728      	adds	r7, #40	; 0x28
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40004400 	.word	0x40004400
 8002108:	40023800 	.word	0x40023800
 800210c:	40020000 	.word	0x40020000
 8002110:	20000430 	.word	0x20000430
 8002114:	400260a0 	.word	0x400260a0
 8002118:	20000490 	.word	0x20000490
 800211c:	40026088 	.word	0x40026088

08002120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002158 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002124:	480d      	ldr	r0, [pc, #52]	; (800215c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002126:	490e      	ldr	r1, [pc, #56]	; (8002160 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002128:	4a0e      	ldr	r2, [pc, #56]	; (8002164 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800212a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800212c:	e002      	b.n	8002134 <LoopCopyDataInit>

0800212e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800212e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002132:	3304      	adds	r3, #4

08002134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002138:	d3f9      	bcc.n	800212e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800213a:	4a0b      	ldr	r2, [pc, #44]	; (8002168 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800213c:	4c0b      	ldr	r4, [pc, #44]	; (800216c <LoopFillZerobss+0x26>)
  movs r3, #0
 800213e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002140:	e001      	b.n	8002146 <LoopFillZerobss>

08002142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002144:	3204      	adds	r2, #4

08002146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002148:	d3fb      	bcc.n	8002142 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800214a:	f7ff fe41 	bl	8001dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800214e:	f004 ff91 	bl	8007074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002152:	f7ff fbdb 	bl	800190c <main>
  bx  lr    
 8002156:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002158:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800215c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002160:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002164:	0800a39c 	.word	0x0800a39c
  ldr r2, =_sbss
 8002168:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800216c:	20000504 	.word	0x20000504

08002170 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002170:	e7fe      	b.n	8002170 <DMA1_Stream0_IRQHandler>
	...

08002174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002178:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <HAL_Init+0x40>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a0d      	ldr	r2, [pc, #52]	; (80021b4 <HAL_Init+0x40>)
 800217e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002182:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_Init+0x40>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <HAL_Init+0x40>)
 800218a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800218e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002190:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <HAL_Init+0x40>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a07      	ldr	r2, [pc, #28]	; (80021b4 <HAL_Init+0x40>)
 8002196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800219c:	2003      	movs	r0, #3
 800219e:	f000 fe75 	bl	8002e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021a2:	2000      	movs	r0, #0
 80021a4:	f000 f808 	bl	80021b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021a8:	f7ff fd3c 	bl	8001c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40023c00 	.word	0x40023c00

080021b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c0:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_InitTick+0x54>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_InitTick+0x58>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4619      	mov	r1, r3
 80021ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80021d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fe8d 	bl	8002ef6 <HAL_SYSTICK_Config>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e00e      	b.n	8002204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b0f      	cmp	r3, #15
 80021ea:	d80a      	bhi.n	8002202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ec:	2200      	movs	r2, #0
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	f04f 30ff 	mov.w	r0, #4294967295
 80021f4:	f000 fe55 	bl	8002ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f8:	4a06      	ldr	r2, [pc, #24]	; (8002214 <HAL_InitTick+0x5c>)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	e000      	b.n	8002204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20000004 	.word	0x20000004
 8002210:	2000000c 	.word	0x2000000c
 8002214:	20000008 	.word	0x20000008

08002218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_IncTick+0x20>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_IncTick+0x24>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4413      	add	r3, r2
 8002228:	4a04      	ldr	r2, [pc, #16]	; (800223c <HAL_IncTick+0x24>)
 800222a:	6013      	str	r3, [r2, #0]
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	2000000c 	.word	0x2000000c
 800223c:	200004f0 	.word	0x200004f0

08002240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return uwTick;
 8002244:	4b03      	ldr	r3, [pc, #12]	; (8002254 <HAL_GetTick+0x14>)
 8002246:	681b      	ldr	r3, [r3, #0]
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	200004f0 	.word	0x200004f0

08002258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002260:	f7ff ffee 	bl	8002240 <HAL_GetTick>
 8002264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002270:	d005      	beq.n	800227e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002272:	4b0a      	ldr	r3, [pc, #40]	; (800229c <HAL_Delay+0x44>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4413      	add	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800227e:	bf00      	nop
 8002280:	f7ff ffde 	bl	8002240 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	429a      	cmp	r2, r3
 800228e:	d8f7      	bhi.n	8002280 <HAL_Delay+0x28>
  {
  }
}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	2000000c 	.word	0x2000000c

080022a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e033      	b.n	800231e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d109      	bne.n	80022d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff f96e 	bl	80015a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f003 0310 	and.w	r3, r3, #16
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d118      	bne.n	8002310 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022e6:	f023 0302 	bic.w	r3, r3, #2
 80022ea:	f043 0202 	orr.w	r2, r3, #2
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 fb72 	bl	80029dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f023 0303 	bic.w	r3, r3, #3
 8002306:	f043 0201 	orr.w	r2, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	641a      	str	r2, [r3, #64]	; 0x40
 800230e:	e001      	b.n	8002314 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800231c:	7bfb      	ldrb	r3, [r7, #15]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b086      	sub	sp, #24
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	f003 0320 	and.w	r3, r3, #32
 8002354:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d049      	beq.n	80023f0 <HAL_ADC_IRQHandler+0xca>
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d046      	beq.n	80023f0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f003 0310 	and.w	r3, r3, #16
 800236a:	2b00      	cmp	r3, #0
 800236c:	d105      	bne.n	800237a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d12b      	bne.n	80023e0 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800238c:	2b00      	cmp	r3, #0
 800238e:	d127      	bne.n	80023e0 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002396:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800239a:	2b00      	cmp	r3, #0
 800239c:	d006      	beq.n	80023ac <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d119      	bne.n	80023e0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0220 	bic.w	r2, r2, #32
 80023ba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d105      	bne.n	80023e0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	f043 0201 	orr.w	r2, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f9a1 	bl	8002728 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f06f 0212 	mvn.w	r2, #18
 80023ee:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fe:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d057      	beq.n	80024b6 <HAL_ADC_IRQHandler+0x190>
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d054      	beq.n	80024b6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	f003 0310 	and.w	r3, r3, #16
 8002414:	2b00      	cmp	r3, #0
 8002416:	d105      	bne.n	8002424 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d139      	bne.n	80024a6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002438:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800243c:	2b00      	cmp	r3, #0
 800243e:	d006      	beq.n	800244e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800244a:	2b00      	cmp	r3, #0
 800244c:	d12b      	bne.n	80024a6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002458:	2b00      	cmp	r3, #0
 800245a:	d124      	bne.n	80024a6 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002466:	2b00      	cmp	r3, #0
 8002468:	d11d      	bne.n	80024a6 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800246e:	2b00      	cmp	r3, #0
 8002470:	d119      	bne.n	80024a6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002480:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002496:	2b00      	cmp	r3, #0
 8002498:	d105      	bne.n	80024a6 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f043 0201 	orr.w	r2, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fc16 	bl	8002cd8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f06f 020c 	mvn.w	r2, #12
 80024b4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d017      	beq.n	80024fc <HAL_ADC_IRQHandler+0x1d6>
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d014      	beq.n	80024fc <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d10d      	bne.n	80024fc <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f92f 	bl	8002750 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f06f 0201 	mvn.w	r2, #1
 80024fa:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800250a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d015      	beq.n	800253e <HAL_ADC_IRQHandler+0x218>
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d012      	beq.n	800253e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251c:	f043 0202 	orr.w	r2, r3, #2
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0220 	mvn.w	r2, #32
 800252c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f918 	bl	8002764 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0220 	mvn.w	r2, #32
 800253c:	601a      	str	r2, [r3, #0]
  }
}
 800253e:	bf00      	nop
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800255e:	2b01      	cmp	r3, #1
 8002560:	d101      	bne.n	8002566 <HAL_ADC_Start_DMA+0x1e>
 8002562:	2302      	movs	r3, #2
 8002564:	e0ce      	b.n	8002704 <HAL_ADC_Start_DMA+0x1bc>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b01      	cmp	r3, #1
 800257a:	d018      	beq.n	80025ae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0201 	orr.w	r2, r2, #1
 800258a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800258c:	4b5f      	ldr	r3, [pc, #380]	; (800270c <HAL_ADC_Start_DMA+0x1c4>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a5f      	ldr	r2, [pc, #380]	; (8002710 <HAL_ADC_Start_DMA+0x1c8>)
 8002592:	fba2 2303 	umull	r2, r3, r2, r3
 8002596:	0c9a      	lsrs	r2, r3, #18
 8002598:	4613      	mov	r3, r2
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4413      	add	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80025a0:	e002      	b.n	80025a8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	3b01      	subs	r3, #1
 80025a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f9      	bne.n	80025a2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025bc:	d107      	bne.n	80025ce <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b01      	cmp	r3, #1
 80025da:	f040 8086 	bne.w	80026ea <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80025e6:	f023 0301 	bic.w	r3, r3, #1
 80025ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d007      	beq.n	8002610 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002608:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800261c:	d106      	bne.n	800262c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	f023 0206 	bic.w	r2, r3, #6
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	645a      	str	r2, [r3, #68]	; 0x44
 800262a:	e002      	b.n	8002632 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800263a:	4b36      	ldr	r3, [pc, #216]	; (8002714 <HAL_ADC_Start_DMA+0x1cc>)
 800263c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002642:	4a35      	ldr	r2, [pc, #212]	; (8002718 <HAL_ADC_Start_DMA+0x1d0>)
 8002644:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264a:	4a34      	ldr	r2, [pc, #208]	; (800271c <HAL_ADC_Start_DMA+0x1d4>)
 800264c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002652:	4a33      	ldr	r2, [pc, #204]	; (8002720 <HAL_ADC_Start_DMA+0x1d8>)
 8002654:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800265e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800266e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800267e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	334c      	adds	r3, #76	; 0x4c
 800268a:	4619      	mov	r1, r3
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f000 fcec 	bl	800306c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 031f 	and.w	r3, r3, #31
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10f      	bne.n	80026c0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d129      	bne.n	8002702 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026bc:	609a      	str	r2, [r3, #8]
 80026be:	e020      	b.n	8002702 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a17      	ldr	r2, [pc, #92]	; (8002724 <HAL_ADC_Start_DMA+0x1dc>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d11b      	bne.n	8002702 <HAL_ADC_Start_DMA+0x1ba>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d114      	bne.n	8002702 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	e00b      	b.n	8002702 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f043 0210 	orr.w	r2, r3, #16
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	f043 0201 	orr.w	r2, r3, #1
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	20000004 	.word	0x20000004
 8002710:	431bde83 	.word	0x431bde83
 8002714:	40012300 	.word	0x40012300
 8002718:	08002bd5 	.word	0x08002bd5
 800271c:	08002c8f 	.word	0x08002c8f
 8002720:	08002cab 	.word	0x08002cab
 8002724:	40012000 	.word	0x40012000

08002728 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800278c:	2b01      	cmp	r3, #1
 800278e:	d101      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x1c>
 8002790:	2302      	movs	r3, #2
 8002792:	e113      	b.n	80029bc <HAL_ADC_ConfigChannel+0x244>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b09      	cmp	r3, #9
 80027a2:	d925      	bls.n	80027f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68d9      	ldr	r1, [r3, #12]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	461a      	mov	r2, r3
 80027b2:	4613      	mov	r3, r2
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	4413      	add	r3, r2
 80027b8:	3b1e      	subs	r3, #30
 80027ba:	2207      	movs	r2, #7
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43da      	mvns	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	400a      	ands	r2, r1
 80027c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68d9      	ldr	r1, [r3, #12]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	4618      	mov	r0, r3
 80027dc:	4603      	mov	r3, r0
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	4403      	add	r3, r0
 80027e2:	3b1e      	subs	r3, #30
 80027e4:	409a      	lsls	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	e022      	b.n	8002836 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6919      	ldr	r1, [r3, #16]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	461a      	mov	r2, r3
 80027fe:	4613      	mov	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	2207      	movs	r2, #7
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43da      	mvns	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	400a      	ands	r2, r1
 8002812:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6919      	ldr	r1, [r3, #16]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	689a      	ldr	r2, [r3, #8]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	b29b      	uxth	r3, r3
 8002824:	4618      	mov	r0, r3
 8002826:	4603      	mov	r3, r0
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	4403      	add	r3, r0
 800282c:	409a      	lsls	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b06      	cmp	r3, #6
 800283c:	d824      	bhi.n	8002888 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	3b05      	subs	r3, #5
 8002850:	221f      	movs	r2, #31
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43da      	mvns	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	400a      	ands	r2, r1
 800285e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	b29b      	uxth	r3, r3
 800286c:	4618      	mov	r0, r3
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	3b05      	subs	r3, #5
 800287a:	fa00 f203 	lsl.w	r2, r0, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	635a      	str	r2, [r3, #52]	; 0x34
 8002886:	e04c      	b.n	8002922 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b0c      	cmp	r3, #12
 800288e:	d824      	bhi.n	80028da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	3b23      	subs	r3, #35	; 0x23
 80028a2:	221f      	movs	r2, #31
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43da      	mvns	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	400a      	ands	r2, r1
 80028b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	4618      	mov	r0, r3
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	3b23      	subs	r3, #35	; 0x23
 80028cc:	fa00 f203 	lsl.w	r2, r0, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	631a      	str	r2, [r3, #48]	; 0x30
 80028d8:	e023      	b.n	8002922 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	3b41      	subs	r3, #65	; 0x41
 80028ec:	221f      	movs	r2, #31
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43da      	mvns	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	400a      	ands	r2, r1
 80028fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	b29b      	uxth	r3, r3
 8002908:	4618      	mov	r0, r3
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	3b41      	subs	r3, #65	; 0x41
 8002916:	fa00 f203 	lsl.w	r2, r0, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002922:	4b29      	ldr	r3, [pc, #164]	; (80029c8 <HAL_ADC_ConfigChannel+0x250>)
 8002924:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a28      	ldr	r2, [pc, #160]	; (80029cc <HAL_ADC_ConfigChannel+0x254>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d10f      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x1d8>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b12      	cmp	r3, #18
 8002936:	d10b      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a1d      	ldr	r2, [pc, #116]	; (80029cc <HAL_ADC_ConfigChannel+0x254>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d12b      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x23a>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a1c      	ldr	r2, [pc, #112]	; (80029d0 <HAL_ADC_ConfigChannel+0x258>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d003      	beq.n	800296c <HAL_ADC_ConfigChannel+0x1f4>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b11      	cmp	r3, #17
 800296a:	d122      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a11      	ldr	r2, [pc, #68]	; (80029d0 <HAL_ADC_ConfigChannel+0x258>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d111      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800298e:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <HAL_ADC_ConfigChannel+0x25c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a11      	ldr	r2, [pc, #68]	; (80029d8 <HAL_ADC_ConfigChannel+0x260>)
 8002994:	fba2 2303 	umull	r2, r3, r2, r3
 8002998:	0c9a      	lsrs	r2, r3, #18
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029a4:	e002      	b.n	80029ac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	3b01      	subs	r3, #1
 80029aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f9      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	40012300 	.word	0x40012300
 80029cc:	40012000 	.word	0x40012000
 80029d0:	10000012 	.word	0x10000012
 80029d4:	20000004 	.word	0x20000004
 80029d8:	431bde83 	.word	0x431bde83

080029dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029e4:	4b79      	ldr	r3, [pc, #484]	; (8002bcc <ADC_Init+0x1f0>)
 80029e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	431a      	orrs	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6859      	ldr	r1, [r3, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	021a      	lsls	r2, r3, #8
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6859      	ldr	r1, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6899      	ldr	r1, [r3, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6e:	4a58      	ldr	r2, [pc, #352]	; (8002bd0 <ADC_Init+0x1f4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d022      	beq.n	8002aba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6899      	ldr	r1, [r3, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002aa4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6899      	ldr	r1, [r3, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	e00f      	b.n	8002ada <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ac8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ad8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0202 	bic.w	r2, r2, #2
 8002ae8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6899      	ldr	r1, [r3, #8]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	7e1b      	ldrb	r3, [r3, #24]
 8002af4:	005a      	lsls	r2, r3, #1
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d01b      	beq.n	8002b40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6859      	ldr	r1, [r3, #4]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	3b01      	subs	r3, #1
 8002b34:	035a      	lsls	r2, r3, #13
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	605a      	str	r2, [r3, #4]
 8002b3e:	e007      	b.n	8002b50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	051a      	lsls	r2, r3, #20
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6899      	ldr	r1, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b92:	025a      	lsls	r2, r3, #9
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002baa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6899      	ldr	r1, [r3, #8]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	029a      	lsls	r2, r3, #10
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	609a      	str	r2, [r3, #8]
}
 8002bc0:	bf00      	nop
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	40012300 	.word	0x40012300
 8002bd0:	0f000001 	.word	0x0f000001

08002bd4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d13c      	bne.n	8002c68 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d12b      	bne.n	8002c60 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d127      	bne.n	8002c60 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d006      	beq.n	8002c2c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d119      	bne.n	8002c60 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0220 	bic.w	r2, r2, #32
 8002c3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d105      	bne.n	8002c60 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	f043 0201 	orr.w	r2, r3, #1
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f7ff fd61 	bl	8002728 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c66:	e00e      	b.n	8002c86 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f7ff fd75 	bl	8002764 <HAL_ADC_ErrorCallback>
}
 8002c7a:	e004      	b.n	8002c86 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	4798      	blx	r3
}
 8002c86:	bf00      	nop
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b084      	sub	sp, #16
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f7ff fd4d 	bl	800273c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ca2:	bf00      	nop
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b084      	sub	sp, #16
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2240      	movs	r2, #64	; 0x40
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc2:	f043 0204 	orr.w	r2, r3, #4
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f7ff fd4a 	bl	8002764 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cd0:	bf00      	nop
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cfc:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <__NVIC_SetPriorityGrouping+0x44>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d08:	4013      	ands	r3, r2
 8002d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d1e:	4a04      	ldr	r2, [pc, #16]	; (8002d30 <__NVIC_SetPriorityGrouping+0x44>)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	60d3      	str	r3, [r2, #12]
}
 8002d24:	bf00      	nop
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d38:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <__NVIC_GetPriorityGrouping+0x18>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	0a1b      	lsrs	r3, r3, #8
 8002d3e:	f003 0307 	and.w	r3, r3, #7
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	db0b      	blt.n	8002d7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	f003 021f 	and.w	r2, r3, #31
 8002d68:	4907      	ldr	r1, [pc, #28]	; (8002d88 <__NVIC_EnableIRQ+0x38>)
 8002d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	2001      	movs	r0, #1
 8002d72:	fa00 f202 	lsl.w	r2, r0, r2
 8002d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	e000e100 	.word	0xe000e100

08002d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	6039      	str	r1, [r7, #0]
 8002d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	db0a      	blt.n	8002db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	490c      	ldr	r1, [pc, #48]	; (8002dd8 <__NVIC_SetPriority+0x4c>)
 8002da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002daa:	0112      	lsls	r2, r2, #4
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	440b      	add	r3, r1
 8002db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002db4:	e00a      	b.n	8002dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	4908      	ldr	r1, [pc, #32]	; (8002ddc <__NVIC_SetPriority+0x50>)
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	3b04      	subs	r3, #4
 8002dc4:	0112      	lsls	r2, r2, #4
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	440b      	add	r3, r1
 8002dca:	761a      	strb	r2, [r3, #24]
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	e000e100 	.word	0xe000e100
 8002ddc:	e000ed00 	.word	0xe000ed00

08002de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b089      	sub	sp, #36	; 0x24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f1c3 0307 	rsb	r3, r3, #7
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	bf28      	it	cs
 8002dfe:	2304      	movcs	r3, #4
 8002e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	3304      	adds	r3, #4
 8002e06:	2b06      	cmp	r3, #6
 8002e08:	d902      	bls.n	8002e10 <NVIC_EncodePriority+0x30>
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	3b03      	subs	r3, #3
 8002e0e:	e000      	b.n	8002e12 <NVIC_EncodePriority+0x32>
 8002e10:	2300      	movs	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e14:	f04f 32ff 	mov.w	r2, #4294967295
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	43da      	mvns	r2, r3
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	401a      	ands	r2, r3
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e28:	f04f 31ff 	mov.w	r1, #4294967295
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e32:	43d9      	mvns	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e38:	4313      	orrs	r3, r2
         );
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3724      	adds	r7, #36	; 0x24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
	...

08002e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e58:	d301      	bcc.n	8002e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e00f      	b.n	8002e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e5e:	4a0a      	ldr	r2, [pc, #40]	; (8002e88 <SysTick_Config+0x40>)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e66:	210f      	movs	r1, #15
 8002e68:	f04f 30ff 	mov.w	r0, #4294967295
 8002e6c:	f7ff ff8e 	bl	8002d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e70:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <SysTick_Config+0x40>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e76:	4b04      	ldr	r3, [pc, #16]	; (8002e88 <SysTick_Config+0x40>)
 8002e78:	2207      	movs	r2, #7
 8002e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	e000e010 	.word	0xe000e010

08002e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7ff ff29 	bl	8002cec <__NVIC_SetPriorityGrouping>
}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b086      	sub	sp, #24
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	607a      	str	r2, [r7, #4]
 8002eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002eb4:	f7ff ff3e 	bl	8002d34 <__NVIC_GetPriorityGrouping>
 8002eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	68b9      	ldr	r1, [r7, #8]
 8002ebe:	6978      	ldr	r0, [r7, #20]
 8002ec0:	f7ff ff8e 	bl	8002de0 <NVIC_EncodePriority>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eca:	4611      	mov	r1, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff ff5d 	bl	8002d8c <__NVIC_SetPriority>
}
 8002ed2:	bf00      	nop
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff ff31 	bl	8002d50 <__NVIC_EnableIRQ>
}
 8002eee:	bf00      	nop
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff ffa2 	bl	8002e48 <SysTick_Config>
 8002f04:	4603      	mov	r3, r0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
	...

08002f10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f1c:	f7ff f990 	bl	8002240 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e099      	b.n	8003060 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0201 	bic.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f4c:	e00f      	b.n	8002f6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f4e:	f7ff f977 	bl	8002240 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b05      	cmp	r3, #5
 8002f5a:	d908      	bls.n	8002f6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2203      	movs	r2, #3
 8002f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e078      	b.n	8003060 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1e8      	bne.n	8002f4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	4b38      	ldr	r3, [pc, #224]	; (8003068 <HAL_DMA_Init+0x158>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d107      	bne.n	8002fd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f023 0307 	bic.w	r3, r3, #7
 8002fee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d117      	bne.n	8003032 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4313      	orrs	r3, r2
 800300a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00e      	beq.n	8003032 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 fb01 	bl	800361c <DMA_CheckFifoParam>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d008      	beq.n	8003032 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2240      	movs	r2, #64	; 0x40
 8003024:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800302e:	2301      	movs	r3, #1
 8003030:	e016      	b.n	8003060 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fab8 	bl	80035b0 <DMA_CalcBaseAndBitshift>
 8003040:	4603      	mov	r3, r0
 8003042:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003048:	223f      	movs	r2, #63	; 0x3f
 800304a:	409a      	lsls	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3718      	adds	r7, #24
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	f010803f 	.word	0xf010803f

0800306c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003082:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_DMA_Start_IT+0x26>
 800308e:	2302      	movs	r3, #2
 8003090:	e040      	b.n	8003114 <HAL_DMA_Start_IT+0xa8>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d12f      	bne.n	8003106 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2202      	movs	r2, #2
 80030aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 fa4a 	bl	8003554 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c4:	223f      	movs	r2, #63	; 0x3f
 80030c6:	409a      	lsls	r2, r3
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0216 	orr.w	r2, r2, #22
 80030da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d007      	beq.n	80030f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0208 	orr.w	r2, r2, #8
 80030f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0201 	orr.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	e005      	b.n	8003112 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800310e:	2302      	movs	r3, #2
 8003110:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003112:	7dfb      	ldrb	r3, [r7, #23]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003128:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800312a:	f7ff f889 	bl	8002240 <HAL_GetTick>
 800312e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d008      	beq.n	800314e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2280      	movs	r2, #128	; 0x80
 8003140:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e052      	b.n	80031f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0216 	bic.w	r2, r2, #22
 800315c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695a      	ldr	r2, [r3, #20]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800316c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	d103      	bne.n	800317e <HAL_DMA_Abort+0x62>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317a:	2b00      	cmp	r3, #0
 800317c:	d007      	beq.n	800318e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0208 	bic.w	r2, r2, #8
 800318c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0201 	bic.w	r2, r2, #1
 800319c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800319e:	e013      	b.n	80031c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031a0:	f7ff f84e 	bl	8002240 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b05      	cmp	r3, #5
 80031ac:	d90c      	bls.n	80031c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2220      	movs	r2, #32
 80031b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2203      	movs	r2, #3
 80031b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e015      	b.n	80031f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1e4      	bne.n	80031a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031da:	223f      	movs	r2, #63	; 0x3f
 80031dc:	409a      	lsls	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d004      	beq.n	800321a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2280      	movs	r2, #128	; 0x80
 8003214:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e00c      	b.n	8003234 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2205      	movs	r2, #5
 800321e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0201 	bic.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800324c:	4b8e      	ldr	r3, [pc, #568]	; (8003488 <HAL_DMA_IRQHandler+0x248>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a8e      	ldr	r2, [pc, #568]	; (800348c <HAL_DMA_IRQHandler+0x24c>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	0a9b      	lsrs	r3, r3, #10
 8003258:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326a:	2208      	movs	r2, #8
 800326c:	409a      	lsls	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4013      	ands	r3, r2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d01a      	beq.n	80032ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	d013      	beq.n	80032ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0204 	bic.w	r2, r2, #4
 8003292:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003298:	2208      	movs	r2, #8
 800329a:	409a      	lsls	r2, r3
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a4:	f043 0201 	orr.w	r2, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b0:	2201      	movs	r2, #1
 80032b2:	409a      	lsls	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d012      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00b      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ce:	2201      	movs	r2, #1
 80032d0:	409a      	lsls	r2, r3
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032da:	f043 0202 	orr.w	r2, r3, #2
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e6:	2204      	movs	r2, #4
 80032e8:	409a      	lsls	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d012      	beq.n	8003318 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00b      	beq.n	8003318 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003304:	2204      	movs	r2, #4
 8003306:	409a      	lsls	r2, r3
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003310:	f043 0204 	orr.w	r2, r3, #4
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331c:	2210      	movs	r2, #16
 800331e:	409a      	lsls	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4013      	ands	r3, r2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d043      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b00      	cmp	r3, #0
 8003334:	d03c      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333a:	2210      	movs	r2, #16
 800333c:	409a      	lsls	r2, r3
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d018      	beq.n	8003382 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d108      	bne.n	8003370 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	d024      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	4798      	blx	r3
 800336e:	e01f      	b.n	80033b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003374:	2b00      	cmp	r3, #0
 8003376:	d01b      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	4798      	blx	r3
 8003380:	e016      	b.n	80033b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338c:	2b00      	cmp	r3, #0
 800338e:	d107      	bne.n	80033a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0208 	bic.w	r2, r2, #8
 800339e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b4:	2220      	movs	r2, #32
 80033b6:	409a      	lsls	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 808f 	beq.w	80034e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0310 	and.w	r3, r3, #16
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 8087 	beq.w	80034e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d6:	2220      	movs	r2, #32
 80033d8:	409a      	lsls	r2, r3
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b05      	cmp	r3, #5
 80033e8:	d136      	bne.n	8003458 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0216 	bic.w	r2, r2, #22
 80033f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	695a      	ldr	r2, [r3, #20]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003408:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	2b00      	cmp	r3, #0
 8003410:	d103      	bne.n	800341a <HAL_DMA_IRQHandler+0x1da>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003416:	2b00      	cmp	r3, #0
 8003418:	d007      	beq.n	800342a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0208 	bic.w	r2, r2, #8
 8003428:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342e:	223f      	movs	r2, #63	; 0x3f
 8003430:	409a      	lsls	r2, r3
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800344a:	2b00      	cmp	r3, #0
 800344c:	d07e      	beq.n	800354c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	4798      	blx	r3
        }
        return;
 8003456:	e079      	b.n	800354c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d01d      	beq.n	80034a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10d      	bne.n	8003490 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003478:	2b00      	cmp	r3, #0
 800347a:	d031      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	4798      	blx	r3
 8003484:	e02c      	b.n	80034e0 <HAL_DMA_IRQHandler+0x2a0>
 8003486:	bf00      	nop
 8003488:	20000004 	.word	0x20000004
 800348c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003494:	2b00      	cmp	r3, #0
 8003496:	d023      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	4798      	blx	r3
 80034a0:	e01e      	b.n	80034e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10f      	bne.n	80034d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0210 	bic.w	r2, r2, #16
 80034be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d032      	beq.n	800354e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d022      	beq.n	800353a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2205      	movs	r2, #5
 80034f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0201 	bic.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	3301      	adds	r3, #1
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	429a      	cmp	r2, r3
 8003516:	d307      	bcc.n	8003528 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f2      	bne.n	800350c <HAL_DMA_IRQHandler+0x2cc>
 8003526:	e000      	b.n	800352a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003528:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353e:	2b00      	cmp	r3, #0
 8003540:	d005      	beq.n	800354e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	4798      	blx	r3
 800354a:	e000      	b.n	800354e <HAL_DMA_IRQHandler+0x30e>
        return;
 800354c:	bf00      	nop
    }
  }
}
 800354e:	3718      	adds	r7, #24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
 8003560:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003570:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	2b40      	cmp	r3, #64	; 0x40
 8003580:	d108      	bne.n	8003594 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003592:	e007      	b.n	80035a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	60da      	str	r2, [r3, #12]
}
 80035a4:	bf00      	nop
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	3b10      	subs	r3, #16
 80035c0:	4a14      	ldr	r2, [pc, #80]	; (8003614 <DMA_CalcBaseAndBitshift+0x64>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	091b      	lsrs	r3, r3, #4
 80035c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035ca:	4a13      	ldr	r2, [pc, #76]	; (8003618 <DMA_CalcBaseAndBitshift+0x68>)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4413      	add	r3, r2
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	461a      	mov	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2b03      	cmp	r3, #3
 80035dc:	d909      	bls.n	80035f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035e6:	f023 0303 	bic.w	r3, r3, #3
 80035ea:	1d1a      	adds	r2, r3, #4
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	659a      	str	r2, [r3, #88]	; 0x58
 80035f0:	e007      	b.n	8003602 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035fa:	f023 0303 	bic.w	r3, r3, #3
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	aaaaaaab 	.word	0xaaaaaaab
 8003618:	08009fac 	.word	0x08009fac

0800361c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003624:	2300      	movs	r3, #0
 8003626:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d11f      	bne.n	8003676 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2b03      	cmp	r3, #3
 800363a:	d856      	bhi.n	80036ea <DMA_CheckFifoParam+0xce>
 800363c:	a201      	add	r2, pc, #4	; (adr r2, 8003644 <DMA_CheckFifoParam+0x28>)
 800363e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003642:	bf00      	nop
 8003644:	08003655 	.word	0x08003655
 8003648:	08003667 	.word	0x08003667
 800364c:	08003655 	.word	0x08003655
 8003650:	080036eb 	.word	0x080036eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d046      	beq.n	80036ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003664:	e043      	b.n	80036ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800366e:	d140      	bne.n	80036f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003674:	e03d      	b.n	80036f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800367e:	d121      	bne.n	80036c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b03      	cmp	r3, #3
 8003684:	d837      	bhi.n	80036f6 <DMA_CheckFifoParam+0xda>
 8003686:	a201      	add	r2, pc, #4	; (adr r2, 800368c <DMA_CheckFifoParam+0x70>)
 8003688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368c:	0800369d 	.word	0x0800369d
 8003690:	080036a3 	.word	0x080036a3
 8003694:	0800369d 	.word	0x0800369d
 8003698:	080036b5 	.word	0x080036b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	73fb      	strb	r3, [r7, #15]
      break;
 80036a0:	e030      	b.n	8003704 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d025      	beq.n	80036fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b2:	e022      	b.n	80036fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036bc:	d11f      	bne.n	80036fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036c2:	e01c      	b.n	80036fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d903      	bls.n	80036d2 <DMA_CheckFifoParam+0xb6>
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	d003      	beq.n	80036d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036d0:	e018      	b.n	8003704 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	73fb      	strb	r3, [r7, #15]
      break;
 80036d6:	e015      	b.n	8003704 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00e      	beq.n	8003702 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
      break;
 80036e8:	e00b      	b.n	8003702 <DMA_CheckFifoParam+0xe6>
      break;
 80036ea:	bf00      	nop
 80036ec:	e00a      	b.n	8003704 <DMA_CheckFifoParam+0xe8>
      break;
 80036ee:	bf00      	nop
 80036f0:	e008      	b.n	8003704 <DMA_CheckFifoParam+0xe8>
      break;
 80036f2:	bf00      	nop
 80036f4:	e006      	b.n	8003704 <DMA_CheckFifoParam+0xe8>
      break;
 80036f6:	bf00      	nop
 80036f8:	e004      	b.n	8003704 <DMA_CheckFifoParam+0xe8>
      break;
 80036fa:	bf00      	nop
 80036fc:	e002      	b.n	8003704 <DMA_CheckFifoParam+0xe8>
      break;   
 80036fe:	bf00      	nop
 8003700:	e000      	b.n	8003704 <DMA_CheckFifoParam+0xe8>
      break;
 8003702:	bf00      	nop
    }
  } 
  
  return status; 
 8003704:	7bfb      	ldrb	r3, [r7, #15]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop

08003714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003714:	b480      	push	{r7}
 8003716:	b089      	sub	sp, #36	; 0x24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800371e:	2300      	movs	r3, #0
 8003720:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003722:	2300      	movs	r3, #0
 8003724:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003726:	2300      	movs	r3, #0
 8003728:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
 800372e:	e159      	b.n	80039e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003730:	2201      	movs	r2, #1
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	4013      	ands	r3, r2
 8003742:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	429a      	cmp	r2, r3
 800374a:	f040 8148 	bne.w	80039de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	2b01      	cmp	r3, #1
 8003758:	d005      	beq.n	8003766 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003762:	2b02      	cmp	r3, #2
 8003764:	d130      	bne.n	80037c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	2203      	movs	r2, #3
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43db      	mvns	r3, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4013      	ands	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4313      	orrs	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800379c:	2201      	movs	r2, #1
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4013      	ands	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	091b      	lsrs	r3, r3, #4
 80037b2:	f003 0201 	and.w	r2, r3, #1
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4313      	orrs	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 0303 	and.w	r3, r3, #3
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d017      	beq.n	8003804 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	2203      	movs	r2, #3
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	43db      	mvns	r3, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4013      	ands	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f003 0303 	and.w	r3, r3, #3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d123      	bne.n	8003858 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	08da      	lsrs	r2, r3, #3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3208      	adds	r2, #8
 8003818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800381c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	220f      	movs	r2, #15
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	43db      	mvns	r3, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4013      	ands	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4313      	orrs	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	08da      	lsrs	r2, r3, #3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3208      	adds	r2, #8
 8003852:	69b9      	ldr	r1, [r7, #24]
 8003854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	2203      	movs	r2, #3
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	43db      	mvns	r3, r3
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4013      	ands	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f003 0203 	and.w	r2, r3, #3
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4313      	orrs	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 80a2 	beq.w	80039de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	4b57      	ldr	r3, [pc, #348]	; (80039fc <HAL_GPIO_Init+0x2e8>)
 80038a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a2:	4a56      	ldr	r2, [pc, #344]	; (80039fc <HAL_GPIO_Init+0x2e8>)
 80038a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038a8:	6453      	str	r3, [r2, #68]	; 0x44
 80038aa:	4b54      	ldr	r3, [pc, #336]	; (80039fc <HAL_GPIO_Init+0x2e8>)
 80038ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038b6:	4a52      	ldr	r2, [pc, #328]	; (8003a00 <HAL_GPIO_Init+0x2ec>)
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	089b      	lsrs	r3, r3, #2
 80038bc:	3302      	adds	r3, #2
 80038be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	220f      	movs	r2, #15
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43db      	mvns	r3, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4013      	ands	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a49      	ldr	r2, [pc, #292]	; (8003a04 <HAL_GPIO_Init+0x2f0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d019      	beq.n	8003916 <HAL_GPIO_Init+0x202>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a48      	ldr	r2, [pc, #288]	; (8003a08 <HAL_GPIO_Init+0x2f4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d013      	beq.n	8003912 <HAL_GPIO_Init+0x1fe>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a47      	ldr	r2, [pc, #284]	; (8003a0c <HAL_GPIO_Init+0x2f8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00d      	beq.n	800390e <HAL_GPIO_Init+0x1fa>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a46      	ldr	r2, [pc, #280]	; (8003a10 <HAL_GPIO_Init+0x2fc>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d007      	beq.n	800390a <HAL_GPIO_Init+0x1f6>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a45      	ldr	r2, [pc, #276]	; (8003a14 <HAL_GPIO_Init+0x300>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d101      	bne.n	8003906 <HAL_GPIO_Init+0x1f2>
 8003902:	2304      	movs	r3, #4
 8003904:	e008      	b.n	8003918 <HAL_GPIO_Init+0x204>
 8003906:	2307      	movs	r3, #7
 8003908:	e006      	b.n	8003918 <HAL_GPIO_Init+0x204>
 800390a:	2303      	movs	r3, #3
 800390c:	e004      	b.n	8003918 <HAL_GPIO_Init+0x204>
 800390e:	2302      	movs	r3, #2
 8003910:	e002      	b.n	8003918 <HAL_GPIO_Init+0x204>
 8003912:	2301      	movs	r3, #1
 8003914:	e000      	b.n	8003918 <HAL_GPIO_Init+0x204>
 8003916:	2300      	movs	r3, #0
 8003918:	69fa      	ldr	r2, [r7, #28]
 800391a:	f002 0203 	and.w	r2, r2, #3
 800391e:	0092      	lsls	r2, r2, #2
 8003920:	4093      	lsls	r3, r2
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4313      	orrs	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003928:	4935      	ldr	r1, [pc, #212]	; (8003a00 <HAL_GPIO_Init+0x2ec>)
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	089b      	lsrs	r3, r3, #2
 800392e:	3302      	adds	r3, #2
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003936:	4b38      	ldr	r3, [pc, #224]	; (8003a18 <HAL_GPIO_Init+0x304>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	43db      	mvns	r3, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4013      	ands	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	4313      	orrs	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800395a:	4a2f      	ldr	r2, [pc, #188]	; (8003a18 <HAL_GPIO_Init+0x304>)
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003960:	4b2d      	ldr	r3, [pc, #180]	; (8003a18 <HAL_GPIO_Init+0x304>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	43db      	mvns	r3, r3
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4013      	ands	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	4313      	orrs	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003984:	4a24      	ldr	r2, [pc, #144]	; (8003a18 <HAL_GPIO_Init+0x304>)
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800398a:	4b23      	ldr	r3, [pc, #140]	; (8003a18 <HAL_GPIO_Init+0x304>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	43db      	mvns	r3, r3
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	4013      	ands	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039ae:	4a1a      	ldr	r2, [pc, #104]	; (8003a18 <HAL_GPIO_Init+0x304>)
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039b4:	4b18      	ldr	r3, [pc, #96]	; (8003a18 <HAL_GPIO_Init+0x304>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	43db      	mvns	r3, r3
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4013      	ands	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039d8:	4a0f      	ldr	r2, [pc, #60]	; (8003a18 <HAL_GPIO_Init+0x304>)
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	3301      	adds	r3, #1
 80039e2:	61fb      	str	r3, [r7, #28]
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	2b0f      	cmp	r3, #15
 80039e8:	f67f aea2 	bls.w	8003730 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039ec:	bf00      	nop
 80039ee:	bf00      	nop
 80039f0:	3724      	adds	r7, #36	; 0x24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40023800 	.word	0x40023800
 8003a00:	40013800 	.word	0x40013800
 8003a04:	40020000 	.word	0x40020000
 8003a08:	40020400 	.word	0x40020400
 8003a0c:	40020800 	.word	0x40020800
 8003a10:	40020c00 	.word	0x40020c00
 8003a14:	40021000 	.word	0x40021000
 8003a18:	40013c00 	.word	0x40013c00

08003a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	807b      	strh	r3, [r7, #2]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a2c:	787b      	ldrb	r3, [r7, #1]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a32:	887a      	ldrh	r2, [r7, #2]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a38:	e003      	b.n	8003a42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a3a:	887b      	ldrh	r3, [r7, #2]
 8003a3c:	041a      	lsls	r2, r3, #16
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	619a      	str	r2, [r3, #24]
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b085      	sub	sp, #20
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	460b      	mov	r3, r1
 8003a58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a60:	887a      	ldrh	r2, [r7, #2]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4013      	ands	r3, r2
 8003a66:	041a      	lsls	r2, r3, #16
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	43d9      	mvns	r1, r3
 8003a6c:	887b      	ldrh	r3, [r7, #2]
 8003a6e:	400b      	ands	r3, r1
 8003a70:	431a      	orrs	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	619a      	str	r2, [r3, #24]
}
 8003a76:	bf00      	nop
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
	...

08003a84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a8e:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a90:	695a      	ldr	r2, [r3, #20]
 8003a92:	88fb      	ldrh	r3, [r7, #6]
 8003a94:	4013      	ands	r3, r2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d006      	beq.n	8003aa8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a9a:	4a05      	ldr	r2, [pc, #20]	; (8003ab0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003aa0:	88fb      	ldrh	r3, [r7, #6]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 f806 	bl	8003ab4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003aa8:	bf00      	nop
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40013c00 	.word	0x40013c00

08003ab4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
	...

08003acc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e12b      	b.n	8003d36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fd fec2 	bl	800187c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2224      	movs	r2, #36	; 0x24
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0201 	bic.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b30:	f001 fbfc 	bl	800532c <HAL_RCC_GetPCLK1Freq>
 8003b34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	4a81      	ldr	r2, [pc, #516]	; (8003d40 <HAL_I2C_Init+0x274>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d807      	bhi.n	8003b50 <HAL_I2C_Init+0x84>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4a80      	ldr	r2, [pc, #512]	; (8003d44 <HAL_I2C_Init+0x278>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	bf94      	ite	ls
 8003b48:	2301      	movls	r3, #1
 8003b4a:	2300      	movhi	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	e006      	b.n	8003b5e <HAL_I2C_Init+0x92>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4a7d      	ldr	r2, [pc, #500]	; (8003d48 <HAL_I2C_Init+0x27c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	bf94      	ite	ls
 8003b58:	2301      	movls	r3, #1
 8003b5a:	2300      	movhi	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e0e7      	b.n	8003d36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4a78      	ldr	r2, [pc, #480]	; (8003d4c <HAL_I2C_Init+0x280>)
 8003b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6e:	0c9b      	lsrs	r3, r3, #18
 8003b70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	4a6a      	ldr	r2, [pc, #424]	; (8003d40 <HAL_I2C_Init+0x274>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d802      	bhi.n	8003ba0 <HAL_I2C_Init+0xd4>
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	e009      	b.n	8003bb4 <HAL_I2C_Init+0xe8>
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ba6:	fb02 f303 	mul.w	r3, r2, r3
 8003baa:	4a69      	ldr	r2, [pc, #420]	; (8003d50 <HAL_I2C_Init+0x284>)
 8003bac:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb0:	099b      	lsrs	r3, r3, #6
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6812      	ldr	r2, [r2, #0]
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003bc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	495c      	ldr	r1, [pc, #368]	; (8003d40 <HAL_I2C_Init+0x274>)
 8003bd0:	428b      	cmp	r3, r1
 8003bd2:	d819      	bhi.n	8003c08 <HAL_I2C_Init+0x13c>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1e59      	subs	r1, r3, #1
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	fbb1 f3f3 	udiv	r3, r1, r3
 8003be2:	1c59      	adds	r1, r3, #1
 8003be4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003be8:	400b      	ands	r3, r1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00a      	beq.n	8003c04 <HAL_I2C_Init+0x138>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1e59      	subs	r1, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c02:	e051      	b.n	8003ca8 <HAL_I2C_Init+0x1dc>
 8003c04:	2304      	movs	r3, #4
 8003c06:	e04f      	b.n	8003ca8 <HAL_I2C_Init+0x1dc>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d111      	bne.n	8003c34 <HAL_I2C_Init+0x168>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	1e58      	subs	r0, r3, #1
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6859      	ldr	r1, [r3, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	440b      	add	r3, r1
 8003c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c22:	3301      	adds	r3, #1
 8003c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	bf0c      	ite	eq
 8003c2c:	2301      	moveq	r3, #1
 8003c2e:	2300      	movne	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	e012      	b.n	8003c5a <HAL_I2C_Init+0x18e>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1e58      	subs	r0, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6859      	ldr	r1, [r3, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	0099      	lsls	r1, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	bf0c      	ite	eq
 8003c54:	2301      	moveq	r3, #1
 8003c56:	2300      	movne	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <HAL_I2C_Init+0x196>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e022      	b.n	8003ca8 <HAL_I2C_Init+0x1dc>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10e      	bne.n	8003c88 <HAL_I2C_Init+0x1bc>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	1e58      	subs	r0, r3, #1
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6859      	ldr	r1, [r3, #4]
 8003c72:	460b      	mov	r3, r1
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	440b      	add	r3, r1
 8003c78:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c86:	e00f      	b.n	8003ca8 <HAL_I2C_Init+0x1dc>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	1e58      	subs	r0, r3, #1
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6859      	ldr	r1, [r3, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	0099      	lsls	r1, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	6809      	ldr	r1, [r1, #0]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69da      	ldr	r2, [r3, #28]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003cd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6911      	ldr	r1, [r2, #16]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	68d2      	ldr	r2, [r2, #12]
 8003ce2:	4311      	orrs	r1, r2
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6812      	ldr	r2, [r2, #0]
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	695a      	ldr	r2, [r3, #20]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0201 	orr.w	r2, r2, #1
 8003d16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	000186a0 	.word	0x000186a0
 8003d44:	001e847f 	.word	0x001e847f
 8003d48:	003d08ff 	.word	0x003d08ff
 8003d4c:	431bde83 	.word	0x431bde83
 8003d50:	10624dd3 	.word	0x10624dd3

08003d54 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	4608      	mov	r0, r1
 8003d5e:	4611      	mov	r1, r2
 8003d60:	461a      	mov	r2, r3
 8003d62:	4603      	mov	r3, r0
 8003d64:	817b      	strh	r3, [r7, #10]
 8003d66:	460b      	mov	r3, r1
 8003d68:	813b      	strh	r3, [r7, #8]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d6e:	f7fe fa67 	bl	8002240 <HAL_GetTick>
 8003d72:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	f040 80d9 	bne.w	8003f34 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	2319      	movs	r3, #25
 8003d88:	2201      	movs	r2, #1
 8003d8a:	496d      	ldr	r1, [pc, #436]	; (8003f40 <HAL_I2C_Mem_Write+0x1ec>)
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 fc7f 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e0cc      	b.n	8003f36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d101      	bne.n	8003daa <HAL_I2C_Mem_Write+0x56>
 8003da6:	2302      	movs	r3, #2
 8003da8:	e0c5      	b.n	8003f36 <HAL_I2C_Mem_Write+0x1e2>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d007      	beq.n	8003dd0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2221      	movs	r2, #33	; 0x21
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2240      	movs	r2, #64	; 0x40
 8003dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6a3a      	ldr	r2, [r7, #32]
 8003dfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4a4d      	ldr	r2, [pc, #308]	; (8003f44 <HAL_I2C_Mem_Write+0x1f0>)
 8003e10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e12:	88f8      	ldrh	r0, [r7, #6]
 8003e14:	893a      	ldrh	r2, [r7, #8]
 8003e16:	8979      	ldrh	r1, [r7, #10]
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	9301      	str	r3, [sp, #4]
 8003e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	4603      	mov	r3, r0
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 fab6 	bl	8004394 <I2C_RequestMemoryWrite>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d052      	beq.n	8003ed4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e081      	b.n	8003f36 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 fd00 	bl	800483c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00d      	beq.n	8003e5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d107      	bne.n	8003e5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e06b      	b.n	8003f36 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	781a      	ldrb	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	1c5a      	adds	r2, r3, #1
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d11b      	bne.n	8003ed4 <HAL_I2C_Mem_Write+0x180>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d017      	beq.n	8003ed4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	781a      	ldrb	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1aa      	bne.n	8003e32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 fcec 	bl	80048be <I2C_WaitOnBTFFlagUntilTimeout>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00d      	beq.n	8003f08 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d107      	bne.n	8003f04 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e016      	b.n	8003f36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	e000      	b.n	8003f36 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f34:	2302      	movs	r3, #2
  }
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	00100002 	.word	0x00100002
 8003f44:	ffff0000 	.word	0xffff0000

08003f48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08c      	sub	sp, #48	; 0x30
 8003f4c:	af02      	add	r7, sp, #8
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	4608      	mov	r0, r1
 8003f52:	4611      	mov	r1, r2
 8003f54:	461a      	mov	r2, r3
 8003f56:	4603      	mov	r3, r0
 8003f58:	817b      	strh	r3, [r7, #10]
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	813b      	strh	r3, [r7, #8]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f62:	f7fe f96d 	bl	8002240 <HAL_GetTick>
 8003f66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b20      	cmp	r3, #32
 8003f72:	f040 8208 	bne.w	8004386 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	2319      	movs	r3, #25
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	497b      	ldr	r1, [pc, #492]	; (800416c <HAL_I2C_Mem_Read+0x224>)
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 fb85 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e1fb      	b.n	8004388 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d101      	bne.n	8003f9e <HAL_I2C_Mem_Read+0x56>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e1f4      	b.n	8004388 <HAL_I2C_Mem_Read+0x440>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d007      	beq.n	8003fc4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2222      	movs	r2, #34	; 0x22
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2240      	movs	r2, #64	; 0x40
 8003fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4a5b      	ldr	r2, [pc, #364]	; (8004170 <HAL_I2C_Mem_Read+0x228>)
 8004004:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004006:	88f8      	ldrh	r0, [r7, #6]
 8004008:	893a      	ldrh	r2, [r7, #8]
 800400a:	8979      	ldrh	r1, [r7, #10]
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	9301      	str	r3, [sp, #4]
 8004010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	4603      	mov	r3, r0
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 fa52 	bl	80044c0 <I2C_RequestMemoryRead>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e1b0      	b.n	8004388 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402a:	2b00      	cmp	r3, #0
 800402c:	d113      	bne.n	8004056 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800402e:	2300      	movs	r3, #0
 8004030:	623b      	str	r3, [r7, #32]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	623b      	str	r3, [r7, #32]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	623b      	str	r3, [r7, #32]
 8004042:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	e184      	b.n	8004360 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405a:	2b01      	cmp	r3, #1
 800405c:	d11b      	bne.n	8004096 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800406c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406e:	2300      	movs	r3, #0
 8004070:	61fb      	str	r3, [r7, #28]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	61fb      	str	r3, [r7, #28]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	61fb      	str	r3, [r7, #28]
 8004082:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	e164      	b.n	8004360 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409a:	2b02      	cmp	r3, #2
 800409c:	d11b      	bne.n	80040d6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040be:	2300      	movs	r3, #0
 80040c0:	61bb      	str	r3, [r7, #24]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	61bb      	str	r3, [r7, #24]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	61bb      	str	r3, [r7, #24]
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	e144      	b.n	8004360 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040d6:	2300      	movs	r3, #0
 80040d8:	617b      	str	r3, [r7, #20]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	617b      	str	r3, [r7, #20]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80040ec:	e138      	b.n	8004360 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f2:	2b03      	cmp	r3, #3
 80040f4:	f200 80f1 	bhi.w	80042da <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d123      	bne.n	8004148 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004102:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 fc1b 	bl	8004940 <I2C_WaitOnRXNEFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e139      	b.n	8004388 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691a      	ldr	r2, [r3, #16]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413c:	b29b      	uxth	r3, r3
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004146:	e10b      	b.n	8004360 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414c:	2b02      	cmp	r3, #2
 800414e:	d14e      	bne.n	80041ee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004156:	2200      	movs	r2, #0
 8004158:	4906      	ldr	r1, [pc, #24]	; (8004174 <HAL_I2C_Mem_Read+0x22c>)
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f000 fa98 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d008      	beq.n	8004178 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e10e      	b.n	8004388 <HAL_I2C_Mem_Read+0x440>
 800416a:	bf00      	nop
 800416c:	00100002 	.word	0x00100002
 8004170:	ffff0000 	.word	0xffff0000
 8004174:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004186:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	b2d2      	uxtb	r2, r2
 80041c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29a      	uxth	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	3b01      	subs	r3, #1
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041ec:	e0b8      	b.n	8004360 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f4:	2200      	movs	r2, #0
 80041f6:	4966      	ldr	r1, [pc, #408]	; (8004390 <HAL_I2C_Mem_Read+0x448>)
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 fa49 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e0bf      	b.n	8004388 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004216:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004240:	b29b      	uxth	r3, r3
 8004242:	3b01      	subs	r3, #1
 8004244:	b29a      	uxth	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004250:	2200      	movs	r2, #0
 8004252:	494f      	ldr	r1, [pc, #316]	; (8004390 <HAL_I2C_Mem_Read+0x448>)
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 fa1b 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e091      	b.n	8004388 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004272:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691a      	ldr	r2, [r3, #16]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004290:	3b01      	subs	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429c:	b29b      	uxth	r3, r3
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	b2d2      	uxtb	r2, r2
 80042b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042d8:	e042      	b.n	8004360 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 fb2e 	bl	8004940 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e04c      	b.n	8004388 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	b2d2      	uxtb	r2, r2
 80042fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430a:	3b01      	subs	r3, #1
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004316:	b29b      	uxth	r3, r3
 8004318:	3b01      	subs	r3, #1
 800431a:	b29a      	uxth	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	f003 0304 	and.w	r3, r3, #4
 800432a:	2b04      	cmp	r3, #4
 800432c:	d118      	bne.n	8004360 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004364:	2b00      	cmp	r3, #0
 8004366:	f47f aec2 	bne.w	80040ee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2220      	movs	r2, #32
 800436e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004382:	2300      	movs	r3, #0
 8004384:	e000      	b.n	8004388 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004386:	2302      	movs	r3, #2
  }
}
 8004388:	4618      	mov	r0, r3
 800438a:	3728      	adds	r7, #40	; 0x28
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	00010004 	.word	0x00010004

08004394 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b088      	sub	sp, #32
 8004398:	af02      	add	r7, sp, #8
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	4608      	mov	r0, r1
 800439e:	4611      	mov	r1, r2
 80043a0:	461a      	mov	r2, r3
 80043a2:	4603      	mov	r3, r0
 80043a4:	817b      	strh	r3, [r7, #10]
 80043a6:	460b      	mov	r3, r1
 80043a8:	813b      	strh	r3, [r7, #8]
 80043aa:	4613      	mov	r3, r2
 80043ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 f960 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00d      	beq.n	80043f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043e4:	d103      	bne.n	80043ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e05f      	b.n	80044b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043f2:	897b      	ldrh	r3, [r7, #10]
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	461a      	mov	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004400:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	6a3a      	ldr	r2, [r7, #32]
 8004406:	492d      	ldr	r1, [pc, #180]	; (80044bc <I2C_RequestMemoryWrite+0x128>)
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 f998 	bl	800473e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e04c      	b.n	80044b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004418:	2300      	movs	r3, #0
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800442e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004430:	6a39      	ldr	r1, [r7, #32]
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 fa02 	bl	800483c <I2C_WaitOnTXEFlagUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00d      	beq.n	800445a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	2b04      	cmp	r3, #4
 8004444:	d107      	bne.n	8004456 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004454:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e02b      	b.n	80044b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800445a:	88fb      	ldrh	r3, [r7, #6]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d105      	bne.n	800446c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004460:	893b      	ldrh	r3, [r7, #8]
 8004462:	b2da      	uxtb	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	611a      	str	r2, [r3, #16]
 800446a:	e021      	b.n	80044b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800446c:	893b      	ldrh	r3, [r7, #8]
 800446e:	0a1b      	lsrs	r3, r3, #8
 8004470:	b29b      	uxth	r3, r3
 8004472:	b2da      	uxtb	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800447a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800447c:	6a39      	ldr	r1, [r7, #32]
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 f9dc 	bl	800483c <I2C_WaitOnTXEFlagUntilTimeout>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00d      	beq.n	80044a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	2b04      	cmp	r3, #4
 8004490:	d107      	bne.n	80044a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e005      	b.n	80044b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044a6:	893b      	ldrh	r3, [r7, #8]
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	00010002 	.word	0x00010002

080044c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af02      	add	r7, sp, #8
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	4608      	mov	r0, r1
 80044ca:	4611      	mov	r1, r2
 80044cc:	461a      	mov	r2, r3
 80044ce:	4603      	mov	r3, r0
 80044d0:	817b      	strh	r3, [r7, #10]
 80044d2:	460b      	mov	r3, r1
 80044d4:	813b      	strh	r3, [r7, #8]
 80044d6:	4613      	mov	r3, r2
 80044d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	2200      	movs	r2, #0
 8004502:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 f8c2 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00d      	beq.n	800452e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004520:	d103      	bne.n	800452a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004528:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e0aa      	b.n	8004684 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800452e:	897b      	ldrh	r3, [r7, #10]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	461a      	mov	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800453c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	6a3a      	ldr	r2, [r7, #32]
 8004542:	4952      	ldr	r1, [pc, #328]	; (800468c <I2C_RequestMemoryRead+0x1cc>)
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 f8fa 	bl	800473e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e097      	b.n	8004684 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004554:	2300      	movs	r3, #0
 8004556:	617b      	str	r3, [r7, #20]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800456a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456c:	6a39      	ldr	r1, [r7, #32]
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 f964 	bl	800483c <I2C_WaitOnTXEFlagUntilTimeout>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00d      	beq.n	8004596 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	2b04      	cmp	r3, #4
 8004580:	d107      	bne.n	8004592 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004590:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e076      	b.n	8004684 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004596:	88fb      	ldrh	r3, [r7, #6]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d105      	bne.n	80045a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800459c:	893b      	ldrh	r3, [r7, #8]
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	611a      	str	r2, [r3, #16]
 80045a6:	e021      	b.n	80045ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045a8:	893b      	ldrh	r3, [r7, #8]
 80045aa:	0a1b      	lsrs	r3, r3, #8
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b8:	6a39      	ldr	r1, [r7, #32]
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 f93e 	bl	800483c <I2C_WaitOnTXEFlagUntilTimeout>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00d      	beq.n	80045e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d107      	bne.n	80045de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e050      	b.n	8004684 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045e2:	893b      	ldrh	r3, [r7, #8]
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ee:	6a39      	ldr	r1, [r7, #32]
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 f923 	bl	800483c <I2C_WaitOnTXEFlagUntilTimeout>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00d      	beq.n	8004618 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004600:	2b04      	cmp	r3, #4
 8004602:	d107      	bne.n	8004614 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004612:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e035      	b.n	8004684 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004626:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	2200      	movs	r2, #0
 8004630:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 f82b 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00d      	beq.n	800465c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800464e:	d103      	bne.n	8004658 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004656:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e013      	b.n	8004684 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800465c:	897b      	ldrh	r3, [r7, #10]
 800465e:	b2db      	uxtb	r3, r3
 8004660:	f043 0301 	orr.w	r3, r3, #1
 8004664:	b2da      	uxtb	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	6a3a      	ldr	r2, [r7, #32]
 8004670:	4906      	ldr	r1, [pc, #24]	; (800468c <I2C_RequestMemoryRead+0x1cc>)
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 f863 	bl	800473e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e000      	b.n	8004684 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	00010002 	.word	0x00010002

08004690 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	603b      	str	r3, [r7, #0]
 800469c:	4613      	mov	r3, r2
 800469e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046a0:	e025      	b.n	80046ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a8:	d021      	beq.n	80046ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046aa:	f7fd fdc9 	bl	8002240 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d302      	bcc.n	80046c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d116      	bne.n	80046ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	f043 0220 	orr.w	r2, r3, #32
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e023      	b.n	8004736 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	0c1b      	lsrs	r3, r3, #16
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d10d      	bne.n	8004714 <I2C_WaitOnFlagUntilTimeout+0x84>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	43da      	mvns	r2, r3
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4013      	ands	r3, r2
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	bf0c      	ite	eq
 800470a:	2301      	moveq	r3, #1
 800470c:	2300      	movne	r3, #0
 800470e:	b2db      	uxtb	r3, r3
 8004710:	461a      	mov	r2, r3
 8004712:	e00c      	b.n	800472e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	43da      	mvns	r2, r3
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	4013      	ands	r3, r2
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	bf0c      	ite	eq
 8004726:	2301      	moveq	r3, #1
 8004728:	2300      	movne	r3, #0
 800472a:	b2db      	uxtb	r3, r3
 800472c:	461a      	mov	r2, r3
 800472e:	79fb      	ldrb	r3, [r7, #7]
 8004730:	429a      	cmp	r2, r3
 8004732:	d0b6      	beq.n	80046a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	60f8      	str	r0, [r7, #12]
 8004746:	60b9      	str	r1, [r7, #8]
 8004748:	607a      	str	r2, [r7, #4]
 800474a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800474c:	e051      	b.n	80047f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475c:	d123      	bne.n	80047a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800476c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004776:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2220      	movs	r2, #32
 8004782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	f043 0204 	orr.w	r2, r3, #4
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e046      	b.n	8004834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ac:	d021      	beq.n	80047f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ae:	f7fd fd47 	bl	8002240 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d302      	bcc.n	80047c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d116      	bne.n	80047f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	f043 0220 	orr.w	r2, r3, #32
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e020      	b.n	8004834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	0c1b      	lsrs	r3, r3, #16
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d10c      	bne.n	8004816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	43da      	mvns	r2, r3
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	4013      	ands	r3, r2
 8004808:	b29b      	uxth	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	bf14      	ite	ne
 800480e:	2301      	movne	r3, #1
 8004810:	2300      	moveq	r3, #0
 8004812:	b2db      	uxtb	r3, r3
 8004814:	e00b      	b.n	800482e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	43da      	mvns	r2, r3
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	4013      	ands	r3, r2
 8004822:	b29b      	uxth	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	bf14      	ite	ne
 8004828:	2301      	movne	r3, #1
 800482a:	2300      	moveq	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d18d      	bne.n	800474e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004848:	e02d      	b.n	80048a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 f8ce 	bl	80049ec <I2C_IsAcknowledgeFailed>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e02d      	b.n	80048b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004860:	d021      	beq.n	80048a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004862:	f7fd fced 	bl	8002240 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	429a      	cmp	r2, r3
 8004870:	d302      	bcc.n	8004878 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d116      	bne.n	80048a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2220      	movs	r2, #32
 8004882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	f043 0220 	orr.w	r2, r3, #32
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e007      	b.n	80048b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b0:	2b80      	cmp	r3, #128	; 0x80
 80048b2:	d1ca      	bne.n	800484a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b084      	sub	sp, #16
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	60f8      	str	r0, [r7, #12]
 80048c6:	60b9      	str	r1, [r7, #8]
 80048c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048ca:	e02d      	b.n	8004928 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 f88d 	bl	80049ec <I2C_IsAcknowledgeFailed>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e02d      	b.n	8004938 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e2:	d021      	beq.n	8004928 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e4:	f7fd fcac 	bl	8002240 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d302      	bcc.n	80048fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d116      	bne.n	8004928 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004914:	f043 0220 	orr.w	r2, r3, #32
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e007      	b.n	8004938 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	2b04      	cmp	r3, #4
 8004934:	d1ca      	bne.n	80048cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800494c:	e042      	b.n	80049d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	2b10      	cmp	r3, #16
 800495a:	d119      	bne.n	8004990 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f06f 0210 	mvn.w	r2, #16
 8004964:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e029      	b.n	80049e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004990:	f7fd fc56 	bl	8002240 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	429a      	cmp	r2, r3
 800499e:	d302      	bcc.n	80049a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d116      	bne.n	80049d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c0:	f043 0220 	orr.w	r2, r3, #32
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e007      	b.n	80049e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049de:	2b40      	cmp	r3, #64	; 0x40
 80049e0:	d1b5      	bne.n	800494e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a02:	d11b      	bne.n	8004a3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a28:	f043 0204 	orr.w	r2, r3, #4
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e000      	b.n	8004a3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
	...

08004a4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e267      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d075      	beq.n	8004b56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a6a:	4b88      	ldr	r3, [pc, #544]	; (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 030c 	and.w	r3, r3, #12
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d00c      	beq.n	8004a90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a76:	4b85      	ldr	r3, [pc, #532]	; (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a7e:	2b08      	cmp	r3, #8
 8004a80:	d112      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a82:	4b82      	ldr	r3, [pc, #520]	; (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a8e:	d10b      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a90:	4b7e      	ldr	r3, [pc, #504]	; (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d05b      	beq.n	8004b54 <HAL_RCC_OscConfig+0x108>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d157      	bne.n	8004b54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e242      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab0:	d106      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x74>
 8004ab2:	4b76      	ldr	r3, [pc, #472]	; (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a75      	ldr	r2, [pc, #468]	; (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004abc:	6013      	str	r3, [r2, #0]
 8004abe:	e01d      	b.n	8004afc <HAL_RCC_OscConfig+0xb0>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ac8:	d10c      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x98>
 8004aca:	4b70      	ldr	r3, [pc, #448]	; (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a6f      	ldr	r2, [pc, #444]	; (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	4b6d      	ldr	r3, [pc, #436]	; (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a6c      	ldr	r2, [pc, #432]	; (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	e00b      	b.n	8004afc <HAL_RCC_OscConfig+0xb0>
 8004ae4:	4b69      	ldr	r3, [pc, #420]	; (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a68      	ldr	r2, [pc, #416]	; (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	4b66      	ldr	r3, [pc, #408]	; (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a65      	ldr	r2, [pc, #404]	; (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d013      	beq.n	8004b2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b04:	f7fd fb9c 	bl	8002240 <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b0c:	f7fd fb98 	bl	8002240 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b64      	cmp	r3, #100	; 0x64
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e207      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b1e:	4b5b      	ldr	r3, [pc, #364]	; (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0f0      	beq.n	8004b0c <HAL_RCC_OscConfig+0xc0>
 8004b2a:	e014      	b.n	8004b56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b2c:	f7fd fb88 	bl	8002240 <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b34:	f7fd fb84 	bl	8002240 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b64      	cmp	r3, #100	; 0x64
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e1f3      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b46:	4b51      	ldr	r3, [pc, #324]	; (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1f0      	bne.n	8004b34 <HAL_RCC_OscConfig+0xe8>
 8004b52:	e000      	b.n	8004b56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d063      	beq.n	8004c2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b62:	4b4a      	ldr	r3, [pc, #296]	; (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 030c 	and.w	r3, r3, #12
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00b      	beq.n	8004b86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b6e:	4b47      	ldr	r3, [pc, #284]	; (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b76:	2b08      	cmp	r3, #8
 8004b78:	d11c      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b7a:	4b44      	ldr	r3, [pc, #272]	; (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d116      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b86:	4b41      	ldr	r3, [pc, #260]	; (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d005      	beq.n	8004b9e <HAL_RCC_OscConfig+0x152>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d001      	beq.n	8004b9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e1c7      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b9e:	4b3b      	ldr	r3, [pc, #236]	; (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	4937      	ldr	r1, [pc, #220]	; (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bb2:	e03a      	b.n	8004c2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d020      	beq.n	8004bfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bbc:	4b34      	ldr	r3, [pc, #208]	; (8004c90 <HAL_RCC_OscConfig+0x244>)
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc2:	f7fd fb3d 	bl	8002240 <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bca:	f7fd fb39 	bl	8002240 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e1a8      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bdc:	4b2b      	ldr	r3, [pc, #172]	; (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0f0      	beq.n	8004bca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be8:	4b28      	ldr	r3, [pc, #160]	; (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	00db      	lsls	r3, r3, #3
 8004bf6:	4925      	ldr	r1, [pc, #148]	; (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	600b      	str	r3, [r1, #0]
 8004bfc:	e015      	b.n	8004c2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bfe:	4b24      	ldr	r3, [pc, #144]	; (8004c90 <HAL_RCC_OscConfig+0x244>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c04:	f7fd fb1c 	bl	8002240 <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c0c:	f7fd fb18 	bl	8002240 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e187      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c1e:	4b1b      	ldr	r3, [pc, #108]	; (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1f0      	bne.n	8004c0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0308 	and.w	r3, r3, #8
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d036      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d016      	beq.n	8004c6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c3e:	4b15      	ldr	r3, [pc, #84]	; (8004c94 <HAL_RCC_OscConfig+0x248>)
 8004c40:	2201      	movs	r2, #1
 8004c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c44:	f7fd fafc 	bl	8002240 <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c4c:	f7fd faf8 	bl	8002240 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e167      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c5e:	4b0b      	ldr	r3, [pc, #44]	; (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0f0      	beq.n	8004c4c <HAL_RCC_OscConfig+0x200>
 8004c6a:	e01b      	b.n	8004ca4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c6c:	4b09      	ldr	r3, [pc, #36]	; (8004c94 <HAL_RCC_OscConfig+0x248>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c72:	f7fd fae5 	bl	8002240 <HAL_GetTick>
 8004c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c78:	e00e      	b.n	8004c98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c7a:	f7fd fae1 	bl	8002240 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d907      	bls.n	8004c98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e150      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	42470000 	.word	0x42470000
 8004c94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c98:	4b88      	ldr	r3, [pc, #544]	; (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1ea      	bne.n	8004c7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 8097 	beq.w	8004de0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cb6:	4b81      	ldr	r3, [pc, #516]	; (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10f      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60bb      	str	r3, [r7, #8]
 8004cc6:	4b7d      	ldr	r3, [pc, #500]	; (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	4a7c      	ldr	r2, [pc, #496]	; (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8004cd2:	4b7a      	ldr	r3, [pc, #488]	; (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cda:	60bb      	str	r3, [r7, #8]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce2:	4b77      	ldr	r3, [pc, #476]	; (8004ec0 <HAL_RCC_OscConfig+0x474>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d118      	bne.n	8004d20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cee:	4b74      	ldr	r3, [pc, #464]	; (8004ec0 <HAL_RCC_OscConfig+0x474>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a73      	ldr	r2, [pc, #460]	; (8004ec0 <HAL_RCC_OscConfig+0x474>)
 8004cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cfa:	f7fd faa1 	bl	8002240 <HAL_GetTick>
 8004cfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d00:	e008      	b.n	8004d14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d02:	f7fd fa9d 	bl	8002240 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e10c      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d14:	4b6a      	ldr	r3, [pc, #424]	; (8004ec0 <HAL_RCC_OscConfig+0x474>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0f0      	beq.n	8004d02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d106      	bne.n	8004d36 <HAL_RCC_OscConfig+0x2ea>
 8004d28:	4b64      	ldr	r3, [pc, #400]	; (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2c:	4a63      	ldr	r2, [pc, #396]	; (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004d2e:	f043 0301 	orr.w	r3, r3, #1
 8004d32:	6713      	str	r3, [r2, #112]	; 0x70
 8004d34:	e01c      	b.n	8004d70 <HAL_RCC_OscConfig+0x324>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	2b05      	cmp	r3, #5
 8004d3c:	d10c      	bne.n	8004d58 <HAL_RCC_OscConfig+0x30c>
 8004d3e:	4b5f      	ldr	r3, [pc, #380]	; (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d42:	4a5e      	ldr	r2, [pc, #376]	; (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004d44:	f043 0304 	orr.w	r3, r3, #4
 8004d48:	6713      	str	r3, [r2, #112]	; 0x70
 8004d4a:	4b5c      	ldr	r3, [pc, #368]	; (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4e:	4a5b      	ldr	r2, [pc, #364]	; (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004d50:	f043 0301 	orr.w	r3, r3, #1
 8004d54:	6713      	str	r3, [r2, #112]	; 0x70
 8004d56:	e00b      	b.n	8004d70 <HAL_RCC_OscConfig+0x324>
 8004d58:	4b58      	ldr	r3, [pc, #352]	; (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5c:	4a57      	ldr	r2, [pc, #348]	; (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004d5e:	f023 0301 	bic.w	r3, r3, #1
 8004d62:	6713      	str	r3, [r2, #112]	; 0x70
 8004d64:	4b55      	ldr	r3, [pc, #340]	; (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d68:	4a54      	ldr	r2, [pc, #336]	; (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004d6a:	f023 0304 	bic.w	r3, r3, #4
 8004d6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d015      	beq.n	8004da4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d78:	f7fd fa62 	bl	8002240 <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7e:	e00a      	b.n	8004d96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d80:	f7fd fa5e 	bl	8002240 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e0cb      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d96:	4b49      	ldr	r3, [pc, #292]	; (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0ee      	beq.n	8004d80 <HAL_RCC_OscConfig+0x334>
 8004da2:	e014      	b.n	8004dce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004da4:	f7fd fa4c 	bl	8002240 <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004daa:	e00a      	b.n	8004dc2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dac:	f7fd fa48 	bl	8002240 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e0b5      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dc2:	4b3e      	ldr	r3, [pc, #248]	; (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1ee      	bne.n	8004dac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dce:	7dfb      	ldrb	r3, [r7, #23]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d105      	bne.n	8004de0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dd4:	4b39      	ldr	r3, [pc, #228]	; (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd8:	4a38      	ldr	r2, [pc, #224]	; (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dde:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 80a1 	beq.w	8004f2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dea:	4b34      	ldr	r3, [pc, #208]	; (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f003 030c 	and.w	r3, r3, #12
 8004df2:	2b08      	cmp	r3, #8
 8004df4:	d05c      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d141      	bne.n	8004e82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dfe:	4b31      	ldr	r3, [pc, #196]	; (8004ec4 <HAL_RCC_OscConfig+0x478>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e04:	f7fd fa1c 	bl	8002240 <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e0c:	f7fd fa18 	bl	8002240 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e087      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e1e:	4b27      	ldr	r3, [pc, #156]	; (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1f0      	bne.n	8004e0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	69da      	ldr	r2, [r3, #28]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e38:	019b      	lsls	r3, r3, #6
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e40:	085b      	lsrs	r3, r3, #1
 8004e42:	3b01      	subs	r3, #1
 8004e44:	041b      	lsls	r3, r3, #16
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4c:	061b      	lsls	r3, r3, #24
 8004e4e:	491b      	ldr	r1, [pc, #108]	; (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e54:	4b1b      	ldr	r3, [pc, #108]	; (8004ec4 <HAL_RCC_OscConfig+0x478>)
 8004e56:	2201      	movs	r2, #1
 8004e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e5a:	f7fd f9f1 	bl	8002240 <HAL_GetTick>
 8004e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e62:	f7fd f9ed 	bl	8002240 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e05c      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e74:	4b11      	ldr	r3, [pc, #68]	; (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0f0      	beq.n	8004e62 <HAL_RCC_OscConfig+0x416>
 8004e80:	e054      	b.n	8004f2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e82:	4b10      	ldr	r3, [pc, #64]	; (8004ec4 <HAL_RCC_OscConfig+0x478>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e88:	f7fd f9da 	bl	8002240 <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e90:	f7fd f9d6 	bl	8002240 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e045      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ea2:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1f0      	bne.n	8004e90 <HAL_RCC_OscConfig+0x444>
 8004eae:	e03d      	b.n	8004f2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d107      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e038      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
 8004ebc:	40023800 	.word	0x40023800
 8004ec0:	40007000 	.word	0x40007000
 8004ec4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ec8:	4b1b      	ldr	r3, [pc, #108]	; (8004f38 <HAL_RCC_OscConfig+0x4ec>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d028      	beq.n	8004f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d121      	bne.n	8004f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d11a      	bne.n	8004f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ef8:	4013      	ands	r3, r2
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004efe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d111      	bne.n	8004f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0e:	085b      	lsrs	r3, r3, #1
 8004f10:	3b01      	subs	r3, #1
 8004f12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d107      	bne.n	8004f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d001      	beq.n	8004f2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e000      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	40023800 	.word	0x40023800

08004f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e0cc      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f50:	4b68      	ldr	r3, [pc, #416]	; (80050f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d90c      	bls.n	8004f78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f5e:	4b65      	ldr	r3, [pc, #404]	; (80050f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f66:	4b63      	ldr	r3, [pc, #396]	; (80050f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d001      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e0b8      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d020      	beq.n	8004fc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d005      	beq.n	8004f9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f90:	4b59      	ldr	r3, [pc, #356]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	4a58      	ldr	r2, [pc, #352]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0308 	and.w	r3, r3, #8
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d005      	beq.n	8004fb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fa8:	4b53      	ldr	r3, [pc, #332]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	4a52      	ldr	r2, [pc, #328]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fb4:	4b50      	ldr	r3, [pc, #320]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	494d      	ldr	r1, [pc, #308]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d044      	beq.n	800505c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d107      	bne.n	8004fea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fda:	4b47      	ldr	r3, [pc, #284]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d119      	bne.n	800501a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e07f      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d003      	beq.n	8004ffa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ff6:	2b03      	cmp	r3, #3
 8004ff8:	d107      	bne.n	800500a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ffa:	4b3f      	ldr	r3, [pc, #252]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d109      	bne.n	800501a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e06f      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800500a:	4b3b      	ldr	r3, [pc, #236]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e067      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800501a:	4b37      	ldr	r3, [pc, #220]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f023 0203 	bic.w	r2, r3, #3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	4934      	ldr	r1, [pc, #208]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005028:	4313      	orrs	r3, r2
 800502a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800502c:	f7fd f908 	bl	8002240 <HAL_GetTick>
 8005030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005032:	e00a      	b.n	800504a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005034:	f7fd f904 	bl	8002240 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005042:	4293      	cmp	r3, r2
 8005044:	d901      	bls.n	800504a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e04f      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800504a:	4b2b      	ldr	r3, [pc, #172]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 020c 	and.w	r2, r3, #12
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	429a      	cmp	r2, r3
 800505a:	d1eb      	bne.n	8005034 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800505c:	4b25      	ldr	r3, [pc, #148]	; (80050f4 <HAL_RCC_ClockConfig+0x1b8>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d20c      	bcs.n	8005084 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800506a:	4b22      	ldr	r3, [pc, #136]	; (80050f4 <HAL_RCC_ClockConfig+0x1b8>)
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005072:	4b20      	ldr	r3, [pc, #128]	; (80050f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	429a      	cmp	r2, r3
 800507e:	d001      	beq.n	8005084 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e032      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b00      	cmp	r3, #0
 800508e:	d008      	beq.n	80050a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005090:	4b19      	ldr	r3, [pc, #100]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	4916      	ldr	r1, [pc, #88]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d009      	beq.n	80050c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050ae:	4b12      	ldr	r3, [pc, #72]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	490e      	ldr	r1, [pc, #56]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050c2:	f000 f821 	bl	8005108 <HAL_RCC_GetSysClockFreq>
 80050c6:	4602      	mov	r2, r0
 80050c8:	4b0b      	ldr	r3, [pc, #44]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	091b      	lsrs	r3, r3, #4
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	490a      	ldr	r1, [pc, #40]	; (80050fc <HAL_RCC_ClockConfig+0x1c0>)
 80050d4:	5ccb      	ldrb	r3, [r1, r3]
 80050d6:	fa22 f303 	lsr.w	r3, r2, r3
 80050da:	4a09      	ldr	r2, [pc, #36]	; (8005100 <HAL_RCC_ClockConfig+0x1c4>)
 80050dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050de:	4b09      	ldr	r3, [pc, #36]	; (8005104 <HAL_RCC_ClockConfig+0x1c8>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fd f868 	bl	80021b8 <HAL_InitTick>

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	40023c00 	.word	0x40023c00
 80050f8:	40023800 	.word	0x40023800
 80050fc:	08009f94 	.word	0x08009f94
 8005100:	20000004 	.word	0x20000004
 8005104:	20000008 	.word	0x20000008

08005108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800510c:	b094      	sub	sp, #80	; 0x50
 800510e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	647b      	str	r3, [r7, #68]	; 0x44
 8005114:	2300      	movs	r3, #0
 8005116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005118:	2300      	movs	r3, #0
 800511a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005120:	4b79      	ldr	r3, [pc, #484]	; (8005308 <HAL_RCC_GetSysClockFreq+0x200>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f003 030c 	and.w	r3, r3, #12
 8005128:	2b08      	cmp	r3, #8
 800512a:	d00d      	beq.n	8005148 <HAL_RCC_GetSysClockFreq+0x40>
 800512c:	2b08      	cmp	r3, #8
 800512e:	f200 80e1 	bhi.w	80052f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005132:	2b00      	cmp	r3, #0
 8005134:	d002      	beq.n	800513c <HAL_RCC_GetSysClockFreq+0x34>
 8005136:	2b04      	cmp	r3, #4
 8005138:	d003      	beq.n	8005142 <HAL_RCC_GetSysClockFreq+0x3a>
 800513a:	e0db      	b.n	80052f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800513c:	4b73      	ldr	r3, [pc, #460]	; (800530c <HAL_RCC_GetSysClockFreq+0x204>)
 800513e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005140:	e0db      	b.n	80052fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005142:	4b73      	ldr	r3, [pc, #460]	; (8005310 <HAL_RCC_GetSysClockFreq+0x208>)
 8005144:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005146:	e0d8      	b.n	80052fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005148:	4b6f      	ldr	r3, [pc, #444]	; (8005308 <HAL_RCC_GetSysClockFreq+0x200>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005150:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005152:	4b6d      	ldr	r3, [pc, #436]	; (8005308 <HAL_RCC_GetSysClockFreq+0x200>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d063      	beq.n	8005226 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800515e:	4b6a      	ldr	r3, [pc, #424]	; (8005308 <HAL_RCC_GetSysClockFreq+0x200>)
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	099b      	lsrs	r3, r3, #6
 8005164:	2200      	movs	r2, #0
 8005166:	63bb      	str	r3, [r7, #56]	; 0x38
 8005168:	63fa      	str	r2, [r7, #60]	; 0x3c
 800516a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005170:	633b      	str	r3, [r7, #48]	; 0x30
 8005172:	2300      	movs	r3, #0
 8005174:	637b      	str	r3, [r7, #52]	; 0x34
 8005176:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800517a:	4622      	mov	r2, r4
 800517c:	462b      	mov	r3, r5
 800517e:	f04f 0000 	mov.w	r0, #0
 8005182:	f04f 0100 	mov.w	r1, #0
 8005186:	0159      	lsls	r1, r3, #5
 8005188:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800518c:	0150      	lsls	r0, r2, #5
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	4621      	mov	r1, r4
 8005194:	1a51      	subs	r1, r2, r1
 8005196:	6139      	str	r1, [r7, #16]
 8005198:	4629      	mov	r1, r5
 800519a:	eb63 0301 	sbc.w	r3, r3, r1
 800519e:	617b      	str	r3, [r7, #20]
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	f04f 0300 	mov.w	r3, #0
 80051a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051ac:	4659      	mov	r1, fp
 80051ae:	018b      	lsls	r3, r1, #6
 80051b0:	4651      	mov	r1, sl
 80051b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051b6:	4651      	mov	r1, sl
 80051b8:	018a      	lsls	r2, r1, #6
 80051ba:	4651      	mov	r1, sl
 80051bc:	ebb2 0801 	subs.w	r8, r2, r1
 80051c0:	4659      	mov	r1, fp
 80051c2:	eb63 0901 	sbc.w	r9, r3, r1
 80051c6:	f04f 0200 	mov.w	r2, #0
 80051ca:	f04f 0300 	mov.w	r3, #0
 80051ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051da:	4690      	mov	r8, r2
 80051dc:	4699      	mov	r9, r3
 80051de:	4623      	mov	r3, r4
 80051e0:	eb18 0303 	adds.w	r3, r8, r3
 80051e4:	60bb      	str	r3, [r7, #8]
 80051e6:	462b      	mov	r3, r5
 80051e8:	eb49 0303 	adc.w	r3, r9, r3
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	f04f 0200 	mov.w	r2, #0
 80051f2:	f04f 0300 	mov.w	r3, #0
 80051f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80051fa:	4629      	mov	r1, r5
 80051fc:	024b      	lsls	r3, r1, #9
 80051fe:	4621      	mov	r1, r4
 8005200:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005204:	4621      	mov	r1, r4
 8005206:	024a      	lsls	r2, r1, #9
 8005208:	4610      	mov	r0, r2
 800520a:	4619      	mov	r1, r3
 800520c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800520e:	2200      	movs	r2, #0
 8005210:	62bb      	str	r3, [r7, #40]	; 0x28
 8005212:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005214:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005218:	f7fb fd1e 	bl	8000c58 <__aeabi_uldivmod>
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
 8005220:	4613      	mov	r3, r2
 8005222:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005224:	e058      	b.n	80052d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005226:	4b38      	ldr	r3, [pc, #224]	; (8005308 <HAL_RCC_GetSysClockFreq+0x200>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	099b      	lsrs	r3, r3, #6
 800522c:	2200      	movs	r2, #0
 800522e:	4618      	mov	r0, r3
 8005230:	4611      	mov	r1, r2
 8005232:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005236:	623b      	str	r3, [r7, #32]
 8005238:	2300      	movs	r3, #0
 800523a:	627b      	str	r3, [r7, #36]	; 0x24
 800523c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005240:	4642      	mov	r2, r8
 8005242:	464b      	mov	r3, r9
 8005244:	f04f 0000 	mov.w	r0, #0
 8005248:	f04f 0100 	mov.w	r1, #0
 800524c:	0159      	lsls	r1, r3, #5
 800524e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005252:	0150      	lsls	r0, r2, #5
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	4641      	mov	r1, r8
 800525a:	ebb2 0a01 	subs.w	sl, r2, r1
 800525e:	4649      	mov	r1, r9
 8005260:	eb63 0b01 	sbc.w	fp, r3, r1
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	f04f 0300 	mov.w	r3, #0
 800526c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005270:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005274:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005278:	ebb2 040a 	subs.w	r4, r2, sl
 800527c:	eb63 050b 	sbc.w	r5, r3, fp
 8005280:	f04f 0200 	mov.w	r2, #0
 8005284:	f04f 0300 	mov.w	r3, #0
 8005288:	00eb      	lsls	r3, r5, #3
 800528a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800528e:	00e2      	lsls	r2, r4, #3
 8005290:	4614      	mov	r4, r2
 8005292:	461d      	mov	r5, r3
 8005294:	4643      	mov	r3, r8
 8005296:	18e3      	adds	r3, r4, r3
 8005298:	603b      	str	r3, [r7, #0]
 800529a:	464b      	mov	r3, r9
 800529c:	eb45 0303 	adc.w	r3, r5, r3
 80052a0:	607b      	str	r3, [r7, #4]
 80052a2:	f04f 0200 	mov.w	r2, #0
 80052a6:	f04f 0300 	mov.w	r3, #0
 80052aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052ae:	4629      	mov	r1, r5
 80052b0:	028b      	lsls	r3, r1, #10
 80052b2:	4621      	mov	r1, r4
 80052b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052b8:	4621      	mov	r1, r4
 80052ba:	028a      	lsls	r2, r1, #10
 80052bc:	4610      	mov	r0, r2
 80052be:	4619      	mov	r1, r3
 80052c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c2:	2200      	movs	r2, #0
 80052c4:	61bb      	str	r3, [r7, #24]
 80052c6:	61fa      	str	r2, [r7, #28]
 80052c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052cc:	f7fb fcc4 	bl	8000c58 <__aeabi_uldivmod>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	4613      	mov	r3, r2
 80052d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052d8:	4b0b      	ldr	r3, [pc, #44]	; (8005308 <HAL_RCC_GetSysClockFreq+0x200>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	0c1b      	lsrs	r3, r3, #16
 80052de:	f003 0303 	and.w	r3, r3, #3
 80052e2:	3301      	adds	r3, #1
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80052e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052f2:	e002      	b.n	80052fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052f4:	4b05      	ldr	r3, [pc, #20]	; (800530c <HAL_RCC_GetSysClockFreq+0x204>)
 80052f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3750      	adds	r7, #80	; 0x50
 8005300:	46bd      	mov	sp, r7
 8005302:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005306:	bf00      	nop
 8005308:	40023800 	.word	0x40023800
 800530c:	00f42400 	.word	0x00f42400
 8005310:	007a1200 	.word	0x007a1200

08005314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005318:	4b03      	ldr	r3, [pc, #12]	; (8005328 <HAL_RCC_GetHCLKFreq+0x14>)
 800531a:	681b      	ldr	r3, [r3, #0]
}
 800531c:	4618      	mov	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	20000004 	.word	0x20000004

0800532c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005330:	f7ff fff0 	bl	8005314 <HAL_RCC_GetHCLKFreq>
 8005334:	4602      	mov	r2, r0
 8005336:	4b05      	ldr	r3, [pc, #20]	; (800534c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	0a9b      	lsrs	r3, r3, #10
 800533c:	f003 0307 	and.w	r3, r3, #7
 8005340:	4903      	ldr	r1, [pc, #12]	; (8005350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005342:	5ccb      	ldrb	r3, [r1, r3]
 8005344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005348:	4618      	mov	r0, r3
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40023800 	.word	0x40023800
 8005350:	08009fa4 	.word	0x08009fa4

08005354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005358:	f7ff ffdc 	bl	8005314 <HAL_RCC_GetHCLKFreq>
 800535c:	4602      	mov	r2, r0
 800535e:	4b05      	ldr	r3, [pc, #20]	; (8005374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	0b5b      	lsrs	r3, r3, #13
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	4903      	ldr	r1, [pc, #12]	; (8005378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800536a:	5ccb      	ldrb	r3, [r1, r3]
 800536c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005370:	4618      	mov	r0, r3
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40023800 	.word	0x40023800
 8005378:	08009fa4 	.word	0x08009fa4

0800537c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e041      	b.n	8005412 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d106      	bne.n	80053a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7fc fd98 	bl	8001ed8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3304      	adds	r3, #4
 80053b8:	4619      	mov	r1, r3
 80053ba:	4610      	mov	r0, r2
 80053bc:	f000 fac0 	bl	8005940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
	...

0800541c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b01      	cmp	r3, #1
 800542e:	d001      	beq.n	8005434 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e044      	b.n	80054be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0201 	orr.w	r2, r2, #1
 800544a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a1e      	ldr	r2, [pc, #120]	; (80054cc <HAL_TIM_Base_Start_IT+0xb0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d018      	beq.n	8005488 <HAL_TIM_Base_Start_IT+0x6c>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545e:	d013      	beq.n	8005488 <HAL_TIM_Base_Start_IT+0x6c>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a1a      	ldr	r2, [pc, #104]	; (80054d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00e      	beq.n	8005488 <HAL_TIM_Base_Start_IT+0x6c>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a19      	ldr	r2, [pc, #100]	; (80054d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d009      	beq.n	8005488 <HAL_TIM_Base_Start_IT+0x6c>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a17      	ldr	r2, [pc, #92]	; (80054d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d004      	beq.n	8005488 <HAL_TIM_Base_Start_IT+0x6c>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a16      	ldr	r2, [pc, #88]	; (80054dc <HAL_TIM_Base_Start_IT+0xc0>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d111      	bne.n	80054ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 0307 	and.w	r3, r3, #7
 8005492:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b06      	cmp	r3, #6
 8005498:	d010      	beq.n	80054bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f042 0201 	orr.w	r2, r2, #1
 80054a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054aa:	e007      	b.n	80054bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0201 	orr.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	40010000 	.word	0x40010000
 80054d0:	40000400 	.word	0x40000400
 80054d4:	40000800 	.word	0x40000800
 80054d8:	40000c00 	.word	0x40000c00
 80054dc:	40014000 	.word	0x40014000

080054e0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68da      	ldr	r2, [r3, #12]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 0201 	bic.w	r2, r2, #1
 80054f6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6a1a      	ldr	r2, [r3, #32]
 80054fe:	f241 1311 	movw	r3, #4369	; 0x1111
 8005502:	4013      	ands	r3, r2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10f      	bne.n	8005528 <HAL_TIM_Base_Stop_IT+0x48>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6a1a      	ldr	r2, [r3, #32]
 800550e:	f240 4344 	movw	r3, #1092	; 0x444
 8005512:	4013      	ands	r3, r2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d107      	bne.n	8005528 <HAL_TIM_Base_Stop_IT+0x48>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 0201 	bic.w	r2, r2, #1
 8005526:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b082      	sub	sp, #8
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b02      	cmp	r3, #2
 8005552:	d122      	bne.n	800559a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b02      	cmp	r3, #2
 8005560:	d11b      	bne.n	800559a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f06f 0202 	mvn.w	r2, #2
 800556a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	f003 0303 	and.w	r3, r3, #3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f9bf 	bl	8005904 <HAL_TIM_IC_CaptureCallback>
 8005586:	e005      	b.n	8005594 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f9b1 	bl	80058f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f9c2 	bl	8005918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	2b04      	cmp	r3, #4
 80055a6:	d122      	bne.n	80055ee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f003 0304 	and.w	r3, r3, #4
 80055b2:	2b04      	cmp	r3, #4
 80055b4:	d11b      	bne.n	80055ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f06f 0204 	mvn.w	r2, #4
 80055be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f995 	bl	8005904 <HAL_TIM_IC_CaptureCallback>
 80055da:	e005      	b.n	80055e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f987 	bl	80058f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f998 	bl	8005918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	f003 0308 	and.w	r3, r3, #8
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d122      	bne.n	8005642 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f003 0308 	and.w	r3, r3, #8
 8005606:	2b08      	cmp	r3, #8
 8005608:	d11b      	bne.n	8005642 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f06f 0208 	mvn.w	r2, #8
 8005612:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2204      	movs	r2, #4
 8005618:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69db      	ldr	r3, [r3, #28]
 8005620:	f003 0303 	and.w	r3, r3, #3
 8005624:	2b00      	cmp	r3, #0
 8005626:	d003      	beq.n	8005630 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f96b 	bl	8005904 <HAL_TIM_IC_CaptureCallback>
 800562e:	e005      	b.n	800563c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f95d 	bl	80058f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f96e 	bl	8005918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	f003 0310 	and.w	r3, r3, #16
 800564c:	2b10      	cmp	r3, #16
 800564e:	d122      	bne.n	8005696 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f003 0310 	and.w	r3, r3, #16
 800565a:	2b10      	cmp	r3, #16
 800565c:	d11b      	bne.n	8005696 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f06f 0210 	mvn.w	r2, #16
 8005666:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2208      	movs	r2, #8
 800566c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f941 	bl	8005904 <HAL_TIM_IC_CaptureCallback>
 8005682:	e005      	b.n	8005690 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f933 	bl	80058f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f944 	bl	8005918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d10e      	bne.n	80056c2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d107      	bne.n	80056c2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f06f 0201 	mvn.w	r2, #1
 80056ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f90d 	bl	80058dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056cc:	2b80      	cmp	r3, #128	; 0x80
 80056ce:	d10e      	bne.n	80056ee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056da:	2b80      	cmp	r3, #128	; 0x80
 80056dc:	d107      	bne.n	80056ee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fabb 	bl	8005c64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f8:	2b40      	cmp	r3, #64	; 0x40
 80056fa:	d10e      	bne.n	800571a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005706:	2b40      	cmp	r3, #64	; 0x40
 8005708:	d107      	bne.n	800571a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f909 	bl	800592c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	f003 0320 	and.w	r3, r3, #32
 8005724:	2b20      	cmp	r3, #32
 8005726:	d10e      	bne.n	8005746 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b20      	cmp	r3, #32
 8005734:	d107      	bne.n	8005746 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f06f 0220 	mvn.w	r2, #32
 800573e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 fa85 	bl	8005c50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005746:	bf00      	nop
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b084      	sub	sp, #16
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
 8005756:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005758:	2300      	movs	r3, #0
 800575a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005762:	2b01      	cmp	r3, #1
 8005764:	d101      	bne.n	800576a <HAL_TIM_ConfigClockSource+0x1c>
 8005766:	2302      	movs	r3, #2
 8005768:	e0b4      	b.n	80058d4 <HAL_TIM_ConfigClockSource+0x186>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2202      	movs	r2, #2
 8005776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005788:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005790:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057a2:	d03e      	beq.n	8005822 <HAL_TIM_ConfigClockSource+0xd4>
 80057a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057a8:	f200 8087 	bhi.w	80058ba <HAL_TIM_ConfigClockSource+0x16c>
 80057ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b0:	f000 8086 	beq.w	80058c0 <HAL_TIM_ConfigClockSource+0x172>
 80057b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b8:	d87f      	bhi.n	80058ba <HAL_TIM_ConfigClockSource+0x16c>
 80057ba:	2b70      	cmp	r3, #112	; 0x70
 80057bc:	d01a      	beq.n	80057f4 <HAL_TIM_ConfigClockSource+0xa6>
 80057be:	2b70      	cmp	r3, #112	; 0x70
 80057c0:	d87b      	bhi.n	80058ba <HAL_TIM_ConfigClockSource+0x16c>
 80057c2:	2b60      	cmp	r3, #96	; 0x60
 80057c4:	d050      	beq.n	8005868 <HAL_TIM_ConfigClockSource+0x11a>
 80057c6:	2b60      	cmp	r3, #96	; 0x60
 80057c8:	d877      	bhi.n	80058ba <HAL_TIM_ConfigClockSource+0x16c>
 80057ca:	2b50      	cmp	r3, #80	; 0x50
 80057cc:	d03c      	beq.n	8005848 <HAL_TIM_ConfigClockSource+0xfa>
 80057ce:	2b50      	cmp	r3, #80	; 0x50
 80057d0:	d873      	bhi.n	80058ba <HAL_TIM_ConfigClockSource+0x16c>
 80057d2:	2b40      	cmp	r3, #64	; 0x40
 80057d4:	d058      	beq.n	8005888 <HAL_TIM_ConfigClockSource+0x13a>
 80057d6:	2b40      	cmp	r3, #64	; 0x40
 80057d8:	d86f      	bhi.n	80058ba <HAL_TIM_ConfigClockSource+0x16c>
 80057da:	2b30      	cmp	r3, #48	; 0x30
 80057dc:	d064      	beq.n	80058a8 <HAL_TIM_ConfigClockSource+0x15a>
 80057de:	2b30      	cmp	r3, #48	; 0x30
 80057e0:	d86b      	bhi.n	80058ba <HAL_TIM_ConfigClockSource+0x16c>
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	d060      	beq.n	80058a8 <HAL_TIM_ConfigClockSource+0x15a>
 80057e6:	2b20      	cmp	r3, #32
 80057e8:	d867      	bhi.n	80058ba <HAL_TIM_ConfigClockSource+0x16c>
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d05c      	beq.n	80058a8 <HAL_TIM_ConfigClockSource+0x15a>
 80057ee:	2b10      	cmp	r3, #16
 80057f0:	d05a      	beq.n	80058a8 <HAL_TIM_ConfigClockSource+0x15a>
 80057f2:	e062      	b.n	80058ba <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6818      	ldr	r0, [r3, #0]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	6899      	ldr	r1, [r3, #8]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f000 f996 	bl	8005b34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005816:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	609a      	str	r2, [r3, #8]
      break;
 8005820:	e04f      	b.n	80058c2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6818      	ldr	r0, [r3, #0]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	6899      	ldr	r1, [r3, #8]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f000 f97f 	bl	8005b34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005844:	609a      	str	r2, [r3, #8]
      break;
 8005846:	e03c      	b.n	80058c2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6818      	ldr	r0, [r3, #0]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	6859      	ldr	r1, [r3, #4]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	461a      	mov	r2, r3
 8005856:	f000 f8f3 	bl	8005a40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2150      	movs	r1, #80	; 0x50
 8005860:	4618      	mov	r0, r3
 8005862:	f000 f94c 	bl	8005afe <TIM_ITRx_SetConfig>
      break;
 8005866:	e02c      	b.n	80058c2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6818      	ldr	r0, [r3, #0]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	6859      	ldr	r1, [r3, #4]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	461a      	mov	r2, r3
 8005876:	f000 f912 	bl	8005a9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2160      	movs	r1, #96	; 0x60
 8005880:	4618      	mov	r0, r3
 8005882:	f000 f93c 	bl	8005afe <TIM_ITRx_SetConfig>
      break;
 8005886:	e01c      	b.n	80058c2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6818      	ldr	r0, [r3, #0]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	6859      	ldr	r1, [r3, #4]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	461a      	mov	r2, r3
 8005896:	f000 f8d3 	bl	8005a40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2140      	movs	r1, #64	; 0x40
 80058a0:	4618      	mov	r0, r3
 80058a2:	f000 f92c 	bl	8005afe <TIM_ITRx_SetConfig>
      break;
 80058a6:	e00c      	b.n	80058c2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4619      	mov	r1, r3
 80058b2:	4610      	mov	r0, r2
 80058b4:	f000 f923 	bl	8005afe <TIM_ITRx_SetConfig>
      break;
 80058b8:	e003      	b.n	80058c2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	73fb      	strb	r3, [r7, #15]
      break;
 80058be:	e000      	b.n	80058c2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a34      	ldr	r2, [pc, #208]	; (8005a24 <TIM_Base_SetConfig+0xe4>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d00f      	beq.n	8005978 <TIM_Base_SetConfig+0x38>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800595e:	d00b      	beq.n	8005978 <TIM_Base_SetConfig+0x38>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a31      	ldr	r2, [pc, #196]	; (8005a28 <TIM_Base_SetConfig+0xe8>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d007      	beq.n	8005978 <TIM_Base_SetConfig+0x38>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a30      	ldr	r2, [pc, #192]	; (8005a2c <TIM_Base_SetConfig+0xec>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d003      	beq.n	8005978 <TIM_Base_SetConfig+0x38>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a2f      	ldr	r2, [pc, #188]	; (8005a30 <TIM_Base_SetConfig+0xf0>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d108      	bne.n	800598a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4313      	orrs	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a25      	ldr	r2, [pc, #148]	; (8005a24 <TIM_Base_SetConfig+0xe4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d01b      	beq.n	80059ca <TIM_Base_SetConfig+0x8a>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005998:	d017      	beq.n	80059ca <TIM_Base_SetConfig+0x8a>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a22      	ldr	r2, [pc, #136]	; (8005a28 <TIM_Base_SetConfig+0xe8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d013      	beq.n	80059ca <TIM_Base_SetConfig+0x8a>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a21      	ldr	r2, [pc, #132]	; (8005a2c <TIM_Base_SetConfig+0xec>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d00f      	beq.n	80059ca <TIM_Base_SetConfig+0x8a>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a20      	ldr	r2, [pc, #128]	; (8005a30 <TIM_Base_SetConfig+0xf0>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d00b      	beq.n	80059ca <TIM_Base_SetConfig+0x8a>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a1f      	ldr	r2, [pc, #124]	; (8005a34 <TIM_Base_SetConfig+0xf4>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d007      	beq.n	80059ca <TIM_Base_SetConfig+0x8a>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a1e      	ldr	r2, [pc, #120]	; (8005a38 <TIM_Base_SetConfig+0xf8>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d003      	beq.n	80059ca <TIM_Base_SetConfig+0x8a>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a1d      	ldr	r2, [pc, #116]	; (8005a3c <TIM_Base_SetConfig+0xfc>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d108      	bne.n	80059dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4313      	orrs	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a08      	ldr	r2, [pc, #32]	; (8005a24 <TIM_Base_SetConfig+0xe4>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d103      	bne.n	8005a10 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	691a      	ldr	r2, [r3, #16]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	615a      	str	r2, [r3, #20]
}
 8005a16:	bf00      	nop
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	40010000 	.word	0x40010000
 8005a28:	40000400 	.word	0x40000400
 8005a2c:	40000800 	.word	0x40000800
 8005a30:	40000c00 	.word	0x40000c00
 8005a34:	40014000 	.word	0x40014000
 8005a38:	40014400 	.word	0x40014400
 8005a3c:	40014800 	.word	0x40014800

08005a40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	f023 0201 	bic.w	r2, r3, #1
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	011b      	lsls	r3, r3, #4
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f023 030a 	bic.w	r3, r3, #10
 8005a7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	621a      	str	r2, [r3, #32]
}
 8005a92:	bf00      	nop
 8005a94:	371c      	adds	r7, #28
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b087      	sub	sp, #28
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	60b9      	str	r1, [r7, #8]
 8005aa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	f023 0210 	bic.w	r2, r3, #16
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ac8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	031b      	lsls	r3, r3, #12
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ada:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	621a      	str	r2, [r3, #32]
}
 8005af2:	bf00      	nop
 8005af4:	371c      	adds	r7, #28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b085      	sub	sp, #20
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f043 0307 	orr.w	r3, r3, #7
 8005b20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	609a      	str	r2, [r3, #8]
}
 8005b28:	bf00      	nop
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
 8005b40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	021a      	lsls	r2, r3, #8
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	431a      	orrs	r2, r3
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	609a      	str	r2, [r3, #8]
}
 8005b68:	bf00      	nop
 8005b6a:	371c      	adds	r7, #28
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d101      	bne.n	8005b8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b88:	2302      	movs	r3, #2
 8005b8a:	e050      	b.n	8005c2e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a1c      	ldr	r2, [pc, #112]	; (8005c3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d018      	beq.n	8005c02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd8:	d013      	beq.n	8005c02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a18      	ldr	r2, [pc, #96]	; (8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d00e      	beq.n	8005c02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a16      	ldr	r2, [pc, #88]	; (8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d009      	beq.n	8005c02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a15      	ldr	r2, [pc, #84]	; (8005c48 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d004      	beq.n	8005c02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a13      	ldr	r2, [pc, #76]	; (8005c4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d10c      	bne.n	8005c1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	40010000 	.word	0x40010000
 8005c40:	40000400 	.word	0x40000400
 8005c44:	40000800 	.word	0x40000800
 8005c48:	40000c00 	.word	0x40000c00
 8005c4c:	40014000 	.word	0x40014000

08005c50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e03f      	b.n	8005d0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d106      	bne.n	8005ca4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7fc f98a 	bl	8001fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2224      	movs	r2, #36	; 0x24
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68da      	ldr	r2, [r3, #12]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 ff5f 	bl	8006b80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	691a      	ldr	r2, [r3, #16]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	695a      	ldr	r2, [r3, #20]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ce0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68da      	ldr	r2, [r3, #12]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b08a      	sub	sp, #40	; 0x28
 8005d16:	af02      	add	r7, sp, #8
 8005d18:	60f8      	str	r0, [r7, #12]
 8005d1a:	60b9      	str	r1, [r7, #8]
 8005d1c:	603b      	str	r3, [r7, #0]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b20      	cmp	r3, #32
 8005d30:	d17c      	bne.n	8005e2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d002      	beq.n	8005d3e <HAL_UART_Transmit+0x2c>
 8005d38:	88fb      	ldrh	r3, [r7, #6]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e075      	b.n	8005e2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d101      	bne.n	8005d50 <HAL_UART_Transmit+0x3e>
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	e06e      	b.n	8005e2e <HAL_UART_Transmit+0x11c>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2221      	movs	r2, #33	; 0x21
 8005d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d66:	f7fc fa6b 	bl	8002240 <HAL_GetTick>
 8005d6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	88fa      	ldrh	r2, [r7, #6]
 8005d70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	88fa      	ldrh	r2, [r7, #6]
 8005d76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d80:	d108      	bne.n	8005d94 <HAL_UART_Transmit+0x82>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d104      	bne.n	8005d94 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	61bb      	str	r3, [r7, #24]
 8005d92:	e003      	b.n	8005d9c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005da4:	e02a      	b.n	8005dfc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2200      	movs	r2, #0
 8005dae:	2180      	movs	r1, #128	; 0x80
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 fc17 	bl	80065e4 <UART_WaitOnFlagUntilTimeout>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d001      	beq.n	8005dc0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e036      	b.n	8005e2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10b      	bne.n	8005dde <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	3302      	adds	r3, #2
 8005dda:	61bb      	str	r3, [r7, #24]
 8005ddc:	e007      	b.n	8005dee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	781a      	ldrb	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	3301      	adds	r3, #1
 8005dec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	3b01      	subs	r3, #1
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1cf      	bne.n	8005da6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	2140      	movs	r1, #64	; 0x40
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f000 fbe7 	bl	80065e4 <UART_WaitOnFlagUntilTimeout>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d001      	beq.n	8005e20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e006      	b.n	8005e2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2220      	movs	r2, #32
 8005e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	e000      	b.n	8005e2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005e2c:	2302      	movs	r3, #2
  }
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3720      	adds	r7, #32
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b084      	sub	sp, #16
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	60f8      	str	r0, [r7, #12]
 8005e3e:	60b9      	str	r1, [r7, #8]
 8005e40:	4613      	mov	r3, r2
 8005e42:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b20      	cmp	r3, #32
 8005e4e:	d11d      	bne.n	8005e8c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d002      	beq.n	8005e5c <HAL_UART_Receive_DMA+0x26>
 8005e56:	88fb      	ldrh	r3, [r7, #6]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e016      	b.n	8005e8e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d101      	bne.n	8005e6e <HAL_UART_Receive_DMA+0x38>
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	e00f      	b.n	8005e8e <HAL_UART_Receive_DMA+0x58>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005e7c:	88fb      	ldrh	r3, [r7, #6]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	68b9      	ldr	r1, [r7, #8]
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f000 fc1c 	bl	80066c0 <UART_Start_Receive_DMA>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	e000      	b.n	8005e8e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005e8c:	2302      	movs	r3, #2
  }
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b0ba      	sub	sp, #232	; 0xe8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ece:	f003 030f 	and.w	r3, r3, #15
 8005ed2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005ed6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10f      	bne.n	8005efe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee2:	f003 0320 	and.w	r3, r3, #32
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d009      	beq.n	8005efe <HAL_UART_IRQHandler+0x66>
 8005eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eee:	f003 0320 	and.w	r3, r3, #32
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fd87 	bl	8006a0a <UART_Receive_IT>
      return;
 8005efc:	e256      	b.n	80063ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005efe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 80de 	beq.w	80060c4 <HAL_UART_IRQHandler+0x22c>
 8005f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d106      	bne.n	8005f22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 80d1 	beq.w	80060c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00b      	beq.n	8005f46 <HAL_UART_IRQHandler+0xae>
 8005f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d005      	beq.n	8005f46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	f043 0201 	orr.w	r2, r3, #1
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f4a:	f003 0304 	and.w	r3, r3, #4
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00b      	beq.n	8005f6a <HAL_UART_IRQHandler+0xd2>
 8005f52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d005      	beq.n	8005f6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	f043 0202 	orr.w	r2, r3, #2
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00b      	beq.n	8005f8e <HAL_UART_IRQHandler+0xf6>
 8005f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d005      	beq.n	8005f8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f86:	f043 0204 	orr.w	r2, r3, #4
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f92:	f003 0308 	and.w	r3, r3, #8
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d011      	beq.n	8005fbe <HAL_UART_IRQHandler+0x126>
 8005f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f9e:	f003 0320 	and.w	r3, r3, #32
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d105      	bne.n	8005fb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d005      	beq.n	8005fbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb6:	f043 0208 	orr.w	r2, r3, #8
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f000 81ed 	beq.w	80063a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fcc:	f003 0320 	and.w	r3, r3, #32
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d008      	beq.n	8005fe6 <HAL_UART_IRQHandler+0x14e>
 8005fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fd8:	f003 0320 	and.w	r3, r3, #32
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 fd12 	bl	8006a0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff0:	2b40      	cmp	r3, #64	; 0x40
 8005ff2:	bf0c      	ite	eq
 8005ff4:	2301      	moveq	r3, #1
 8005ff6:	2300      	movne	r3, #0
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	f003 0308 	and.w	r3, r3, #8
 8006006:	2b00      	cmp	r3, #0
 8006008:	d103      	bne.n	8006012 <HAL_UART_IRQHandler+0x17a>
 800600a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800600e:	2b00      	cmp	r3, #0
 8006010:	d04f      	beq.n	80060b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fc1a 	bl	800684c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006022:	2b40      	cmp	r3, #64	; 0x40
 8006024:	d141      	bne.n	80060aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3314      	adds	r3, #20
 800602c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006034:	e853 3f00 	ldrex	r3, [r3]
 8006038:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800603c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006044:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3314      	adds	r3, #20
 800604e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006052:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006056:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800605e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006062:	e841 2300 	strex	r3, r2, [r1]
 8006066:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800606a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1d9      	bne.n	8006026 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006076:	2b00      	cmp	r3, #0
 8006078:	d013      	beq.n	80060a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607e:	4a7d      	ldr	r2, [pc, #500]	; (8006274 <HAL_UART_IRQHandler+0x3dc>)
 8006080:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006086:	4618      	mov	r0, r3
 8006088:	f7fd f8b8 	bl	80031fc <HAL_DMA_Abort_IT>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d016      	beq.n	80060c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800609c:	4610      	mov	r0, r2
 800609e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060a0:	e00e      	b.n	80060c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f990 	bl	80063c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060a8:	e00a      	b.n	80060c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f98c 	bl	80063c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b0:	e006      	b.n	80060c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f988 	bl	80063c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80060be:	e170      	b.n	80063a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c0:	bf00      	nop
    return;
 80060c2:	e16e      	b.n	80063a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	f040 814a 	bne.w	8006362 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80060ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d2:	f003 0310 	and.w	r3, r3, #16
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f000 8143 	beq.w	8006362 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80060dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060e0:	f003 0310 	and.w	r3, r3, #16
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 813c 	beq.w	8006362 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060ea:	2300      	movs	r3, #0
 80060ec:	60bb      	str	r3, [r7, #8]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	60bb      	str	r3, [r7, #8]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	60bb      	str	r3, [r7, #8]
 80060fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610a:	2b40      	cmp	r3, #64	; 0x40
 800610c:	f040 80b4 	bne.w	8006278 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800611c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006120:	2b00      	cmp	r3, #0
 8006122:	f000 8140 	beq.w	80063a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800612a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800612e:	429a      	cmp	r2, r3
 8006130:	f080 8139 	bcs.w	80063a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800613a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006146:	f000 8088 	beq.w	800625a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	330c      	adds	r3, #12
 8006150:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006154:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006158:	e853 3f00 	ldrex	r3, [r3]
 800615c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006160:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006168:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	330c      	adds	r3, #12
 8006172:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006176:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800617a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006182:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006186:	e841 2300 	strex	r3, r2, [r1]
 800618a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800618e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1d9      	bne.n	800614a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	3314      	adds	r3, #20
 800619c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061a0:	e853 3f00 	ldrex	r3, [r3]
 80061a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061a8:	f023 0301 	bic.w	r3, r3, #1
 80061ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	3314      	adds	r3, #20
 80061b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80061be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80061c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061c6:	e841 2300 	strex	r3, r2, [r1]
 80061ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80061cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1e1      	bne.n	8006196 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3314      	adds	r3, #20
 80061d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061dc:	e853 3f00 	ldrex	r3, [r3]
 80061e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3314      	adds	r3, #20
 80061f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80061f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80061fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80061fe:	e841 2300 	strex	r3, r2, [r1]
 8006202:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006204:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1e3      	bne.n	80061d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2220      	movs	r2, #32
 800620e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	330c      	adds	r3, #12
 800621e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006222:	e853 3f00 	ldrex	r3, [r3]
 8006226:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800622a:	f023 0310 	bic.w	r3, r3, #16
 800622e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	330c      	adds	r3, #12
 8006238:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800623c:	65ba      	str	r2, [r7, #88]	; 0x58
 800623e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006240:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006242:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006244:	e841 2300 	strex	r3, r2, [r1]
 8006248:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800624a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e3      	bne.n	8006218 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006254:	4618      	mov	r0, r3
 8006256:	f7fc ff61 	bl	800311c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006262:	b29b      	uxth	r3, r3
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	b29b      	uxth	r3, r3
 8006268:	4619      	mov	r1, r3
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f8b6 	bl	80063dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006270:	e099      	b.n	80063a6 <HAL_UART_IRQHandler+0x50e>
 8006272:	bf00      	nop
 8006274:	08006913 	.word	0x08006913
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006280:	b29b      	uxth	r3, r3
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800628c:	b29b      	uxth	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 808b 	beq.w	80063aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006294:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 8086 	beq.w	80063aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	330c      	adds	r3, #12
 80062a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a8:	e853 3f00 	ldrex	r3, [r3]
 80062ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	330c      	adds	r3, #12
 80062be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80062c2:	647a      	str	r2, [r7, #68]	; 0x44
 80062c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062ca:	e841 2300 	strex	r3, r2, [r1]
 80062ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1e3      	bne.n	800629e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3314      	adds	r3, #20
 80062dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	e853 3f00 	ldrex	r3, [r3]
 80062e4:	623b      	str	r3, [r7, #32]
   return(result);
 80062e6:	6a3b      	ldr	r3, [r7, #32]
 80062e8:	f023 0301 	bic.w	r3, r3, #1
 80062ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3314      	adds	r3, #20
 80062f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80062fa:	633a      	str	r2, [r7, #48]	; 0x30
 80062fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006302:	e841 2300 	strex	r3, r2, [r1]
 8006306:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1e3      	bne.n	80062d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2220      	movs	r2, #32
 8006312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	330c      	adds	r3, #12
 8006322:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	e853 3f00 	ldrex	r3, [r3]
 800632a:	60fb      	str	r3, [r7, #12]
   return(result);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f023 0310 	bic.w	r3, r3, #16
 8006332:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	330c      	adds	r3, #12
 800633c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006340:	61fa      	str	r2, [r7, #28]
 8006342:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006344:	69b9      	ldr	r1, [r7, #24]
 8006346:	69fa      	ldr	r2, [r7, #28]
 8006348:	e841 2300 	strex	r3, r2, [r1]
 800634c:	617b      	str	r3, [r7, #20]
   return(result);
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1e3      	bne.n	800631c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006354:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006358:	4619      	mov	r1, r3
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f83e 	bl	80063dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006360:	e023      	b.n	80063aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800636a:	2b00      	cmp	r3, #0
 800636c:	d009      	beq.n	8006382 <HAL_UART_IRQHandler+0x4ea>
 800636e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006376:	2b00      	cmp	r3, #0
 8006378:	d003      	beq.n	8006382 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fadd 	bl	800693a <UART_Transmit_IT>
    return;
 8006380:	e014      	b.n	80063ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00e      	beq.n	80063ac <HAL_UART_IRQHandler+0x514>
 800638e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006396:	2b00      	cmp	r3, #0
 8006398:	d008      	beq.n	80063ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 fb1d 	bl	80069da <UART_EndTransmit_IT>
    return;
 80063a0:	e004      	b.n	80063ac <HAL_UART_IRQHandler+0x514>
    return;
 80063a2:	bf00      	nop
 80063a4:	e002      	b.n	80063ac <HAL_UART_IRQHandler+0x514>
      return;
 80063a6:	bf00      	nop
 80063a8:	e000      	b.n	80063ac <HAL_UART_IRQHandler+0x514>
      return;
 80063aa:	bf00      	nop
  }
}
 80063ac:	37e8      	adds	r7, #232	; 0xe8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop

080063b4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	460b      	mov	r3, r1
 80063e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b09c      	sub	sp, #112	; 0x70
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006400:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800640c:	2b00      	cmp	r3, #0
 800640e:	d172      	bne.n	80064f6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006412:	2200      	movs	r2, #0
 8006414:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	330c      	adds	r3, #12
 800641c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006420:	e853 3f00 	ldrex	r3, [r3]
 8006424:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800642c:	66bb      	str	r3, [r7, #104]	; 0x68
 800642e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	330c      	adds	r3, #12
 8006434:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006436:	65ba      	str	r2, [r7, #88]	; 0x58
 8006438:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800643c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800643e:	e841 2300 	strex	r3, r2, [r1]
 8006442:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1e5      	bne.n	8006416 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800644a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	3314      	adds	r3, #20
 8006450:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006454:	e853 3f00 	ldrex	r3, [r3]
 8006458:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800645a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800645c:	f023 0301 	bic.w	r3, r3, #1
 8006460:	667b      	str	r3, [r7, #100]	; 0x64
 8006462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3314      	adds	r3, #20
 8006468:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800646a:	647a      	str	r2, [r7, #68]	; 0x44
 800646c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006470:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006472:	e841 2300 	strex	r3, r2, [r1]
 8006476:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1e5      	bne.n	800644a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800647e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	3314      	adds	r3, #20
 8006484:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	e853 3f00 	ldrex	r3, [r3]
 800648c:	623b      	str	r3, [r7, #32]
   return(result);
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006494:	663b      	str	r3, [r7, #96]	; 0x60
 8006496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3314      	adds	r3, #20
 800649c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800649e:	633a      	str	r2, [r7, #48]	; 0x30
 80064a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064a6:	e841 2300 	strex	r3, r2, [r1]
 80064aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1e5      	bne.n	800647e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80064b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064b4:	2220      	movs	r2, #32
 80064b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d119      	bne.n	80064f6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	330c      	adds	r3, #12
 80064c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	e853 3f00 	ldrex	r3, [r3]
 80064d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f023 0310 	bic.w	r3, r3, #16
 80064d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	330c      	adds	r3, #12
 80064e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80064e2:	61fa      	str	r2, [r7, #28]
 80064e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e6:	69b9      	ldr	r1, [r7, #24]
 80064e8:	69fa      	ldr	r2, [r7, #28]
 80064ea:	e841 2300 	strex	r3, r2, [r1]
 80064ee:	617b      	str	r3, [r7, #20]
   return(result);
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1e5      	bne.n	80064c2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d106      	bne.n	800650c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006500:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006502:	4619      	mov	r1, r3
 8006504:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006506:	f7ff ff69 	bl	80063dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800650a:	e002      	b.n	8006512 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800650c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800650e:	f7fb fb55 	bl	8001bbc <HAL_UART_RxCpltCallback>
}
 8006512:	bf00      	nop
 8006514:	3770      	adds	r7, #112	; 0x70
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b084      	sub	sp, #16
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006526:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652c:	2b01      	cmp	r3, #1
 800652e:	d108      	bne.n	8006542 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006534:	085b      	lsrs	r3, r3, #1
 8006536:	b29b      	uxth	r3, r3
 8006538:	4619      	mov	r1, r3
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f7ff ff4e 	bl	80063dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006540:	e002      	b.n	8006548 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f7ff ff36 	bl	80063b4 <HAL_UART_RxHalfCpltCallback>
}
 8006548:	bf00      	nop
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006558:	2300      	movs	r3, #0
 800655a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006560:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656c:	2b80      	cmp	r3, #128	; 0x80
 800656e:	bf0c      	ite	eq
 8006570:	2301      	moveq	r3, #1
 8006572:	2300      	movne	r3, #0
 8006574:	b2db      	uxtb	r3, r3
 8006576:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b21      	cmp	r3, #33	; 0x21
 8006582:	d108      	bne.n	8006596 <UART_DMAError+0x46>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d005      	beq.n	8006596 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	2200      	movs	r2, #0
 800658e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006590:	68b8      	ldr	r0, [r7, #8]
 8006592:	f000 f933 	bl	80067fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a0:	2b40      	cmp	r3, #64	; 0x40
 80065a2:	bf0c      	ite	eq
 80065a4:	2301      	moveq	r3, #1
 80065a6:	2300      	movne	r3, #0
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b22      	cmp	r3, #34	; 0x22
 80065b6:	d108      	bne.n	80065ca <UART_DMAError+0x7a>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d005      	beq.n	80065ca <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2200      	movs	r2, #0
 80065c2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80065c4:	68b8      	ldr	r0, [r7, #8]
 80065c6:	f000 f941 	bl	800684c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ce:	f043 0210 	orr.w	r2, r3, #16
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065d6:	68b8      	ldr	r0, [r7, #8]
 80065d8:	f7ff fef6 	bl	80063c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065dc:	bf00      	nop
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b090      	sub	sp, #64	; 0x40
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	603b      	str	r3, [r7, #0]
 80065f0:	4613      	mov	r3, r2
 80065f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065f4:	e050      	b.n	8006698 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fc:	d04c      	beq.n	8006698 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80065fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006600:	2b00      	cmp	r3, #0
 8006602:	d007      	beq.n	8006614 <UART_WaitOnFlagUntilTimeout+0x30>
 8006604:	f7fb fe1c 	bl	8002240 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006610:	429a      	cmp	r2, r3
 8006612:	d241      	bcs.n	8006698 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	330c      	adds	r3, #12
 800661a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661e:	e853 3f00 	ldrex	r3, [r3]
 8006622:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800662a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	330c      	adds	r3, #12
 8006632:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006634:	637a      	str	r2, [r7, #52]	; 0x34
 8006636:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006638:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800663a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800663c:	e841 2300 	strex	r3, r2, [r1]
 8006640:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1e5      	bne.n	8006614 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3314      	adds	r3, #20
 800664e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	e853 3f00 	ldrex	r3, [r3]
 8006656:	613b      	str	r3, [r7, #16]
   return(result);
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f023 0301 	bic.w	r3, r3, #1
 800665e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3314      	adds	r3, #20
 8006666:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006668:	623a      	str	r2, [r7, #32]
 800666a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666c:	69f9      	ldr	r1, [r7, #28]
 800666e:	6a3a      	ldr	r2, [r7, #32]
 8006670:	e841 2300 	strex	r3, r2, [r1]
 8006674:	61bb      	str	r3, [r7, #24]
   return(result);
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1e5      	bne.n	8006648 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2220      	movs	r2, #32
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2220      	movs	r2, #32
 8006688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e00f      	b.n	80066b8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	4013      	ands	r3, r2
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	bf0c      	ite	eq
 80066a8:	2301      	moveq	r3, #1
 80066aa:	2300      	movne	r3, #0
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	461a      	mov	r2, r3
 80066b0:	79fb      	ldrb	r3, [r7, #7]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d09f      	beq.n	80065f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3740      	adds	r7, #64	; 0x40
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b098      	sub	sp, #96	; 0x60
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	4613      	mov	r3, r2
 80066cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	88fa      	ldrh	r2, [r7, #6]
 80066d8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2222      	movs	r2, #34	; 0x22
 80066e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ec:	4a40      	ldr	r2, [pc, #256]	; (80067f0 <UART_Start_Receive_DMA+0x130>)
 80066ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f4:	4a3f      	ldr	r2, [pc, #252]	; (80067f4 <UART_Start_Receive_DMA+0x134>)
 80066f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fc:	4a3e      	ldr	r2, [pc, #248]	; (80067f8 <UART_Start_Receive_DMA+0x138>)
 80066fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006704:	2200      	movs	r2, #0
 8006706:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006708:	f107 0308 	add.w	r3, r7, #8
 800670c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3304      	adds	r3, #4
 8006718:	4619      	mov	r1, r3
 800671a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	88fb      	ldrh	r3, [r7, #6]
 8006720:	f7fc fca4 	bl	800306c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006724:	2300      	movs	r3, #0
 8006726:	613b      	str	r3, [r7, #16]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	613b      	str	r3, [r7, #16]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	613b      	str	r3, [r7, #16]
 8006738:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d019      	beq.n	800677e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	330c      	adds	r3, #12
 8006750:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006754:	e853 3f00 	ldrex	r3, [r3]
 8006758:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800675a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800675c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006760:	65bb      	str	r3, [r7, #88]	; 0x58
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	330c      	adds	r3, #12
 8006768:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800676a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800676c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006770:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006772:	e841 2300 	strex	r3, r2, [r1]
 8006776:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1e5      	bne.n	800674a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	3314      	adds	r3, #20
 8006784:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006788:	e853 3f00 	ldrex	r3, [r3]
 800678c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800678e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006790:	f043 0301 	orr.w	r3, r3, #1
 8006794:	657b      	str	r3, [r7, #84]	; 0x54
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3314      	adds	r3, #20
 800679c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800679e:	63ba      	str	r2, [r7, #56]	; 0x38
 80067a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80067a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067a6:	e841 2300 	strex	r3, r2, [r1]
 80067aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1e5      	bne.n	800677e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3314      	adds	r3, #20
 80067b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	e853 3f00 	ldrex	r3, [r3]
 80067c0:	617b      	str	r3, [r7, #20]
   return(result);
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067c8:	653b      	str	r3, [r7, #80]	; 0x50
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	3314      	adds	r3, #20
 80067d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80067d2:	627a      	str	r2, [r7, #36]	; 0x24
 80067d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d6:	6a39      	ldr	r1, [r7, #32]
 80067d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067da:	e841 2300 	strex	r3, r2, [r1]
 80067de:	61fb      	str	r3, [r7, #28]
   return(result);
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1e5      	bne.n	80067b2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3760      	adds	r7, #96	; 0x60
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	080063f5 	.word	0x080063f5
 80067f4:	0800651b 	.word	0x0800651b
 80067f8:	08006551 	.word	0x08006551

080067fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b089      	sub	sp, #36	; 0x24
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	330c      	adds	r3, #12
 800680a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	e853 3f00 	ldrex	r3, [r3]
 8006812:	60bb      	str	r3, [r7, #8]
   return(result);
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800681a:	61fb      	str	r3, [r7, #28]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	330c      	adds	r3, #12
 8006822:	69fa      	ldr	r2, [r7, #28]
 8006824:	61ba      	str	r2, [r7, #24]
 8006826:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006828:	6979      	ldr	r1, [r7, #20]
 800682a:	69ba      	ldr	r2, [r7, #24]
 800682c:	e841 2300 	strex	r3, r2, [r1]
 8006830:	613b      	str	r3, [r7, #16]
   return(result);
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1e5      	bne.n	8006804 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2220      	movs	r2, #32
 800683c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006840:	bf00      	nop
 8006842:	3724      	adds	r7, #36	; 0x24
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800684c:	b480      	push	{r7}
 800684e:	b095      	sub	sp, #84	; 0x54
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	330c      	adds	r3, #12
 800685a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800685e:	e853 3f00 	ldrex	r3, [r3]
 8006862:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006866:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800686a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	330c      	adds	r3, #12
 8006872:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006874:	643a      	str	r2, [r7, #64]	; 0x40
 8006876:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006878:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800687a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800687c:	e841 2300 	strex	r3, r2, [r1]
 8006880:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1e5      	bne.n	8006854 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3314      	adds	r3, #20
 800688e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006890:	6a3b      	ldr	r3, [r7, #32]
 8006892:	e853 3f00 	ldrex	r3, [r3]
 8006896:	61fb      	str	r3, [r7, #28]
   return(result);
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	f023 0301 	bic.w	r3, r3, #1
 800689e:	64bb      	str	r3, [r7, #72]	; 0x48
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	3314      	adds	r3, #20
 80068a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068b0:	e841 2300 	strex	r3, r2, [r1]
 80068b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1e5      	bne.n	8006888 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d119      	bne.n	80068f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	330c      	adds	r3, #12
 80068ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	e853 3f00 	ldrex	r3, [r3]
 80068d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f023 0310 	bic.w	r3, r3, #16
 80068da:	647b      	str	r3, [r7, #68]	; 0x44
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	330c      	adds	r3, #12
 80068e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068e4:	61ba      	str	r2, [r7, #24]
 80068e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e8:	6979      	ldr	r1, [r7, #20]
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	e841 2300 	strex	r3, r2, [r1]
 80068f0:	613b      	str	r3, [r7, #16]
   return(result);
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1e5      	bne.n	80068c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006906:	bf00      	nop
 8006908:	3754      	adds	r7, #84	; 0x54
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b084      	sub	sp, #16
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f7ff fd4b 	bl	80063c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006932:	bf00      	nop
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800693a:	b480      	push	{r7}
 800693c:	b085      	sub	sp, #20
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b21      	cmp	r3, #33	; 0x21
 800694c:	d13e      	bne.n	80069cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006956:	d114      	bne.n	8006982 <UART_Transmit_IT+0x48>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d110      	bne.n	8006982 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a1b      	ldr	r3, [r3, #32]
 8006964:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	881b      	ldrh	r3, [r3, #0]
 800696a:	461a      	mov	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006974:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	1c9a      	adds	r2, r3, #2
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	621a      	str	r2, [r3, #32]
 8006980:	e008      	b.n	8006994 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	1c59      	adds	r1, r3, #1
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	6211      	str	r1, [r2, #32]
 800698c:	781a      	ldrb	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006998:	b29b      	uxth	r3, r3
 800699a:	3b01      	subs	r3, #1
 800699c:	b29b      	uxth	r3, r3
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	4619      	mov	r1, r3
 80069a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10f      	bne.n	80069c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68da      	ldr	r2, [r3, #12]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68da      	ldr	r2, [r3, #12]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80069c8:	2300      	movs	r3, #0
 80069ca:	e000      	b.n	80069ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80069cc:	2302      	movs	r3, #2
  }
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b082      	sub	sp, #8
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68da      	ldr	r2, [r3, #12]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2220      	movs	r2, #32
 80069f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7fb f8ca 	bl	8001b94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b08c      	sub	sp, #48	; 0x30
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b22      	cmp	r3, #34	; 0x22
 8006a1c:	f040 80ab 	bne.w	8006b76 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a28:	d117      	bne.n	8006a5a <UART_Receive_IT+0x50>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d113      	bne.n	8006a5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a32:	2300      	movs	r3, #0
 8006a34:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a52:	1c9a      	adds	r2, r3, #2
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	629a      	str	r2, [r3, #40]	; 0x28
 8006a58:	e026      	b.n	8006aa8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006a60:	2300      	movs	r3, #0
 8006a62:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a6c:	d007      	beq.n	8006a7e <UART_Receive_IT+0x74>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10a      	bne.n	8006a8c <UART_Receive_IT+0x82>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d106      	bne.n	8006a8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a88:	701a      	strb	r2, [r3, #0]
 8006a8a:	e008      	b.n	8006a9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a98:	b2da      	uxtb	r2, r3
 8006a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d15a      	bne.n	8006b72 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f022 0220 	bic.w	r2, r2, #32
 8006aca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68da      	ldr	r2, [r3, #12]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ada:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	695a      	ldr	r2, [r3, #20]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f022 0201 	bic.w	r2, r2, #1
 8006aea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2220      	movs	r2, #32
 8006af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d135      	bne.n	8006b68 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	330c      	adds	r3, #12
 8006b08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	e853 3f00 	ldrex	r3, [r3]
 8006b10:	613b      	str	r3, [r7, #16]
   return(result);
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f023 0310 	bic.w	r3, r3, #16
 8006b18:	627b      	str	r3, [r7, #36]	; 0x24
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	330c      	adds	r3, #12
 8006b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b22:	623a      	str	r2, [r7, #32]
 8006b24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b26:	69f9      	ldr	r1, [r7, #28]
 8006b28:	6a3a      	ldr	r2, [r7, #32]
 8006b2a:	e841 2300 	strex	r3, r2, [r1]
 8006b2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1e5      	bne.n	8006b02 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0310 	and.w	r3, r3, #16
 8006b40:	2b10      	cmp	r3, #16
 8006b42:	d10a      	bne.n	8006b5a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b44:	2300      	movs	r3, #0
 8006b46:	60fb      	str	r3, [r7, #12]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	60fb      	str	r3, [r7, #12]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	60fb      	str	r3, [r7, #12]
 8006b58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f7ff fc3b 	bl	80063dc <HAL_UARTEx_RxEventCallback>
 8006b66:	e002      	b.n	8006b6e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f7fb f827 	bl	8001bbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	e002      	b.n	8006b78 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	e000      	b.n	8006b78 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006b76:	2302      	movs	r3, #2
  }
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3730      	adds	r7, #48	; 0x30
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b84:	b0c0      	sub	sp, #256	; 0x100
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b9c:	68d9      	ldr	r1, [r3, #12]
 8006b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	ea40 0301 	orr.w	r3, r0, r1
 8006ba8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bae:	689a      	ldr	r2, [r3, #8]
 8006bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	431a      	orrs	r2, r3
 8006bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006bd8:	f021 010c 	bic.w	r1, r1, #12
 8006bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006be6:	430b      	orrs	r3, r1
 8006be8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bfa:	6999      	ldr	r1, [r3, #24]
 8006bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	ea40 0301 	orr.w	r3, r0, r1
 8006c06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	4b8f      	ldr	r3, [pc, #572]	; (8006e4c <UART_SetConfig+0x2cc>)
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d005      	beq.n	8006c20 <UART_SetConfig+0xa0>
 8006c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	4b8d      	ldr	r3, [pc, #564]	; (8006e50 <UART_SetConfig+0x2d0>)
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d104      	bne.n	8006c2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c20:	f7fe fb98 	bl	8005354 <HAL_RCC_GetPCLK2Freq>
 8006c24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006c28:	e003      	b.n	8006c32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c2a:	f7fe fb7f 	bl	800532c <HAL_RCC_GetPCLK1Freq>
 8006c2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c36:	69db      	ldr	r3, [r3, #28]
 8006c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c3c:	f040 810c 	bne.w	8006e58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c44:	2200      	movs	r2, #0
 8006c46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006c4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006c52:	4622      	mov	r2, r4
 8006c54:	462b      	mov	r3, r5
 8006c56:	1891      	adds	r1, r2, r2
 8006c58:	65b9      	str	r1, [r7, #88]	; 0x58
 8006c5a:	415b      	adcs	r3, r3
 8006c5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006c62:	4621      	mov	r1, r4
 8006c64:	eb12 0801 	adds.w	r8, r2, r1
 8006c68:	4629      	mov	r1, r5
 8006c6a:	eb43 0901 	adc.w	r9, r3, r1
 8006c6e:	f04f 0200 	mov.w	r2, #0
 8006c72:	f04f 0300 	mov.w	r3, #0
 8006c76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c82:	4690      	mov	r8, r2
 8006c84:	4699      	mov	r9, r3
 8006c86:	4623      	mov	r3, r4
 8006c88:	eb18 0303 	adds.w	r3, r8, r3
 8006c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c90:	462b      	mov	r3, r5
 8006c92:	eb49 0303 	adc.w	r3, r9, r3
 8006c96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ca6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006caa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006cae:	460b      	mov	r3, r1
 8006cb0:	18db      	adds	r3, r3, r3
 8006cb2:	653b      	str	r3, [r7, #80]	; 0x50
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	eb42 0303 	adc.w	r3, r2, r3
 8006cba:	657b      	str	r3, [r7, #84]	; 0x54
 8006cbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006cc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006cc4:	f7f9 ffc8 	bl	8000c58 <__aeabi_uldivmod>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	460b      	mov	r3, r1
 8006ccc:	4b61      	ldr	r3, [pc, #388]	; (8006e54 <UART_SetConfig+0x2d4>)
 8006cce:	fba3 2302 	umull	r2, r3, r3, r2
 8006cd2:	095b      	lsrs	r3, r3, #5
 8006cd4:	011c      	lsls	r4, r3, #4
 8006cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ce0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006ce4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006ce8:	4642      	mov	r2, r8
 8006cea:	464b      	mov	r3, r9
 8006cec:	1891      	adds	r1, r2, r2
 8006cee:	64b9      	str	r1, [r7, #72]	; 0x48
 8006cf0:	415b      	adcs	r3, r3
 8006cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cf4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006cf8:	4641      	mov	r1, r8
 8006cfa:	eb12 0a01 	adds.w	sl, r2, r1
 8006cfe:	4649      	mov	r1, r9
 8006d00:	eb43 0b01 	adc.w	fp, r3, r1
 8006d04:	f04f 0200 	mov.w	r2, #0
 8006d08:	f04f 0300 	mov.w	r3, #0
 8006d0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d18:	4692      	mov	sl, r2
 8006d1a:	469b      	mov	fp, r3
 8006d1c:	4643      	mov	r3, r8
 8006d1e:	eb1a 0303 	adds.w	r3, sl, r3
 8006d22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d26:	464b      	mov	r3, r9
 8006d28:	eb4b 0303 	adc.w	r3, fp, r3
 8006d2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006d40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006d44:	460b      	mov	r3, r1
 8006d46:	18db      	adds	r3, r3, r3
 8006d48:	643b      	str	r3, [r7, #64]	; 0x40
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	eb42 0303 	adc.w	r3, r2, r3
 8006d50:	647b      	str	r3, [r7, #68]	; 0x44
 8006d52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006d5a:	f7f9 ff7d 	bl	8000c58 <__aeabi_uldivmod>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	4611      	mov	r1, r2
 8006d64:	4b3b      	ldr	r3, [pc, #236]	; (8006e54 <UART_SetConfig+0x2d4>)
 8006d66:	fba3 2301 	umull	r2, r3, r3, r1
 8006d6a:	095b      	lsrs	r3, r3, #5
 8006d6c:	2264      	movs	r2, #100	; 0x64
 8006d6e:	fb02 f303 	mul.w	r3, r2, r3
 8006d72:	1acb      	subs	r3, r1, r3
 8006d74:	00db      	lsls	r3, r3, #3
 8006d76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006d7a:	4b36      	ldr	r3, [pc, #216]	; (8006e54 <UART_SetConfig+0x2d4>)
 8006d7c:	fba3 2302 	umull	r2, r3, r3, r2
 8006d80:	095b      	lsrs	r3, r3, #5
 8006d82:	005b      	lsls	r3, r3, #1
 8006d84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d88:	441c      	add	r4, r3
 8006d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006d98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006d9c:	4642      	mov	r2, r8
 8006d9e:	464b      	mov	r3, r9
 8006da0:	1891      	adds	r1, r2, r2
 8006da2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006da4:	415b      	adcs	r3, r3
 8006da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006da8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006dac:	4641      	mov	r1, r8
 8006dae:	1851      	adds	r1, r2, r1
 8006db0:	6339      	str	r1, [r7, #48]	; 0x30
 8006db2:	4649      	mov	r1, r9
 8006db4:	414b      	adcs	r3, r1
 8006db6:	637b      	str	r3, [r7, #52]	; 0x34
 8006db8:	f04f 0200 	mov.w	r2, #0
 8006dbc:	f04f 0300 	mov.w	r3, #0
 8006dc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006dc4:	4659      	mov	r1, fp
 8006dc6:	00cb      	lsls	r3, r1, #3
 8006dc8:	4651      	mov	r1, sl
 8006dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dce:	4651      	mov	r1, sl
 8006dd0:	00ca      	lsls	r2, r1, #3
 8006dd2:	4610      	mov	r0, r2
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	4642      	mov	r2, r8
 8006dda:	189b      	adds	r3, r3, r2
 8006ddc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006de0:	464b      	mov	r3, r9
 8006de2:	460a      	mov	r2, r1
 8006de4:	eb42 0303 	adc.w	r3, r2, r3
 8006de8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006df8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006dfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006e00:	460b      	mov	r3, r1
 8006e02:	18db      	adds	r3, r3, r3
 8006e04:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e06:	4613      	mov	r3, r2
 8006e08:	eb42 0303 	adc.w	r3, r2, r3
 8006e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006e16:	f7f9 ff1f 	bl	8000c58 <__aeabi_uldivmod>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	4b0d      	ldr	r3, [pc, #52]	; (8006e54 <UART_SetConfig+0x2d4>)
 8006e20:	fba3 1302 	umull	r1, r3, r3, r2
 8006e24:	095b      	lsrs	r3, r3, #5
 8006e26:	2164      	movs	r1, #100	; 0x64
 8006e28:	fb01 f303 	mul.w	r3, r1, r3
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	00db      	lsls	r3, r3, #3
 8006e30:	3332      	adds	r3, #50	; 0x32
 8006e32:	4a08      	ldr	r2, [pc, #32]	; (8006e54 <UART_SetConfig+0x2d4>)
 8006e34:	fba2 2303 	umull	r2, r3, r2, r3
 8006e38:	095b      	lsrs	r3, r3, #5
 8006e3a:	f003 0207 	and.w	r2, r3, #7
 8006e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4422      	add	r2, r4
 8006e46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e48:	e105      	b.n	8007056 <UART_SetConfig+0x4d6>
 8006e4a:	bf00      	nop
 8006e4c:	40011000 	.word	0x40011000
 8006e50:	40011400 	.word	0x40011400
 8006e54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e62:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006e66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006e6a:	4642      	mov	r2, r8
 8006e6c:	464b      	mov	r3, r9
 8006e6e:	1891      	adds	r1, r2, r2
 8006e70:	6239      	str	r1, [r7, #32]
 8006e72:	415b      	adcs	r3, r3
 8006e74:	627b      	str	r3, [r7, #36]	; 0x24
 8006e76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e7a:	4641      	mov	r1, r8
 8006e7c:	1854      	adds	r4, r2, r1
 8006e7e:	4649      	mov	r1, r9
 8006e80:	eb43 0501 	adc.w	r5, r3, r1
 8006e84:	f04f 0200 	mov.w	r2, #0
 8006e88:	f04f 0300 	mov.w	r3, #0
 8006e8c:	00eb      	lsls	r3, r5, #3
 8006e8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e92:	00e2      	lsls	r2, r4, #3
 8006e94:	4614      	mov	r4, r2
 8006e96:	461d      	mov	r5, r3
 8006e98:	4643      	mov	r3, r8
 8006e9a:	18e3      	adds	r3, r4, r3
 8006e9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ea0:	464b      	mov	r3, r9
 8006ea2:	eb45 0303 	adc.w	r3, r5, r3
 8006ea6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006eb6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006eba:	f04f 0200 	mov.w	r2, #0
 8006ebe:	f04f 0300 	mov.w	r3, #0
 8006ec2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006ec6:	4629      	mov	r1, r5
 8006ec8:	008b      	lsls	r3, r1, #2
 8006eca:	4621      	mov	r1, r4
 8006ecc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ed0:	4621      	mov	r1, r4
 8006ed2:	008a      	lsls	r2, r1, #2
 8006ed4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006ed8:	f7f9 febe 	bl	8000c58 <__aeabi_uldivmod>
 8006edc:	4602      	mov	r2, r0
 8006ede:	460b      	mov	r3, r1
 8006ee0:	4b60      	ldr	r3, [pc, #384]	; (8007064 <UART_SetConfig+0x4e4>)
 8006ee2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ee6:	095b      	lsrs	r3, r3, #5
 8006ee8:	011c      	lsls	r4, r3, #4
 8006eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006ef4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006ef8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006efc:	4642      	mov	r2, r8
 8006efe:	464b      	mov	r3, r9
 8006f00:	1891      	adds	r1, r2, r2
 8006f02:	61b9      	str	r1, [r7, #24]
 8006f04:	415b      	adcs	r3, r3
 8006f06:	61fb      	str	r3, [r7, #28]
 8006f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f0c:	4641      	mov	r1, r8
 8006f0e:	1851      	adds	r1, r2, r1
 8006f10:	6139      	str	r1, [r7, #16]
 8006f12:	4649      	mov	r1, r9
 8006f14:	414b      	adcs	r3, r1
 8006f16:	617b      	str	r3, [r7, #20]
 8006f18:	f04f 0200 	mov.w	r2, #0
 8006f1c:	f04f 0300 	mov.w	r3, #0
 8006f20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f24:	4659      	mov	r1, fp
 8006f26:	00cb      	lsls	r3, r1, #3
 8006f28:	4651      	mov	r1, sl
 8006f2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f2e:	4651      	mov	r1, sl
 8006f30:	00ca      	lsls	r2, r1, #3
 8006f32:	4610      	mov	r0, r2
 8006f34:	4619      	mov	r1, r3
 8006f36:	4603      	mov	r3, r0
 8006f38:	4642      	mov	r2, r8
 8006f3a:	189b      	adds	r3, r3, r2
 8006f3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f40:	464b      	mov	r3, r9
 8006f42:	460a      	mov	r2, r1
 8006f44:	eb42 0303 	adc.w	r3, r2, r3
 8006f48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f56:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006f58:	f04f 0200 	mov.w	r2, #0
 8006f5c:	f04f 0300 	mov.w	r3, #0
 8006f60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006f64:	4649      	mov	r1, r9
 8006f66:	008b      	lsls	r3, r1, #2
 8006f68:	4641      	mov	r1, r8
 8006f6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f6e:	4641      	mov	r1, r8
 8006f70:	008a      	lsls	r2, r1, #2
 8006f72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006f76:	f7f9 fe6f 	bl	8000c58 <__aeabi_uldivmod>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	4b39      	ldr	r3, [pc, #228]	; (8007064 <UART_SetConfig+0x4e4>)
 8006f80:	fba3 1302 	umull	r1, r3, r3, r2
 8006f84:	095b      	lsrs	r3, r3, #5
 8006f86:	2164      	movs	r1, #100	; 0x64
 8006f88:	fb01 f303 	mul.w	r3, r1, r3
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	011b      	lsls	r3, r3, #4
 8006f90:	3332      	adds	r3, #50	; 0x32
 8006f92:	4a34      	ldr	r2, [pc, #208]	; (8007064 <UART_SetConfig+0x4e4>)
 8006f94:	fba2 2303 	umull	r2, r3, r2, r3
 8006f98:	095b      	lsrs	r3, r3, #5
 8006f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f9e:	441c      	add	r4, r3
 8006fa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	673b      	str	r3, [r7, #112]	; 0x70
 8006fa8:	677a      	str	r2, [r7, #116]	; 0x74
 8006faa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006fae:	4642      	mov	r2, r8
 8006fb0:	464b      	mov	r3, r9
 8006fb2:	1891      	adds	r1, r2, r2
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	415b      	adcs	r3, r3
 8006fb8:	60fb      	str	r3, [r7, #12]
 8006fba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006fbe:	4641      	mov	r1, r8
 8006fc0:	1851      	adds	r1, r2, r1
 8006fc2:	6039      	str	r1, [r7, #0]
 8006fc4:	4649      	mov	r1, r9
 8006fc6:	414b      	adcs	r3, r1
 8006fc8:	607b      	str	r3, [r7, #4]
 8006fca:	f04f 0200 	mov.w	r2, #0
 8006fce:	f04f 0300 	mov.w	r3, #0
 8006fd2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006fd6:	4659      	mov	r1, fp
 8006fd8:	00cb      	lsls	r3, r1, #3
 8006fda:	4651      	mov	r1, sl
 8006fdc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fe0:	4651      	mov	r1, sl
 8006fe2:	00ca      	lsls	r2, r1, #3
 8006fe4:	4610      	mov	r0, r2
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	4603      	mov	r3, r0
 8006fea:	4642      	mov	r2, r8
 8006fec:	189b      	adds	r3, r3, r2
 8006fee:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ff0:	464b      	mov	r3, r9
 8006ff2:	460a      	mov	r2, r1
 8006ff4:	eb42 0303 	adc.w	r3, r2, r3
 8006ff8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	663b      	str	r3, [r7, #96]	; 0x60
 8007004:	667a      	str	r2, [r7, #100]	; 0x64
 8007006:	f04f 0200 	mov.w	r2, #0
 800700a:	f04f 0300 	mov.w	r3, #0
 800700e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007012:	4649      	mov	r1, r9
 8007014:	008b      	lsls	r3, r1, #2
 8007016:	4641      	mov	r1, r8
 8007018:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800701c:	4641      	mov	r1, r8
 800701e:	008a      	lsls	r2, r1, #2
 8007020:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007024:	f7f9 fe18 	bl	8000c58 <__aeabi_uldivmod>
 8007028:	4602      	mov	r2, r0
 800702a:	460b      	mov	r3, r1
 800702c:	4b0d      	ldr	r3, [pc, #52]	; (8007064 <UART_SetConfig+0x4e4>)
 800702e:	fba3 1302 	umull	r1, r3, r3, r2
 8007032:	095b      	lsrs	r3, r3, #5
 8007034:	2164      	movs	r1, #100	; 0x64
 8007036:	fb01 f303 	mul.w	r3, r1, r3
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	011b      	lsls	r3, r3, #4
 800703e:	3332      	adds	r3, #50	; 0x32
 8007040:	4a08      	ldr	r2, [pc, #32]	; (8007064 <UART_SetConfig+0x4e4>)
 8007042:	fba2 2303 	umull	r2, r3, r2, r3
 8007046:	095b      	lsrs	r3, r3, #5
 8007048:	f003 020f 	and.w	r2, r3, #15
 800704c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4422      	add	r2, r4
 8007054:	609a      	str	r2, [r3, #8]
}
 8007056:	bf00      	nop
 8007058:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800705c:	46bd      	mov	sp, r7
 800705e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007062:	bf00      	nop
 8007064:	51eb851f 	.word	0x51eb851f

08007068 <__errno>:
 8007068:	4b01      	ldr	r3, [pc, #4]	; (8007070 <__errno+0x8>)
 800706a:	6818      	ldr	r0, [r3, #0]
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	20000010 	.word	0x20000010

08007074 <__libc_init_array>:
 8007074:	b570      	push	{r4, r5, r6, lr}
 8007076:	4d0d      	ldr	r5, [pc, #52]	; (80070ac <__libc_init_array+0x38>)
 8007078:	4c0d      	ldr	r4, [pc, #52]	; (80070b0 <__libc_init_array+0x3c>)
 800707a:	1b64      	subs	r4, r4, r5
 800707c:	10a4      	asrs	r4, r4, #2
 800707e:	2600      	movs	r6, #0
 8007080:	42a6      	cmp	r6, r4
 8007082:	d109      	bne.n	8007098 <__libc_init_array+0x24>
 8007084:	4d0b      	ldr	r5, [pc, #44]	; (80070b4 <__libc_init_array+0x40>)
 8007086:	4c0c      	ldr	r4, [pc, #48]	; (80070b8 <__libc_init_array+0x44>)
 8007088:	f002 ff58 	bl	8009f3c <_init>
 800708c:	1b64      	subs	r4, r4, r5
 800708e:	10a4      	asrs	r4, r4, #2
 8007090:	2600      	movs	r6, #0
 8007092:	42a6      	cmp	r6, r4
 8007094:	d105      	bne.n	80070a2 <__libc_init_array+0x2e>
 8007096:	bd70      	pop	{r4, r5, r6, pc}
 8007098:	f855 3b04 	ldr.w	r3, [r5], #4
 800709c:	4798      	blx	r3
 800709e:	3601      	adds	r6, #1
 80070a0:	e7ee      	b.n	8007080 <__libc_init_array+0xc>
 80070a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80070a6:	4798      	blx	r3
 80070a8:	3601      	adds	r6, #1
 80070aa:	e7f2      	b.n	8007092 <__libc_init_array+0x1e>
 80070ac:	0800a394 	.word	0x0800a394
 80070b0:	0800a394 	.word	0x0800a394
 80070b4:	0800a394 	.word	0x0800a394
 80070b8:	0800a398 	.word	0x0800a398

080070bc <memset>:
 80070bc:	4402      	add	r2, r0
 80070be:	4603      	mov	r3, r0
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d100      	bne.n	80070c6 <memset+0xa>
 80070c4:	4770      	bx	lr
 80070c6:	f803 1b01 	strb.w	r1, [r3], #1
 80070ca:	e7f9      	b.n	80070c0 <memset+0x4>

080070cc <__cvt>:
 80070cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070d0:	ec55 4b10 	vmov	r4, r5, d0
 80070d4:	2d00      	cmp	r5, #0
 80070d6:	460e      	mov	r6, r1
 80070d8:	4619      	mov	r1, r3
 80070da:	462b      	mov	r3, r5
 80070dc:	bfbb      	ittet	lt
 80070de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80070e2:	461d      	movlt	r5, r3
 80070e4:	2300      	movge	r3, #0
 80070e6:	232d      	movlt	r3, #45	; 0x2d
 80070e8:	700b      	strb	r3, [r1, #0]
 80070ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80070f0:	4691      	mov	r9, r2
 80070f2:	f023 0820 	bic.w	r8, r3, #32
 80070f6:	bfbc      	itt	lt
 80070f8:	4622      	movlt	r2, r4
 80070fa:	4614      	movlt	r4, r2
 80070fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007100:	d005      	beq.n	800710e <__cvt+0x42>
 8007102:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007106:	d100      	bne.n	800710a <__cvt+0x3e>
 8007108:	3601      	adds	r6, #1
 800710a:	2102      	movs	r1, #2
 800710c:	e000      	b.n	8007110 <__cvt+0x44>
 800710e:	2103      	movs	r1, #3
 8007110:	ab03      	add	r3, sp, #12
 8007112:	9301      	str	r3, [sp, #4]
 8007114:	ab02      	add	r3, sp, #8
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	ec45 4b10 	vmov	d0, r4, r5
 800711c:	4653      	mov	r3, sl
 800711e:	4632      	mov	r2, r6
 8007120:	f000 fcfe 	bl	8007b20 <_dtoa_r>
 8007124:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007128:	4607      	mov	r7, r0
 800712a:	d102      	bne.n	8007132 <__cvt+0x66>
 800712c:	f019 0f01 	tst.w	r9, #1
 8007130:	d022      	beq.n	8007178 <__cvt+0xac>
 8007132:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007136:	eb07 0906 	add.w	r9, r7, r6
 800713a:	d110      	bne.n	800715e <__cvt+0x92>
 800713c:	783b      	ldrb	r3, [r7, #0]
 800713e:	2b30      	cmp	r3, #48	; 0x30
 8007140:	d10a      	bne.n	8007158 <__cvt+0x8c>
 8007142:	2200      	movs	r2, #0
 8007144:	2300      	movs	r3, #0
 8007146:	4620      	mov	r0, r4
 8007148:	4629      	mov	r1, r5
 800714a:	f7f9 fcc5 	bl	8000ad8 <__aeabi_dcmpeq>
 800714e:	b918      	cbnz	r0, 8007158 <__cvt+0x8c>
 8007150:	f1c6 0601 	rsb	r6, r6, #1
 8007154:	f8ca 6000 	str.w	r6, [sl]
 8007158:	f8da 3000 	ldr.w	r3, [sl]
 800715c:	4499      	add	r9, r3
 800715e:	2200      	movs	r2, #0
 8007160:	2300      	movs	r3, #0
 8007162:	4620      	mov	r0, r4
 8007164:	4629      	mov	r1, r5
 8007166:	f7f9 fcb7 	bl	8000ad8 <__aeabi_dcmpeq>
 800716a:	b108      	cbz	r0, 8007170 <__cvt+0xa4>
 800716c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007170:	2230      	movs	r2, #48	; 0x30
 8007172:	9b03      	ldr	r3, [sp, #12]
 8007174:	454b      	cmp	r3, r9
 8007176:	d307      	bcc.n	8007188 <__cvt+0xbc>
 8007178:	9b03      	ldr	r3, [sp, #12]
 800717a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800717c:	1bdb      	subs	r3, r3, r7
 800717e:	4638      	mov	r0, r7
 8007180:	6013      	str	r3, [r2, #0]
 8007182:	b004      	add	sp, #16
 8007184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007188:	1c59      	adds	r1, r3, #1
 800718a:	9103      	str	r1, [sp, #12]
 800718c:	701a      	strb	r2, [r3, #0]
 800718e:	e7f0      	b.n	8007172 <__cvt+0xa6>

08007190 <__exponent>:
 8007190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007192:	4603      	mov	r3, r0
 8007194:	2900      	cmp	r1, #0
 8007196:	bfb8      	it	lt
 8007198:	4249      	neglt	r1, r1
 800719a:	f803 2b02 	strb.w	r2, [r3], #2
 800719e:	bfb4      	ite	lt
 80071a0:	222d      	movlt	r2, #45	; 0x2d
 80071a2:	222b      	movge	r2, #43	; 0x2b
 80071a4:	2909      	cmp	r1, #9
 80071a6:	7042      	strb	r2, [r0, #1]
 80071a8:	dd2a      	ble.n	8007200 <__exponent+0x70>
 80071aa:	f10d 0407 	add.w	r4, sp, #7
 80071ae:	46a4      	mov	ip, r4
 80071b0:	270a      	movs	r7, #10
 80071b2:	46a6      	mov	lr, r4
 80071b4:	460a      	mov	r2, r1
 80071b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80071ba:	fb07 1516 	mls	r5, r7, r6, r1
 80071be:	3530      	adds	r5, #48	; 0x30
 80071c0:	2a63      	cmp	r2, #99	; 0x63
 80071c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80071c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80071ca:	4631      	mov	r1, r6
 80071cc:	dcf1      	bgt.n	80071b2 <__exponent+0x22>
 80071ce:	3130      	adds	r1, #48	; 0x30
 80071d0:	f1ae 0502 	sub.w	r5, lr, #2
 80071d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80071d8:	1c44      	adds	r4, r0, #1
 80071da:	4629      	mov	r1, r5
 80071dc:	4561      	cmp	r1, ip
 80071de:	d30a      	bcc.n	80071f6 <__exponent+0x66>
 80071e0:	f10d 0209 	add.w	r2, sp, #9
 80071e4:	eba2 020e 	sub.w	r2, r2, lr
 80071e8:	4565      	cmp	r5, ip
 80071ea:	bf88      	it	hi
 80071ec:	2200      	movhi	r2, #0
 80071ee:	4413      	add	r3, r2
 80071f0:	1a18      	subs	r0, r3, r0
 80071f2:	b003      	add	sp, #12
 80071f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80071fe:	e7ed      	b.n	80071dc <__exponent+0x4c>
 8007200:	2330      	movs	r3, #48	; 0x30
 8007202:	3130      	adds	r1, #48	; 0x30
 8007204:	7083      	strb	r3, [r0, #2]
 8007206:	70c1      	strb	r1, [r0, #3]
 8007208:	1d03      	adds	r3, r0, #4
 800720a:	e7f1      	b.n	80071f0 <__exponent+0x60>

0800720c <_printf_float>:
 800720c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007210:	ed2d 8b02 	vpush	{d8}
 8007214:	b08d      	sub	sp, #52	; 0x34
 8007216:	460c      	mov	r4, r1
 8007218:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800721c:	4616      	mov	r6, r2
 800721e:	461f      	mov	r7, r3
 8007220:	4605      	mov	r5, r0
 8007222:	f001 fa6b 	bl	80086fc <_localeconv_r>
 8007226:	f8d0 a000 	ldr.w	sl, [r0]
 800722a:	4650      	mov	r0, sl
 800722c:	f7f8 ffd8 	bl	80001e0 <strlen>
 8007230:	2300      	movs	r3, #0
 8007232:	930a      	str	r3, [sp, #40]	; 0x28
 8007234:	6823      	ldr	r3, [r4, #0]
 8007236:	9305      	str	r3, [sp, #20]
 8007238:	f8d8 3000 	ldr.w	r3, [r8]
 800723c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007240:	3307      	adds	r3, #7
 8007242:	f023 0307 	bic.w	r3, r3, #7
 8007246:	f103 0208 	add.w	r2, r3, #8
 800724a:	f8c8 2000 	str.w	r2, [r8]
 800724e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007252:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007256:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800725a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800725e:	9307      	str	r3, [sp, #28]
 8007260:	f8cd 8018 	str.w	r8, [sp, #24]
 8007264:	ee08 0a10 	vmov	s16, r0
 8007268:	4b9f      	ldr	r3, [pc, #636]	; (80074e8 <_printf_float+0x2dc>)
 800726a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800726e:	f04f 32ff 	mov.w	r2, #4294967295
 8007272:	f7f9 fc63 	bl	8000b3c <__aeabi_dcmpun>
 8007276:	bb88      	cbnz	r0, 80072dc <_printf_float+0xd0>
 8007278:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800727c:	4b9a      	ldr	r3, [pc, #616]	; (80074e8 <_printf_float+0x2dc>)
 800727e:	f04f 32ff 	mov.w	r2, #4294967295
 8007282:	f7f9 fc3d 	bl	8000b00 <__aeabi_dcmple>
 8007286:	bb48      	cbnz	r0, 80072dc <_printf_float+0xd0>
 8007288:	2200      	movs	r2, #0
 800728a:	2300      	movs	r3, #0
 800728c:	4640      	mov	r0, r8
 800728e:	4649      	mov	r1, r9
 8007290:	f7f9 fc2c 	bl	8000aec <__aeabi_dcmplt>
 8007294:	b110      	cbz	r0, 800729c <_printf_float+0x90>
 8007296:	232d      	movs	r3, #45	; 0x2d
 8007298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800729c:	4b93      	ldr	r3, [pc, #588]	; (80074ec <_printf_float+0x2e0>)
 800729e:	4894      	ldr	r0, [pc, #592]	; (80074f0 <_printf_float+0x2e4>)
 80072a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80072a4:	bf94      	ite	ls
 80072a6:	4698      	movls	r8, r3
 80072a8:	4680      	movhi	r8, r0
 80072aa:	2303      	movs	r3, #3
 80072ac:	6123      	str	r3, [r4, #16]
 80072ae:	9b05      	ldr	r3, [sp, #20]
 80072b0:	f023 0204 	bic.w	r2, r3, #4
 80072b4:	6022      	str	r2, [r4, #0]
 80072b6:	f04f 0900 	mov.w	r9, #0
 80072ba:	9700      	str	r7, [sp, #0]
 80072bc:	4633      	mov	r3, r6
 80072be:	aa0b      	add	r2, sp, #44	; 0x2c
 80072c0:	4621      	mov	r1, r4
 80072c2:	4628      	mov	r0, r5
 80072c4:	f000 f9d8 	bl	8007678 <_printf_common>
 80072c8:	3001      	adds	r0, #1
 80072ca:	f040 8090 	bne.w	80073ee <_printf_float+0x1e2>
 80072ce:	f04f 30ff 	mov.w	r0, #4294967295
 80072d2:	b00d      	add	sp, #52	; 0x34
 80072d4:	ecbd 8b02 	vpop	{d8}
 80072d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072dc:	4642      	mov	r2, r8
 80072de:	464b      	mov	r3, r9
 80072e0:	4640      	mov	r0, r8
 80072e2:	4649      	mov	r1, r9
 80072e4:	f7f9 fc2a 	bl	8000b3c <__aeabi_dcmpun>
 80072e8:	b140      	cbz	r0, 80072fc <_printf_float+0xf0>
 80072ea:	464b      	mov	r3, r9
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	bfbc      	itt	lt
 80072f0:	232d      	movlt	r3, #45	; 0x2d
 80072f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80072f6:	487f      	ldr	r0, [pc, #508]	; (80074f4 <_printf_float+0x2e8>)
 80072f8:	4b7f      	ldr	r3, [pc, #508]	; (80074f8 <_printf_float+0x2ec>)
 80072fa:	e7d1      	b.n	80072a0 <_printf_float+0x94>
 80072fc:	6863      	ldr	r3, [r4, #4]
 80072fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007302:	9206      	str	r2, [sp, #24]
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	d13f      	bne.n	8007388 <_printf_float+0x17c>
 8007308:	2306      	movs	r3, #6
 800730a:	6063      	str	r3, [r4, #4]
 800730c:	9b05      	ldr	r3, [sp, #20]
 800730e:	6861      	ldr	r1, [r4, #4]
 8007310:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007314:	2300      	movs	r3, #0
 8007316:	9303      	str	r3, [sp, #12]
 8007318:	ab0a      	add	r3, sp, #40	; 0x28
 800731a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800731e:	ab09      	add	r3, sp, #36	; 0x24
 8007320:	ec49 8b10 	vmov	d0, r8, r9
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	6022      	str	r2, [r4, #0]
 8007328:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800732c:	4628      	mov	r0, r5
 800732e:	f7ff fecd 	bl	80070cc <__cvt>
 8007332:	9b06      	ldr	r3, [sp, #24]
 8007334:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007336:	2b47      	cmp	r3, #71	; 0x47
 8007338:	4680      	mov	r8, r0
 800733a:	d108      	bne.n	800734e <_printf_float+0x142>
 800733c:	1cc8      	adds	r0, r1, #3
 800733e:	db02      	blt.n	8007346 <_printf_float+0x13a>
 8007340:	6863      	ldr	r3, [r4, #4]
 8007342:	4299      	cmp	r1, r3
 8007344:	dd41      	ble.n	80073ca <_printf_float+0x1be>
 8007346:	f1ab 0b02 	sub.w	fp, fp, #2
 800734a:	fa5f fb8b 	uxtb.w	fp, fp
 800734e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007352:	d820      	bhi.n	8007396 <_printf_float+0x18a>
 8007354:	3901      	subs	r1, #1
 8007356:	465a      	mov	r2, fp
 8007358:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800735c:	9109      	str	r1, [sp, #36]	; 0x24
 800735e:	f7ff ff17 	bl	8007190 <__exponent>
 8007362:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007364:	1813      	adds	r3, r2, r0
 8007366:	2a01      	cmp	r2, #1
 8007368:	4681      	mov	r9, r0
 800736a:	6123      	str	r3, [r4, #16]
 800736c:	dc02      	bgt.n	8007374 <_printf_float+0x168>
 800736e:	6822      	ldr	r2, [r4, #0]
 8007370:	07d2      	lsls	r2, r2, #31
 8007372:	d501      	bpl.n	8007378 <_printf_float+0x16c>
 8007374:	3301      	adds	r3, #1
 8007376:	6123      	str	r3, [r4, #16]
 8007378:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800737c:	2b00      	cmp	r3, #0
 800737e:	d09c      	beq.n	80072ba <_printf_float+0xae>
 8007380:	232d      	movs	r3, #45	; 0x2d
 8007382:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007386:	e798      	b.n	80072ba <_printf_float+0xae>
 8007388:	9a06      	ldr	r2, [sp, #24]
 800738a:	2a47      	cmp	r2, #71	; 0x47
 800738c:	d1be      	bne.n	800730c <_printf_float+0x100>
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1bc      	bne.n	800730c <_printf_float+0x100>
 8007392:	2301      	movs	r3, #1
 8007394:	e7b9      	b.n	800730a <_printf_float+0xfe>
 8007396:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800739a:	d118      	bne.n	80073ce <_printf_float+0x1c2>
 800739c:	2900      	cmp	r1, #0
 800739e:	6863      	ldr	r3, [r4, #4]
 80073a0:	dd0b      	ble.n	80073ba <_printf_float+0x1ae>
 80073a2:	6121      	str	r1, [r4, #16]
 80073a4:	b913      	cbnz	r3, 80073ac <_printf_float+0x1a0>
 80073a6:	6822      	ldr	r2, [r4, #0]
 80073a8:	07d0      	lsls	r0, r2, #31
 80073aa:	d502      	bpl.n	80073b2 <_printf_float+0x1a6>
 80073ac:	3301      	adds	r3, #1
 80073ae:	440b      	add	r3, r1
 80073b0:	6123      	str	r3, [r4, #16]
 80073b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80073b4:	f04f 0900 	mov.w	r9, #0
 80073b8:	e7de      	b.n	8007378 <_printf_float+0x16c>
 80073ba:	b913      	cbnz	r3, 80073c2 <_printf_float+0x1b6>
 80073bc:	6822      	ldr	r2, [r4, #0]
 80073be:	07d2      	lsls	r2, r2, #31
 80073c0:	d501      	bpl.n	80073c6 <_printf_float+0x1ba>
 80073c2:	3302      	adds	r3, #2
 80073c4:	e7f4      	b.n	80073b0 <_printf_float+0x1a4>
 80073c6:	2301      	movs	r3, #1
 80073c8:	e7f2      	b.n	80073b0 <_printf_float+0x1a4>
 80073ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80073ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073d0:	4299      	cmp	r1, r3
 80073d2:	db05      	blt.n	80073e0 <_printf_float+0x1d4>
 80073d4:	6823      	ldr	r3, [r4, #0]
 80073d6:	6121      	str	r1, [r4, #16]
 80073d8:	07d8      	lsls	r0, r3, #31
 80073da:	d5ea      	bpl.n	80073b2 <_printf_float+0x1a6>
 80073dc:	1c4b      	adds	r3, r1, #1
 80073de:	e7e7      	b.n	80073b0 <_printf_float+0x1a4>
 80073e0:	2900      	cmp	r1, #0
 80073e2:	bfd4      	ite	le
 80073e4:	f1c1 0202 	rsble	r2, r1, #2
 80073e8:	2201      	movgt	r2, #1
 80073ea:	4413      	add	r3, r2
 80073ec:	e7e0      	b.n	80073b0 <_printf_float+0x1a4>
 80073ee:	6823      	ldr	r3, [r4, #0]
 80073f0:	055a      	lsls	r2, r3, #21
 80073f2:	d407      	bmi.n	8007404 <_printf_float+0x1f8>
 80073f4:	6923      	ldr	r3, [r4, #16]
 80073f6:	4642      	mov	r2, r8
 80073f8:	4631      	mov	r1, r6
 80073fa:	4628      	mov	r0, r5
 80073fc:	47b8      	blx	r7
 80073fe:	3001      	adds	r0, #1
 8007400:	d12c      	bne.n	800745c <_printf_float+0x250>
 8007402:	e764      	b.n	80072ce <_printf_float+0xc2>
 8007404:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007408:	f240 80e0 	bls.w	80075cc <_printf_float+0x3c0>
 800740c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007410:	2200      	movs	r2, #0
 8007412:	2300      	movs	r3, #0
 8007414:	f7f9 fb60 	bl	8000ad8 <__aeabi_dcmpeq>
 8007418:	2800      	cmp	r0, #0
 800741a:	d034      	beq.n	8007486 <_printf_float+0x27a>
 800741c:	4a37      	ldr	r2, [pc, #220]	; (80074fc <_printf_float+0x2f0>)
 800741e:	2301      	movs	r3, #1
 8007420:	4631      	mov	r1, r6
 8007422:	4628      	mov	r0, r5
 8007424:	47b8      	blx	r7
 8007426:	3001      	adds	r0, #1
 8007428:	f43f af51 	beq.w	80072ce <_printf_float+0xc2>
 800742c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007430:	429a      	cmp	r2, r3
 8007432:	db02      	blt.n	800743a <_printf_float+0x22e>
 8007434:	6823      	ldr	r3, [r4, #0]
 8007436:	07d8      	lsls	r0, r3, #31
 8007438:	d510      	bpl.n	800745c <_printf_float+0x250>
 800743a:	ee18 3a10 	vmov	r3, s16
 800743e:	4652      	mov	r2, sl
 8007440:	4631      	mov	r1, r6
 8007442:	4628      	mov	r0, r5
 8007444:	47b8      	blx	r7
 8007446:	3001      	adds	r0, #1
 8007448:	f43f af41 	beq.w	80072ce <_printf_float+0xc2>
 800744c:	f04f 0800 	mov.w	r8, #0
 8007450:	f104 091a 	add.w	r9, r4, #26
 8007454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007456:	3b01      	subs	r3, #1
 8007458:	4543      	cmp	r3, r8
 800745a:	dc09      	bgt.n	8007470 <_printf_float+0x264>
 800745c:	6823      	ldr	r3, [r4, #0]
 800745e:	079b      	lsls	r3, r3, #30
 8007460:	f100 8105 	bmi.w	800766e <_printf_float+0x462>
 8007464:	68e0      	ldr	r0, [r4, #12]
 8007466:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007468:	4298      	cmp	r0, r3
 800746a:	bfb8      	it	lt
 800746c:	4618      	movlt	r0, r3
 800746e:	e730      	b.n	80072d2 <_printf_float+0xc6>
 8007470:	2301      	movs	r3, #1
 8007472:	464a      	mov	r2, r9
 8007474:	4631      	mov	r1, r6
 8007476:	4628      	mov	r0, r5
 8007478:	47b8      	blx	r7
 800747a:	3001      	adds	r0, #1
 800747c:	f43f af27 	beq.w	80072ce <_printf_float+0xc2>
 8007480:	f108 0801 	add.w	r8, r8, #1
 8007484:	e7e6      	b.n	8007454 <_printf_float+0x248>
 8007486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007488:	2b00      	cmp	r3, #0
 800748a:	dc39      	bgt.n	8007500 <_printf_float+0x2f4>
 800748c:	4a1b      	ldr	r2, [pc, #108]	; (80074fc <_printf_float+0x2f0>)
 800748e:	2301      	movs	r3, #1
 8007490:	4631      	mov	r1, r6
 8007492:	4628      	mov	r0, r5
 8007494:	47b8      	blx	r7
 8007496:	3001      	adds	r0, #1
 8007498:	f43f af19 	beq.w	80072ce <_printf_float+0xc2>
 800749c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074a0:	4313      	orrs	r3, r2
 80074a2:	d102      	bne.n	80074aa <_printf_float+0x29e>
 80074a4:	6823      	ldr	r3, [r4, #0]
 80074a6:	07d9      	lsls	r1, r3, #31
 80074a8:	d5d8      	bpl.n	800745c <_printf_float+0x250>
 80074aa:	ee18 3a10 	vmov	r3, s16
 80074ae:	4652      	mov	r2, sl
 80074b0:	4631      	mov	r1, r6
 80074b2:	4628      	mov	r0, r5
 80074b4:	47b8      	blx	r7
 80074b6:	3001      	adds	r0, #1
 80074b8:	f43f af09 	beq.w	80072ce <_printf_float+0xc2>
 80074bc:	f04f 0900 	mov.w	r9, #0
 80074c0:	f104 0a1a 	add.w	sl, r4, #26
 80074c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074c6:	425b      	negs	r3, r3
 80074c8:	454b      	cmp	r3, r9
 80074ca:	dc01      	bgt.n	80074d0 <_printf_float+0x2c4>
 80074cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074ce:	e792      	b.n	80073f6 <_printf_float+0x1ea>
 80074d0:	2301      	movs	r3, #1
 80074d2:	4652      	mov	r2, sl
 80074d4:	4631      	mov	r1, r6
 80074d6:	4628      	mov	r0, r5
 80074d8:	47b8      	blx	r7
 80074da:	3001      	adds	r0, #1
 80074dc:	f43f aef7 	beq.w	80072ce <_printf_float+0xc2>
 80074e0:	f109 0901 	add.w	r9, r9, #1
 80074e4:	e7ee      	b.n	80074c4 <_printf_float+0x2b8>
 80074e6:	bf00      	nop
 80074e8:	7fefffff 	.word	0x7fefffff
 80074ec:	08009fb8 	.word	0x08009fb8
 80074f0:	08009fbc 	.word	0x08009fbc
 80074f4:	08009fc4 	.word	0x08009fc4
 80074f8:	08009fc0 	.word	0x08009fc0
 80074fc:	08009fc8 	.word	0x08009fc8
 8007500:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007502:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007504:	429a      	cmp	r2, r3
 8007506:	bfa8      	it	ge
 8007508:	461a      	movge	r2, r3
 800750a:	2a00      	cmp	r2, #0
 800750c:	4691      	mov	r9, r2
 800750e:	dc37      	bgt.n	8007580 <_printf_float+0x374>
 8007510:	f04f 0b00 	mov.w	fp, #0
 8007514:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007518:	f104 021a 	add.w	r2, r4, #26
 800751c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800751e:	9305      	str	r3, [sp, #20]
 8007520:	eba3 0309 	sub.w	r3, r3, r9
 8007524:	455b      	cmp	r3, fp
 8007526:	dc33      	bgt.n	8007590 <_printf_float+0x384>
 8007528:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800752c:	429a      	cmp	r2, r3
 800752e:	db3b      	blt.n	80075a8 <_printf_float+0x39c>
 8007530:	6823      	ldr	r3, [r4, #0]
 8007532:	07da      	lsls	r2, r3, #31
 8007534:	d438      	bmi.n	80075a8 <_printf_float+0x39c>
 8007536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007538:	9a05      	ldr	r2, [sp, #20]
 800753a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800753c:	1a9a      	subs	r2, r3, r2
 800753e:	eba3 0901 	sub.w	r9, r3, r1
 8007542:	4591      	cmp	r9, r2
 8007544:	bfa8      	it	ge
 8007546:	4691      	movge	r9, r2
 8007548:	f1b9 0f00 	cmp.w	r9, #0
 800754c:	dc35      	bgt.n	80075ba <_printf_float+0x3ae>
 800754e:	f04f 0800 	mov.w	r8, #0
 8007552:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007556:	f104 0a1a 	add.w	sl, r4, #26
 800755a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800755e:	1a9b      	subs	r3, r3, r2
 8007560:	eba3 0309 	sub.w	r3, r3, r9
 8007564:	4543      	cmp	r3, r8
 8007566:	f77f af79 	ble.w	800745c <_printf_float+0x250>
 800756a:	2301      	movs	r3, #1
 800756c:	4652      	mov	r2, sl
 800756e:	4631      	mov	r1, r6
 8007570:	4628      	mov	r0, r5
 8007572:	47b8      	blx	r7
 8007574:	3001      	adds	r0, #1
 8007576:	f43f aeaa 	beq.w	80072ce <_printf_float+0xc2>
 800757a:	f108 0801 	add.w	r8, r8, #1
 800757e:	e7ec      	b.n	800755a <_printf_float+0x34e>
 8007580:	4613      	mov	r3, r2
 8007582:	4631      	mov	r1, r6
 8007584:	4642      	mov	r2, r8
 8007586:	4628      	mov	r0, r5
 8007588:	47b8      	blx	r7
 800758a:	3001      	adds	r0, #1
 800758c:	d1c0      	bne.n	8007510 <_printf_float+0x304>
 800758e:	e69e      	b.n	80072ce <_printf_float+0xc2>
 8007590:	2301      	movs	r3, #1
 8007592:	4631      	mov	r1, r6
 8007594:	4628      	mov	r0, r5
 8007596:	9205      	str	r2, [sp, #20]
 8007598:	47b8      	blx	r7
 800759a:	3001      	adds	r0, #1
 800759c:	f43f ae97 	beq.w	80072ce <_printf_float+0xc2>
 80075a0:	9a05      	ldr	r2, [sp, #20]
 80075a2:	f10b 0b01 	add.w	fp, fp, #1
 80075a6:	e7b9      	b.n	800751c <_printf_float+0x310>
 80075a8:	ee18 3a10 	vmov	r3, s16
 80075ac:	4652      	mov	r2, sl
 80075ae:	4631      	mov	r1, r6
 80075b0:	4628      	mov	r0, r5
 80075b2:	47b8      	blx	r7
 80075b4:	3001      	adds	r0, #1
 80075b6:	d1be      	bne.n	8007536 <_printf_float+0x32a>
 80075b8:	e689      	b.n	80072ce <_printf_float+0xc2>
 80075ba:	9a05      	ldr	r2, [sp, #20]
 80075bc:	464b      	mov	r3, r9
 80075be:	4442      	add	r2, r8
 80075c0:	4631      	mov	r1, r6
 80075c2:	4628      	mov	r0, r5
 80075c4:	47b8      	blx	r7
 80075c6:	3001      	adds	r0, #1
 80075c8:	d1c1      	bne.n	800754e <_printf_float+0x342>
 80075ca:	e680      	b.n	80072ce <_printf_float+0xc2>
 80075cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075ce:	2a01      	cmp	r2, #1
 80075d0:	dc01      	bgt.n	80075d6 <_printf_float+0x3ca>
 80075d2:	07db      	lsls	r3, r3, #31
 80075d4:	d538      	bpl.n	8007648 <_printf_float+0x43c>
 80075d6:	2301      	movs	r3, #1
 80075d8:	4642      	mov	r2, r8
 80075da:	4631      	mov	r1, r6
 80075dc:	4628      	mov	r0, r5
 80075de:	47b8      	blx	r7
 80075e0:	3001      	adds	r0, #1
 80075e2:	f43f ae74 	beq.w	80072ce <_printf_float+0xc2>
 80075e6:	ee18 3a10 	vmov	r3, s16
 80075ea:	4652      	mov	r2, sl
 80075ec:	4631      	mov	r1, r6
 80075ee:	4628      	mov	r0, r5
 80075f0:	47b8      	blx	r7
 80075f2:	3001      	adds	r0, #1
 80075f4:	f43f ae6b 	beq.w	80072ce <_printf_float+0xc2>
 80075f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075fc:	2200      	movs	r2, #0
 80075fe:	2300      	movs	r3, #0
 8007600:	f7f9 fa6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007604:	b9d8      	cbnz	r0, 800763e <_printf_float+0x432>
 8007606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007608:	f108 0201 	add.w	r2, r8, #1
 800760c:	3b01      	subs	r3, #1
 800760e:	4631      	mov	r1, r6
 8007610:	4628      	mov	r0, r5
 8007612:	47b8      	blx	r7
 8007614:	3001      	adds	r0, #1
 8007616:	d10e      	bne.n	8007636 <_printf_float+0x42a>
 8007618:	e659      	b.n	80072ce <_printf_float+0xc2>
 800761a:	2301      	movs	r3, #1
 800761c:	4652      	mov	r2, sl
 800761e:	4631      	mov	r1, r6
 8007620:	4628      	mov	r0, r5
 8007622:	47b8      	blx	r7
 8007624:	3001      	adds	r0, #1
 8007626:	f43f ae52 	beq.w	80072ce <_printf_float+0xc2>
 800762a:	f108 0801 	add.w	r8, r8, #1
 800762e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007630:	3b01      	subs	r3, #1
 8007632:	4543      	cmp	r3, r8
 8007634:	dcf1      	bgt.n	800761a <_printf_float+0x40e>
 8007636:	464b      	mov	r3, r9
 8007638:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800763c:	e6dc      	b.n	80073f8 <_printf_float+0x1ec>
 800763e:	f04f 0800 	mov.w	r8, #0
 8007642:	f104 0a1a 	add.w	sl, r4, #26
 8007646:	e7f2      	b.n	800762e <_printf_float+0x422>
 8007648:	2301      	movs	r3, #1
 800764a:	4642      	mov	r2, r8
 800764c:	e7df      	b.n	800760e <_printf_float+0x402>
 800764e:	2301      	movs	r3, #1
 8007650:	464a      	mov	r2, r9
 8007652:	4631      	mov	r1, r6
 8007654:	4628      	mov	r0, r5
 8007656:	47b8      	blx	r7
 8007658:	3001      	adds	r0, #1
 800765a:	f43f ae38 	beq.w	80072ce <_printf_float+0xc2>
 800765e:	f108 0801 	add.w	r8, r8, #1
 8007662:	68e3      	ldr	r3, [r4, #12]
 8007664:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007666:	1a5b      	subs	r3, r3, r1
 8007668:	4543      	cmp	r3, r8
 800766a:	dcf0      	bgt.n	800764e <_printf_float+0x442>
 800766c:	e6fa      	b.n	8007464 <_printf_float+0x258>
 800766e:	f04f 0800 	mov.w	r8, #0
 8007672:	f104 0919 	add.w	r9, r4, #25
 8007676:	e7f4      	b.n	8007662 <_printf_float+0x456>

08007678 <_printf_common>:
 8007678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800767c:	4616      	mov	r6, r2
 800767e:	4699      	mov	r9, r3
 8007680:	688a      	ldr	r2, [r1, #8]
 8007682:	690b      	ldr	r3, [r1, #16]
 8007684:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007688:	4293      	cmp	r3, r2
 800768a:	bfb8      	it	lt
 800768c:	4613      	movlt	r3, r2
 800768e:	6033      	str	r3, [r6, #0]
 8007690:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007694:	4607      	mov	r7, r0
 8007696:	460c      	mov	r4, r1
 8007698:	b10a      	cbz	r2, 800769e <_printf_common+0x26>
 800769a:	3301      	adds	r3, #1
 800769c:	6033      	str	r3, [r6, #0]
 800769e:	6823      	ldr	r3, [r4, #0]
 80076a0:	0699      	lsls	r1, r3, #26
 80076a2:	bf42      	ittt	mi
 80076a4:	6833      	ldrmi	r3, [r6, #0]
 80076a6:	3302      	addmi	r3, #2
 80076a8:	6033      	strmi	r3, [r6, #0]
 80076aa:	6825      	ldr	r5, [r4, #0]
 80076ac:	f015 0506 	ands.w	r5, r5, #6
 80076b0:	d106      	bne.n	80076c0 <_printf_common+0x48>
 80076b2:	f104 0a19 	add.w	sl, r4, #25
 80076b6:	68e3      	ldr	r3, [r4, #12]
 80076b8:	6832      	ldr	r2, [r6, #0]
 80076ba:	1a9b      	subs	r3, r3, r2
 80076bc:	42ab      	cmp	r3, r5
 80076be:	dc26      	bgt.n	800770e <_printf_common+0x96>
 80076c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076c4:	1e13      	subs	r3, r2, #0
 80076c6:	6822      	ldr	r2, [r4, #0]
 80076c8:	bf18      	it	ne
 80076ca:	2301      	movne	r3, #1
 80076cc:	0692      	lsls	r2, r2, #26
 80076ce:	d42b      	bmi.n	8007728 <_printf_common+0xb0>
 80076d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076d4:	4649      	mov	r1, r9
 80076d6:	4638      	mov	r0, r7
 80076d8:	47c0      	blx	r8
 80076da:	3001      	adds	r0, #1
 80076dc:	d01e      	beq.n	800771c <_printf_common+0xa4>
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	68e5      	ldr	r5, [r4, #12]
 80076e2:	6832      	ldr	r2, [r6, #0]
 80076e4:	f003 0306 	and.w	r3, r3, #6
 80076e8:	2b04      	cmp	r3, #4
 80076ea:	bf08      	it	eq
 80076ec:	1aad      	subeq	r5, r5, r2
 80076ee:	68a3      	ldr	r3, [r4, #8]
 80076f0:	6922      	ldr	r2, [r4, #16]
 80076f2:	bf0c      	ite	eq
 80076f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076f8:	2500      	movne	r5, #0
 80076fa:	4293      	cmp	r3, r2
 80076fc:	bfc4      	itt	gt
 80076fe:	1a9b      	subgt	r3, r3, r2
 8007700:	18ed      	addgt	r5, r5, r3
 8007702:	2600      	movs	r6, #0
 8007704:	341a      	adds	r4, #26
 8007706:	42b5      	cmp	r5, r6
 8007708:	d11a      	bne.n	8007740 <_printf_common+0xc8>
 800770a:	2000      	movs	r0, #0
 800770c:	e008      	b.n	8007720 <_printf_common+0xa8>
 800770e:	2301      	movs	r3, #1
 8007710:	4652      	mov	r2, sl
 8007712:	4649      	mov	r1, r9
 8007714:	4638      	mov	r0, r7
 8007716:	47c0      	blx	r8
 8007718:	3001      	adds	r0, #1
 800771a:	d103      	bne.n	8007724 <_printf_common+0xac>
 800771c:	f04f 30ff 	mov.w	r0, #4294967295
 8007720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007724:	3501      	adds	r5, #1
 8007726:	e7c6      	b.n	80076b6 <_printf_common+0x3e>
 8007728:	18e1      	adds	r1, r4, r3
 800772a:	1c5a      	adds	r2, r3, #1
 800772c:	2030      	movs	r0, #48	; 0x30
 800772e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007732:	4422      	add	r2, r4
 8007734:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007738:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800773c:	3302      	adds	r3, #2
 800773e:	e7c7      	b.n	80076d0 <_printf_common+0x58>
 8007740:	2301      	movs	r3, #1
 8007742:	4622      	mov	r2, r4
 8007744:	4649      	mov	r1, r9
 8007746:	4638      	mov	r0, r7
 8007748:	47c0      	blx	r8
 800774a:	3001      	adds	r0, #1
 800774c:	d0e6      	beq.n	800771c <_printf_common+0xa4>
 800774e:	3601      	adds	r6, #1
 8007750:	e7d9      	b.n	8007706 <_printf_common+0x8e>
	...

08007754 <_printf_i>:
 8007754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007758:	7e0f      	ldrb	r7, [r1, #24]
 800775a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800775c:	2f78      	cmp	r7, #120	; 0x78
 800775e:	4691      	mov	r9, r2
 8007760:	4680      	mov	r8, r0
 8007762:	460c      	mov	r4, r1
 8007764:	469a      	mov	sl, r3
 8007766:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800776a:	d807      	bhi.n	800777c <_printf_i+0x28>
 800776c:	2f62      	cmp	r7, #98	; 0x62
 800776e:	d80a      	bhi.n	8007786 <_printf_i+0x32>
 8007770:	2f00      	cmp	r7, #0
 8007772:	f000 80d8 	beq.w	8007926 <_printf_i+0x1d2>
 8007776:	2f58      	cmp	r7, #88	; 0x58
 8007778:	f000 80a3 	beq.w	80078c2 <_printf_i+0x16e>
 800777c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007780:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007784:	e03a      	b.n	80077fc <_printf_i+0xa8>
 8007786:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800778a:	2b15      	cmp	r3, #21
 800778c:	d8f6      	bhi.n	800777c <_printf_i+0x28>
 800778e:	a101      	add	r1, pc, #4	; (adr r1, 8007794 <_printf_i+0x40>)
 8007790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007794:	080077ed 	.word	0x080077ed
 8007798:	08007801 	.word	0x08007801
 800779c:	0800777d 	.word	0x0800777d
 80077a0:	0800777d 	.word	0x0800777d
 80077a4:	0800777d 	.word	0x0800777d
 80077a8:	0800777d 	.word	0x0800777d
 80077ac:	08007801 	.word	0x08007801
 80077b0:	0800777d 	.word	0x0800777d
 80077b4:	0800777d 	.word	0x0800777d
 80077b8:	0800777d 	.word	0x0800777d
 80077bc:	0800777d 	.word	0x0800777d
 80077c0:	0800790d 	.word	0x0800790d
 80077c4:	08007831 	.word	0x08007831
 80077c8:	080078ef 	.word	0x080078ef
 80077cc:	0800777d 	.word	0x0800777d
 80077d0:	0800777d 	.word	0x0800777d
 80077d4:	0800792f 	.word	0x0800792f
 80077d8:	0800777d 	.word	0x0800777d
 80077dc:	08007831 	.word	0x08007831
 80077e0:	0800777d 	.word	0x0800777d
 80077e4:	0800777d 	.word	0x0800777d
 80077e8:	080078f7 	.word	0x080078f7
 80077ec:	682b      	ldr	r3, [r5, #0]
 80077ee:	1d1a      	adds	r2, r3, #4
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	602a      	str	r2, [r5, #0]
 80077f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077fc:	2301      	movs	r3, #1
 80077fe:	e0a3      	b.n	8007948 <_printf_i+0x1f4>
 8007800:	6820      	ldr	r0, [r4, #0]
 8007802:	6829      	ldr	r1, [r5, #0]
 8007804:	0606      	lsls	r6, r0, #24
 8007806:	f101 0304 	add.w	r3, r1, #4
 800780a:	d50a      	bpl.n	8007822 <_printf_i+0xce>
 800780c:	680e      	ldr	r6, [r1, #0]
 800780e:	602b      	str	r3, [r5, #0]
 8007810:	2e00      	cmp	r6, #0
 8007812:	da03      	bge.n	800781c <_printf_i+0xc8>
 8007814:	232d      	movs	r3, #45	; 0x2d
 8007816:	4276      	negs	r6, r6
 8007818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800781c:	485e      	ldr	r0, [pc, #376]	; (8007998 <_printf_i+0x244>)
 800781e:	230a      	movs	r3, #10
 8007820:	e019      	b.n	8007856 <_printf_i+0x102>
 8007822:	680e      	ldr	r6, [r1, #0]
 8007824:	602b      	str	r3, [r5, #0]
 8007826:	f010 0f40 	tst.w	r0, #64	; 0x40
 800782a:	bf18      	it	ne
 800782c:	b236      	sxthne	r6, r6
 800782e:	e7ef      	b.n	8007810 <_printf_i+0xbc>
 8007830:	682b      	ldr	r3, [r5, #0]
 8007832:	6820      	ldr	r0, [r4, #0]
 8007834:	1d19      	adds	r1, r3, #4
 8007836:	6029      	str	r1, [r5, #0]
 8007838:	0601      	lsls	r1, r0, #24
 800783a:	d501      	bpl.n	8007840 <_printf_i+0xec>
 800783c:	681e      	ldr	r6, [r3, #0]
 800783e:	e002      	b.n	8007846 <_printf_i+0xf2>
 8007840:	0646      	lsls	r6, r0, #25
 8007842:	d5fb      	bpl.n	800783c <_printf_i+0xe8>
 8007844:	881e      	ldrh	r6, [r3, #0]
 8007846:	4854      	ldr	r0, [pc, #336]	; (8007998 <_printf_i+0x244>)
 8007848:	2f6f      	cmp	r7, #111	; 0x6f
 800784a:	bf0c      	ite	eq
 800784c:	2308      	moveq	r3, #8
 800784e:	230a      	movne	r3, #10
 8007850:	2100      	movs	r1, #0
 8007852:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007856:	6865      	ldr	r5, [r4, #4]
 8007858:	60a5      	str	r5, [r4, #8]
 800785a:	2d00      	cmp	r5, #0
 800785c:	bfa2      	ittt	ge
 800785e:	6821      	ldrge	r1, [r4, #0]
 8007860:	f021 0104 	bicge.w	r1, r1, #4
 8007864:	6021      	strge	r1, [r4, #0]
 8007866:	b90e      	cbnz	r6, 800786c <_printf_i+0x118>
 8007868:	2d00      	cmp	r5, #0
 800786a:	d04d      	beq.n	8007908 <_printf_i+0x1b4>
 800786c:	4615      	mov	r5, r2
 800786e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007872:	fb03 6711 	mls	r7, r3, r1, r6
 8007876:	5dc7      	ldrb	r7, [r0, r7]
 8007878:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800787c:	4637      	mov	r7, r6
 800787e:	42bb      	cmp	r3, r7
 8007880:	460e      	mov	r6, r1
 8007882:	d9f4      	bls.n	800786e <_printf_i+0x11a>
 8007884:	2b08      	cmp	r3, #8
 8007886:	d10b      	bne.n	80078a0 <_printf_i+0x14c>
 8007888:	6823      	ldr	r3, [r4, #0]
 800788a:	07de      	lsls	r6, r3, #31
 800788c:	d508      	bpl.n	80078a0 <_printf_i+0x14c>
 800788e:	6923      	ldr	r3, [r4, #16]
 8007890:	6861      	ldr	r1, [r4, #4]
 8007892:	4299      	cmp	r1, r3
 8007894:	bfde      	ittt	le
 8007896:	2330      	movle	r3, #48	; 0x30
 8007898:	f805 3c01 	strble.w	r3, [r5, #-1]
 800789c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80078a0:	1b52      	subs	r2, r2, r5
 80078a2:	6122      	str	r2, [r4, #16]
 80078a4:	f8cd a000 	str.w	sl, [sp]
 80078a8:	464b      	mov	r3, r9
 80078aa:	aa03      	add	r2, sp, #12
 80078ac:	4621      	mov	r1, r4
 80078ae:	4640      	mov	r0, r8
 80078b0:	f7ff fee2 	bl	8007678 <_printf_common>
 80078b4:	3001      	adds	r0, #1
 80078b6:	d14c      	bne.n	8007952 <_printf_i+0x1fe>
 80078b8:	f04f 30ff 	mov.w	r0, #4294967295
 80078bc:	b004      	add	sp, #16
 80078be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c2:	4835      	ldr	r0, [pc, #212]	; (8007998 <_printf_i+0x244>)
 80078c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80078c8:	6829      	ldr	r1, [r5, #0]
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80078d0:	6029      	str	r1, [r5, #0]
 80078d2:	061d      	lsls	r5, r3, #24
 80078d4:	d514      	bpl.n	8007900 <_printf_i+0x1ac>
 80078d6:	07df      	lsls	r7, r3, #31
 80078d8:	bf44      	itt	mi
 80078da:	f043 0320 	orrmi.w	r3, r3, #32
 80078de:	6023      	strmi	r3, [r4, #0]
 80078e0:	b91e      	cbnz	r6, 80078ea <_printf_i+0x196>
 80078e2:	6823      	ldr	r3, [r4, #0]
 80078e4:	f023 0320 	bic.w	r3, r3, #32
 80078e8:	6023      	str	r3, [r4, #0]
 80078ea:	2310      	movs	r3, #16
 80078ec:	e7b0      	b.n	8007850 <_printf_i+0xfc>
 80078ee:	6823      	ldr	r3, [r4, #0]
 80078f0:	f043 0320 	orr.w	r3, r3, #32
 80078f4:	6023      	str	r3, [r4, #0]
 80078f6:	2378      	movs	r3, #120	; 0x78
 80078f8:	4828      	ldr	r0, [pc, #160]	; (800799c <_printf_i+0x248>)
 80078fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078fe:	e7e3      	b.n	80078c8 <_printf_i+0x174>
 8007900:	0659      	lsls	r1, r3, #25
 8007902:	bf48      	it	mi
 8007904:	b2b6      	uxthmi	r6, r6
 8007906:	e7e6      	b.n	80078d6 <_printf_i+0x182>
 8007908:	4615      	mov	r5, r2
 800790a:	e7bb      	b.n	8007884 <_printf_i+0x130>
 800790c:	682b      	ldr	r3, [r5, #0]
 800790e:	6826      	ldr	r6, [r4, #0]
 8007910:	6961      	ldr	r1, [r4, #20]
 8007912:	1d18      	adds	r0, r3, #4
 8007914:	6028      	str	r0, [r5, #0]
 8007916:	0635      	lsls	r5, r6, #24
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	d501      	bpl.n	8007920 <_printf_i+0x1cc>
 800791c:	6019      	str	r1, [r3, #0]
 800791e:	e002      	b.n	8007926 <_printf_i+0x1d2>
 8007920:	0670      	lsls	r0, r6, #25
 8007922:	d5fb      	bpl.n	800791c <_printf_i+0x1c8>
 8007924:	8019      	strh	r1, [r3, #0]
 8007926:	2300      	movs	r3, #0
 8007928:	6123      	str	r3, [r4, #16]
 800792a:	4615      	mov	r5, r2
 800792c:	e7ba      	b.n	80078a4 <_printf_i+0x150>
 800792e:	682b      	ldr	r3, [r5, #0]
 8007930:	1d1a      	adds	r2, r3, #4
 8007932:	602a      	str	r2, [r5, #0]
 8007934:	681d      	ldr	r5, [r3, #0]
 8007936:	6862      	ldr	r2, [r4, #4]
 8007938:	2100      	movs	r1, #0
 800793a:	4628      	mov	r0, r5
 800793c:	f7f8 fc58 	bl	80001f0 <memchr>
 8007940:	b108      	cbz	r0, 8007946 <_printf_i+0x1f2>
 8007942:	1b40      	subs	r0, r0, r5
 8007944:	6060      	str	r0, [r4, #4]
 8007946:	6863      	ldr	r3, [r4, #4]
 8007948:	6123      	str	r3, [r4, #16]
 800794a:	2300      	movs	r3, #0
 800794c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007950:	e7a8      	b.n	80078a4 <_printf_i+0x150>
 8007952:	6923      	ldr	r3, [r4, #16]
 8007954:	462a      	mov	r2, r5
 8007956:	4649      	mov	r1, r9
 8007958:	4640      	mov	r0, r8
 800795a:	47d0      	blx	sl
 800795c:	3001      	adds	r0, #1
 800795e:	d0ab      	beq.n	80078b8 <_printf_i+0x164>
 8007960:	6823      	ldr	r3, [r4, #0]
 8007962:	079b      	lsls	r3, r3, #30
 8007964:	d413      	bmi.n	800798e <_printf_i+0x23a>
 8007966:	68e0      	ldr	r0, [r4, #12]
 8007968:	9b03      	ldr	r3, [sp, #12]
 800796a:	4298      	cmp	r0, r3
 800796c:	bfb8      	it	lt
 800796e:	4618      	movlt	r0, r3
 8007970:	e7a4      	b.n	80078bc <_printf_i+0x168>
 8007972:	2301      	movs	r3, #1
 8007974:	4632      	mov	r2, r6
 8007976:	4649      	mov	r1, r9
 8007978:	4640      	mov	r0, r8
 800797a:	47d0      	blx	sl
 800797c:	3001      	adds	r0, #1
 800797e:	d09b      	beq.n	80078b8 <_printf_i+0x164>
 8007980:	3501      	adds	r5, #1
 8007982:	68e3      	ldr	r3, [r4, #12]
 8007984:	9903      	ldr	r1, [sp, #12]
 8007986:	1a5b      	subs	r3, r3, r1
 8007988:	42ab      	cmp	r3, r5
 800798a:	dcf2      	bgt.n	8007972 <_printf_i+0x21e>
 800798c:	e7eb      	b.n	8007966 <_printf_i+0x212>
 800798e:	2500      	movs	r5, #0
 8007990:	f104 0619 	add.w	r6, r4, #25
 8007994:	e7f5      	b.n	8007982 <_printf_i+0x22e>
 8007996:	bf00      	nop
 8007998:	08009fca 	.word	0x08009fca
 800799c:	08009fdb 	.word	0x08009fdb

080079a0 <sniprintf>:
 80079a0:	b40c      	push	{r2, r3}
 80079a2:	b530      	push	{r4, r5, lr}
 80079a4:	4b17      	ldr	r3, [pc, #92]	; (8007a04 <sniprintf+0x64>)
 80079a6:	1e0c      	subs	r4, r1, #0
 80079a8:	681d      	ldr	r5, [r3, #0]
 80079aa:	b09d      	sub	sp, #116	; 0x74
 80079ac:	da08      	bge.n	80079c0 <sniprintf+0x20>
 80079ae:	238b      	movs	r3, #139	; 0x8b
 80079b0:	602b      	str	r3, [r5, #0]
 80079b2:	f04f 30ff 	mov.w	r0, #4294967295
 80079b6:	b01d      	add	sp, #116	; 0x74
 80079b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079bc:	b002      	add	sp, #8
 80079be:	4770      	bx	lr
 80079c0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80079c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80079c8:	bf14      	ite	ne
 80079ca:	f104 33ff 	addne.w	r3, r4, #4294967295
 80079ce:	4623      	moveq	r3, r4
 80079d0:	9304      	str	r3, [sp, #16]
 80079d2:	9307      	str	r3, [sp, #28]
 80079d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80079d8:	9002      	str	r0, [sp, #8]
 80079da:	9006      	str	r0, [sp, #24]
 80079dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80079e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80079e2:	ab21      	add	r3, sp, #132	; 0x84
 80079e4:	a902      	add	r1, sp, #8
 80079e6:	4628      	mov	r0, r5
 80079e8:	9301      	str	r3, [sp, #4]
 80079ea:	f001 fb77 	bl	80090dc <_svfiprintf_r>
 80079ee:	1c43      	adds	r3, r0, #1
 80079f0:	bfbc      	itt	lt
 80079f2:	238b      	movlt	r3, #139	; 0x8b
 80079f4:	602b      	strlt	r3, [r5, #0]
 80079f6:	2c00      	cmp	r4, #0
 80079f8:	d0dd      	beq.n	80079b6 <sniprintf+0x16>
 80079fa:	9b02      	ldr	r3, [sp, #8]
 80079fc:	2200      	movs	r2, #0
 80079fe:	701a      	strb	r2, [r3, #0]
 8007a00:	e7d9      	b.n	80079b6 <sniprintf+0x16>
 8007a02:	bf00      	nop
 8007a04:	20000010 	.word	0x20000010

08007a08 <quorem>:
 8007a08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a0c:	6903      	ldr	r3, [r0, #16]
 8007a0e:	690c      	ldr	r4, [r1, #16]
 8007a10:	42a3      	cmp	r3, r4
 8007a12:	4607      	mov	r7, r0
 8007a14:	f2c0 8081 	blt.w	8007b1a <quorem+0x112>
 8007a18:	3c01      	subs	r4, #1
 8007a1a:	f101 0814 	add.w	r8, r1, #20
 8007a1e:	f100 0514 	add.w	r5, r0, #20
 8007a22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a26:	9301      	str	r3, [sp, #4]
 8007a28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a30:	3301      	adds	r3, #1
 8007a32:	429a      	cmp	r2, r3
 8007a34:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a3c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a40:	d331      	bcc.n	8007aa6 <quorem+0x9e>
 8007a42:	f04f 0e00 	mov.w	lr, #0
 8007a46:	4640      	mov	r0, r8
 8007a48:	46ac      	mov	ip, r5
 8007a4a:	46f2      	mov	sl, lr
 8007a4c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a50:	b293      	uxth	r3, r2
 8007a52:	fb06 e303 	mla	r3, r6, r3, lr
 8007a56:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	ebaa 0303 	sub.w	r3, sl, r3
 8007a60:	f8dc a000 	ldr.w	sl, [ip]
 8007a64:	0c12      	lsrs	r2, r2, #16
 8007a66:	fa13 f38a 	uxtah	r3, r3, sl
 8007a6a:	fb06 e202 	mla	r2, r6, r2, lr
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	9b00      	ldr	r3, [sp, #0]
 8007a72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a76:	b292      	uxth	r2, r2
 8007a78:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007a7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a80:	f8bd 3000 	ldrh.w	r3, [sp]
 8007a84:	4581      	cmp	r9, r0
 8007a86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a8a:	f84c 3b04 	str.w	r3, [ip], #4
 8007a8e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a92:	d2db      	bcs.n	8007a4c <quorem+0x44>
 8007a94:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a98:	b92b      	cbnz	r3, 8007aa6 <quorem+0x9e>
 8007a9a:	9b01      	ldr	r3, [sp, #4]
 8007a9c:	3b04      	subs	r3, #4
 8007a9e:	429d      	cmp	r5, r3
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	d32e      	bcc.n	8007b02 <quorem+0xfa>
 8007aa4:	613c      	str	r4, [r7, #16]
 8007aa6:	4638      	mov	r0, r7
 8007aa8:	f001 f8c4 	bl	8008c34 <__mcmp>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	db24      	blt.n	8007afa <quorem+0xf2>
 8007ab0:	3601      	adds	r6, #1
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	f04f 0c00 	mov.w	ip, #0
 8007ab8:	f858 2b04 	ldr.w	r2, [r8], #4
 8007abc:	f8d0 e000 	ldr.w	lr, [r0]
 8007ac0:	b293      	uxth	r3, r2
 8007ac2:	ebac 0303 	sub.w	r3, ip, r3
 8007ac6:	0c12      	lsrs	r2, r2, #16
 8007ac8:	fa13 f38e 	uxtah	r3, r3, lr
 8007acc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ad0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ada:	45c1      	cmp	r9, r8
 8007adc:	f840 3b04 	str.w	r3, [r0], #4
 8007ae0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ae4:	d2e8      	bcs.n	8007ab8 <quorem+0xb0>
 8007ae6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007aea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007aee:	b922      	cbnz	r2, 8007afa <quorem+0xf2>
 8007af0:	3b04      	subs	r3, #4
 8007af2:	429d      	cmp	r5, r3
 8007af4:	461a      	mov	r2, r3
 8007af6:	d30a      	bcc.n	8007b0e <quorem+0x106>
 8007af8:	613c      	str	r4, [r7, #16]
 8007afa:	4630      	mov	r0, r6
 8007afc:	b003      	add	sp, #12
 8007afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b02:	6812      	ldr	r2, [r2, #0]
 8007b04:	3b04      	subs	r3, #4
 8007b06:	2a00      	cmp	r2, #0
 8007b08:	d1cc      	bne.n	8007aa4 <quorem+0x9c>
 8007b0a:	3c01      	subs	r4, #1
 8007b0c:	e7c7      	b.n	8007a9e <quorem+0x96>
 8007b0e:	6812      	ldr	r2, [r2, #0]
 8007b10:	3b04      	subs	r3, #4
 8007b12:	2a00      	cmp	r2, #0
 8007b14:	d1f0      	bne.n	8007af8 <quorem+0xf0>
 8007b16:	3c01      	subs	r4, #1
 8007b18:	e7eb      	b.n	8007af2 <quorem+0xea>
 8007b1a:	2000      	movs	r0, #0
 8007b1c:	e7ee      	b.n	8007afc <quorem+0xf4>
	...

08007b20 <_dtoa_r>:
 8007b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b24:	ed2d 8b04 	vpush	{d8-d9}
 8007b28:	ec57 6b10 	vmov	r6, r7, d0
 8007b2c:	b093      	sub	sp, #76	; 0x4c
 8007b2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007b34:	9106      	str	r1, [sp, #24]
 8007b36:	ee10 aa10 	vmov	sl, s0
 8007b3a:	4604      	mov	r4, r0
 8007b3c:	9209      	str	r2, [sp, #36]	; 0x24
 8007b3e:	930c      	str	r3, [sp, #48]	; 0x30
 8007b40:	46bb      	mov	fp, r7
 8007b42:	b975      	cbnz	r5, 8007b62 <_dtoa_r+0x42>
 8007b44:	2010      	movs	r0, #16
 8007b46:	f000 fddd 	bl	8008704 <malloc>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	6260      	str	r0, [r4, #36]	; 0x24
 8007b4e:	b920      	cbnz	r0, 8007b5a <_dtoa_r+0x3a>
 8007b50:	4ba7      	ldr	r3, [pc, #668]	; (8007df0 <_dtoa_r+0x2d0>)
 8007b52:	21ea      	movs	r1, #234	; 0xea
 8007b54:	48a7      	ldr	r0, [pc, #668]	; (8007df4 <_dtoa_r+0x2d4>)
 8007b56:	f001 fbd1 	bl	80092fc <__assert_func>
 8007b5a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b5e:	6005      	str	r5, [r0, #0]
 8007b60:	60c5      	str	r5, [r0, #12]
 8007b62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b64:	6819      	ldr	r1, [r3, #0]
 8007b66:	b151      	cbz	r1, 8007b7e <_dtoa_r+0x5e>
 8007b68:	685a      	ldr	r2, [r3, #4]
 8007b6a:	604a      	str	r2, [r1, #4]
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	4093      	lsls	r3, r2
 8007b70:	608b      	str	r3, [r1, #8]
 8007b72:	4620      	mov	r0, r4
 8007b74:	f000 fe1c 	bl	80087b0 <_Bfree>
 8007b78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	601a      	str	r2, [r3, #0]
 8007b7e:	1e3b      	subs	r3, r7, #0
 8007b80:	bfaa      	itet	ge
 8007b82:	2300      	movge	r3, #0
 8007b84:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007b88:	f8c8 3000 	strge.w	r3, [r8]
 8007b8c:	4b9a      	ldr	r3, [pc, #616]	; (8007df8 <_dtoa_r+0x2d8>)
 8007b8e:	bfbc      	itt	lt
 8007b90:	2201      	movlt	r2, #1
 8007b92:	f8c8 2000 	strlt.w	r2, [r8]
 8007b96:	ea33 030b 	bics.w	r3, r3, fp
 8007b9a:	d11b      	bne.n	8007bd4 <_dtoa_r+0xb4>
 8007b9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b9e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ba2:	6013      	str	r3, [r2, #0]
 8007ba4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ba8:	4333      	orrs	r3, r6
 8007baa:	f000 8592 	beq.w	80086d2 <_dtoa_r+0xbb2>
 8007bae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bb0:	b963      	cbnz	r3, 8007bcc <_dtoa_r+0xac>
 8007bb2:	4b92      	ldr	r3, [pc, #584]	; (8007dfc <_dtoa_r+0x2dc>)
 8007bb4:	e022      	b.n	8007bfc <_dtoa_r+0xdc>
 8007bb6:	4b92      	ldr	r3, [pc, #584]	; (8007e00 <_dtoa_r+0x2e0>)
 8007bb8:	9301      	str	r3, [sp, #4]
 8007bba:	3308      	adds	r3, #8
 8007bbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007bbe:	6013      	str	r3, [r2, #0]
 8007bc0:	9801      	ldr	r0, [sp, #4]
 8007bc2:	b013      	add	sp, #76	; 0x4c
 8007bc4:	ecbd 8b04 	vpop	{d8-d9}
 8007bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bcc:	4b8b      	ldr	r3, [pc, #556]	; (8007dfc <_dtoa_r+0x2dc>)
 8007bce:	9301      	str	r3, [sp, #4]
 8007bd0:	3303      	adds	r3, #3
 8007bd2:	e7f3      	b.n	8007bbc <_dtoa_r+0x9c>
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	4650      	mov	r0, sl
 8007bda:	4659      	mov	r1, fp
 8007bdc:	f7f8 ff7c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007be0:	ec4b ab19 	vmov	d9, sl, fp
 8007be4:	4680      	mov	r8, r0
 8007be6:	b158      	cbz	r0, 8007c00 <_dtoa_r+0xe0>
 8007be8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bea:	2301      	movs	r3, #1
 8007bec:	6013      	str	r3, [r2, #0]
 8007bee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f000 856b 	beq.w	80086cc <_dtoa_r+0xbac>
 8007bf6:	4883      	ldr	r0, [pc, #524]	; (8007e04 <_dtoa_r+0x2e4>)
 8007bf8:	6018      	str	r0, [r3, #0]
 8007bfa:	1e43      	subs	r3, r0, #1
 8007bfc:	9301      	str	r3, [sp, #4]
 8007bfe:	e7df      	b.n	8007bc0 <_dtoa_r+0xa0>
 8007c00:	ec4b ab10 	vmov	d0, sl, fp
 8007c04:	aa10      	add	r2, sp, #64	; 0x40
 8007c06:	a911      	add	r1, sp, #68	; 0x44
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f001 f8b9 	bl	8008d80 <__d2b>
 8007c0e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007c12:	ee08 0a10 	vmov	s16, r0
 8007c16:	2d00      	cmp	r5, #0
 8007c18:	f000 8084 	beq.w	8007d24 <_dtoa_r+0x204>
 8007c1c:	ee19 3a90 	vmov	r3, s19
 8007c20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c24:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007c28:	4656      	mov	r6, sl
 8007c2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007c2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007c32:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007c36:	4b74      	ldr	r3, [pc, #464]	; (8007e08 <_dtoa_r+0x2e8>)
 8007c38:	2200      	movs	r2, #0
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	4639      	mov	r1, r7
 8007c3e:	f7f8 fb2b 	bl	8000298 <__aeabi_dsub>
 8007c42:	a365      	add	r3, pc, #404	; (adr r3, 8007dd8 <_dtoa_r+0x2b8>)
 8007c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c48:	f7f8 fcde 	bl	8000608 <__aeabi_dmul>
 8007c4c:	a364      	add	r3, pc, #400	; (adr r3, 8007de0 <_dtoa_r+0x2c0>)
 8007c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c52:	f7f8 fb23 	bl	800029c <__adddf3>
 8007c56:	4606      	mov	r6, r0
 8007c58:	4628      	mov	r0, r5
 8007c5a:	460f      	mov	r7, r1
 8007c5c:	f7f8 fc6a 	bl	8000534 <__aeabi_i2d>
 8007c60:	a361      	add	r3, pc, #388	; (adr r3, 8007de8 <_dtoa_r+0x2c8>)
 8007c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c66:	f7f8 fccf 	bl	8000608 <__aeabi_dmul>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	4630      	mov	r0, r6
 8007c70:	4639      	mov	r1, r7
 8007c72:	f7f8 fb13 	bl	800029c <__adddf3>
 8007c76:	4606      	mov	r6, r0
 8007c78:	460f      	mov	r7, r1
 8007c7a:	f7f8 ff75 	bl	8000b68 <__aeabi_d2iz>
 8007c7e:	2200      	movs	r2, #0
 8007c80:	9000      	str	r0, [sp, #0]
 8007c82:	2300      	movs	r3, #0
 8007c84:	4630      	mov	r0, r6
 8007c86:	4639      	mov	r1, r7
 8007c88:	f7f8 ff30 	bl	8000aec <__aeabi_dcmplt>
 8007c8c:	b150      	cbz	r0, 8007ca4 <_dtoa_r+0x184>
 8007c8e:	9800      	ldr	r0, [sp, #0]
 8007c90:	f7f8 fc50 	bl	8000534 <__aeabi_i2d>
 8007c94:	4632      	mov	r2, r6
 8007c96:	463b      	mov	r3, r7
 8007c98:	f7f8 ff1e 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c9c:	b910      	cbnz	r0, 8007ca4 <_dtoa_r+0x184>
 8007c9e:	9b00      	ldr	r3, [sp, #0]
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	9300      	str	r3, [sp, #0]
 8007ca4:	9b00      	ldr	r3, [sp, #0]
 8007ca6:	2b16      	cmp	r3, #22
 8007ca8:	d85a      	bhi.n	8007d60 <_dtoa_r+0x240>
 8007caa:	9a00      	ldr	r2, [sp, #0]
 8007cac:	4b57      	ldr	r3, [pc, #348]	; (8007e0c <_dtoa_r+0x2ec>)
 8007cae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb6:	ec51 0b19 	vmov	r0, r1, d9
 8007cba:	f7f8 ff17 	bl	8000aec <__aeabi_dcmplt>
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	d050      	beq.n	8007d64 <_dtoa_r+0x244>
 8007cc2:	9b00      	ldr	r3, [sp, #0]
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	2300      	movs	r3, #0
 8007cca:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ccc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cce:	1b5d      	subs	r5, r3, r5
 8007cd0:	1e6b      	subs	r3, r5, #1
 8007cd2:	9305      	str	r3, [sp, #20]
 8007cd4:	bf45      	ittet	mi
 8007cd6:	f1c5 0301 	rsbmi	r3, r5, #1
 8007cda:	9304      	strmi	r3, [sp, #16]
 8007cdc:	2300      	movpl	r3, #0
 8007cde:	2300      	movmi	r3, #0
 8007ce0:	bf4c      	ite	mi
 8007ce2:	9305      	strmi	r3, [sp, #20]
 8007ce4:	9304      	strpl	r3, [sp, #16]
 8007ce6:	9b00      	ldr	r3, [sp, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	db3d      	blt.n	8007d68 <_dtoa_r+0x248>
 8007cec:	9b05      	ldr	r3, [sp, #20]
 8007cee:	9a00      	ldr	r2, [sp, #0]
 8007cf0:	920a      	str	r2, [sp, #40]	; 0x28
 8007cf2:	4413      	add	r3, r2
 8007cf4:	9305      	str	r3, [sp, #20]
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	9307      	str	r3, [sp, #28]
 8007cfa:	9b06      	ldr	r3, [sp, #24]
 8007cfc:	2b09      	cmp	r3, #9
 8007cfe:	f200 8089 	bhi.w	8007e14 <_dtoa_r+0x2f4>
 8007d02:	2b05      	cmp	r3, #5
 8007d04:	bfc4      	itt	gt
 8007d06:	3b04      	subgt	r3, #4
 8007d08:	9306      	strgt	r3, [sp, #24]
 8007d0a:	9b06      	ldr	r3, [sp, #24]
 8007d0c:	f1a3 0302 	sub.w	r3, r3, #2
 8007d10:	bfcc      	ite	gt
 8007d12:	2500      	movgt	r5, #0
 8007d14:	2501      	movle	r5, #1
 8007d16:	2b03      	cmp	r3, #3
 8007d18:	f200 8087 	bhi.w	8007e2a <_dtoa_r+0x30a>
 8007d1c:	e8df f003 	tbb	[pc, r3]
 8007d20:	59383a2d 	.word	0x59383a2d
 8007d24:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007d28:	441d      	add	r5, r3
 8007d2a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007d2e:	2b20      	cmp	r3, #32
 8007d30:	bfc1      	itttt	gt
 8007d32:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007d36:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007d3a:	fa0b f303 	lslgt.w	r3, fp, r3
 8007d3e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007d42:	bfda      	itte	le
 8007d44:	f1c3 0320 	rsble	r3, r3, #32
 8007d48:	fa06 f003 	lslle.w	r0, r6, r3
 8007d4c:	4318      	orrgt	r0, r3
 8007d4e:	f7f8 fbe1 	bl	8000514 <__aeabi_ui2d>
 8007d52:	2301      	movs	r3, #1
 8007d54:	4606      	mov	r6, r0
 8007d56:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007d5a:	3d01      	subs	r5, #1
 8007d5c:	930e      	str	r3, [sp, #56]	; 0x38
 8007d5e:	e76a      	b.n	8007c36 <_dtoa_r+0x116>
 8007d60:	2301      	movs	r3, #1
 8007d62:	e7b2      	b.n	8007cca <_dtoa_r+0x1aa>
 8007d64:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d66:	e7b1      	b.n	8007ccc <_dtoa_r+0x1ac>
 8007d68:	9b04      	ldr	r3, [sp, #16]
 8007d6a:	9a00      	ldr	r2, [sp, #0]
 8007d6c:	1a9b      	subs	r3, r3, r2
 8007d6e:	9304      	str	r3, [sp, #16]
 8007d70:	4253      	negs	r3, r2
 8007d72:	9307      	str	r3, [sp, #28]
 8007d74:	2300      	movs	r3, #0
 8007d76:	930a      	str	r3, [sp, #40]	; 0x28
 8007d78:	e7bf      	b.n	8007cfa <_dtoa_r+0x1da>
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	9308      	str	r3, [sp, #32]
 8007d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	dc55      	bgt.n	8007e30 <_dtoa_r+0x310>
 8007d84:	2301      	movs	r3, #1
 8007d86:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	9209      	str	r2, [sp, #36]	; 0x24
 8007d8e:	e00c      	b.n	8007daa <_dtoa_r+0x28a>
 8007d90:	2301      	movs	r3, #1
 8007d92:	e7f3      	b.n	8007d7c <_dtoa_r+0x25c>
 8007d94:	2300      	movs	r3, #0
 8007d96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d98:	9308      	str	r3, [sp, #32]
 8007d9a:	9b00      	ldr	r3, [sp, #0]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	9302      	str	r3, [sp, #8]
 8007da0:	3301      	adds	r3, #1
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	9303      	str	r3, [sp, #12]
 8007da6:	bfb8      	it	lt
 8007da8:	2301      	movlt	r3, #1
 8007daa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007dac:	2200      	movs	r2, #0
 8007dae:	6042      	str	r2, [r0, #4]
 8007db0:	2204      	movs	r2, #4
 8007db2:	f102 0614 	add.w	r6, r2, #20
 8007db6:	429e      	cmp	r6, r3
 8007db8:	6841      	ldr	r1, [r0, #4]
 8007dba:	d93d      	bls.n	8007e38 <_dtoa_r+0x318>
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	f000 fcb7 	bl	8008730 <_Balloc>
 8007dc2:	9001      	str	r0, [sp, #4]
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	d13b      	bne.n	8007e40 <_dtoa_r+0x320>
 8007dc8:	4b11      	ldr	r3, [pc, #68]	; (8007e10 <_dtoa_r+0x2f0>)
 8007dca:	4602      	mov	r2, r0
 8007dcc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007dd0:	e6c0      	b.n	8007b54 <_dtoa_r+0x34>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e7df      	b.n	8007d96 <_dtoa_r+0x276>
 8007dd6:	bf00      	nop
 8007dd8:	636f4361 	.word	0x636f4361
 8007ddc:	3fd287a7 	.word	0x3fd287a7
 8007de0:	8b60c8b3 	.word	0x8b60c8b3
 8007de4:	3fc68a28 	.word	0x3fc68a28
 8007de8:	509f79fb 	.word	0x509f79fb
 8007dec:	3fd34413 	.word	0x3fd34413
 8007df0:	08009ff9 	.word	0x08009ff9
 8007df4:	0800a010 	.word	0x0800a010
 8007df8:	7ff00000 	.word	0x7ff00000
 8007dfc:	08009ff5 	.word	0x08009ff5
 8007e00:	08009fec 	.word	0x08009fec
 8007e04:	08009fc9 	.word	0x08009fc9
 8007e08:	3ff80000 	.word	0x3ff80000
 8007e0c:	0800a100 	.word	0x0800a100
 8007e10:	0800a06b 	.word	0x0800a06b
 8007e14:	2501      	movs	r5, #1
 8007e16:	2300      	movs	r3, #0
 8007e18:	9306      	str	r3, [sp, #24]
 8007e1a:	9508      	str	r5, [sp, #32]
 8007e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e20:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e24:	2200      	movs	r2, #0
 8007e26:	2312      	movs	r3, #18
 8007e28:	e7b0      	b.n	8007d8c <_dtoa_r+0x26c>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	9308      	str	r3, [sp, #32]
 8007e2e:	e7f5      	b.n	8007e1c <_dtoa_r+0x2fc>
 8007e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e32:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e36:	e7b8      	b.n	8007daa <_dtoa_r+0x28a>
 8007e38:	3101      	adds	r1, #1
 8007e3a:	6041      	str	r1, [r0, #4]
 8007e3c:	0052      	lsls	r2, r2, #1
 8007e3e:	e7b8      	b.n	8007db2 <_dtoa_r+0x292>
 8007e40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e42:	9a01      	ldr	r2, [sp, #4]
 8007e44:	601a      	str	r2, [r3, #0]
 8007e46:	9b03      	ldr	r3, [sp, #12]
 8007e48:	2b0e      	cmp	r3, #14
 8007e4a:	f200 809d 	bhi.w	8007f88 <_dtoa_r+0x468>
 8007e4e:	2d00      	cmp	r5, #0
 8007e50:	f000 809a 	beq.w	8007f88 <_dtoa_r+0x468>
 8007e54:	9b00      	ldr	r3, [sp, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	dd32      	ble.n	8007ec0 <_dtoa_r+0x3a0>
 8007e5a:	4ab7      	ldr	r2, [pc, #732]	; (8008138 <_dtoa_r+0x618>)
 8007e5c:	f003 030f 	and.w	r3, r3, #15
 8007e60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e68:	9b00      	ldr	r3, [sp, #0]
 8007e6a:	05d8      	lsls	r0, r3, #23
 8007e6c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007e70:	d516      	bpl.n	8007ea0 <_dtoa_r+0x380>
 8007e72:	4bb2      	ldr	r3, [pc, #712]	; (800813c <_dtoa_r+0x61c>)
 8007e74:	ec51 0b19 	vmov	r0, r1, d9
 8007e78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e7c:	f7f8 fcee 	bl	800085c <__aeabi_ddiv>
 8007e80:	f007 070f 	and.w	r7, r7, #15
 8007e84:	4682      	mov	sl, r0
 8007e86:	468b      	mov	fp, r1
 8007e88:	2503      	movs	r5, #3
 8007e8a:	4eac      	ldr	r6, [pc, #688]	; (800813c <_dtoa_r+0x61c>)
 8007e8c:	b957      	cbnz	r7, 8007ea4 <_dtoa_r+0x384>
 8007e8e:	4642      	mov	r2, r8
 8007e90:	464b      	mov	r3, r9
 8007e92:	4650      	mov	r0, sl
 8007e94:	4659      	mov	r1, fp
 8007e96:	f7f8 fce1 	bl	800085c <__aeabi_ddiv>
 8007e9a:	4682      	mov	sl, r0
 8007e9c:	468b      	mov	fp, r1
 8007e9e:	e028      	b.n	8007ef2 <_dtoa_r+0x3d2>
 8007ea0:	2502      	movs	r5, #2
 8007ea2:	e7f2      	b.n	8007e8a <_dtoa_r+0x36a>
 8007ea4:	07f9      	lsls	r1, r7, #31
 8007ea6:	d508      	bpl.n	8007eba <_dtoa_r+0x39a>
 8007ea8:	4640      	mov	r0, r8
 8007eaa:	4649      	mov	r1, r9
 8007eac:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007eb0:	f7f8 fbaa 	bl	8000608 <__aeabi_dmul>
 8007eb4:	3501      	adds	r5, #1
 8007eb6:	4680      	mov	r8, r0
 8007eb8:	4689      	mov	r9, r1
 8007eba:	107f      	asrs	r7, r7, #1
 8007ebc:	3608      	adds	r6, #8
 8007ebe:	e7e5      	b.n	8007e8c <_dtoa_r+0x36c>
 8007ec0:	f000 809b 	beq.w	8007ffa <_dtoa_r+0x4da>
 8007ec4:	9b00      	ldr	r3, [sp, #0]
 8007ec6:	4f9d      	ldr	r7, [pc, #628]	; (800813c <_dtoa_r+0x61c>)
 8007ec8:	425e      	negs	r6, r3
 8007eca:	4b9b      	ldr	r3, [pc, #620]	; (8008138 <_dtoa_r+0x618>)
 8007ecc:	f006 020f 	and.w	r2, r6, #15
 8007ed0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed8:	ec51 0b19 	vmov	r0, r1, d9
 8007edc:	f7f8 fb94 	bl	8000608 <__aeabi_dmul>
 8007ee0:	1136      	asrs	r6, r6, #4
 8007ee2:	4682      	mov	sl, r0
 8007ee4:	468b      	mov	fp, r1
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	2502      	movs	r5, #2
 8007eea:	2e00      	cmp	r6, #0
 8007eec:	d17a      	bne.n	8007fe4 <_dtoa_r+0x4c4>
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1d3      	bne.n	8007e9a <_dtoa_r+0x37a>
 8007ef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f000 8082 	beq.w	8007ffe <_dtoa_r+0x4de>
 8007efa:	4b91      	ldr	r3, [pc, #580]	; (8008140 <_dtoa_r+0x620>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	4650      	mov	r0, sl
 8007f00:	4659      	mov	r1, fp
 8007f02:	f7f8 fdf3 	bl	8000aec <__aeabi_dcmplt>
 8007f06:	2800      	cmp	r0, #0
 8007f08:	d079      	beq.n	8007ffe <_dtoa_r+0x4de>
 8007f0a:	9b03      	ldr	r3, [sp, #12]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d076      	beq.n	8007ffe <_dtoa_r+0x4de>
 8007f10:	9b02      	ldr	r3, [sp, #8]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	dd36      	ble.n	8007f84 <_dtoa_r+0x464>
 8007f16:	9b00      	ldr	r3, [sp, #0]
 8007f18:	4650      	mov	r0, sl
 8007f1a:	4659      	mov	r1, fp
 8007f1c:	1e5f      	subs	r7, r3, #1
 8007f1e:	2200      	movs	r2, #0
 8007f20:	4b88      	ldr	r3, [pc, #544]	; (8008144 <_dtoa_r+0x624>)
 8007f22:	f7f8 fb71 	bl	8000608 <__aeabi_dmul>
 8007f26:	9e02      	ldr	r6, [sp, #8]
 8007f28:	4682      	mov	sl, r0
 8007f2a:	468b      	mov	fp, r1
 8007f2c:	3501      	adds	r5, #1
 8007f2e:	4628      	mov	r0, r5
 8007f30:	f7f8 fb00 	bl	8000534 <__aeabi_i2d>
 8007f34:	4652      	mov	r2, sl
 8007f36:	465b      	mov	r3, fp
 8007f38:	f7f8 fb66 	bl	8000608 <__aeabi_dmul>
 8007f3c:	4b82      	ldr	r3, [pc, #520]	; (8008148 <_dtoa_r+0x628>)
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f7f8 f9ac 	bl	800029c <__adddf3>
 8007f44:	46d0      	mov	r8, sl
 8007f46:	46d9      	mov	r9, fp
 8007f48:	4682      	mov	sl, r0
 8007f4a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007f4e:	2e00      	cmp	r6, #0
 8007f50:	d158      	bne.n	8008004 <_dtoa_r+0x4e4>
 8007f52:	4b7e      	ldr	r3, [pc, #504]	; (800814c <_dtoa_r+0x62c>)
 8007f54:	2200      	movs	r2, #0
 8007f56:	4640      	mov	r0, r8
 8007f58:	4649      	mov	r1, r9
 8007f5a:	f7f8 f99d 	bl	8000298 <__aeabi_dsub>
 8007f5e:	4652      	mov	r2, sl
 8007f60:	465b      	mov	r3, fp
 8007f62:	4680      	mov	r8, r0
 8007f64:	4689      	mov	r9, r1
 8007f66:	f7f8 fddf 	bl	8000b28 <__aeabi_dcmpgt>
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	f040 8295 	bne.w	800849a <_dtoa_r+0x97a>
 8007f70:	4652      	mov	r2, sl
 8007f72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007f76:	4640      	mov	r0, r8
 8007f78:	4649      	mov	r1, r9
 8007f7a:	f7f8 fdb7 	bl	8000aec <__aeabi_dcmplt>
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	f040 8289 	bne.w	8008496 <_dtoa_r+0x976>
 8007f84:	ec5b ab19 	vmov	sl, fp, d9
 8007f88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f2c0 8148 	blt.w	8008220 <_dtoa_r+0x700>
 8007f90:	9a00      	ldr	r2, [sp, #0]
 8007f92:	2a0e      	cmp	r2, #14
 8007f94:	f300 8144 	bgt.w	8008220 <_dtoa_r+0x700>
 8007f98:	4b67      	ldr	r3, [pc, #412]	; (8008138 <_dtoa_r+0x618>)
 8007f9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f280 80d5 	bge.w	8008154 <_dtoa_r+0x634>
 8007faa:	9b03      	ldr	r3, [sp, #12]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f300 80d1 	bgt.w	8008154 <_dtoa_r+0x634>
 8007fb2:	f040 826f 	bne.w	8008494 <_dtoa_r+0x974>
 8007fb6:	4b65      	ldr	r3, [pc, #404]	; (800814c <_dtoa_r+0x62c>)
 8007fb8:	2200      	movs	r2, #0
 8007fba:	4640      	mov	r0, r8
 8007fbc:	4649      	mov	r1, r9
 8007fbe:	f7f8 fb23 	bl	8000608 <__aeabi_dmul>
 8007fc2:	4652      	mov	r2, sl
 8007fc4:	465b      	mov	r3, fp
 8007fc6:	f7f8 fda5 	bl	8000b14 <__aeabi_dcmpge>
 8007fca:	9e03      	ldr	r6, [sp, #12]
 8007fcc:	4637      	mov	r7, r6
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	f040 8245 	bne.w	800845e <_dtoa_r+0x93e>
 8007fd4:	9d01      	ldr	r5, [sp, #4]
 8007fd6:	2331      	movs	r3, #49	; 0x31
 8007fd8:	f805 3b01 	strb.w	r3, [r5], #1
 8007fdc:	9b00      	ldr	r3, [sp, #0]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	9300      	str	r3, [sp, #0]
 8007fe2:	e240      	b.n	8008466 <_dtoa_r+0x946>
 8007fe4:	07f2      	lsls	r2, r6, #31
 8007fe6:	d505      	bpl.n	8007ff4 <_dtoa_r+0x4d4>
 8007fe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fec:	f7f8 fb0c 	bl	8000608 <__aeabi_dmul>
 8007ff0:	3501      	adds	r5, #1
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	1076      	asrs	r6, r6, #1
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	e777      	b.n	8007eea <_dtoa_r+0x3ca>
 8007ffa:	2502      	movs	r5, #2
 8007ffc:	e779      	b.n	8007ef2 <_dtoa_r+0x3d2>
 8007ffe:	9f00      	ldr	r7, [sp, #0]
 8008000:	9e03      	ldr	r6, [sp, #12]
 8008002:	e794      	b.n	8007f2e <_dtoa_r+0x40e>
 8008004:	9901      	ldr	r1, [sp, #4]
 8008006:	4b4c      	ldr	r3, [pc, #304]	; (8008138 <_dtoa_r+0x618>)
 8008008:	4431      	add	r1, r6
 800800a:	910d      	str	r1, [sp, #52]	; 0x34
 800800c:	9908      	ldr	r1, [sp, #32]
 800800e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008012:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008016:	2900      	cmp	r1, #0
 8008018:	d043      	beq.n	80080a2 <_dtoa_r+0x582>
 800801a:	494d      	ldr	r1, [pc, #308]	; (8008150 <_dtoa_r+0x630>)
 800801c:	2000      	movs	r0, #0
 800801e:	f7f8 fc1d 	bl	800085c <__aeabi_ddiv>
 8008022:	4652      	mov	r2, sl
 8008024:	465b      	mov	r3, fp
 8008026:	f7f8 f937 	bl	8000298 <__aeabi_dsub>
 800802a:	9d01      	ldr	r5, [sp, #4]
 800802c:	4682      	mov	sl, r0
 800802e:	468b      	mov	fp, r1
 8008030:	4649      	mov	r1, r9
 8008032:	4640      	mov	r0, r8
 8008034:	f7f8 fd98 	bl	8000b68 <__aeabi_d2iz>
 8008038:	4606      	mov	r6, r0
 800803a:	f7f8 fa7b 	bl	8000534 <__aeabi_i2d>
 800803e:	4602      	mov	r2, r0
 8008040:	460b      	mov	r3, r1
 8008042:	4640      	mov	r0, r8
 8008044:	4649      	mov	r1, r9
 8008046:	f7f8 f927 	bl	8000298 <__aeabi_dsub>
 800804a:	3630      	adds	r6, #48	; 0x30
 800804c:	f805 6b01 	strb.w	r6, [r5], #1
 8008050:	4652      	mov	r2, sl
 8008052:	465b      	mov	r3, fp
 8008054:	4680      	mov	r8, r0
 8008056:	4689      	mov	r9, r1
 8008058:	f7f8 fd48 	bl	8000aec <__aeabi_dcmplt>
 800805c:	2800      	cmp	r0, #0
 800805e:	d163      	bne.n	8008128 <_dtoa_r+0x608>
 8008060:	4642      	mov	r2, r8
 8008062:	464b      	mov	r3, r9
 8008064:	4936      	ldr	r1, [pc, #216]	; (8008140 <_dtoa_r+0x620>)
 8008066:	2000      	movs	r0, #0
 8008068:	f7f8 f916 	bl	8000298 <__aeabi_dsub>
 800806c:	4652      	mov	r2, sl
 800806e:	465b      	mov	r3, fp
 8008070:	f7f8 fd3c 	bl	8000aec <__aeabi_dcmplt>
 8008074:	2800      	cmp	r0, #0
 8008076:	f040 80b5 	bne.w	80081e4 <_dtoa_r+0x6c4>
 800807a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800807c:	429d      	cmp	r5, r3
 800807e:	d081      	beq.n	8007f84 <_dtoa_r+0x464>
 8008080:	4b30      	ldr	r3, [pc, #192]	; (8008144 <_dtoa_r+0x624>)
 8008082:	2200      	movs	r2, #0
 8008084:	4650      	mov	r0, sl
 8008086:	4659      	mov	r1, fp
 8008088:	f7f8 fabe 	bl	8000608 <__aeabi_dmul>
 800808c:	4b2d      	ldr	r3, [pc, #180]	; (8008144 <_dtoa_r+0x624>)
 800808e:	4682      	mov	sl, r0
 8008090:	468b      	mov	fp, r1
 8008092:	4640      	mov	r0, r8
 8008094:	4649      	mov	r1, r9
 8008096:	2200      	movs	r2, #0
 8008098:	f7f8 fab6 	bl	8000608 <__aeabi_dmul>
 800809c:	4680      	mov	r8, r0
 800809e:	4689      	mov	r9, r1
 80080a0:	e7c6      	b.n	8008030 <_dtoa_r+0x510>
 80080a2:	4650      	mov	r0, sl
 80080a4:	4659      	mov	r1, fp
 80080a6:	f7f8 faaf 	bl	8000608 <__aeabi_dmul>
 80080aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080ac:	9d01      	ldr	r5, [sp, #4]
 80080ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80080b0:	4682      	mov	sl, r0
 80080b2:	468b      	mov	fp, r1
 80080b4:	4649      	mov	r1, r9
 80080b6:	4640      	mov	r0, r8
 80080b8:	f7f8 fd56 	bl	8000b68 <__aeabi_d2iz>
 80080bc:	4606      	mov	r6, r0
 80080be:	f7f8 fa39 	bl	8000534 <__aeabi_i2d>
 80080c2:	3630      	adds	r6, #48	; 0x30
 80080c4:	4602      	mov	r2, r0
 80080c6:	460b      	mov	r3, r1
 80080c8:	4640      	mov	r0, r8
 80080ca:	4649      	mov	r1, r9
 80080cc:	f7f8 f8e4 	bl	8000298 <__aeabi_dsub>
 80080d0:	f805 6b01 	strb.w	r6, [r5], #1
 80080d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080d6:	429d      	cmp	r5, r3
 80080d8:	4680      	mov	r8, r0
 80080da:	4689      	mov	r9, r1
 80080dc:	f04f 0200 	mov.w	r2, #0
 80080e0:	d124      	bne.n	800812c <_dtoa_r+0x60c>
 80080e2:	4b1b      	ldr	r3, [pc, #108]	; (8008150 <_dtoa_r+0x630>)
 80080e4:	4650      	mov	r0, sl
 80080e6:	4659      	mov	r1, fp
 80080e8:	f7f8 f8d8 	bl	800029c <__adddf3>
 80080ec:	4602      	mov	r2, r0
 80080ee:	460b      	mov	r3, r1
 80080f0:	4640      	mov	r0, r8
 80080f2:	4649      	mov	r1, r9
 80080f4:	f7f8 fd18 	bl	8000b28 <__aeabi_dcmpgt>
 80080f8:	2800      	cmp	r0, #0
 80080fa:	d173      	bne.n	80081e4 <_dtoa_r+0x6c4>
 80080fc:	4652      	mov	r2, sl
 80080fe:	465b      	mov	r3, fp
 8008100:	4913      	ldr	r1, [pc, #76]	; (8008150 <_dtoa_r+0x630>)
 8008102:	2000      	movs	r0, #0
 8008104:	f7f8 f8c8 	bl	8000298 <__aeabi_dsub>
 8008108:	4602      	mov	r2, r0
 800810a:	460b      	mov	r3, r1
 800810c:	4640      	mov	r0, r8
 800810e:	4649      	mov	r1, r9
 8008110:	f7f8 fcec 	bl	8000aec <__aeabi_dcmplt>
 8008114:	2800      	cmp	r0, #0
 8008116:	f43f af35 	beq.w	8007f84 <_dtoa_r+0x464>
 800811a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800811c:	1e6b      	subs	r3, r5, #1
 800811e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008120:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008124:	2b30      	cmp	r3, #48	; 0x30
 8008126:	d0f8      	beq.n	800811a <_dtoa_r+0x5fa>
 8008128:	9700      	str	r7, [sp, #0]
 800812a:	e049      	b.n	80081c0 <_dtoa_r+0x6a0>
 800812c:	4b05      	ldr	r3, [pc, #20]	; (8008144 <_dtoa_r+0x624>)
 800812e:	f7f8 fa6b 	bl	8000608 <__aeabi_dmul>
 8008132:	4680      	mov	r8, r0
 8008134:	4689      	mov	r9, r1
 8008136:	e7bd      	b.n	80080b4 <_dtoa_r+0x594>
 8008138:	0800a100 	.word	0x0800a100
 800813c:	0800a0d8 	.word	0x0800a0d8
 8008140:	3ff00000 	.word	0x3ff00000
 8008144:	40240000 	.word	0x40240000
 8008148:	401c0000 	.word	0x401c0000
 800814c:	40140000 	.word	0x40140000
 8008150:	3fe00000 	.word	0x3fe00000
 8008154:	9d01      	ldr	r5, [sp, #4]
 8008156:	4656      	mov	r6, sl
 8008158:	465f      	mov	r7, fp
 800815a:	4642      	mov	r2, r8
 800815c:	464b      	mov	r3, r9
 800815e:	4630      	mov	r0, r6
 8008160:	4639      	mov	r1, r7
 8008162:	f7f8 fb7b 	bl	800085c <__aeabi_ddiv>
 8008166:	f7f8 fcff 	bl	8000b68 <__aeabi_d2iz>
 800816a:	4682      	mov	sl, r0
 800816c:	f7f8 f9e2 	bl	8000534 <__aeabi_i2d>
 8008170:	4642      	mov	r2, r8
 8008172:	464b      	mov	r3, r9
 8008174:	f7f8 fa48 	bl	8000608 <__aeabi_dmul>
 8008178:	4602      	mov	r2, r0
 800817a:	460b      	mov	r3, r1
 800817c:	4630      	mov	r0, r6
 800817e:	4639      	mov	r1, r7
 8008180:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008184:	f7f8 f888 	bl	8000298 <__aeabi_dsub>
 8008188:	f805 6b01 	strb.w	r6, [r5], #1
 800818c:	9e01      	ldr	r6, [sp, #4]
 800818e:	9f03      	ldr	r7, [sp, #12]
 8008190:	1bae      	subs	r6, r5, r6
 8008192:	42b7      	cmp	r7, r6
 8008194:	4602      	mov	r2, r0
 8008196:	460b      	mov	r3, r1
 8008198:	d135      	bne.n	8008206 <_dtoa_r+0x6e6>
 800819a:	f7f8 f87f 	bl	800029c <__adddf3>
 800819e:	4642      	mov	r2, r8
 80081a0:	464b      	mov	r3, r9
 80081a2:	4606      	mov	r6, r0
 80081a4:	460f      	mov	r7, r1
 80081a6:	f7f8 fcbf 	bl	8000b28 <__aeabi_dcmpgt>
 80081aa:	b9d0      	cbnz	r0, 80081e2 <_dtoa_r+0x6c2>
 80081ac:	4642      	mov	r2, r8
 80081ae:	464b      	mov	r3, r9
 80081b0:	4630      	mov	r0, r6
 80081b2:	4639      	mov	r1, r7
 80081b4:	f7f8 fc90 	bl	8000ad8 <__aeabi_dcmpeq>
 80081b8:	b110      	cbz	r0, 80081c0 <_dtoa_r+0x6a0>
 80081ba:	f01a 0f01 	tst.w	sl, #1
 80081be:	d110      	bne.n	80081e2 <_dtoa_r+0x6c2>
 80081c0:	4620      	mov	r0, r4
 80081c2:	ee18 1a10 	vmov	r1, s16
 80081c6:	f000 faf3 	bl	80087b0 <_Bfree>
 80081ca:	2300      	movs	r3, #0
 80081cc:	9800      	ldr	r0, [sp, #0]
 80081ce:	702b      	strb	r3, [r5, #0]
 80081d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081d2:	3001      	adds	r0, #1
 80081d4:	6018      	str	r0, [r3, #0]
 80081d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f43f acf1 	beq.w	8007bc0 <_dtoa_r+0xa0>
 80081de:	601d      	str	r5, [r3, #0]
 80081e0:	e4ee      	b.n	8007bc0 <_dtoa_r+0xa0>
 80081e2:	9f00      	ldr	r7, [sp, #0]
 80081e4:	462b      	mov	r3, r5
 80081e6:	461d      	mov	r5, r3
 80081e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081ec:	2a39      	cmp	r2, #57	; 0x39
 80081ee:	d106      	bne.n	80081fe <_dtoa_r+0x6de>
 80081f0:	9a01      	ldr	r2, [sp, #4]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d1f7      	bne.n	80081e6 <_dtoa_r+0x6c6>
 80081f6:	9901      	ldr	r1, [sp, #4]
 80081f8:	2230      	movs	r2, #48	; 0x30
 80081fa:	3701      	adds	r7, #1
 80081fc:	700a      	strb	r2, [r1, #0]
 80081fe:	781a      	ldrb	r2, [r3, #0]
 8008200:	3201      	adds	r2, #1
 8008202:	701a      	strb	r2, [r3, #0]
 8008204:	e790      	b.n	8008128 <_dtoa_r+0x608>
 8008206:	4ba6      	ldr	r3, [pc, #664]	; (80084a0 <_dtoa_r+0x980>)
 8008208:	2200      	movs	r2, #0
 800820a:	f7f8 f9fd 	bl	8000608 <__aeabi_dmul>
 800820e:	2200      	movs	r2, #0
 8008210:	2300      	movs	r3, #0
 8008212:	4606      	mov	r6, r0
 8008214:	460f      	mov	r7, r1
 8008216:	f7f8 fc5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800821a:	2800      	cmp	r0, #0
 800821c:	d09d      	beq.n	800815a <_dtoa_r+0x63a>
 800821e:	e7cf      	b.n	80081c0 <_dtoa_r+0x6a0>
 8008220:	9a08      	ldr	r2, [sp, #32]
 8008222:	2a00      	cmp	r2, #0
 8008224:	f000 80d7 	beq.w	80083d6 <_dtoa_r+0x8b6>
 8008228:	9a06      	ldr	r2, [sp, #24]
 800822a:	2a01      	cmp	r2, #1
 800822c:	f300 80ba 	bgt.w	80083a4 <_dtoa_r+0x884>
 8008230:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008232:	2a00      	cmp	r2, #0
 8008234:	f000 80b2 	beq.w	800839c <_dtoa_r+0x87c>
 8008238:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800823c:	9e07      	ldr	r6, [sp, #28]
 800823e:	9d04      	ldr	r5, [sp, #16]
 8008240:	9a04      	ldr	r2, [sp, #16]
 8008242:	441a      	add	r2, r3
 8008244:	9204      	str	r2, [sp, #16]
 8008246:	9a05      	ldr	r2, [sp, #20]
 8008248:	2101      	movs	r1, #1
 800824a:	441a      	add	r2, r3
 800824c:	4620      	mov	r0, r4
 800824e:	9205      	str	r2, [sp, #20]
 8008250:	f000 fb66 	bl	8008920 <__i2b>
 8008254:	4607      	mov	r7, r0
 8008256:	2d00      	cmp	r5, #0
 8008258:	dd0c      	ble.n	8008274 <_dtoa_r+0x754>
 800825a:	9b05      	ldr	r3, [sp, #20]
 800825c:	2b00      	cmp	r3, #0
 800825e:	dd09      	ble.n	8008274 <_dtoa_r+0x754>
 8008260:	42ab      	cmp	r3, r5
 8008262:	9a04      	ldr	r2, [sp, #16]
 8008264:	bfa8      	it	ge
 8008266:	462b      	movge	r3, r5
 8008268:	1ad2      	subs	r2, r2, r3
 800826a:	9204      	str	r2, [sp, #16]
 800826c:	9a05      	ldr	r2, [sp, #20]
 800826e:	1aed      	subs	r5, r5, r3
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	9305      	str	r3, [sp, #20]
 8008274:	9b07      	ldr	r3, [sp, #28]
 8008276:	b31b      	cbz	r3, 80082c0 <_dtoa_r+0x7a0>
 8008278:	9b08      	ldr	r3, [sp, #32]
 800827a:	2b00      	cmp	r3, #0
 800827c:	f000 80af 	beq.w	80083de <_dtoa_r+0x8be>
 8008280:	2e00      	cmp	r6, #0
 8008282:	dd13      	ble.n	80082ac <_dtoa_r+0x78c>
 8008284:	4639      	mov	r1, r7
 8008286:	4632      	mov	r2, r6
 8008288:	4620      	mov	r0, r4
 800828a:	f000 fc09 	bl	8008aa0 <__pow5mult>
 800828e:	ee18 2a10 	vmov	r2, s16
 8008292:	4601      	mov	r1, r0
 8008294:	4607      	mov	r7, r0
 8008296:	4620      	mov	r0, r4
 8008298:	f000 fb58 	bl	800894c <__multiply>
 800829c:	ee18 1a10 	vmov	r1, s16
 80082a0:	4680      	mov	r8, r0
 80082a2:	4620      	mov	r0, r4
 80082a4:	f000 fa84 	bl	80087b0 <_Bfree>
 80082a8:	ee08 8a10 	vmov	s16, r8
 80082ac:	9b07      	ldr	r3, [sp, #28]
 80082ae:	1b9a      	subs	r2, r3, r6
 80082b0:	d006      	beq.n	80082c0 <_dtoa_r+0x7a0>
 80082b2:	ee18 1a10 	vmov	r1, s16
 80082b6:	4620      	mov	r0, r4
 80082b8:	f000 fbf2 	bl	8008aa0 <__pow5mult>
 80082bc:	ee08 0a10 	vmov	s16, r0
 80082c0:	2101      	movs	r1, #1
 80082c2:	4620      	mov	r0, r4
 80082c4:	f000 fb2c 	bl	8008920 <__i2b>
 80082c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	4606      	mov	r6, r0
 80082ce:	f340 8088 	ble.w	80083e2 <_dtoa_r+0x8c2>
 80082d2:	461a      	mov	r2, r3
 80082d4:	4601      	mov	r1, r0
 80082d6:	4620      	mov	r0, r4
 80082d8:	f000 fbe2 	bl	8008aa0 <__pow5mult>
 80082dc:	9b06      	ldr	r3, [sp, #24]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	4606      	mov	r6, r0
 80082e2:	f340 8081 	ble.w	80083e8 <_dtoa_r+0x8c8>
 80082e6:	f04f 0800 	mov.w	r8, #0
 80082ea:	6933      	ldr	r3, [r6, #16]
 80082ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80082f0:	6918      	ldr	r0, [r3, #16]
 80082f2:	f000 fac5 	bl	8008880 <__hi0bits>
 80082f6:	f1c0 0020 	rsb	r0, r0, #32
 80082fa:	9b05      	ldr	r3, [sp, #20]
 80082fc:	4418      	add	r0, r3
 80082fe:	f010 001f 	ands.w	r0, r0, #31
 8008302:	f000 8092 	beq.w	800842a <_dtoa_r+0x90a>
 8008306:	f1c0 0320 	rsb	r3, r0, #32
 800830a:	2b04      	cmp	r3, #4
 800830c:	f340 808a 	ble.w	8008424 <_dtoa_r+0x904>
 8008310:	f1c0 001c 	rsb	r0, r0, #28
 8008314:	9b04      	ldr	r3, [sp, #16]
 8008316:	4403      	add	r3, r0
 8008318:	9304      	str	r3, [sp, #16]
 800831a:	9b05      	ldr	r3, [sp, #20]
 800831c:	4403      	add	r3, r0
 800831e:	4405      	add	r5, r0
 8008320:	9305      	str	r3, [sp, #20]
 8008322:	9b04      	ldr	r3, [sp, #16]
 8008324:	2b00      	cmp	r3, #0
 8008326:	dd07      	ble.n	8008338 <_dtoa_r+0x818>
 8008328:	ee18 1a10 	vmov	r1, s16
 800832c:	461a      	mov	r2, r3
 800832e:	4620      	mov	r0, r4
 8008330:	f000 fc10 	bl	8008b54 <__lshift>
 8008334:	ee08 0a10 	vmov	s16, r0
 8008338:	9b05      	ldr	r3, [sp, #20]
 800833a:	2b00      	cmp	r3, #0
 800833c:	dd05      	ble.n	800834a <_dtoa_r+0x82a>
 800833e:	4631      	mov	r1, r6
 8008340:	461a      	mov	r2, r3
 8008342:	4620      	mov	r0, r4
 8008344:	f000 fc06 	bl	8008b54 <__lshift>
 8008348:	4606      	mov	r6, r0
 800834a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800834c:	2b00      	cmp	r3, #0
 800834e:	d06e      	beq.n	800842e <_dtoa_r+0x90e>
 8008350:	ee18 0a10 	vmov	r0, s16
 8008354:	4631      	mov	r1, r6
 8008356:	f000 fc6d 	bl	8008c34 <__mcmp>
 800835a:	2800      	cmp	r0, #0
 800835c:	da67      	bge.n	800842e <_dtoa_r+0x90e>
 800835e:	9b00      	ldr	r3, [sp, #0]
 8008360:	3b01      	subs	r3, #1
 8008362:	ee18 1a10 	vmov	r1, s16
 8008366:	9300      	str	r3, [sp, #0]
 8008368:	220a      	movs	r2, #10
 800836a:	2300      	movs	r3, #0
 800836c:	4620      	mov	r0, r4
 800836e:	f000 fa41 	bl	80087f4 <__multadd>
 8008372:	9b08      	ldr	r3, [sp, #32]
 8008374:	ee08 0a10 	vmov	s16, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	f000 81b1 	beq.w	80086e0 <_dtoa_r+0xbc0>
 800837e:	2300      	movs	r3, #0
 8008380:	4639      	mov	r1, r7
 8008382:	220a      	movs	r2, #10
 8008384:	4620      	mov	r0, r4
 8008386:	f000 fa35 	bl	80087f4 <__multadd>
 800838a:	9b02      	ldr	r3, [sp, #8]
 800838c:	2b00      	cmp	r3, #0
 800838e:	4607      	mov	r7, r0
 8008390:	f300 808e 	bgt.w	80084b0 <_dtoa_r+0x990>
 8008394:	9b06      	ldr	r3, [sp, #24]
 8008396:	2b02      	cmp	r3, #2
 8008398:	dc51      	bgt.n	800843e <_dtoa_r+0x91e>
 800839a:	e089      	b.n	80084b0 <_dtoa_r+0x990>
 800839c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800839e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80083a2:	e74b      	b.n	800823c <_dtoa_r+0x71c>
 80083a4:	9b03      	ldr	r3, [sp, #12]
 80083a6:	1e5e      	subs	r6, r3, #1
 80083a8:	9b07      	ldr	r3, [sp, #28]
 80083aa:	42b3      	cmp	r3, r6
 80083ac:	bfbf      	itttt	lt
 80083ae:	9b07      	ldrlt	r3, [sp, #28]
 80083b0:	9607      	strlt	r6, [sp, #28]
 80083b2:	1af2      	sublt	r2, r6, r3
 80083b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80083b6:	bfb6      	itet	lt
 80083b8:	189b      	addlt	r3, r3, r2
 80083ba:	1b9e      	subge	r6, r3, r6
 80083bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80083be:	9b03      	ldr	r3, [sp, #12]
 80083c0:	bfb8      	it	lt
 80083c2:	2600      	movlt	r6, #0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	bfb7      	itett	lt
 80083c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80083cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80083d0:	1a9d      	sublt	r5, r3, r2
 80083d2:	2300      	movlt	r3, #0
 80083d4:	e734      	b.n	8008240 <_dtoa_r+0x720>
 80083d6:	9e07      	ldr	r6, [sp, #28]
 80083d8:	9d04      	ldr	r5, [sp, #16]
 80083da:	9f08      	ldr	r7, [sp, #32]
 80083dc:	e73b      	b.n	8008256 <_dtoa_r+0x736>
 80083de:	9a07      	ldr	r2, [sp, #28]
 80083e0:	e767      	b.n	80082b2 <_dtoa_r+0x792>
 80083e2:	9b06      	ldr	r3, [sp, #24]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	dc18      	bgt.n	800841a <_dtoa_r+0x8fa>
 80083e8:	f1ba 0f00 	cmp.w	sl, #0
 80083ec:	d115      	bne.n	800841a <_dtoa_r+0x8fa>
 80083ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083f2:	b993      	cbnz	r3, 800841a <_dtoa_r+0x8fa>
 80083f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80083f8:	0d1b      	lsrs	r3, r3, #20
 80083fa:	051b      	lsls	r3, r3, #20
 80083fc:	b183      	cbz	r3, 8008420 <_dtoa_r+0x900>
 80083fe:	9b04      	ldr	r3, [sp, #16]
 8008400:	3301      	adds	r3, #1
 8008402:	9304      	str	r3, [sp, #16]
 8008404:	9b05      	ldr	r3, [sp, #20]
 8008406:	3301      	adds	r3, #1
 8008408:	9305      	str	r3, [sp, #20]
 800840a:	f04f 0801 	mov.w	r8, #1
 800840e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008410:	2b00      	cmp	r3, #0
 8008412:	f47f af6a 	bne.w	80082ea <_dtoa_r+0x7ca>
 8008416:	2001      	movs	r0, #1
 8008418:	e76f      	b.n	80082fa <_dtoa_r+0x7da>
 800841a:	f04f 0800 	mov.w	r8, #0
 800841e:	e7f6      	b.n	800840e <_dtoa_r+0x8ee>
 8008420:	4698      	mov	r8, r3
 8008422:	e7f4      	b.n	800840e <_dtoa_r+0x8ee>
 8008424:	f43f af7d 	beq.w	8008322 <_dtoa_r+0x802>
 8008428:	4618      	mov	r0, r3
 800842a:	301c      	adds	r0, #28
 800842c:	e772      	b.n	8008314 <_dtoa_r+0x7f4>
 800842e:	9b03      	ldr	r3, [sp, #12]
 8008430:	2b00      	cmp	r3, #0
 8008432:	dc37      	bgt.n	80084a4 <_dtoa_r+0x984>
 8008434:	9b06      	ldr	r3, [sp, #24]
 8008436:	2b02      	cmp	r3, #2
 8008438:	dd34      	ble.n	80084a4 <_dtoa_r+0x984>
 800843a:	9b03      	ldr	r3, [sp, #12]
 800843c:	9302      	str	r3, [sp, #8]
 800843e:	9b02      	ldr	r3, [sp, #8]
 8008440:	b96b      	cbnz	r3, 800845e <_dtoa_r+0x93e>
 8008442:	4631      	mov	r1, r6
 8008444:	2205      	movs	r2, #5
 8008446:	4620      	mov	r0, r4
 8008448:	f000 f9d4 	bl	80087f4 <__multadd>
 800844c:	4601      	mov	r1, r0
 800844e:	4606      	mov	r6, r0
 8008450:	ee18 0a10 	vmov	r0, s16
 8008454:	f000 fbee 	bl	8008c34 <__mcmp>
 8008458:	2800      	cmp	r0, #0
 800845a:	f73f adbb 	bgt.w	8007fd4 <_dtoa_r+0x4b4>
 800845e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008460:	9d01      	ldr	r5, [sp, #4]
 8008462:	43db      	mvns	r3, r3
 8008464:	9300      	str	r3, [sp, #0]
 8008466:	f04f 0800 	mov.w	r8, #0
 800846a:	4631      	mov	r1, r6
 800846c:	4620      	mov	r0, r4
 800846e:	f000 f99f 	bl	80087b0 <_Bfree>
 8008472:	2f00      	cmp	r7, #0
 8008474:	f43f aea4 	beq.w	80081c0 <_dtoa_r+0x6a0>
 8008478:	f1b8 0f00 	cmp.w	r8, #0
 800847c:	d005      	beq.n	800848a <_dtoa_r+0x96a>
 800847e:	45b8      	cmp	r8, r7
 8008480:	d003      	beq.n	800848a <_dtoa_r+0x96a>
 8008482:	4641      	mov	r1, r8
 8008484:	4620      	mov	r0, r4
 8008486:	f000 f993 	bl	80087b0 <_Bfree>
 800848a:	4639      	mov	r1, r7
 800848c:	4620      	mov	r0, r4
 800848e:	f000 f98f 	bl	80087b0 <_Bfree>
 8008492:	e695      	b.n	80081c0 <_dtoa_r+0x6a0>
 8008494:	2600      	movs	r6, #0
 8008496:	4637      	mov	r7, r6
 8008498:	e7e1      	b.n	800845e <_dtoa_r+0x93e>
 800849a:	9700      	str	r7, [sp, #0]
 800849c:	4637      	mov	r7, r6
 800849e:	e599      	b.n	8007fd4 <_dtoa_r+0x4b4>
 80084a0:	40240000 	.word	0x40240000
 80084a4:	9b08      	ldr	r3, [sp, #32]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	f000 80ca 	beq.w	8008640 <_dtoa_r+0xb20>
 80084ac:	9b03      	ldr	r3, [sp, #12]
 80084ae:	9302      	str	r3, [sp, #8]
 80084b0:	2d00      	cmp	r5, #0
 80084b2:	dd05      	ble.n	80084c0 <_dtoa_r+0x9a0>
 80084b4:	4639      	mov	r1, r7
 80084b6:	462a      	mov	r2, r5
 80084b8:	4620      	mov	r0, r4
 80084ba:	f000 fb4b 	bl	8008b54 <__lshift>
 80084be:	4607      	mov	r7, r0
 80084c0:	f1b8 0f00 	cmp.w	r8, #0
 80084c4:	d05b      	beq.n	800857e <_dtoa_r+0xa5e>
 80084c6:	6879      	ldr	r1, [r7, #4]
 80084c8:	4620      	mov	r0, r4
 80084ca:	f000 f931 	bl	8008730 <_Balloc>
 80084ce:	4605      	mov	r5, r0
 80084d0:	b928      	cbnz	r0, 80084de <_dtoa_r+0x9be>
 80084d2:	4b87      	ldr	r3, [pc, #540]	; (80086f0 <_dtoa_r+0xbd0>)
 80084d4:	4602      	mov	r2, r0
 80084d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80084da:	f7ff bb3b 	b.w	8007b54 <_dtoa_r+0x34>
 80084de:	693a      	ldr	r2, [r7, #16]
 80084e0:	3202      	adds	r2, #2
 80084e2:	0092      	lsls	r2, r2, #2
 80084e4:	f107 010c 	add.w	r1, r7, #12
 80084e8:	300c      	adds	r0, #12
 80084ea:	f000 f913 	bl	8008714 <memcpy>
 80084ee:	2201      	movs	r2, #1
 80084f0:	4629      	mov	r1, r5
 80084f2:	4620      	mov	r0, r4
 80084f4:	f000 fb2e 	bl	8008b54 <__lshift>
 80084f8:	9b01      	ldr	r3, [sp, #4]
 80084fa:	f103 0901 	add.w	r9, r3, #1
 80084fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008502:	4413      	add	r3, r2
 8008504:	9305      	str	r3, [sp, #20]
 8008506:	f00a 0301 	and.w	r3, sl, #1
 800850a:	46b8      	mov	r8, r7
 800850c:	9304      	str	r3, [sp, #16]
 800850e:	4607      	mov	r7, r0
 8008510:	4631      	mov	r1, r6
 8008512:	ee18 0a10 	vmov	r0, s16
 8008516:	f7ff fa77 	bl	8007a08 <quorem>
 800851a:	4641      	mov	r1, r8
 800851c:	9002      	str	r0, [sp, #8]
 800851e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008522:	ee18 0a10 	vmov	r0, s16
 8008526:	f000 fb85 	bl	8008c34 <__mcmp>
 800852a:	463a      	mov	r2, r7
 800852c:	9003      	str	r0, [sp, #12]
 800852e:	4631      	mov	r1, r6
 8008530:	4620      	mov	r0, r4
 8008532:	f000 fb9b 	bl	8008c6c <__mdiff>
 8008536:	68c2      	ldr	r2, [r0, #12]
 8008538:	f109 3bff 	add.w	fp, r9, #4294967295
 800853c:	4605      	mov	r5, r0
 800853e:	bb02      	cbnz	r2, 8008582 <_dtoa_r+0xa62>
 8008540:	4601      	mov	r1, r0
 8008542:	ee18 0a10 	vmov	r0, s16
 8008546:	f000 fb75 	bl	8008c34 <__mcmp>
 800854a:	4602      	mov	r2, r0
 800854c:	4629      	mov	r1, r5
 800854e:	4620      	mov	r0, r4
 8008550:	9207      	str	r2, [sp, #28]
 8008552:	f000 f92d 	bl	80087b0 <_Bfree>
 8008556:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800855a:	ea43 0102 	orr.w	r1, r3, r2
 800855e:	9b04      	ldr	r3, [sp, #16]
 8008560:	430b      	orrs	r3, r1
 8008562:	464d      	mov	r5, r9
 8008564:	d10f      	bne.n	8008586 <_dtoa_r+0xa66>
 8008566:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800856a:	d02a      	beq.n	80085c2 <_dtoa_r+0xaa2>
 800856c:	9b03      	ldr	r3, [sp, #12]
 800856e:	2b00      	cmp	r3, #0
 8008570:	dd02      	ble.n	8008578 <_dtoa_r+0xa58>
 8008572:	9b02      	ldr	r3, [sp, #8]
 8008574:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008578:	f88b a000 	strb.w	sl, [fp]
 800857c:	e775      	b.n	800846a <_dtoa_r+0x94a>
 800857e:	4638      	mov	r0, r7
 8008580:	e7ba      	b.n	80084f8 <_dtoa_r+0x9d8>
 8008582:	2201      	movs	r2, #1
 8008584:	e7e2      	b.n	800854c <_dtoa_r+0xa2c>
 8008586:	9b03      	ldr	r3, [sp, #12]
 8008588:	2b00      	cmp	r3, #0
 800858a:	db04      	blt.n	8008596 <_dtoa_r+0xa76>
 800858c:	9906      	ldr	r1, [sp, #24]
 800858e:	430b      	orrs	r3, r1
 8008590:	9904      	ldr	r1, [sp, #16]
 8008592:	430b      	orrs	r3, r1
 8008594:	d122      	bne.n	80085dc <_dtoa_r+0xabc>
 8008596:	2a00      	cmp	r2, #0
 8008598:	ddee      	ble.n	8008578 <_dtoa_r+0xa58>
 800859a:	ee18 1a10 	vmov	r1, s16
 800859e:	2201      	movs	r2, #1
 80085a0:	4620      	mov	r0, r4
 80085a2:	f000 fad7 	bl	8008b54 <__lshift>
 80085a6:	4631      	mov	r1, r6
 80085a8:	ee08 0a10 	vmov	s16, r0
 80085ac:	f000 fb42 	bl	8008c34 <__mcmp>
 80085b0:	2800      	cmp	r0, #0
 80085b2:	dc03      	bgt.n	80085bc <_dtoa_r+0xa9c>
 80085b4:	d1e0      	bne.n	8008578 <_dtoa_r+0xa58>
 80085b6:	f01a 0f01 	tst.w	sl, #1
 80085ba:	d0dd      	beq.n	8008578 <_dtoa_r+0xa58>
 80085bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80085c0:	d1d7      	bne.n	8008572 <_dtoa_r+0xa52>
 80085c2:	2339      	movs	r3, #57	; 0x39
 80085c4:	f88b 3000 	strb.w	r3, [fp]
 80085c8:	462b      	mov	r3, r5
 80085ca:	461d      	mov	r5, r3
 80085cc:	3b01      	subs	r3, #1
 80085ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80085d2:	2a39      	cmp	r2, #57	; 0x39
 80085d4:	d071      	beq.n	80086ba <_dtoa_r+0xb9a>
 80085d6:	3201      	adds	r2, #1
 80085d8:	701a      	strb	r2, [r3, #0]
 80085da:	e746      	b.n	800846a <_dtoa_r+0x94a>
 80085dc:	2a00      	cmp	r2, #0
 80085de:	dd07      	ble.n	80085f0 <_dtoa_r+0xad0>
 80085e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80085e4:	d0ed      	beq.n	80085c2 <_dtoa_r+0xaa2>
 80085e6:	f10a 0301 	add.w	r3, sl, #1
 80085ea:	f88b 3000 	strb.w	r3, [fp]
 80085ee:	e73c      	b.n	800846a <_dtoa_r+0x94a>
 80085f0:	9b05      	ldr	r3, [sp, #20]
 80085f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80085f6:	4599      	cmp	r9, r3
 80085f8:	d047      	beq.n	800868a <_dtoa_r+0xb6a>
 80085fa:	ee18 1a10 	vmov	r1, s16
 80085fe:	2300      	movs	r3, #0
 8008600:	220a      	movs	r2, #10
 8008602:	4620      	mov	r0, r4
 8008604:	f000 f8f6 	bl	80087f4 <__multadd>
 8008608:	45b8      	cmp	r8, r7
 800860a:	ee08 0a10 	vmov	s16, r0
 800860e:	f04f 0300 	mov.w	r3, #0
 8008612:	f04f 020a 	mov.w	r2, #10
 8008616:	4641      	mov	r1, r8
 8008618:	4620      	mov	r0, r4
 800861a:	d106      	bne.n	800862a <_dtoa_r+0xb0a>
 800861c:	f000 f8ea 	bl	80087f4 <__multadd>
 8008620:	4680      	mov	r8, r0
 8008622:	4607      	mov	r7, r0
 8008624:	f109 0901 	add.w	r9, r9, #1
 8008628:	e772      	b.n	8008510 <_dtoa_r+0x9f0>
 800862a:	f000 f8e3 	bl	80087f4 <__multadd>
 800862e:	4639      	mov	r1, r7
 8008630:	4680      	mov	r8, r0
 8008632:	2300      	movs	r3, #0
 8008634:	220a      	movs	r2, #10
 8008636:	4620      	mov	r0, r4
 8008638:	f000 f8dc 	bl	80087f4 <__multadd>
 800863c:	4607      	mov	r7, r0
 800863e:	e7f1      	b.n	8008624 <_dtoa_r+0xb04>
 8008640:	9b03      	ldr	r3, [sp, #12]
 8008642:	9302      	str	r3, [sp, #8]
 8008644:	9d01      	ldr	r5, [sp, #4]
 8008646:	ee18 0a10 	vmov	r0, s16
 800864a:	4631      	mov	r1, r6
 800864c:	f7ff f9dc 	bl	8007a08 <quorem>
 8008650:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008654:	9b01      	ldr	r3, [sp, #4]
 8008656:	f805 ab01 	strb.w	sl, [r5], #1
 800865a:	1aea      	subs	r2, r5, r3
 800865c:	9b02      	ldr	r3, [sp, #8]
 800865e:	4293      	cmp	r3, r2
 8008660:	dd09      	ble.n	8008676 <_dtoa_r+0xb56>
 8008662:	ee18 1a10 	vmov	r1, s16
 8008666:	2300      	movs	r3, #0
 8008668:	220a      	movs	r2, #10
 800866a:	4620      	mov	r0, r4
 800866c:	f000 f8c2 	bl	80087f4 <__multadd>
 8008670:	ee08 0a10 	vmov	s16, r0
 8008674:	e7e7      	b.n	8008646 <_dtoa_r+0xb26>
 8008676:	9b02      	ldr	r3, [sp, #8]
 8008678:	2b00      	cmp	r3, #0
 800867a:	bfc8      	it	gt
 800867c:	461d      	movgt	r5, r3
 800867e:	9b01      	ldr	r3, [sp, #4]
 8008680:	bfd8      	it	le
 8008682:	2501      	movle	r5, #1
 8008684:	441d      	add	r5, r3
 8008686:	f04f 0800 	mov.w	r8, #0
 800868a:	ee18 1a10 	vmov	r1, s16
 800868e:	2201      	movs	r2, #1
 8008690:	4620      	mov	r0, r4
 8008692:	f000 fa5f 	bl	8008b54 <__lshift>
 8008696:	4631      	mov	r1, r6
 8008698:	ee08 0a10 	vmov	s16, r0
 800869c:	f000 faca 	bl	8008c34 <__mcmp>
 80086a0:	2800      	cmp	r0, #0
 80086a2:	dc91      	bgt.n	80085c8 <_dtoa_r+0xaa8>
 80086a4:	d102      	bne.n	80086ac <_dtoa_r+0xb8c>
 80086a6:	f01a 0f01 	tst.w	sl, #1
 80086aa:	d18d      	bne.n	80085c8 <_dtoa_r+0xaa8>
 80086ac:	462b      	mov	r3, r5
 80086ae:	461d      	mov	r5, r3
 80086b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086b4:	2a30      	cmp	r2, #48	; 0x30
 80086b6:	d0fa      	beq.n	80086ae <_dtoa_r+0xb8e>
 80086b8:	e6d7      	b.n	800846a <_dtoa_r+0x94a>
 80086ba:	9a01      	ldr	r2, [sp, #4]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d184      	bne.n	80085ca <_dtoa_r+0xaaa>
 80086c0:	9b00      	ldr	r3, [sp, #0]
 80086c2:	3301      	adds	r3, #1
 80086c4:	9300      	str	r3, [sp, #0]
 80086c6:	2331      	movs	r3, #49	; 0x31
 80086c8:	7013      	strb	r3, [r2, #0]
 80086ca:	e6ce      	b.n	800846a <_dtoa_r+0x94a>
 80086cc:	4b09      	ldr	r3, [pc, #36]	; (80086f4 <_dtoa_r+0xbd4>)
 80086ce:	f7ff ba95 	b.w	8007bfc <_dtoa_r+0xdc>
 80086d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f47f aa6e 	bne.w	8007bb6 <_dtoa_r+0x96>
 80086da:	4b07      	ldr	r3, [pc, #28]	; (80086f8 <_dtoa_r+0xbd8>)
 80086dc:	f7ff ba8e 	b.w	8007bfc <_dtoa_r+0xdc>
 80086e0:	9b02      	ldr	r3, [sp, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	dcae      	bgt.n	8008644 <_dtoa_r+0xb24>
 80086e6:	9b06      	ldr	r3, [sp, #24]
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	f73f aea8 	bgt.w	800843e <_dtoa_r+0x91e>
 80086ee:	e7a9      	b.n	8008644 <_dtoa_r+0xb24>
 80086f0:	0800a06b 	.word	0x0800a06b
 80086f4:	08009fc8 	.word	0x08009fc8
 80086f8:	08009fec 	.word	0x08009fec

080086fc <_localeconv_r>:
 80086fc:	4800      	ldr	r0, [pc, #0]	; (8008700 <_localeconv_r+0x4>)
 80086fe:	4770      	bx	lr
 8008700:	20000164 	.word	0x20000164

08008704 <malloc>:
 8008704:	4b02      	ldr	r3, [pc, #8]	; (8008710 <malloc+0xc>)
 8008706:	4601      	mov	r1, r0
 8008708:	6818      	ldr	r0, [r3, #0]
 800870a:	f000 bc17 	b.w	8008f3c <_malloc_r>
 800870e:	bf00      	nop
 8008710:	20000010 	.word	0x20000010

08008714 <memcpy>:
 8008714:	440a      	add	r2, r1
 8008716:	4291      	cmp	r1, r2
 8008718:	f100 33ff 	add.w	r3, r0, #4294967295
 800871c:	d100      	bne.n	8008720 <memcpy+0xc>
 800871e:	4770      	bx	lr
 8008720:	b510      	push	{r4, lr}
 8008722:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008726:	f803 4f01 	strb.w	r4, [r3, #1]!
 800872a:	4291      	cmp	r1, r2
 800872c:	d1f9      	bne.n	8008722 <memcpy+0xe>
 800872e:	bd10      	pop	{r4, pc}

08008730 <_Balloc>:
 8008730:	b570      	push	{r4, r5, r6, lr}
 8008732:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008734:	4604      	mov	r4, r0
 8008736:	460d      	mov	r5, r1
 8008738:	b976      	cbnz	r6, 8008758 <_Balloc+0x28>
 800873a:	2010      	movs	r0, #16
 800873c:	f7ff ffe2 	bl	8008704 <malloc>
 8008740:	4602      	mov	r2, r0
 8008742:	6260      	str	r0, [r4, #36]	; 0x24
 8008744:	b920      	cbnz	r0, 8008750 <_Balloc+0x20>
 8008746:	4b18      	ldr	r3, [pc, #96]	; (80087a8 <_Balloc+0x78>)
 8008748:	4818      	ldr	r0, [pc, #96]	; (80087ac <_Balloc+0x7c>)
 800874a:	2166      	movs	r1, #102	; 0x66
 800874c:	f000 fdd6 	bl	80092fc <__assert_func>
 8008750:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008754:	6006      	str	r6, [r0, #0]
 8008756:	60c6      	str	r6, [r0, #12]
 8008758:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800875a:	68f3      	ldr	r3, [r6, #12]
 800875c:	b183      	cbz	r3, 8008780 <_Balloc+0x50>
 800875e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008766:	b9b8      	cbnz	r0, 8008798 <_Balloc+0x68>
 8008768:	2101      	movs	r1, #1
 800876a:	fa01 f605 	lsl.w	r6, r1, r5
 800876e:	1d72      	adds	r2, r6, #5
 8008770:	0092      	lsls	r2, r2, #2
 8008772:	4620      	mov	r0, r4
 8008774:	f000 fb60 	bl	8008e38 <_calloc_r>
 8008778:	b160      	cbz	r0, 8008794 <_Balloc+0x64>
 800877a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800877e:	e00e      	b.n	800879e <_Balloc+0x6e>
 8008780:	2221      	movs	r2, #33	; 0x21
 8008782:	2104      	movs	r1, #4
 8008784:	4620      	mov	r0, r4
 8008786:	f000 fb57 	bl	8008e38 <_calloc_r>
 800878a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800878c:	60f0      	str	r0, [r6, #12]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1e4      	bne.n	800875e <_Balloc+0x2e>
 8008794:	2000      	movs	r0, #0
 8008796:	bd70      	pop	{r4, r5, r6, pc}
 8008798:	6802      	ldr	r2, [r0, #0]
 800879a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800879e:	2300      	movs	r3, #0
 80087a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80087a4:	e7f7      	b.n	8008796 <_Balloc+0x66>
 80087a6:	bf00      	nop
 80087a8:	08009ff9 	.word	0x08009ff9
 80087ac:	0800a07c 	.word	0x0800a07c

080087b0 <_Bfree>:
 80087b0:	b570      	push	{r4, r5, r6, lr}
 80087b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087b4:	4605      	mov	r5, r0
 80087b6:	460c      	mov	r4, r1
 80087b8:	b976      	cbnz	r6, 80087d8 <_Bfree+0x28>
 80087ba:	2010      	movs	r0, #16
 80087bc:	f7ff ffa2 	bl	8008704 <malloc>
 80087c0:	4602      	mov	r2, r0
 80087c2:	6268      	str	r0, [r5, #36]	; 0x24
 80087c4:	b920      	cbnz	r0, 80087d0 <_Bfree+0x20>
 80087c6:	4b09      	ldr	r3, [pc, #36]	; (80087ec <_Bfree+0x3c>)
 80087c8:	4809      	ldr	r0, [pc, #36]	; (80087f0 <_Bfree+0x40>)
 80087ca:	218a      	movs	r1, #138	; 0x8a
 80087cc:	f000 fd96 	bl	80092fc <__assert_func>
 80087d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087d4:	6006      	str	r6, [r0, #0]
 80087d6:	60c6      	str	r6, [r0, #12]
 80087d8:	b13c      	cbz	r4, 80087ea <_Bfree+0x3a>
 80087da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80087dc:	6862      	ldr	r2, [r4, #4]
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80087e4:	6021      	str	r1, [r4, #0]
 80087e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80087ea:	bd70      	pop	{r4, r5, r6, pc}
 80087ec:	08009ff9 	.word	0x08009ff9
 80087f0:	0800a07c 	.word	0x0800a07c

080087f4 <__multadd>:
 80087f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087f8:	690d      	ldr	r5, [r1, #16]
 80087fa:	4607      	mov	r7, r0
 80087fc:	460c      	mov	r4, r1
 80087fe:	461e      	mov	r6, r3
 8008800:	f101 0c14 	add.w	ip, r1, #20
 8008804:	2000      	movs	r0, #0
 8008806:	f8dc 3000 	ldr.w	r3, [ip]
 800880a:	b299      	uxth	r1, r3
 800880c:	fb02 6101 	mla	r1, r2, r1, r6
 8008810:	0c1e      	lsrs	r6, r3, #16
 8008812:	0c0b      	lsrs	r3, r1, #16
 8008814:	fb02 3306 	mla	r3, r2, r6, r3
 8008818:	b289      	uxth	r1, r1
 800881a:	3001      	adds	r0, #1
 800881c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008820:	4285      	cmp	r5, r0
 8008822:	f84c 1b04 	str.w	r1, [ip], #4
 8008826:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800882a:	dcec      	bgt.n	8008806 <__multadd+0x12>
 800882c:	b30e      	cbz	r6, 8008872 <__multadd+0x7e>
 800882e:	68a3      	ldr	r3, [r4, #8]
 8008830:	42ab      	cmp	r3, r5
 8008832:	dc19      	bgt.n	8008868 <__multadd+0x74>
 8008834:	6861      	ldr	r1, [r4, #4]
 8008836:	4638      	mov	r0, r7
 8008838:	3101      	adds	r1, #1
 800883a:	f7ff ff79 	bl	8008730 <_Balloc>
 800883e:	4680      	mov	r8, r0
 8008840:	b928      	cbnz	r0, 800884e <__multadd+0x5a>
 8008842:	4602      	mov	r2, r0
 8008844:	4b0c      	ldr	r3, [pc, #48]	; (8008878 <__multadd+0x84>)
 8008846:	480d      	ldr	r0, [pc, #52]	; (800887c <__multadd+0x88>)
 8008848:	21b5      	movs	r1, #181	; 0xb5
 800884a:	f000 fd57 	bl	80092fc <__assert_func>
 800884e:	6922      	ldr	r2, [r4, #16]
 8008850:	3202      	adds	r2, #2
 8008852:	f104 010c 	add.w	r1, r4, #12
 8008856:	0092      	lsls	r2, r2, #2
 8008858:	300c      	adds	r0, #12
 800885a:	f7ff ff5b 	bl	8008714 <memcpy>
 800885e:	4621      	mov	r1, r4
 8008860:	4638      	mov	r0, r7
 8008862:	f7ff ffa5 	bl	80087b0 <_Bfree>
 8008866:	4644      	mov	r4, r8
 8008868:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800886c:	3501      	adds	r5, #1
 800886e:	615e      	str	r6, [r3, #20]
 8008870:	6125      	str	r5, [r4, #16]
 8008872:	4620      	mov	r0, r4
 8008874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008878:	0800a06b 	.word	0x0800a06b
 800887c:	0800a07c 	.word	0x0800a07c

08008880 <__hi0bits>:
 8008880:	0c03      	lsrs	r3, r0, #16
 8008882:	041b      	lsls	r3, r3, #16
 8008884:	b9d3      	cbnz	r3, 80088bc <__hi0bits+0x3c>
 8008886:	0400      	lsls	r0, r0, #16
 8008888:	2310      	movs	r3, #16
 800888a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800888e:	bf04      	itt	eq
 8008890:	0200      	lsleq	r0, r0, #8
 8008892:	3308      	addeq	r3, #8
 8008894:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008898:	bf04      	itt	eq
 800889a:	0100      	lsleq	r0, r0, #4
 800889c:	3304      	addeq	r3, #4
 800889e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80088a2:	bf04      	itt	eq
 80088a4:	0080      	lsleq	r0, r0, #2
 80088a6:	3302      	addeq	r3, #2
 80088a8:	2800      	cmp	r0, #0
 80088aa:	db05      	blt.n	80088b8 <__hi0bits+0x38>
 80088ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80088b0:	f103 0301 	add.w	r3, r3, #1
 80088b4:	bf08      	it	eq
 80088b6:	2320      	moveq	r3, #32
 80088b8:	4618      	mov	r0, r3
 80088ba:	4770      	bx	lr
 80088bc:	2300      	movs	r3, #0
 80088be:	e7e4      	b.n	800888a <__hi0bits+0xa>

080088c0 <__lo0bits>:
 80088c0:	6803      	ldr	r3, [r0, #0]
 80088c2:	f013 0207 	ands.w	r2, r3, #7
 80088c6:	4601      	mov	r1, r0
 80088c8:	d00b      	beq.n	80088e2 <__lo0bits+0x22>
 80088ca:	07da      	lsls	r2, r3, #31
 80088cc:	d423      	bmi.n	8008916 <__lo0bits+0x56>
 80088ce:	0798      	lsls	r0, r3, #30
 80088d0:	bf49      	itett	mi
 80088d2:	085b      	lsrmi	r3, r3, #1
 80088d4:	089b      	lsrpl	r3, r3, #2
 80088d6:	2001      	movmi	r0, #1
 80088d8:	600b      	strmi	r3, [r1, #0]
 80088da:	bf5c      	itt	pl
 80088dc:	600b      	strpl	r3, [r1, #0]
 80088de:	2002      	movpl	r0, #2
 80088e0:	4770      	bx	lr
 80088e2:	b298      	uxth	r0, r3
 80088e4:	b9a8      	cbnz	r0, 8008912 <__lo0bits+0x52>
 80088e6:	0c1b      	lsrs	r3, r3, #16
 80088e8:	2010      	movs	r0, #16
 80088ea:	b2da      	uxtb	r2, r3
 80088ec:	b90a      	cbnz	r2, 80088f2 <__lo0bits+0x32>
 80088ee:	3008      	adds	r0, #8
 80088f0:	0a1b      	lsrs	r3, r3, #8
 80088f2:	071a      	lsls	r2, r3, #28
 80088f4:	bf04      	itt	eq
 80088f6:	091b      	lsreq	r3, r3, #4
 80088f8:	3004      	addeq	r0, #4
 80088fa:	079a      	lsls	r2, r3, #30
 80088fc:	bf04      	itt	eq
 80088fe:	089b      	lsreq	r3, r3, #2
 8008900:	3002      	addeq	r0, #2
 8008902:	07da      	lsls	r2, r3, #31
 8008904:	d403      	bmi.n	800890e <__lo0bits+0x4e>
 8008906:	085b      	lsrs	r3, r3, #1
 8008908:	f100 0001 	add.w	r0, r0, #1
 800890c:	d005      	beq.n	800891a <__lo0bits+0x5a>
 800890e:	600b      	str	r3, [r1, #0]
 8008910:	4770      	bx	lr
 8008912:	4610      	mov	r0, r2
 8008914:	e7e9      	b.n	80088ea <__lo0bits+0x2a>
 8008916:	2000      	movs	r0, #0
 8008918:	4770      	bx	lr
 800891a:	2020      	movs	r0, #32
 800891c:	4770      	bx	lr
	...

08008920 <__i2b>:
 8008920:	b510      	push	{r4, lr}
 8008922:	460c      	mov	r4, r1
 8008924:	2101      	movs	r1, #1
 8008926:	f7ff ff03 	bl	8008730 <_Balloc>
 800892a:	4602      	mov	r2, r0
 800892c:	b928      	cbnz	r0, 800893a <__i2b+0x1a>
 800892e:	4b05      	ldr	r3, [pc, #20]	; (8008944 <__i2b+0x24>)
 8008930:	4805      	ldr	r0, [pc, #20]	; (8008948 <__i2b+0x28>)
 8008932:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008936:	f000 fce1 	bl	80092fc <__assert_func>
 800893a:	2301      	movs	r3, #1
 800893c:	6144      	str	r4, [r0, #20]
 800893e:	6103      	str	r3, [r0, #16]
 8008940:	bd10      	pop	{r4, pc}
 8008942:	bf00      	nop
 8008944:	0800a06b 	.word	0x0800a06b
 8008948:	0800a07c 	.word	0x0800a07c

0800894c <__multiply>:
 800894c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008950:	4691      	mov	r9, r2
 8008952:	690a      	ldr	r2, [r1, #16]
 8008954:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008958:	429a      	cmp	r2, r3
 800895a:	bfb8      	it	lt
 800895c:	460b      	movlt	r3, r1
 800895e:	460c      	mov	r4, r1
 8008960:	bfbc      	itt	lt
 8008962:	464c      	movlt	r4, r9
 8008964:	4699      	movlt	r9, r3
 8008966:	6927      	ldr	r7, [r4, #16]
 8008968:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800896c:	68a3      	ldr	r3, [r4, #8]
 800896e:	6861      	ldr	r1, [r4, #4]
 8008970:	eb07 060a 	add.w	r6, r7, sl
 8008974:	42b3      	cmp	r3, r6
 8008976:	b085      	sub	sp, #20
 8008978:	bfb8      	it	lt
 800897a:	3101      	addlt	r1, #1
 800897c:	f7ff fed8 	bl	8008730 <_Balloc>
 8008980:	b930      	cbnz	r0, 8008990 <__multiply+0x44>
 8008982:	4602      	mov	r2, r0
 8008984:	4b44      	ldr	r3, [pc, #272]	; (8008a98 <__multiply+0x14c>)
 8008986:	4845      	ldr	r0, [pc, #276]	; (8008a9c <__multiply+0x150>)
 8008988:	f240 115d 	movw	r1, #349	; 0x15d
 800898c:	f000 fcb6 	bl	80092fc <__assert_func>
 8008990:	f100 0514 	add.w	r5, r0, #20
 8008994:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008998:	462b      	mov	r3, r5
 800899a:	2200      	movs	r2, #0
 800899c:	4543      	cmp	r3, r8
 800899e:	d321      	bcc.n	80089e4 <__multiply+0x98>
 80089a0:	f104 0314 	add.w	r3, r4, #20
 80089a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80089a8:	f109 0314 	add.w	r3, r9, #20
 80089ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80089b0:	9202      	str	r2, [sp, #8]
 80089b2:	1b3a      	subs	r2, r7, r4
 80089b4:	3a15      	subs	r2, #21
 80089b6:	f022 0203 	bic.w	r2, r2, #3
 80089ba:	3204      	adds	r2, #4
 80089bc:	f104 0115 	add.w	r1, r4, #21
 80089c0:	428f      	cmp	r7, r1
 80089c2:	bf38      	it	cc
 80089c4:	2204      	movcc	r2, #4
 80089c6:	9201      	str	r2, [sp, #4]
 80089c8:	9a02      	ldr	r2, [sp, #8]
 80089ca:	9303      	str	r3, [sp, #12]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d80c      	bhi.n	80089ea <__multiply+0x9e>
 80089d0:	2e00      	cmp	r6, #0
 80089d2:	dd03      	ble.n	80089dc <__multiply+0x90>
 80089d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d05a      	beq.n	8008a92 <__multiply+0x146>
 80089dc:	6106      	str	r6, [r0, #16]
 80089de:	b005      	add	sp, #20
 80089e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e4:	f843 2b04 	str.w	r2, [r3], #4
 80089e8:	e7d8      	b.n	800899c <__multiply+0x50>
 80089ea:	f8b3 a000 	ldrh.w	sl, [r3]
 80089ee:	f1ba 0f00 	cmp.w	sl, #0
 80089f2:	d024      	beq.n	8008a3e <__multiply+0xf2>
 80089f4:	f104 0e14 	add.w	lr, r4, #20
 80089f8:	46a9      	mov	r9, r5
 80089fa:	f04f 0c00 	mov.w	ip, #0
 80089fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008a02:	f8d9 1000 	ldr.w	r1, [r9]
 8008a06:	fa1f fb82 	uxth.w	fp, r2
 8008a0a:	b289      	uxth	r1, r1
 8008a0c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008a10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008a14:	f8d9 2000 	ldr.w	r2, [r9]
 8008a18:	4461      	add	r1, ip
 8008a1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a1e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008a22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008a26:	b289      	uxth	r1, r1
 8008a28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008a2c:	4577      	cmp	r7, lr
 8008a2e:	f849 1b04 	str.w	r1, [r9], #4
 8008a32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a36:	d8e2      	bhi.n	80089fe <__multiply+0xb2>
 8008a38:	9a01      	ldr	r2, [sp, #4]
 8008a3a:	f845 c002 	str.w	ip, [r5, r2]
 8008a3e:	9a03      	ldr	r2, [sp, #12]
 8008a40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008a44:	3304      	adds	r3, #4
 8008a46:	f1b9 0f00 	cmp.w	r9, #0
 8008a4a:	d020      	beq.n	8008a8e <__multiply+0x142>
 8008a4c:	6829      	ldr	r1, [r5, #0]
 8008a4e:	f104 0c14 	add.w	ip, r4, #20
 8008a52:	46ae      	mov	lr, r5
 8008a54:	f04f 0a00 	mov.w	sl, #0
 8008a58:	f8bc b000 	ldrh.w	fp, [ip]
 8008a5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008a60:	fb09 220b 	mla	r2, r9, fp, r2
 8008a64:	4492      	add	sl, r2
 8008a66:	b289      	uxth	r1, r1
 8008a68:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008a6c:	f84e 1b04 	str.w	r1, [lr], #4
 8008a70:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008a74:	f8be 1000 	ldrh.w	r1, [lr]
 8008a78:	0c12      	lsrs	r2, r2, #16
 8008a7a:	fb09 1102 	mla	r1, r9, r2, r1
 8008a7e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008a82:	4567      	cmp	r7, ip
 8008a84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008a88:	d8e6      	bhi.n	8008a58 <__multiply+0x10c>
 8008a8a:	9a01      	ldr	r2, [sp, #4]
 8008a8c:	50a9      	str	r1, [r5, r2]
 8008a8e:	3504      	adds	r5, #4
 8008a90:	e79a      	b.n	80089c8 <__multiply+0x7c>
 8008a92:	3e01      	subs	r6, #1
 8008a94:	e79c      	b.n	80089d0 <__multiply+0x84>
 8008a96:	bf00      	nop
 8008a98:	0800a06b 	.word	0x0800a06b
 8008a9c:	0800a07c 	.word	0x0800a07c

08008aa0 <__pow5mult>:
 8008aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008aa4:	4615      	mov	r5, r2
 8008aa6:	f012 0203 	ands.w	r2, r2, #3
 8008aaa:	4606      	mov	r6, r0
 8008aac:	460f      	mov	r7, r1
 8008aae:	d007      	beq.n	8008ac0 <__pow5mult+0x20>
 8008ab0:	4c25      	ldr	r4, [pc, #148]	; (8008b48 <__pow5mult+0xa8>)
 8008ab2:	3a01      	subs	r2, #1
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008aba:	f7ff fe9b 	bl	80087f4 <__multadd>
 8008abe:	4607      	mov	r7, r0
 8008ac0:	10ad      	asrs	r5, r5, #2
 8008ac2:	d03d      	beq.n	8008b40 <__pow5mult+0xa0>
 8008ac4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008ac6:	b97c      	cbnz	r4, 8008ae8 <__pow5mult+0x48>
 8008ac8:	2010      	movs	r0, #16
 8008aca:	f7ff fe1b 	bl	8008704 <malloc>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	6270      	str	r0, [r6, #36]	; 0x24
 8008ad2:	b928      	cbnz	r0, 8008ae0 <__pow5mult+0x40>
 8008ad4:	4b1d      	ldr	r3, [pc, #116]	; (8008b4c <__pow5mult+0xac>)
 8008ad6:	481e      	ldr	r0, [pc, #120]	; (8008b50 <__pow5mult+0xb0>)
 8008ad8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008adc:	f000 fc0e 	bl	80092fc <__assert_func>
 8008ae0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ae4:	6004      	str	r4, [r0, #0]
 8008ae6:	60c4      	str	r4, [r0, #12]
 8008ae8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008aec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008af0:	b94c      	cbnz	r4, 8008b06 <__pow5mult+0x66>
 8008af2:	f240 2171 	movw	r1, #625	; 0x271
 8008af6:	4630      	mov	r0, r6
 8008af8:	f7ff ff12 	bl	8008920 <__i2b>
 8008afc:	2300      	movs	r3, #0
 8008afe:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b02:	4604      	mov	r4, r0
 8008b04:	6003      	str	r3, [r0, #0]
 8008b06:	f04f 0900 	mov.w	r9, #0
 8008b0a:	07eb      	lsls	r3, r5, #31
 8008b0c:	d50a      	bpl.n	8008b24 <__pow5mult+0x84>
 8008b0e:	4639      	mov	r1, r7
 8008b10:	4622      	mov	r2, r4
 8008b12:	4630      	mov	r0, r6
 8008b14:	f7ff ff1a 	bl	800894c <__multiply>
 8008b18:	4639      	mov	r1, r7
 8008b1a:	4680      	mov	r8, r0
 8008b1c:	4630      	mov	r0, r6
 8008b1e:	f7ff fe47 	bl	80087b0 <_Bfree>
 8008b22:	4647      	mov	r7, r8
 8008b24:	106d      	asrs	r5, r5, #1
 8008b26:	d00b      	beq.n	8008b40 <__pow5mult+0xa0>
 8008b28:	6820      	ldr	r0, [r4, #0]
 8008b2a:	b938      	cbnz	r0, 8008b3c <__pow5mult+0x9c>
 8008b2c:	4622      	mov	r2, r4
 8008b2e:	4621      	mov	r1, r4
 8008b30:	4630      	mov	r0, r6
 8008b32:	f7ff ff0b 	bl	800894c <__multiply>
 8008b36:	6020      	str	r0, [r4, #0]
 8008b38:	f8c0 9000 	str.w	r9, [r0]
 8008b3c:	4604      	mov	r4, r0
 8008b3e:	e7e4      	b.n	8008b0a <__pow5mult+0x6a>
 8008b40:	4638      	mov	r0, r7
 8008b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b46:	bf00      	nop
 8008b48:	0800a1c8 	.word	0x0800a1c8
 8008b4c:	08009ff9 	.word	0x08009ff9
 8008b50:	0800a07c 	.word	0x0800a07c

08008b54 <__lshift>:
 8008b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b58:	460c      	mov	r4, r1
 8008b5a:	6849      	ldr	r1, [r1, #4]
 8008b5c:	6923      	ldr	r3, [r4, #16]
 8008b5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b62:	68a3      	ldr	r3, [r4, #8]
 8008b64:	4607      	mov	r7, r0
 8008b66:	4691      	mov	r9, r2
 8008b68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b6c:	f108 0601 	add.w	r6, r8, #1
 8008b70:	42b3      	cmp	r3, r6
 8008b72:	db0b      	blt.n	8008b8c <__lshift+0x38>
 8008b74:	4638      	mov	r0, r7
 8008b76:	f7ff fddb 	bl	8008730 <_Balloc>
 8008b7a:	4605      	mov	r5, r0
 8008b7c:	b948      	cbnz	r0, 8008b92 <__lshift+0x3e>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	4b2a      	ldr	r3, [pc, #168]	; (8008c2c <__lshift+0xd8>)
 8008b82:	482b      	ldr	r0, [pc, #172]	; (8008c30 <__lshift+0xdc>)
 8008b84:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008b88:	f000 fbb8 	bl	80092fc <__assert_func>
 8008b8c:	3101      	adds	r1, #1
 8008b8e:	005b      	lsls	r3, r3, #1
 8008b90:	e7ee      	b.n	8008b70 <__lshift+0x1c>
 8008b92:	2300      	movs	r3, #0
 8008b94:	f100 0114 	add.w	r1, r0, #20
 8008b98:	f100 0210 	add.w	r2, r0, #16
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	4553      	cmp	r3, sl
 8008ba0:	db37      	blt.n	8008c12 <__lshift+0xbe>
 8008ba2:	6920      	ldr	r0, [r4, #16]
 8008ba4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ba8:	f104 0314 	add.w	r3, r4, #20
 8008bac:	f019 091f 	ands.w	r9, r9, #31
 8008bb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008bb4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008bb8:	d02f      	beq.n	8008c1a <__lshift+0xc6>
 8008bba:	f1c9 0e20 	rsb	lr, r9, #32
 8008bbe:	468a      	mov	sl, r1
 8008bc0:	f04f 0c00 	mov.w	ip, #0
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	fa02 f209 	lsl.w	r2, r2, r9
 8008bca:	ea42 020c 	orr.w	r2, r2, ip
 8008bce:	f84a 2b04 	str.w	r2, [sl], #4
 8008bd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bd6:	4298      	cmp	r0, r3
 8008bd8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008bdc:	d8f2      	bhi.n	8008bc4 <__lshift+0x70>
 8008bde:	1b03      	subs	r3, r0, r4
 8008be0:	3b15      	subs	r3, #21
 8008be2:	f023 0303 	bic.w	r3, r3, #3
 8008be6:	3304      	adds	r3, #4
 8008be8:	f104 0215 	add.w	r2, r4, #21
 8008bec:	4290      	cmp	r0, r2
 8008bee:	bf38      	it	cc
 8008bf0:	2304      	movcc	r3, #4
 8008bf2:	f841 c003 	str.w	ip, [r1, r3]
 8008bf6:	f1bc 0f00 	cmp.w	ip, #0
 8008bfa:	d001      	beq.n	8008c00 <__lshift+0xac>
 8008bfc:	f108 0602 	add.w	r6, r8, #2
 8008c00:	3e01      	subs	r6, #1
 8008c02:	4638      	mov	r0, r7
 8008c04:	612e      	str	r6, [r5, #16]
 8008c06:	4621      	mov	r1, r4
 8008c08:	f7ff fdd2 	bl	80087b0 <_Bfree>
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c12:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c16:	3301      	adds	r3, #1
 8008c18:	e7c1      	b.n	8008b9e <__lshift+0x4a>
 8008c1a:	3904      	subs	r1, #4
 8008c1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c20:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c24:	4298      	cmp	r0, r3
 8008c26:	d8f9      	bhi.n	8008c1c <__lshift+0xc8>
 8008c28:	e7ea      	b.n	8008c00 <__lshift+0xac>
 8008c2a:	bf00      	nop
 8008c2c:	0800a06b 	.word	0x0800a06b
 8008c30:	0800a07c 	.word	0x0800a07c

08008c34 <__mcmp>:
 8008c34:	b530      	push	{r4, r5, lr}
 8008c36:	6902      	ldr	r2, [r0, #16]
 8008c38:	690c      	ldr	r4, [r1, #16]
 8008c3a:	1b12      	subs	r2, r2, r4
 8008c3c:	d10e      	bne.n	8008c5c <__mcmp+0x28>
 8008c3e:	f100 0314 	add.w	r3, r0, #20
 8008c42:	3114      	adds	r1, #20
 8008c44:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008c48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008c4c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008c50:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008c54:	42a5      	cmp	r5, r4
 8008c56:	d003      	beq.n	8008c60 <__mcmp+0x2c>
 8008c58:	d305      	bcc.n	8008c66 <__mcmp+0x32>
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	4610      	mov	r0, r2
 8008c5e:	bd30      	pop	{r4, r5, pc}
 8008c60:	4283      	cmp	r3, r0
 8008c62:	d3f3      	bcc.n	8008c4c <__mcmp+0x18>
 8008c64:	e7fa      	b.n	8008c5c <__mcmp+0x28>
 8008c66:	f04f 32ff 	mov.w	r2, #4294967295
 8008c6a:	e7f7      	b.n	8008c5c <__mcmp+0x28>

08008c6c <__mdiff>:
 8008c6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c70:	460c      	mov	r4, r1
 8008c72:	4606      	mov	r6, r0
 8008c74:	4611      	mov	r1, r2
 8008c76:	4620      	mov	r0, r4
 8008c78:	4690      	mov	r8, r2
 8008c7a:	f7ff ffdb 	bl	8008c34 <__mcmp>
 8008c7e:	1e05      	subs	r5, r0, #0
 8008c80:	d110      	bne.n	8008ca4 <__mdiff+0x38>
 8008c82:	4629      	mov	r1, r5
 8008c84:	4630      	mov	r0, r6
 8008c86:	f7ff fd53 	bl	8008730 <_Balloc>
 8008c8a:	b930      	cbnz	r0, 8008c9a <__mdiff+0x2e>
 8008c8c:	4b3a      	ldr	r3, [pc, #232]	; (8008d78 <__mdiff+0x10c>)
 8008c8e:	4602      	mov	r2, r0
 8008c90:	f240 2132 	movw	r1, #562	; 0x232
 8008c94:	4839      	ldr	r0, [pc, #228]	; (8008d7c <__mdiff+0x110>)
 8008c96:	f000 fb31 	bl	80092fc <__assert_func>
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ca0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca4:	bfa4      	itt	ge
 8008ca6:	4643      	movge	r3, r8
 8008ca8:	46a0      	movge	r8, r4
 8008caa:	4630      	mov	r0, r6
 8008cac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008cb0:	bfa6      	itte	ge
 8008cb2:	461c      	movge	r4, r3
 8008cb4:	2500      	movge	r5, #0
 8008cb6:	2501      	movlt	r5, #1
 8008cb8:	f7ff fd3a 	bl	8008730 <_Balloc>
 8008cbc:	b920      	cbnz	r0, 8008cc8 <__mdiff+0x5c>
 8008cbe:	4b2e      	ldr	r3, [pc, #184]	; (8008d78 <__mdiff+0x10c>)
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008cc6:	e7e5      	b.n	8008c94 <__mdiff+0x28>
 8008cc8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008ccc:	6926      	ldr	r6, [r4, #16]
 8008cce:	60c5      	str	r5, [r0, #12]
 8008cd0:	f104 0914 	add.w	r9, r4, #20
 8008cd4:	f108 0514 	add.w	r5, r8, #20
 8008cd8:	f100 0e14 	add.w	lr, r0, #20
 8008cdc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008ce0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008ce4:	f108 0210 	add.w	r2, r8, #16
 8008ce8:	46f2      	mov	sl, lr
 8008cea:	2100      	movs	r1, #0
 8008cec:	f859 3b04 	ldr.w	r3, [r9], #4
 8008cf0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008cf4:	fa1f f883 	uxth.w	r8, r3
 8008cf8:	fa11 f18b 	uxtah	r1, r1, fp
 8008cfc:	0c1b      	lsrs	r3, r3, #16
 8008cfe:	eba1 0808 	sub.w	r8, r1, r8
 8008d02:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d06:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008d0a:	fa1f f888 	uxth.w	r8, r8
 8008d0e:	1419      	asrs	r1, r3, #16
 8008d10:	454e      	cmp	r6, r9
 8008d12:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008d16:	f84a 3b04 	str.w	r3, [sl], #4
 8008d1a:	d8e7      	bhi.n	8008cec <__mdiff+0x80>
 8008d1c:	1b33      	subs	r3, r6, r4
 8008d1e:	3b15      	subs	r3, #21
 8008d20:	f023 0303 	bic.w	r3, r3, #3
 8008d24:	3304      	adds	r3, #4
 8008d26:	3415      	adds	r4, #21
 8008d28:	42a6      	cmp	r6, r4
 8008d2a:	bf38      	it	cc
 8008d2c:	2304      	movcc	r3, #4
 8008d2e:	441d      	add	r5, r3
 8008d30:	4473      	add	r3, lr
 8008d32:	469e      	mov	lr, r3
 8008d34:	462e      	mov	r6, r5
 8008d36:	4566      	cmp	r6, ip
 8008d38:	d30e      	bcc.n	8008d58 <__mdiff+0xec>
 8008d3a:	f10c 0203 	add.w	r2, ip, #3
 8008d3e:	1b52      	subs	r2, r2, r5
 8008d40:	f022 0203 	bic.w	r2, r2, #3
 8008d44:	3d03      	subs	r5, #3
 8008d46:	45ac      	cmp	ip, r5
 8008d48:	bf38      	it	cc
 8008d4a:	2200      	movcc	r2, #0
 8008d4c:	441a      	add	r2, r3
 8008d4e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008d52:	b17b      	cbz	r3, 8008d74 <__mdiff+0x108>
 8008d54:	6107      	str	r7, [r0, #16]
 8008d56:	e7a3      	b.n	8008ca0 <__mdiff+0x34>
 8008d58:	f856 8b04 	ldr.w	r8, [r6], #4
 8008d5c:	fa11 f288 	uxtah	r2, r1, r8
 8008d60:	1414      	asrs	r4, r2, #16
 8008d62:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008d66:	b292      	uxth	r2, r2
 8008d68:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008d6c:	f84e 2b04 	str.w	r2, [lr], #4
 8008d70:	1421      	asrs	r1, r4, #16
 8008d72:	e7e0      	b.n	8008d36 <__mdiff+0xca>
 8008d74:	3f01      	subs	r7, #1
 8008d76:	e7ea      	b.n	8008d4e <__mdiff+0xe2>
 8008d78:	0800a06b 	.word	0x0800a06b
 8008d7c:	0800a07c 	.word	0x0800a07c

08008d80 <__d2b>:
 8008d80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d84:	4689      	mov	r9, r1
 8008d86:	2101      	movs	r1, #1
 8008d88:	ec57 6b10 	vmov	r6, r7, d0
 8008d8c:	4690      	mov	r8, r2
 8008d8e:	f7ff fccf 	bl	8008730 <_Balloc>
 8008d92:	4604      	mov	r4, r0
 8008d94:	b930      	cbnz	r0, 8008da4 <__d2b+0x24>
 8008d96:	4602      	mov	r2, r0
 8008d98:	4b25      	ldr	r3, [pc, #148]	; (8008e30 <__d2b+0xb0>)
 8008d9a:	4826      	ldr	r0, [pc, #152]	; (8008e34 <__d2b+0xb4>)
 8008d9c:	f240 310a 	movw	r1, #778	; 0x30a
 8008da0:	f000 faac 	bl	80092fc <__assert_func>
 8008da4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008da8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008dac:	bb35      	cbnz	r5, 8008dfc <__d2b+0x7c>
 8008dae:	2e00      	cmp	r6, #0
 8008db0:	9301      	str	r3, [sp, #4]
 8008db2:	d028      	beq.n	8008e06 <__d2b+0x86>
 8008db4:	4668      	mov	r0, sp
 8008db6:	9600      	str	r6, [sp, #0]
 8008db8:	f7ff fd82 	bl	80088c0 <__lo0bits>
 8008dbc:	9900      	ldr	r1, [sp, #0]
 8008dbe:	b300      	cbz	r0, 8008e02 <__d2b+0x82>
 8008dc0:	9a01      	ldr	r2, [sp, #4]
 8008dc2:	f1c0 0320 	rsb	r3, r0, #32
 8008dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dca:	430b      	orrs	r3, r1
 8008dcc:	40c2      	lsrs	r2, r0
 8008dce:	6163      	str	r3, [r4, #20]
 8008dd0:	9201      	str	r2, [sp, #4]
 8008dd2:	9b01      	ldr	r3, [sp, #4]
 8008dd4:	61a3      	str	r3, [r4, #24]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	bf14      	ite	ne
 8008dda:	2202      	movne	r2, #2
 8008ddc:	2201      	moveq	r2, #1
 8008dde:	6122      	str	r2, [r4, #16]
 8008de0:	b1d5      	cbz	r5, 8008e18 <__d2b+0x98>
 8008de2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008de6:	4405      	add	r5, r0
 8008de8:	f8c9 5000 	str.w	r5, [r9]
 8008dec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008df0:	f8c8 0000 	str.w	r0, [r8]
 8008df4:	4620      	mov	r0, r4
 8008df6:	b003      	add	sp, #12
 8008df8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008dfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e00:	e7d5      	b.n	8008dae <__d2b+0x2e>
 8008e02:	6161      	str	r1, [r4, #20]
 8008e04:	e7e5      	b.n	8008dd2 <__d2b+0x52>
 8008e06:	a801      	add	r0, sp, #4
 8008e08:	f7ff fd5a 	bl	80088c0 <__lo0bits>
 8008e0c:	9b01      	ldr	r3, [sp, #4]
 8008e0e:	6163      	str	r3, [r4, #20]
 8008e10:	2201      	movs	r2, #1
 8008e12:	6122      	str	r2, [r4, #16]
 8008e14:	3020      	adds	r0, #32
 8008e16:	e7e3      	b.n	8008de0 <__d2b+0x60>
 8008e18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e20:	f8c9 0000 	str.w	r0, [r9]
 8008e24:	6918      	ldr	r0, [r3, #16]
 8008e26:	f7ff fd2b 	bl	8008880 <__hi0bits>
 8008e2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008e2e:	e7df      	b.n	8008df0 <__d2b+0x70>
 8008e30:	0800a06b 	.word	0x0800a06b
 8008e34:	0800a07c 	.word	0x0800a07c

08008e38 <_calloc_r>:
 8008e38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e3a:	fba1 2402 	umull	r2, r4, r1, r2
 8008e3e:	b94c      	cbnz	r4, 8008e54 <_calloc_r+0x1c>
 8008e40:	4611      	mov	r1, r2
 8008e42:	9201      	str	r2, [sp, #4]
 8008e44:	f000 f87a 	bl	8008f3c <_malloc_r>
 8008e48:	9a01      	ldr	r2, [sp, #4]
 8008e4a:	4605      	mov	r5, r0
 8008e4c:	b930      	cbnz	r0, 8008e5c <_calloc_r+0x24>
 8008e4e:	4628      	mov	r0, r5
 8008e50:	b003      	add	sp, #12
 8008e52:	bd30      	pop	{r4, r5, pc}
 8008e54:	220c      	movs	r2, #12
 8008e56:	6002      	str	r2, [r0, #0]
 8008e58:	2500      	movs	r5, #0
 8008e5a:	e7f8      	b.n	8008e4e <_calloc_r+0x16>
 8008e5c:	4621      	mov	r1, r4
 8008e5e:	f7fe f92d 	bl	80070bc <memset>
 8008e62:	e7f4      	b.n	8008e4e <_calloc_r+0x16>

08008e64 <_free_r>:
 8008e64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e66:	2900      	cmp	r1, #0
 8008e68:	d044      	beq.n	8008ef4 <_free_r+0x90>
 8008e6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e6e:	9001      	str	r0, [sp, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f1a1 0404 	sub.w	r4, r1, #4
 8008e76:	bfb8      	it	lt
 8008e78:	18e4      	addlt	r4, r4, r3
 8008e7a:	f000 fa9b 	bl	80093b4 <__malloc_lock>
 8008e7e:	4a1e      	ldr	r2, [pc, #120]	; (8008ef8 <_free_r+0x94>)
 8008e80:	9801      	ldr	r0, [sp, #4]
 8008e82:	6813      	ldr	r3, [r2, #0]
 8008e84:	b933      	cbnz	r3, 8008e94 <_free_r+0x30>
 8008e86:	6063      	str	r3, [r4, #4]
 8008e88:	6014      	str	r4, [r2, #0]
 8008e8a:	b003      	add	sp, #12
 8008e8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e90:	f000 ba96 	b.w	80093c0 <__malloc_unlock>
 8008e94:	42a3      	cmp	r3, r4
 8008e96:	d908      	bls.n	8008eaa <_free_r+0x46>
 8008e98:	6825      	ldr	r5, [r4, #0]
 8008e9a:	1961      	adds	r1, r4, r5
 8008e9c:	428b      	cmp	r3, r1
 8008e9e:	bf01      	itttt	eq
 8008ea0:	6819      	ldreq	r1, [r3, #0]
 8008ea2:	685b      	ldreq	r3, [r3, #4]
 8008ea4:	1949      	addeq	r1, r1, r5
 8008ea6:	6021      	streq	r1, [r4, #0]
 8008ea8:	e7ed      	b.n	8008e86 <_free_r+0x22>
 8008eaa:	461a      	mov	r2, r3
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	b10b      	cbz	r3, 8008eb4 <_free_r+0x50>
 8008eb0:	42a3      	cmp	r3, r4
 8008eb2:	d9fa      	bls.n	8008eaa <_free_r+0x46>
 8008eb4:	6811      	ldr	r1, [r2, #0]
 8008eb6:	1855      	adds	r5, r2, r1
 8008eb8:	42a5      	cmp	r5, r4
 8008eba:	d10b      	bne.n	8008ed4 <_free_r+0x70>
 8008ebc:	6824      	ldr	r4, [r4, #0]
 8008ebe:	4421      	add	r1, r4
 8008ec0:	1854      	adds	r4, r2, r1
 8008ec2:	42a3      	cmp	r3, r4
 8008ec4:	6011      	str	r1, [r2, #0]
 8008ec6:	d1e0      	bne.n	8008e8a <_free_r+0x26>
 8008ec8:	681c      	ldr	r4, [r3, #0]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	6053      	str	r3, [r2, #4]
 8008ece:	4421      	add	r1, r4
 8008ed0:	6011      	str	r1, [r2, #0]
 8008ed2:	e7da      	b.n	8008e8a <_free_r+0x26>
 8008ed4:	d902      	bls.n	8008edc <_free_r+0x78>
 8008ed6:	230c      	movs	r3, #12
 8008ed8:	6003      	str	r3, [r0, #0]
 8008eda:	e7d6      	b.n	8008e8a <_free_r+0x26>
 8008edc:	6825      	ldr	r5, [r4, #0]
 8008ede:	1961      	adds	r1, r4, r5
 8008ee0:	428b      	cmp	r3, r1
 8008ee2:	bf04      	itt	eq
 8008ee4:	6819      	ldreq	r1, [r3, #0]
 8008ee6:	685b      	ldreq	r3, [r3, #4]
 8008ee8:	6063      	str	r3, [r4, #4]
 8008eea:	bf04      	itt	eq
 8008eec:	1949      	addeq	r1, r1, r5
 8008eee:	6021      	streq	r1, [r4, #0]
 8008ef0:	6054      	str	r4, [r2, #4]
 8008ef2:	e7ca      	b.n	8008e8a <_free_r+0x26>
 8008ef4:	b003      	add	sp, #12
 8008ef6:	bd30      	pop	{r4, r5, pc}
 8008ef8:	200004f4 	.word	0x200004f4

08008efc <sbrk_aligned>:
 8008efc:	b570      	push	{r4, r5, r6, lr}
 8008efe:	4e0e      	ldr	r6, [pc, #56]	; (8008f38 <sbrk_aligned+0x3c>)
 8008f00:	460c      	mov	r4, r1
 8008f02:	6831      	ldr	r1, [r6, #0]
 8008f04:	4605      	mov	r5, r0
 8008f06:	b911      	cbnz	r1, 8008f0e <sbrk_aligned+0x12>
 8008f08:	f000 f9e8 	bl	80092dc <_sbrk_r>
 8008f0c:	6030      	str	r0, [r6, #0]
 8008f0e:	4621      	mov	r1, r4
 8008f10:	4628      	mov	r0, r5
 8008f12:	f000 f9e3 	bl	80092dc <_sbrk_r>
 8008f16:	1c43      	adds	r3, r0, #1
 8008f18:	d00a      	beq.n	8008f30 <sbrk_aligned+0x34>
 8008f1a:	1cc4      	adds	r4, r0, #3
 8008f1c:	f024 0403 	bic.w	r4, r4, #3
 8008f20:	42a0      	cmp	r0, r4
 8008f22:	d007      	beq.n	8008f34 <sbrk_aligned+0x38>
 8008f24:	1a21      	subs	r1, r4, r0
 8008f26:	4628      	mov	r0, r5
 8008f28:	f000 f9d8 	bl	80092dc <_sbrk_r>
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	d101      	bne.n	8008f34 <sbrk_aligned+0x38>
 8008f30:	f04f 34ff 	mov.w	r4, #4294967295
 8008f34:	4620      	mov	r0, r4
 8008f36:	bd70      	pop	{r4, r5, r6, pc}
 8008f38:	200004f8 	.word	0x200004f8

08008f3c <_malloc_r>:
 8008f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f40:	1ccd      	adds	r5, r1, #3
 8008f42:	f025 0503 	bic.w	r5, r5, #3
 8008f46:	3508      	adds	r5, #8
 8008f48:	2d0c      	cmp	r5, #12
 8008f4a:	bf38      	it	cc
 8008f4c:	250c      	movcc	r5, #12
 8008f4e:	2d00      	cmp	r5, #0
 8008f50:	4607      	mov	r7, r0
 8008f52:	db01      	blt.n	8008f58 <_malloc_r+0x1c>
 8008f54:	42a9      	cmp	r1, r5
 8008f56:	d905      	bls.n	8008f64 <_malloc_r+0x28>
 8008f58:	230c      	movs	r3, #12
 8008f5a:	603b      	str	r3, [r7, #0]
 8008f5c:	2600      	movs	r6, #0
 8008f5e:	4630      	mov	r0, r6
 8008f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f64:	4e2e      	ldr	r6, [pc, #184]	; (8009020 <_malloc_r+0xe4>)
 8008f66:	f000 fa25 	bl	80093b4 <__malloc_lock>
 8008f6a:	6833      	ldr	r3, [r6, #0]
 8008f6c:	461c      	mov	r4, r3
 8008f6e:	bb34      	cbnz	r4, 8008fbe <_malloc_r+0x82>
 8008f70:	4629      	mov	r1, r5
 8008f72:	4638      	mov	r0, r7
 8008f74:	f7ff ffc2 	bl	8008efc <sbrk_aligned>
 8008f78:	1c43      	adds	r3, r0, #1
 8008f7a:	4604      	mov	r4, r0
 8008f7c:	d14d      	bne.n	800901a <_malloc_r+0xde>
 8008f7e:	6834      	ldr	r4, [r6, #0]
 8008f80:	4626      	mov	r6, r4
 8008f82:	2e00      	cmp	r6, #0
 8008f84:	d140      	bne.n	8009008 <_malloc_r+0xcc>
 8008f86:	6823      	ldr	r3, [r4, #0]
 8008f88:	4631      	mov	r1, r6
 8008f8a:	4638      	mov	r0, r7
 8008f8c:	eb04 0803 	add.w	r8, r4, r3
 8008f90:	f000 f9a4 	bl	80092dc <_sbrk_r>
 8008f94:	4580      	cmp	r8, r0
 8008f96:	d13a      	bne.n	800900e <_malloc_r+0xd2>
 8008f98:	6821      	ldr	r1, [r4, #0]
 8008f9a:	3503      	adds	r5, #3
 8008f9c:	1a6d      	subs	r5, r5, r1
 8008f9e:	f025 0503 	bic.w	r5, r5, #3
 8008fa2:	3508      	adds	r5, #8
 8008fa4:	2d0c      	cmp	r5, #12
 8008fa6:	bf38      	it	cc
 8008fa8:	250c      	movcc	r5, #12
 8008faa:	4629      	mov	r1, r5
 8008fac:	4638      	mov	r0, r7
 8008fae:	f7ff ffa5 	bl	8008efc <sbrk_aligned>
 8008fb2:	3001      	adds	r0, #1
 8008fb4:	d02b      	beq.n	800900e <_malloc_r+0xd2>
 8008fb6:	6823      	ldr	r3, [r4, #0]
 8008fb8:	442b      	add	r3, r5
 8008fba:	6023      	str	r3, [r4, #0]
 8008fbc:	e00e      	b.n	8008fdc <_malloc_r+0xa0>
 8008fbe:	6822      	ldr	r2, [r4, #0]
 8008fc0:	1b52      	subs	r2, r2, r5
 8008fc2:	d41e      	bmi.n	8009002 <_malloc_r+0xc6>
 8008fc4:	2a0b      	cmp	r2, #11
 8008fc6:	d916      	bls.n	8008ff6 <_malloc_r+0xba>
 8008fc8:	1961      	adds	r1, r4, r5
 8008fca:	42a3      	cmp	r3, r4
 8008fcc:	6025      	str	r5, [r4, #0]
 8008fce:	bf18      	it	ne
 8008fd0:	6059      	strne	r1, [r3, #4]
 8008fd2:	6863      	ldr	r3, [r4, #4]
 8008fd4:	bf08      	it	eq
 8008fd6:	6031      	streq	r1, [r6, #0]
 8008fd8:	5162      	str	r2, [r4, r5]
 8008fda:	604b      	str	r3, [r1, #4]
 8008fdc:	4638      	mov	r0, r7
 8008fde:	f104 060b 	add.w	r6, r4, #11
 8008fe2:	f000 f9ed 	bl	80093c0 <__malloc_unlock>
 8008fe6:	f026 0607 	bic.w	r6, r6, #7
 8008fea:	1d23      	adds	r3, r4, #4
 8008fec:	1af2      	subs	r2, r6, r3
 8008fee:	d0b6      	beq.n	8008f5e <_malloc_r+0x22>
 8008ff0:	1b9b      	subs	r3, r3, r6
 8008ff2:	50a3      	str	r3, [r4, r2]
 8008ff4:	e7b3      	b.n	8008f5e <_malloc_r+0x22>
 8008ff6:	6862      	ldr	r2, [r4, #4]
 8008ff8:	42a3      	cmp	r3, r4
 8008ffa:	bf0c      	ite	eq
 8008ffc:	6032      	streq	r2, [r6, #0]
 8008ffe:	605a      	strne	r2, [r3, #4]
 8009000:	e7ec      	b.n	8008fdc <_malloc_r+0xa0>
 8009002:	4623      	mov	r3, r4
 8009004:	6864      	ldr	r4, [r4, #4]
 8009006:	e7b2      	b.n	8008f6e <_malloc_r+0x32>
 8009008:	4634      	mov	r4, r6
 800900a:	6876      	ldr	r6, [r6, #4]
 800900c:	e7b9      	b.n	8008f82 <_malloc_r+0x46>
 800900e:	230c      	movs	r3, #12
 8009010:	603b      	str	r3, [r7, #0]
 8009012:	4638      	mov	r0, r7
 8009014:	f000 f9d4 	bl	80093c0 <__malloc_unlock>
 8009018:	e7a1      	b.n	8008f5e <_malloc_r+0x22>
 800901a:	6025      	str	r5, [r4, #0]
 800901c:	e7de      	b.n	8008fdc <_malloc_r+0xa0>
 800901e:	bf00      	nop
 8009020:	200004f4 	.word	0x200004f4

08009024 <__ssputs_r>:
 8009024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009028:	688e      	ldr	r6, [r1, #8]
 800902a:	429e      	cmp	r6, r3
 800902c:	4682      	mov	sl, r0
 800902e:	460c      	mov	r4, r1
 8009030:	4690      	mov	r8, r2
 8009032:	461f      	mov	r7, r3
 8009034:	d838      	bhi.n	80090a8 <__ssputs_r+0x84>
 8009036:	898a      	ldrh	r2, [r1, #12]
 8009038:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800903c:	d032      	beq.n	80090a4 <__ssputs_r+0x80>
 800903e:	6825      	ldr	r5, [r4, #0]
 8009040:	6909      	ldr	r1, [r1, #16]
 8009042:	eba5 0901 	sub.w	r9, r5, r1
 8009046:	6965      	ldr	r5, [r4, #20]
 8009048:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800904c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009050:	3301      	adds	r3, #1
 8009052:	444b      	add	r3, r9
 8009054:	106d      	asrs	r5, r5, #1
 8009056:	429d      	cmp	r5, r3
 8009058:	bf38      	it	cc
 800905a:	461d      	movcc	r5, r3
 800905c:	0553      	lsls	r3, r2, #21
 800905e:	d531      	bpl.n	80090c4 <__ssputs_r+0xa0>
 8009060:	4629      	mov	r1, r5
 8009062:	f7ff ff6b 	bl	8008f3c <_malloc_r>
 8009066:	4606      	mov	r6, r0
 8009068:	b950      	cbnz	r0, 8009080 <__ssputs_r+0x5c>
 800906a:	230c      	movs	r3, #12
 800906c:	f8ca 3000 	str.w	r3, [sl]
 8009070:	89a3      	ldrh	r3, [r4, #12]
 8009072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009076:	81a3      	strh	r3, [r4, #12]
 8009078:	f04f 30ff 	mov.w	r0, #4294967295
 800907c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009080:	6921      	ldr	r1, [r4, #16]
 8009082:	464a      	mov	r2, r9
 8009084:	f7ff fb46 	bl	8008714 <memcpy>
 8009088:	89a3      	ldrh	r3, [r4, #12]
 800908a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800908e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009092:	81a3      	strh	r3, [r4, #12]
 8009094:	6126      	str	r6, [r4, #16]
 8009096:	6165      	str	r5, [r4, #20]
 8009098:	444e      	add	r6, r9
 800909a:	eba5 0509 	sub.w	r5, r5, r9
 800909e:	6026      	str	r6, [r4, #0]
 80090a0:	60a5      	str	r5, [r4, #8]
 80090a2:	463e      	mov	r6, r7
 80090a4:	42be      	cmp	r6, r7
 80090a6:	d900      	bls.n	80090aa <__ssputs_r+0x86>
 80090a8:	463e      	mov	r6, r7
 80090aa:	6820      	ldr	r0, [r4, #0]
 80090ac:	4632      	mov	r2, r6
 80090ae:	4641      	mov	r1, r8
 80090b0:	f000 f966 	bl	8009380 <memmove>
 80090b4:	68a3      	ldr	r3, [r4, #8]
 80090b6:	1b9b      	subs	r3, r3, r6
 80090b8:	60a3      	str	r3, [r4, #8]
 80090ba:	6823      	ldr	r3, [r4, #0]
 80090bc:	4433      	add	r3, r6
 80090be:	6023      	str	r3, [r4, #0]
 80090c0:	2000      	movs	r0, #0
 80090c2:	e7db      	b.n	800907c <__ssputs_r+0x58>
 80090c4:	462a      	mov	r2, r5
 80090c6:	f000 f981 	bl	80093cc <_realloc_r>
 80090ca:	4606      	mov	r6, r0
 80090cc:	2800      	cmp	r0, #0
 80090ce:	d1e1      	bne.n	8009094 <__ssputs_r+0x70>
 80090d0:	6921      	ldr	r1, [r4, #16]
 80090d2:	4650      	mov	r0, sl
 80090d4:	f7ff fec6 	bl	8008e64 <_free_r>
 80090d8:	e7c7      	b.n	800906a <__ssputs_r+0x46>
	...

080090dc <_svfiprintf_r>:
 80090dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e0:	4698      	mov	r8, r3
 80090e2:	898b      	ldrh	r3, [r1, #12]
 80090e4:	061b      	lsls	r3, r3, #24
 80090e6:	b09d      	sub	sp, #116	; 0x74
 80090e8:	4607      	mov	r7, r0
 80090ea:	460d      	mov	r5, r1
 80090ec:	4614      	mov	r4, r2
 80090ee:	d50e      	bpl.n	800910e <_svfiprintf_r+0x32>
 80090f0:	690b      	ldr	r3, [r1, #16]
 80090f2:	b963      	cbnz	r3, 800910e <_svfiprintf_r+0x32>
 80090f4:	2140      	movs	r1, #64	; 0x40
 80090f6:	f7ff ff21 	bl	8008f3c <_malloc_r>
 80090fa:	6028      	str	r0, [r5, #0]
 80090fc:	6128      	str	r0, [r5, #16]
 80090fe:	b920      	cbnz	r0, 800910a <_svfiprintf_r+0x2e>
 8009100:	230c      	movs	r3, #12
 8009102:	603b      	str	r3, [r7, #0]
 8009104:	f04f 30ff 	mov.w	r0, #4294967295
 8009108:	e0d1      	b.n	80092ae <_svfiprintf_r+0x1d2>
 800910a:	2340      	movs	r3, #64	; 0x40
 800910c:	616b      	str	r3, [r5, #20]
 800910e:	2300      	movs	r3, #0
 8009110:	9309      	str	r3, [sp, #36]	; 0x24
 8009112:	2320      	movs	r3, #32
 8009114:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009118:	f8cd 800c 	str.w	r8, [sp, #12]
 800911c:	2330      	movs	r3, #48	; 0x30
 800911e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80092c8 <_svfiprintf_r+0x1ec>
 8009122:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009126:	f04f 0901 	mov.w	r9, #1
 800912a:	4623      	mov	r3, r4
 800912c:	469a      	mov	sl, r3
 800912e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009132:	b10a      	cbz	r2, 8009138 <_svfiprintf_r+0x5c>
 8009134:	2a25      	cmp	r2, #37	; 0x25
 8009136:	d1f9      	bne.n	800912c <_svfiprintf_r+0x50>
 8009138:	ebba 0b04 	subs.w	fp, sl, r4
 800913c:	d00b      	beq.n	8009156 <_svfiprintf_r+0x7a>
 800913e:	465b      	mov	r3, fp
 8009140:	4622      	mov	r2, r4
 8009142:	4629      	mov	r1, r5
 8009144:	4638      	mov	r0, r7
 8009146:	f7ff ff6d 	bl	8009024 <__ssputs_r>
 800914a:	3001      	adds	r0, #1
 800914c:	f000 80aa 	beq.w	80092a4 <_svfiprintf_r+0x1c8>
 8009150:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009152:	445a      	add	r2, fp
 8009154:	9209      	str	r2, [sp, #36]	; 0x24
 8009156:	f89a 3000 	ldrb.w	r3, [sl]
 800915a:	2b00      	cmp	r3, #0
 800915c:	f000 80a2 	beq.w	80092a4 <_svfiprintf_r+0x1c8>
 8009160:	2300      	movs	r3, #0
 8009162:	f04f 32ff 	mov.w	r2, #4294967295
 8009166:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800916a:	f10a 0a01 	add.w	sl, sl, #1
 800916e:	9304      	str	r3, [sp, #16]
 8009170:	9307      	str	r3, [sp, #28]
 8009172:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009176:	931a      	str	r3, [sp, #104]	; 0x68
 8009178:	4654      	mov	r4, sl
 800917a:	2205      	movs	r2, #5
 800917c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009180:	4851      	ldr	r0, [pc, #324]	; (80092c8 <_svfiprintf_r+0x1ec>)
 8009182:	f7f7 f835 	bl	80001f0 <memchr>
 8009186:	9a04      	ldr	r2, [sp, #16]
 8009188:	b9d8      	cbnz	r0, 80091c2 <_svfiprintf_r+0xe6>
 800918a:	06d0      	lsls	r0, r2, #27
 800918c:	bf44      	itt	mi
 800918e:	2320      	movmi	r3, #32
 8009190:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009194:	0711      	lsls	r1, r2, #28
 8009196:	bf44      	itt	mi
 8009198:	232b      	movmi	r3, #43	; 0x2b
 800919a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800919e:	f89a 3000 	ldrb.w	r3, [sl]
 80091a2:	2b2a      	cmp	r3, #42	; 0x2a
 80091a4:	d015      	beq.n	80091d2 <_svfiprintf_r+0xf6>
 80091a6:	9a07      	ldr	r2, [sp, #28]
 80091a8:	4654      	mov	r4, sl
 80091aa:	2000      	movs	r0, #0
 80091ac:	f04f 0c0a 	mov.w	ip, #10
 80091b0:	4621      	mov	r1, r4
 80091b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091b6:	3b30      	subs	r3, #48	; 0x30
 80091b8:	2b09      	cmp	r3, #9
 80091ba:	d94e      	bls.n	800925a <_svfiprintf_r+0x17e>
 80091bc:	b1b0      	cbz	r0, 80091ec <_svfiprintf_r+0x110>
 80091be:	9207      	str	r2, [sp, #28]
 80091c0:	e014      	b.n	80091ec <_svfiprintf_r+0x110>
 80091c2:	eba0 0308 	sub.w	r3, r0, r8
 80091c6:	fa09 f303 	lsl.w	r3, r9, r3
 80091ca:	4313      	orrs	r3, r2
 80091cc:	9304      	str	r3, [sp, #16]
 80091ce:	46a2      	mov	sl, r4
 80091d0:	e7d2      	b.n	8009178 <_svfiprintf_r+0x9c>
 80091d2:	9b03      	ldr	r3, [sp, #12]
 80091d4:	1d19      	adds	r1, r3, #4
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	9103      	str	r1, [sp, #12]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	bfbb      	ittet	lt
 80091de:	425b      	neglt	r3, r3
 80091e0:	f042 0202 	orrlt.w	r2, r2, #2
 80091e4:	9307      	strge	r3, [sp, #28]
 80091e6:	9307      	strlt	r3, [sp, #28]
 80091e8:	bfb8      	it	lt
 80091ea:	9204      	strlt	r2, [sp, #16]
 80091ec:	7823      	ldrb	r3, [r4, #0]
 80091ee:	2b2e      	cmp	r3, #46	; 0x2e
 80091f0:	d10c      	bne.n	800920c <_svfiprintf_r+0x130>
 80091f2:	7863      	ldrb	r3, [r4, #1]
 80091f4:	2b2a      	cmp	r3, #42	; 0x2a
 80091f6:	d135      	bne.n	8009264 <_svfiprintf_r+0x188>
 80091f8:	9b03      	ldr	r3, [sp, #12]
 80091fa:	1d1a      	adds	r2, r3, #4
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	9203      	str	r2, [sp, #12]
 8009200:	2b00      	cmp	r3, #0
 8009202:	bfb8      	it	lt
 8009204:	f04f 33ff 	movlt.w	r3, #4294967295
 8009208:	3402      	adds	r4, #2
 800920a:	9305      	str	r3, [sp, #20]
 800920c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80092d8 <_svfiprintf_r+0x1fc>
 8009210:	7821      	ldrb	r1, [r4, #0]
 8009212:	2203      	movs	r2, #3
 8009214:	4650      	mov	r0, sl
 8009216:	f7f6 ffeb 	bl	80001f0 <memchr>
 800921a:	b140      	cbz	r0, 800922e <_svfiprintf_r+0x152>
 800921c:	2340      	movs	r3, #64	; 0x40
 800921e:	eba0 000a 	sub.w	r0, r0, sl
 8009222:	fa03 f000 	lsl.w	r0, r3, r0
 8009226:	9b04      	ldr	r3, [sp, #16]
 8009228:	4303      	orrs	r3, r0
 800922a:	3401      	adds	r4, #1
 800922c:	9304      	str	r3, [sp, #16]
 800922e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009232:	4826      	ldr	r0, [pc, #152]	; (80092cc <_svfiprintf_r+0x1f0>)
 8009234:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009238:	2206      	movs	r2, #6
 800923a:	f7f6 ffd9 	bl	80001f0 <memchr>
 800923e:	2800      	cmp	r0, #0
 8009240:	d038      	beq.n	80092b4 <_svfiprintf_r+0x1d8>
 8009242:	4b23      	ldr	r3, [pc, #140]	; (80092d0 <_svfiprintf_r+0x1f4>)
 8009244:	bb1b      	cbnz	r3, 800928e <_svfiprintf_r+0x1b2>
 8009246:	9b03      	ldr	r3, [sp, #12]
 8009248:	3307      	adds	r3, #7
 800924a:	f023 0307 	bic.w	r3, r3, #7
 800924e:	3308      	adds	r3, #8
 8009250:	9303      	str	r3, [sp, #12]
 8009252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009254:	4433      	add	r3, r6
 8009256:	9309      	str	r3, [sp, #36]	; 0x24
 8009258:	e767      	b.n	800912a <_svfiprintf_r+0x4e>
 800925a:	fb0c 3202 	mla	r2, ip, r2, r3
 800925e:	460c      	mov	r4, r1
 8009260:	2001      	movs	r0, #1
 8009262:	e7a5      	b.n	80091b0 <_svfiprintf_r+0xd4>
 8009264:	2300      	movs	r3, #0
 8009266:	3401      	adds	r4, #1
 8009268:	9305      	str	r3, [sp, #20]
 800926a:	4619      	mov	r1, r3
 800926c:	f04f 0c0a 	mov.w	ip, #10
 8009270:	4620      	mov	r0, r4
 8009272:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009276:	3a30      	subs	r2, #48	; 0x30
 8009278:	2a09      	cmp	r2, #9
 800927a:	d903      	bls.n	8009284 <_svfiprintf_r+0x1a8>
 800927c:	2b00      	cmp	r3, #0
 800927e:	d0c5      	beq.n	800920c <_svfiprintf_r+0x130>
 8009280:	9105      	str	r1, [sp, #20]
 8009282:	e7c3      	b.n	800920c <_svfiprintf_r+0x130>
 8009284:	fb0c 2101 	mla	r1, ip, r1, r2
 8009288:	4604      	mov	r4, r0
 800928a:	2301      	movs	r3, #1
 800928c:	e7f0      	b.n	8009270 <_svfiprintf_r+0x194>
 800928e:	ab03      	add	r3, sp, #12
 8009290:	9300      	str	r3, [sp, #0]
 8009292:	462a      	mov	r2, r5
 8009294:	4b0f      	ldr	r3, [pc, #60]	; (80092d4 <_svfiprintf_r+0x1f8>)
 8009296:	a904      	add	r1, sp, #16
 8009298:	4638      	mov	r0, r7
 800929a:	f7fd ffb7 	bl	800720c <_printf_float>
 800929e:	1c42      	adds	r2, r0, #1
 80092a0:	4606      	mov	r6, r0
 80092a2:	d1d6      	bne.n	8009252 <_svfiprintf_r+0x176>
 80092a4:	89ab      	ldrh	r3, [r5, #12]
 80092a6:	065b      	lsls	r3, r3, #25
 80092a8:	f53f af2c 	bmi.w	8009104 <_svfiprintf_r+0x28>
 80092ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092ae:	b01d      	add	sp, #116	; 0x74
 80092b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b4:	ab03      	add	r3, sp, #12
 80092b6:	9300      	str	r3, [sp, #0]
 80092b8:	462a      	mov	r2, r5
 80092ba:	4b06      	ldr	r3, [pc, #24]	; (80092d4 <_svfiprintf_r+0x1f8>)
 80092bc:	a904      	add	r1, sp, #16
 80092be:	4638      	mov	r0, r7
 80092c0:	f7fe fa48 	bl	8007754 <_printf_i>
 80092c4:	e7eb      	b.n	800929e <_svfiprintf_r+0x1c2>
 80092c6:	bf00      	nop
 80092c8:	0800a1d4 	.word	0x0800a1d4
 80092cc:	0800a1de 	.word	0x0800a1de
 80092d0:	0800720d 	.word	0x0800720d
 80092d4:	08009025 	.word	0x08009025
 80092d8:	0800a1da 	.word	0x0800a1da

080092dc <_sbrk_r>:
 80092dc:	b538      	push	{r3, r4, r5, lr}
 80092de:	4d06      	ldr	r5, [pc, #24]	; (80092f8 <_sbrk_r+0x1c>)
 80092e0:	2300      	movs	r3, #0
 80092e2:	4604      	mov	r4, r0
 80092e4:	4608      	mov	r0, r1
 80092e6:	602b      	str	r3, [r5, #0]
 80092e8:	f7f8 fd3c 	bl	8001d64 <_sbrk>
 80092ec:	1c43      	adds	r3, r0, #1
 80092ee:	d102      	bne.n	80092f6 <_sbrk_r+0x1a>
 80092f0:	682b      	ldr	r3, [r5, #0]
 80092f2:	b103      	cbz	r3, 80092f6 <_sbrk_r+0x1a>
 80092f4:	6023      	str	r3, [r4, #0]
 80092f6:	bd38      	pop	{r3, r4, r5, pc}
 80092f8:	200004fc 	.word	0x200004fc

080092fc <__assert_func>:
 80092fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092fe:	4614      	mov	r4, r2
 8009300:	461a      	mov	r2, r3
 8009302:	4b09      	ldr	r3, [pc, #36]	; (8009328 <__assert_func+0x2c>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4605      	mov	r5, r0
 8009308:	68d8      	ldr	r0, [r3, #12]
 800930a:	b14c      	cbz	r4, 8009320 <__assert_func+0x24>
 800930c:	4b07      	ldr	r3, [pc, #28]	; (800932c <__assert_func+0x30>)
 800930e:	9100      	str	r1, [sp, #0]
 8009310:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009314:	4906      	ldr	r1, [pc, #24]	; (8009330 <__assert_func+0x34>)
 8009316:	462b      	mov	r3, r5
 8009318:	f000 f80e 	bl	8009338 <fiprintf>
 800931c:	f000 faac 	bl	8009878 <abort>
 8009320:	4b04      	ldr	r3, [pc, #16]	; (8009334 <__assert_func+0x38>)
 8009322:	461c      	mov	r4, r3
 8009324:	e7f3      	b.n	800930e <__assert_func+0x12>
 8009326:	bf00      	nop
 8009328:	20000010 	.word	0x20000010
 800932c:	0800a1e5 	.word	0x0800a1e5
 8009330:	0800a1f2 	.word	0x0800a1f2
 8009334:	0800a220 	.word	0x0800a220

08009338 <fiprintf>:
 8009338:	b40e      	push	{r1, r2, r3}
 800933a:	b503      	push	{r0, r1, lr}
 800933c:	4601      	mov	r1, r0
 800933e:	ab03      	add	r3, sp, #12
 8009340:	4805      	ldr	r0, [pc, #20]	; (8009358 <fiprintf+0x20>)
 8009342:	f853 2b04 	ldr.w	r2, [r3], #4
 8009346:	6800      	ldr	r0, [r0, #0]
 8009348:	9301      	str	r3, [sp, #4]
 800934a:	f000 f897 	bl	800947c <_vfiprintf_r>
 800934e:	b002      	add	sp, #8
 8009350:	f85d eb04 	ldr.w	lr, [sp], #4
 8009354:	b003      	add	sp, #12
 8009356:	4770      	bx	lr
 8009358:	20000010 	.word	0x20000010

0800935c <__ascii_mbtowc>:
 800935c:	b082      	sub	sp, #8
 800935e:	b901      	cbnz	r1, 8009362 <__ascii_mbtowc+0x6>
 8009360:	a901      	add	r1, sp, #4
 8009362:	b142      	cbz	r2, 8009376 <__ascii_mbtowc+0x1a>
 8009364:	b14b      	cbz	r3, 800937a <__ascii_mbtowc+0x1e>
 8009366:	7813      	ldrb	r3, [r2, #0]
 8009368:	600b      	str	r3, [r1, #0]
 800936a:	7812      	ldrb	r2, [r2, #0]
 800936c:	1e10      	subs	r0, r2, #0
 800936e:	bf18      	it	ne
 8009370:	2001      	movne	r0, #1
 8009372:	b002      	add	sp, #8
 8009374:	4770      	bx	lr
 8009376:	4610      	mov	r0, r2
 8009378:	e7fb      	b.n	8009372 <__ascii_mbtowc+0x16>
 800937a:	f06f 0001 	mvn.w	r0, #1
 800937e:	e7f8      	b.n	8009372 <__ascii_mbtowc+0x16>

08009380 <memmove>:
 8009380:	4288      	cmp	r0, r1
 8009382:	b510      	push	{r4, lr}
 8009384:	eb01 0402 	add.w	r4, r1, r2
 8009388:	d902      	bls.n	8009390 <memmove+0x10>
 800938a:	4284      	cmp	r4, r0
 800938c:	4623      	mov	r3, r4
 800938e:	d807      	bhi.n	80093a0 <memmove+0x20>
 8009390:	1e43      	subs	r3, r0, #1
 8009392:	42a1      	cmp	r1, r4
 8009394:	d008      	beq.n	80093a8 <memmove+0x28>
 8009396:	f811 2b01 	ldrb.w	r2, [r1], #1
 800939a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800939e:	e7f8      	b.n	8009392 <memmove+0x12>
 80093a0:	4402      	add	r2, r0
 80093a2:	4601      	mov	r1, r0
 80093a4:	428a      	cmp	r2, r1
 80093a6:	d100      	bne.n	80093aa <memmove+0x2a>
 80093a8:	bd10      	pop	{r4, pc}
 80093aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093b2:	e7f7      	b.n	80093a4 <memmove+0x24>

080093b4 <__malloc_lock>:
 80093b4:	4801      	ldr	r0, [pc, #4]	; (80093bc <__malloc_lock+0x8>)
 80093b6:	f000 bc1f 	b.w	8009bf8 <__retarget_lock_acquire_recursive>
 80093ba:	bf00      	nop
 80093bc:	20000500 	.word	0x20000500

080093c0 <__malloc_unlock>:
 80093c0:	4801      	ldr	r0, [pc, #4]	; (80093c8 <__malloc_unlock+0x8>)
 80093c2:	f000 bc1a 	b.w	8009bfa <__retarget_lock_release_recursive>
 80093c6:	bf00      	nop
 80093c8:	20000500 	.word	0x20000500

080093cc <_realloc_r>:
 80093cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093d0:	4680      	mov	r8, r0
 80093d2:	4614      	mov	r4, r2
 80093d4:	460e      	mov	r6, r1
 80093d6:	b921      	cbnz	r1, 80093e2 <_realloc_r+0x16>
 80093d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093dc:	4611      	mov	r1, r2
 80093de:	f7ff bdad 	b.w	8008f3c <_malloc_r>
 80093e2:	b92a      	cbnz	r2, 80093f0 <_realloc_r+0x24>
 80093e4:	f7ff fd3e 	bl	8008e64 <_free_r>
 80093e8:	4625      	mov	r5, r4
 80093ea:	4628      	mov	r0, r5
 80093ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093f0:	f000 fc6a 	bl	8009cc8 <_malloc_usable_size_r>
 80093f4:	4284      	cmp	r4, r0
 80093f6:	4607      	mov	r7, r0
 80093f8:	d802      	bhi.n	8009400 <_realloc_r+0x34>
 80093fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80093fe:	d812      	bhi.n	8009426 <_realloc_r+0x5a>
 8009400:	4621      	mov	r1, r4
 8009402:	4640      	mov	r0, r8
 8009404:	f7ff fd9a 	bl	8008f3c <_malloc_r>
 8009408:	4605      	mov	r5, r0
 800940a:	2800      	cmp	r0, #0
 800940c:	d0ed      	beq.n	80093ea <_realloc_r+0x1e>
 800940e:	42bc      	cmp	r4, r7
 8009410:	4622      	mov	r2, r4
 8009412:	4631      	mov	r1, r6
 8009414:	bf28      	it	cs
 8009416:	463a      	movcs	r2, r7
 8009418:	f7ff f97c 	bl	8008714 <memcpy>
 800941c:	4631      	mov	r1, r6
 800941e:	4640      	mov	r0, r8
 8009420:	f7ff fd20 	bl	8008e64 <_free_r>
 8009424:	e7e1      	b.n	80093ea <_realloc_r+0x1e>
 8009426:	4635      	mov	r5, r6
 8009428:	e7df      	b.n	80093ea <_realloc_r+0x1e>

0800942a <__sfputc_r>:
 800942a:	6893      	ldr	r3, [r2, #8]
 800942c:	3b01      	subs	r3, #1
 800942e:	2b00      	cmp	r3, #0
 8009430:	b410      	push	{r4}
 8009432:	6093      	str	r3, [r2, #8]
 8009434:	da08      	bge.n	8009448 <__sfputc_r+0x1e>
 8009436:	6994      	ldr	r4, [r2, #24]
 8009438:	42a3      	cmp	r3, r4
 800943a:	db01      	blt.n	8009440 <__sfputc_r+0x16>
 800943c:	290a      	cmp	r1, #10
 800943e:	d103      	bne.n	8009448 <__sfputc_r+0x1e>
 8009440:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009444:	f000 b94a 	b.w	80096dc <__swbuf_r>
 8009448:	6813      	ldr	r3, [r2, #0]
 800944a:	1c58      	adds	r0, r3, #1
 800944c:	6010      	str	r0, [r2, #0]
 800944e:	7019      	strb	r1, [r3, #0]
 8009450:	4608      	mov	r0, r1
 8009452:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009456:	4770      	bx	lr

08009458 <__sfputs_r>:
 8009458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800945a:	4606      	mov	r6, r0
 800945c:	460f      	mov	r7, r1
 800945e:	4614      	mov	r4, r2
 8009460:	18d5      	adds	r5, r2, r3
 8009462:	42ac      	cmp	r4, r5
 8009464:	d101      	bne.n	800946a <__sfputs_r+0x12>
 8009466:	2000      	movs	r0, #0
 8009468:	e007      	b.n	800947a <__sfputs_r+0x22>
 800946a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800946e:	463a      	mov	r2, r7
 8009470:	4630      	mov	r0, r6
 8009472:	f7ff ffda 	bl	800942a <__sfputc_r>
 8009476:	1c43      	adds	r3, r0, #1
 8009478:	d1f3      	bne.n	8009462 <__sfputs_r+0xa>
 800947a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800947c <_vfiprintf_r>:
 800947c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009480:	460d      	mov	r5, r1
 8009482:	b09d      	sub	sp, #116	; 0x74
 8009484:	4614      	mov	r4, r2
 8009486:	4698      	mov	r8, r3
 8009488:	4606      	mov	r6, r0
 800948a:	b118      	cbz	r0, 8009494 <_vfiprintf_r+0x18>
 800948c:	6983      	ldr	r3, [r0, #24]
 800948e:	b90b      	cbnz	r3, 8009494 <_vfiprintf_r+0x18>
 8009490:	f000 fb14 	bl	8009abc <__sinit>
 8009494:	4b89      	ldr	r3, [pc, #548]	; (80096bc <_vfiprintf_r+0x240>)
 8009496:	429d      	cmp	r5, r3
 8009498:	d11b      	bne.n	80094d2 <_vfiprintf_r+0x56>
 800949a:	6875      	ldr	r5, [r6, #4]
 800949c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800949e:	07d9      	lsls	r1, r3, #31
 80094a0:	d405      	bmi.n	80094ae <_vfiprintf_r+0x32>
 80094a2:	89ab      	ldrh	r3, [r5, #12]
 80094a4:	059a      	lsls	r2, r3, #22
 80094a6:	d402      	bmi.n	80094ae <_vfiprintf_r+0x32>
 80094a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094aa:	f000 fba5 	bl	8009bf8 <__retarget_lock_acquire_recursive>
 80094ae:	89ab      	ldrh	r3, [r5, #12]
 80094b0:	071b      	lsls	r3, r3, #28
 80094b2:	d501      	bpl.n	80094b8 <_vfiprintf_r+0x3c>
 80094b4:	692b      	ldr	r3, [r5, #16]
 80094b6:	b9eb      	cbnz	r3, 80094f4 <_vfiprintf_r+0x78>
 80094b8:	4629      	mov	r1, r5
 80094ba:	4630      	mov	r0, r6
 80094bc:	f000 f96e 	bl	800979c <__swsetup_r>
 80094c0:	b1c0      	cbz	r0, 80094f4 <_vfiprintf_r+0x78>
 80094c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094c4:	07dc      	lsls	r4, r3, #31
 80094c6:	d50e      	bpl.n	80094e6 <_vfiprintf_r+0x6a>
 80094c8:	f04f 30ff 	mov.w	r0, #4294967295
 80094cc:	b01d      	add	sp, #116	; 0x74
 80094ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d2:	4b7b      	ldr	r3, [pc, #492]	; (80096c0 <_vfiprintf_r+0x244>)
 80094d4:	429d      	cmp	r5, r3
 80094d6:	d101      	bne.n	80094dc <_vfiprintf_r+0x60>
 80094d8:	68b5      	ldr	r5, [r6, #8]
 80094da:	e7df      	b.n	800949c <_vfiprintf_r+0x20>
 80094dc:	4b79      	ldr	r3, [pc, #484]	; (80096c4 <_vfiprintf_r+0x248>)
 80094de:	429d      	cmp	r5, r3
 80094e0:	bf08      	it	eq
 80094e2:	68f5      	ldreq	r5, [r6, #12]
 80094e4:	e7da      	b.n	800949c <_vfiprintf_r+0x20>
 80094e6:	89ab      	ldrh	r3, [r5, #12]
 80094e8:	0598      	lsls	r0, r3, #22
 80094ea:	d4ed      	bmi.n	80094c8 <_vfiprintf_r+0x4c>
 80094ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094ee:	f000 fb84 	bl	8009bfa <__retarget_lock_release_recursive>
 80094f2:	e7e9      	b.n	80094c8 <_vfiprintf_r+0x4c>
 80094f4:	2300      	movs	r3, #0
 80094f6:	9309      	str	r3, [sp, #36]	; 0x24
 80094f8:	2320      	movs	r3, #32
 80094fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009502:	2330      	movs	r3, #48	; 0x30
 8009504:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80096c8 <_vfiprintf_r+0x24c>
 8009508:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800950c:	f04f 0901 	mov.w	r9, #1
 8009510:	4623      	mov	r3, r4
 8009512:	469a      	mov	sl, r3
 8009514:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009518:	b10a      	cbz	r2, 800951e <_vfiprintf_r+0xa2>
 800951a:	2a25      	cmp	r2, #37	; 0x25
 800951c:	d1f9      	bne.n	8009512 <_vfiprintf_r+0x96>
 800951e:	ebba 0b04 	subs.w	fp, sl, r4
 8009522:	d00b      	beq.n	800953c <_vfiprintf_r+0xc0>
 8009524:	465b      	mov	r3, fp
 8009526:	4622      	mov	r2, r4
 8009528:	4629      	mov	r1, r5
 800952a:	4630      	mov	r0, r6
 800952c:	f7ff ff94 	bl	8009458 <__sfputs_r>
 8009530:	3001      	adds	r0, #1
 8009532:	f000 80aa 	beq.w	800968a <_vfiprintf_r+0x20e>
 8009536:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009538:	445a      	add	r2, fp
 800953a:	9209      	str	r2, [sp, #36]	; 0x24
 800953c:	f89a 3000 	ldrb.w	r3, [sl]
 8009540:	2b00      	cmp	r3, #0
 8009542:	f000 80a2 	beq.w	800968a <_vfiprintf_r+0x20e>
 8009546:	2300      	movs	r3, #0
 8009548:	f04f 32ff 	mov.w	r2, #4294967295
 800954c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009550:	f10a 0a01 	add.w	sl, sl, #1
 8009554:	9304      	str	r3, [sp, #16]
 8009556:	9307      	str	r3, [sp, #28]
 8009558:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800955c:	931a      	str	r3, [sp, #104]	; 0x68
 800955e:	4654      	mov	r4, sl
 8009560:	2205      	movs	r2, #5
 8009562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009566:	4858      	ldr	r0, [pc, #352]	; (80096c8 <_vfiprintf_r+0x24c>)
 8009568:	f7f6 fe42 	bl	80001f0 <memchr>
 800956c:	9a04      	ldr	r2, [sp, #16]
 800956e:	b9d8      	cbnz	r0, 80095a8 <_vfiprintf_r+0x12c>
 8009570:	06d1      	lsls	r1, r2, #27
 8009572:	bf44      	itt	mi
 8009574:	2320      	movmi	r3, #32
 8009576:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800957a:	0713      	lsls	r3, r2, #28
 800957c:	bf44      	itt	mi
 800957e:	232b      	movmi	r3, #43	; 0x2b
 8009580:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009584:	f89a 3000 	ldrb.w	r3, [sl]
 8009588:	2b2a      	cmp	r3, #42	; 0x2a
 800958a:	d015      	beq.n	80095b8 <_vfiprintf_r+0x13c>
 800958c:	9a07      	ldr	r2, [sp, #28]
 800958e:	4654      	mov	r4, sl
 8009590:	2000      	movs	r0, #0
 8009592:	f04f 0c0a 	mov.w	ip, #10
 8009596:	4621      	mov	r1, r4
 8009598:	f811 3b01 	ldrb.w	r3, [r1], #1
 800959c:	3b30      	subs	r3, #48	; 0x30
 800959e:	2b09      	cmp	r3, #9
 80095a0:	d94e      	bls.n	8009640 <_vfiprintf_r+0x1c4>
 80095a2:	b1b0      	cbz	r0, 80095d2 <_vfiprintf_r+0x156>
 80095a4:	9207      	str	r2, [sp, #28]
 80095a6:	e014      	b.n	80095d2 <_vfiprintf_r+0x156>
 80095a8:	eba0 0308 	sub.w	r3, r0, r8
 80095ac:	fa09 f303 	lsl.w	r3, r9, r3
 80095b0:	4313      	orrs	r3, r2
 80095b2:	9304      	str	r3, [sp, #16]
 80095b4:	46a2      	mov	sl, r4
 80095b6:	e7d2      	b.n	800955e <_vfiprintf_r+0xe2>
 80095b8:	9b03      	ldr	r3, [sp, #12]
 80095ba:	1d19      	adds	r1, r3, #4
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	9103      	str	r1, [sp, #12]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	bfbb      	ittet	lt
 80095c4:	425b      	neglt	r3, r3
 80095c6:	f042 0202 	orrlt.w	r2, r2, #2
 80095ca:	9307      	strge	r3, [sp, #28]
 80095cc:	9307      	strlt	r3, [sp, #28]
 80095ce:	bfb8      	it	lt
 80095d0:	9204      	strlt	r2, [sp, #16]
 80095d2:	7823      	ldrb	r3, [r4, #0]
 80095d4:	2b2e      	cmp	r3, #46	; 0x2e
 80095d6:	d10c      	bne.n	80095f2 <_vfiprintf_r+0x176>
 80095d8:	7863      	ldrb	r3, [r4, #1]
 80095da:	2b2a      	cmp	r3, #42	; 0x2a
 80095dc:	d135      	bne.n	800964a <_vfiprintf_r+0x1ce>
 80095de:	9b03      	ldr	r3, [sp, #12]
 80095e0:	1d1a      	adds	r2, r3, #4
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	9203      	str	r2, [sp, #12]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	bfb8      	it	lt
 80095ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80095ee:	3402      	adds	r4, #2
 80095f0:	9305      	str	r3, [sp, #20]
 80095f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80096d8 <_vfiprintf_r+0x25c>
 80095f6:	7821      	ldrb	r1, [r4, #0]
 80095f8:	2203      	movs	r2, #3
 80095fa:	4650      	mov	r0, sl
 80095fc:	f7f6 fdf8 	bl	80001f0 <memchr>
 8009600:	b140      	cbz	r0, 8009614 <_vfiprintf_r+0x198>
 8009602:	2340      	movs	r3, #64	; 0x40
 8009604:	eba0 000a 	sub.w	r0, r0, sl
 8009608:	fa03 f000 	lsl.w	r0, r3, r0
 800960c:	9b04      	ldr	r3, [sp, #16]
 800960e:	4303      	orrs	r3, r0
 8009610:	3401      	adds	r4, #1
 8009612:	9304      	str	r3, [sp, #16]
 8009614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009618:	482c      	ldr	r0, [pc, #176]	; (80096cc <_vfiprintf_r+0x250>)
 800961a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800961e:	2206      	movs	r2, #6
 8009620:	f7f6 fde6 	bl	80001f0 <memchr>
 8009624:	2800      	cmp	r0, #0
 8009626:	d03f      	beq.n	80096a8 <_vfiprintf_r+0x22c>
 8009628:	4b29      	ldr	r3, [pc, #164]	; (80096d0 <_vfiprintf_r+0x254>)
 800962a:	bb1b      	cbnz	r3, 8009674 <_vfiprintf_r+0x1f8>
 800962c:	9b03      	ldr	r3, [sp, #12]
 800962e:	3307      	adds	r3, #7
 8009630:	f023 0307 	bic.w	r3, r3, #7
 8009634:	3308      	adds	r3, #8
 8009636:	9303      	str	r3, [sp, #12]
 8009638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800963a:	443b      	add	r3, r7
 800963c:	9309      	str	r3, [sp, #36]	; 0x24
 800963e:	e767      	b.n	8009510 <_vfiprintf_r+0x94>
 8009640:	fb0c 3202 	mla	r2, ip, r2, r3
 8009644:	460c      	mov	r4, r1
 8009646:	2001      	movs	r0, #1
 8009648:	e7a5      	b.n	8009596 <_vfiprintf_r+0x11a>
 800964a:	2300      	movs	r3, #0
 800964c:	3401      	adds	r4, #1
 800964e:	9305      	str	r3, [sp, #20]
 8009650:	4619      	mov	r1, r3
 8009652:	f04f 0c0a 	mov.w	ip, #10
 8009656:	4620      	mov	r0, r4
 8009658:	f810 2b01 	ldrb.w	r2, [r0], #1
 800965c:	3a30      	subs	r2, #48	; 0x30
 800965e:	2a09      	cmp	r2, #9
 8009660:	d903      	bls.n	800966a <_vfiprintf_r+0x1ee>
 8009662:	2b00      	cmp	r3, #0
 8009664:	d0c5      	beq.n	80095f2 <_vfiprintf_r+0x176>
 8009666:	9105      	str	r1, [sp, #20]
 8009668:	e7c3      	b.n	80095f2 <_vfiprintf_r+0x176>
 800966a:	fb0c 2101 	mla	r1, ip, r1, r2
 800966e:	4604      	mov	r4, r0
 8009670:	2301      	movs	r3, #1
 8009672:	e7f0      	b.n	8009656 <_vfiprintf_r+0x1da>
 8009674:	ab03      	add	r3, sp, #12
 8009676:	9300      	str	r3, [sp, #0]
 8009678:	462a      	mov	r2, r5
 800967a:	4b16      	ldr	r3, [pc, #88]	; (80096d4 <_vfiprintf_r+0x258>)
 800967c:	a904      	add	r1, sp, #16
 800967e:	4630      	mov	r0, r6
 8009680:	f7fd fdc4 	bl	800720c <_printf_float>
 8009684:	4607      	mov	r7, r0
 8009686:	1c78      	adds	r0, r7, #1
 8009688:	d1d6      	bne.n	8009638 <_vfiprintf_r+0x1bc>
 800968a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800968c:	07d9      	lsls	r1, r3, #31
 800968e:	d405      	bmi.n	800969c <_vfiprintf_r+0x220>
 8009690:	89ab      	ldrh	r3, [r5, #12]
 8009692:	059a      	lsls	r2, r3, #22
 8009694:	d402      	bmi.n	800969c <_vfiprintf_r+0x220>
 8009696:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009698:	f000 faaf 	bl	8009bfa <__retarget_lock_release_recursive>
 800969c:	89ab      	ldrh	r3, [r5, #12]
 800969e:	065b      	lsls	r3, r3, #25
 80096a0:	f53f af12 	bmi.w	80094c8 <_vfiprintf_r+0x4c>
 80096a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096a6:	e711      	b.n	80094cc <_vfiprintf_r+0x50>
 80096a8:	ab03      	add	r3, sp, #12
 80096aa:	9300      	str	r3, [sp, #0]
 80096ac:	462a      	mov	r2, r5
 80096ae:	4b09      	ldr	r3, [pc, #36]	; (80096d4 <_vfiprintf_r+0x258>)
 80096b0:	a904      	add	r1, sp, #16
 80096b2:	4630      	mov	r0, r6
 80096b4:	f7fe f84e 	bl	8007754 <_printf_i>
 80096b8:	e7e4      	b.n	8009684 <_vfiprintf_r+0x208>
 80096ba:	bf00      	nop
 80096bc:	0800a34c 	.word	0x0800a34c
 80096c0:	0800a36c 	.word	0x0800a36c
 80096c4:	0800a32c 	.word	0x0800a32c
 80096c8:	0800a1d4 	.word	0x0800a1d4
 80096cc:	0800a1de 	.word	0x0800a1de
 80096d0:	0800720d 	.word	0x0800720d
 80096d4:	08009459 	.word	0x08009459
 80096d8:	0800a1da 	.word	0x0800a1da

080096dc <__swbuf_r>:
 80096dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096de:	460e      	mov	r6, r1
 80096e0:	4614      	mov	r4, r2
 80096e2:	4605      	mov	r5, r0
 80096e4:	b118      	cbz	r0, 80096ee <__swbuf_r+0x12>
 80096e6:	6983      	ldr	r3, [r0, #24]
 80096e8:	b90b      	cbnz	r3, 80096ee <__swbuf_r+0x12>
 80096ea:	f000 f9e7 	bl	8009abc <__sinit>
 80096ee:	4b21      	ldr	r3, [pc, #132]	; (8009774 <__swbuf_r+0x98>)
 80096f0:	429c      	cmp	r4, r3
 80096f2:	d12b      	bne.n	800974c <__swbuf_r+0x70>
 80096f4:	686c      	ldr	r4, [r5, #4]
 80096f6:	69a3      	ldr	r3, [r4, #24]
 80096f8:	60a3      	str	r3, [r4, #8]
 80096fa:	89a3      	ldrh	r3, [r4, #12]
 80096fc:	071a      	lsls	r2, r3, #28
 80096fe:	d52f      	bpl.n	8009760 <__swbuf_r+0x84>
 8009700:	6923      	ldr	r3, [r4, #16]
 8009702:	b36b      	cbz	r3, 8009760 <__swbuf_r+0x84>
 8009704:	6923      	ldr	r3, [r4, #16]
 8009706:	6820      	ldr	r0, [r4, #0]
 8009708:	1ac0      	subs	r0, r0, r3
 800970a:	6963      	ldr	r3, [r4, #20]
 800970c:	b2f6      	uxtb	r6, r6
 800970e:	4283      	cmp	r3, r0
 8009710:	4637      	mov	r7, r6
 8009712:	dc04      	bgt.n	800971e <__swbuf_r+0x42>
 8009714:	4621      	mov	r1, r4
 8009716:	4628      	mov	r0, r5
 8009718:	f000 f93c 	bl	8009994 <_fflush_r>
 800971c:	bb30      	cbnz	r0, 800976c <__swbuf_r+0x90>
 800971e:	68a3      	ldr	r3, [r4, #8]
 8009720:	3b01      	subs	r3, #1
 8009722:	60a3      	str	r3, [r4, #8]
 8009724:	6823      	ldr	r3, [r4, #0]
 8009726:	1c5a      	adds	r2, r3, #1
 8009728:	6022      	str	r2, [r4, #0]
 800972a:	701e      	strb	r6, [r3, #0]
 800972c:	6963      	ldr	r3, [r4, #20]
 800972e:	3001      	adds	r0, #1
 8009730:	4283      	cmp	r3, r0
 8009732:	d004      	beq.n	800973e <__swbuf_r+0x62>
 8009734:	89a3      	ldrh	r3, [r4, #12]
 8009736:	07db      	lsls	r3, r3, #31
 8009738:	d506      	bpl.n	8009748 <__swbuf_r+0x6c>
 800973a:	2e0a      	cmp	r6, #10
 800973c:	d104      	bne.n	8009748 <__swbuf_r+0x6c>
 800973e:	4621      	mov	r1, r4
 8009740:	4628      	mov	r0, r5
 8009742:	f000 f927 	bl	8009994 <_fflush_r>
 8009746:	b988      	cbnz	r0, 800976c <__swbuf_r+0x90>
 8009748:	4638      	mov	r0, r7
 800974a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800974c:	4b0a      	ldr	r3, [pc, #40]	; (8009778 <__swbuf_r+0x9c>)
 800974e:	429c      	cmp	r4, r3
 8009750:	d101      	bne.n	8009756 <__swbuf_r+0x7a>
 8009752:	68ac      	ldr	r4, [r5, #8]
 8009754:	e7cf      	b.n	80096f6 <__swbuf_r+0x1a>
 8009756:	4b09      	ldr	r3, [pc, #36]	; (800977c <__swbuf_r+0xa0>)
 8009758:	429c      	cmp	r4, r3
 800975a:	bf08      	it	eq
 800975c:	68ec      	ldreq	r4, [r5, #12]
 800975e:	e7ca      	b.n	80096f6 <__swbuf_r+0x1a>
 8009760:	4621      	mov	r1, r4
 8009762:	4628      	mov	r0, r5
 8009764:	f000 f81a 	bl	800979c <__swsetup_r>
 8009768:	2800      	cmp	r0, #0
 800976a:	d0cb      	beq.n	8009704 <__swbuf_r+0x28>
 800976c:	f04f 37ff 	mov.w	r7, #4294967295
 8009770:	e7ea      	b.n	8009748 <__swbuf_r+0x6c>
 8009772:	bf00      	nop
 8009774:	0800a34c 	.word	0x0800a34c
 8009778:	0800a36c 	.word	0x0800a36c
 800977c:	0800a32c 	.word	0x0800a32c

08009780 <__ascii_wctomb>:
 8009780:	b149      	cbz	r1, 8009796 <__ascii_wctomb+0x16>
 8009782:	2aff      	cmp	r2, #255	; 0xff
 8009784:	bf85      	ittet	hi
 8009786:	238a      	movhi	r3, #138	; 0x8a
 8009788:	6003      	strhi	r3, [r0, #0]
 800978a:	700a      	strbls	r2, [r1, #0]
 800978c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009790:	bf98      	it	ls
 8009792:	2001      	movls	r0, #1
 8009794:	4770      	bx	lr
 8009796:	4608      	mov	r0, r1
 8009798:	4770      	bx	lr
	...

0800979c <__swsetup_r>:
 800979c:	4b32      	ldr	r3, [pc, #200]	; (8009868 <__swsetup_r+0xcc>)
 800979e:	b570      	push	{r4, r5, r6, lr}
 80097a0:	681d      	ldr	r5, [r3, #0]
 80097a2:	4606      	mov	r6, r0
 80097a4:	460c      	mov	r4, r1
 80097a6:	b125      	cbz	r5, 80097b2 <__swsetup_r+0x16>
 80097a8:	69ab      	ldr	r3, [r5, #24]
 80097aa:	b913      	cbnz	r3, 80097b2 <__swsetup_r+0x16>
 80097ac:	4628      	mov	r0, r5
 80097ae:	f000 f985 	bl	8009abc <__sinit>
 80097b2:	4b2e      	ldr	r3, [pc, #184]	; (800986c <__swsetup_r+0xd0>)
 80097b4:	429c      	cmp	r4, r3
 80097b6:	d10f      	bne.n	80097d8 <__swsetup_r+0x3c>
 80097b8:	686c      	ldr	r4, [r5, #4]
 80097ba:	89a3      	ldrh	r3, [r4, #12]
 80097bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097c0:	0719      	lsls	r1, r3, #28
 80097c2:	d42c      	bmi.n	800981e <__swsetup_r+0x82>
 80097c4:	06dd      	lsls	r5, r3, #27
 80097c6:	d411      	bmi.n	80097ec <__swsetup_r+0x50>
 80097c8:	2309      	movs	r3, #9
 80097ca:	6033      	str	r3, [r6, #0]
 80097cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80097d0:	81a3      	strh	r3, [r4, #12]
 80097d2:	f04f 30ff 	mov.w	r0, #4294967295
 80097d6:	e03e      	b.n	8009856 <__swsetup_r+0xba>
 80097d8:	4b25      	ldr	r3, [pc, #148]	; (8009870 <__swsetup_r+0xd4>)
 80097da:	429c      	cmp	r4, r3
 80097dc:	d101      	bne.n	80097e2 <__swsetup_r+0x46>
 80097de:	68ac      	ldr	r4, [r5, #8]
 80097e0:	e7eb      	b.n	80097ba <__swsetup_r+0x1e>
 80097e2:	4b24      	ldr	r3, [pc, #144]	; (8009874 <__swsetup_r+0xd8>)
 80097e4:	429c      	cmp	r4, r3
 80097e6:	bf08      	it	eq
 80097e8:	68ec      	ldreq	r4, [r5, #12]
 80097ea:	e7e6      	b.n	80097ba <__swsetup_r+0x1e>
 80097ec:	0758      	lsls	r0, r3, #29
 80097ee:	d512      	bpl.n	8009816 <__swsetup_r+0x7a>
 80097f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097f2:	b141      	cbz	r1, 8009806 <__swsetup_r+0x6a>
 80097f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097f8:	4299      	cmp	r1, r3
 80097fa:	d002      	beq.n	8009802 <__swsetup_r+0x66>
 80097fc:	4630      	mov	r0, r6
 80097fe:	f7ff fb31 	bl	8008e64 <_free_r>
 8009802:	2300      	movs	r3, #0
 8009804:	6363      	str	r3, [r4, #52]	; 0x34
 8009806:	89a3      	ldrh	r3, [r4, #12]
 8009808:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800980c:	81a3      	strh	r3, [r4, #12]
 800980e:	2300      	movs	r3, #0
 8009810:	6063      	str	r3, [r4, #4]
 8009812:	6923      	ldr	r3, [r4, #16]
 8009814:	6023      	str	r3, [r4, #0]
 8009816:	89a3      	ldrh	r3, [r4, #12]
 8009818:	f043 0308 	orr.w	r3, r3, #8
 800981c:	81a3      	strh	r3, [r4, #12]
 800981e:	6923      	ldr	r3, [r4, #16]
 8009820:	b94b      	cbnz	r3, 8009836 <__swsetup_r+0x9a>
 8009822:	89a3      	ldrh	r3, [r4, #12]
 8009824:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800982c:	d003      	beq.n	8009836 <__swsetup_r+0x9a>
 800982e:	4621      	mov	r1, r4
 8009830:	4630      	mov	r0, r6
 8009832:	f000 fa09 	bl	8009c48 <__smakebuf_r>
 8009836:	89a0      	ldrh	r0, [r4, #12]
 8009838:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800983c:	f010 0301 	ands.w	r3, r0, #1
 8009840:	d00a      	beq.n	8009858 <__swsetup_r+0xbc>
 8009842:	2300      	movs	r3, #0
 8009844:	60a3      	str	r3, [r4, #8]
 8009846:	6963      	ldr	r3, [r4, #20]
 8009848:	425b      	negs	r3, r3
 800984a:	61a3      	str	r3, [r4, #24]
 800984c:	6923      	ldr	r3, [r4, #16]
 800984e:	b943      	cbnz	r3, 8009862 <__swsetup_r+0xc6>
 8009850:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009854:	d1ba      	bne.n	80097cc <__swsetup_r+0x30>
 8009856:	bd70      	pop	{r4, r5, r6, pc}
 8009858:	0781      	lsls	r1, r0, #30
 800985a:	bf58      	it	pl
 800985c:	6963      	ldrpl	r3, [r4, #20]
 800985e:	60a3      	str	r3, [r4, #8]
 8009860:	e7f4      	b.n	800984c <__swsetup_r+0xb0>
 8009862:	2000      	movs	r0, #0
 8009864:	e7f7      	b.n	8009856 <__swsetup_r+0xba>
 8009866:	bf00      	nop
 8009868:	20000010 	.word	0x20000010
 800986c:	0800a34c 	.word	0x0800a34c
 8009870:	0800a36c 	.word	0x0800a36c
 8009874:	0800a32c 	.word	0x0800a32c

08009878 <abort>:
 8009878:	b508      	push	{r3, lr}
 800987a:	2006      	movs	r0, #6
 800987c:	f000 fa54 	bl	8009d28 <raise>
 8009880:	2001      	movs	r0, #1
 8009882:	f000 fb59 	bl	8009f38 <_exit>
	...

08009888 <__sflush_r>:
 8009888:	898a      	ldrh	r2, [r1, #12]
 800988a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800988e:	4605      	mov	r5, r0
 8009890:	0710      	lsls	r0, r2, #28
 8009892:	460c      	mov	r4, r1
 8009894:	d458      	bmi.n	8009948 <__sflush_r+0xc0>
 8009896:	684b      	ldr	r3, [r1, #4]
 8009898:	2b00      	cmp	r3, #0
 800989a:	dc05      	bgt.n	80098a8 <__sflush_r+0x20>
 800989c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800989e:	2b00      	cmp	r3, #0
 80098a0:	dc02      	bgt.n	80098a8 <__sflush_r+0x20>
 80098a2:	2000      	movs	r0, #0
 80098a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098aa:	2e00      	cmp	r6, #0
 80098ac:	d0f9      	beq.n	80098a2 <__sflush_r+0x1a>
 80098ae:	2300      	movs	r3, #0
 80098b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80098b4:	682f      	ldr	r7, [r5, #0]
 80098b6:	602b      	str	r3, [r5, #0]
 80098b8:	d032      	beq.n	8009920 <__sflush_r+0x98>
 80098ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098bc:	89a3      	ldrh	r3, [r4, #12]
 80098be:	075a      	lsls	r2, r3, #29
 80098c0:	d505      	bpl.n	80098ce <__sflush_r+0x46>
 80098c2:	6863      	ldr	r3, [r4, #4]
 80098c4:	1ac0      	subs	r0, r0, r3
 80098c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098c8:	b10b      	cbz	r3, 80098ce <__sflush_r+0x46>
 80098ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098cc:	1ac0      	subs	r0, r0, r3
 80098ce:	2300      	movs	r3, #0
 80098d0:	4602      	mov	r2, r0
 80098d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098d4:	6a21      	ldr	r1, [r4, #32]
 80098d6:	4628      	mov	r0, r5
 80098d8:	47b0      	blx	r6
 80098da:	1c43      	adds	r3, r0, #1
 80098dc:	89a3      	ldrh	r3, [r4, #12]
 80098de:	d106      	bne.n	80098ee <__sflush_r+0x66>
 80098e0:	6829      	ldr	r1, [r5, #0]
 80098e2:	291d      	cmp	r1, #29
 80098e4:	d82c      	bhi.n	8009940 <__sflush_r+0xb8>
 80098e6:	4a2a      	ldr	r2, [pc, #168]	; (8009990 <__sflush_r+0x108>)
 80098e8:	40ca      	lsrs	r2, r1
 80098ea:	07d6      	lsls	r6, r2, #31
 80098ec:	d528      	bpl.n	8009940 <__sflush_r+0xb8>
 80098ee:	2200      	movs	r2, #0
 80098f0:	6062      	str	r2, [r4, #4]
 80098f2:	04d9      	lsls	r1, r3, #19
 80098f4:	6922      	ldr	r2, [r4, #16]
 80098f6:	6022      	str	r2, [r4, #0]
 80098f8:	d504      	bpl.n	8009904 <__sflush_r+0x7c>
 80098fa:	1c42      	adds	r2, r0, #1
 80098fc:	d101      	bne.n	8009902 <__sflush_r+0x7a>
 80098fe:	682b      	ldr	r3, [r5, #0]
 8009900:	b903      	cbnz	r3, 8009904 <__sflush_r+0x7c>
 8009902:	6560      	str	r0, [r4, #84]	; 0x54
 8009904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009906:	602f      	str	r7, [r5, #0]
 8009908:	2900      	cmp	r1, #0
 800990a:	d0ca      	beq.n	80098a2 <__sflush_r+0x1a>
 800990c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009910:	4299      	cmp	r1, r3
 8009912:	d002      	beq.n	800991a <__sflush_r+0x92>
 8009914:	4628      	mov	r0, r5
 8009916:	f7ff faa5 	bl	8008e64 <_free_r>
 800991a:	2000      	movs	r0, #0
 800991c:	6360      	str	r0, [r4, #52]	; 0x34
 800991e:	e7c1      	b.n	80098a4 <__sflush_r+0x1c>
 8009920:	6a21      	ldr	r1, [r4, #32]
 8009922:	2301      	movs	r3, #1
 8009924:	4628      	mov	r0, r5
 8009926:	47b0      	blx	r6
 8009928:	1c41      	adds	r1, r0, #1
 800992a:	d1c7      	bne.n	80098bc <__sflush_r+0x34>
 800992c:	682b      	ldr	r3, [r5, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d0c4      	beq.n	80098bc <__sflush_r+0x34>
 8009932:	2b1d      	cmp	r3, #29
 8009934:	d001      	beq.n	800993a <__sflush_r+0xb2>
 8009936:	2b16      	cmp	r3, #22
 8009938:	d101      	bne.n	800993e <__sflush_r+0xb6>
 800993a:	602f      	str	r7, [r5, #0]
 800993c:	e7b1      	b.n	80098a2 <__sflush_r+0x1a>
 800993e:	89a3      	ldrh	r3, [r4, #12]
 8009940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009944:	81a3      	strh	r3, [r4, #12]
 8009946:	e7ad      	b.n	80098a4 <__sflush_r+0x1c>
 8009948:	690f      	ldr	r7, [r1, #16]
 800994a:	2f00      	cmp	r7, #0
 800994c:	d0a9      	beq.n	80098a2 <__sflush_r+0x1a>
 800994e:	0793      	lsls	r3, r2, #30
 8009950:	680e      	ldr	r6, [r1, #0]
 8009952:	bf08      	it	eq
 8009954:	694b      	ldreq	r3, [r1, #20]
 8009956:	600f      	str	r7, [r1, #0]
 8009958:	bf18      	it	ne
 800995a:	2300      	movne	r3, #0
 800995c:	eba6 0807 	sub.w	r8, r6, r7
 8009960:	608b      	str	r3, [r1, #8]
 8009962:	f1b8 0f00 	cmp.w	r8, #0
 8009966:	dd9c      	ble.n	80098a2 <__sflush_r+0x1a>
 8009968:	6a21      	ldr	r1, [r4, #32]
 800996a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800996c:	4643      	mov	r3, r8
 800996e:	463a      	mov	r2, r7
 8009970:	4628      	mov	r0, r5
 8009972:	47b0      	blx	r6
 8009974:	2800      	cmp	r0, #0
 8009976:	dc06      	bgt.n	8009986 <__sflush_r+0xfe>
 8009978:	89a3      	ldrh	r3, [r4, #12]
 800997a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800997e:	81a3      	strh	r3, [r4, #12]
 8009980:	f04f 30ff 	mov.w	r0, #4294967295
 8009984:	e78e      	b.n	80098a4 <__sflush_r+0x1c>
 8009986:	4407      	add	r7, r0
 8009988:	eba8 0800 	sub.w	r8, r8, r0
 800998c:	e7e9      	b.n	8009962 <__sflush_r+0xda>
 800998e:	bf00      	nop
 8009990:	20400001 	.word	0x20400001

08009994 <_fflush_r>:
 8009994:	b538      	push	{r3, r4, r5, lr}
 8009996:	690b      	ldr	r3, [r1, #16]
 8009998:	4605      	mov	r5, r0
 800999a:	460c      	mov	r4, r1
 800999c:	b913      	cbnz	r3, 80099a4 <_fflush_r+0x10>
 800999e:	2500      	movs	r5, #0
 80099a0:	4628      	mov	r0, r5
 80099a2:	bd38      	pop	{r3, r4, r5, pc}
 80099a4:	b118      	cbz	r0, 80099ae <_fflush_r+0x1a>
 80099a6:	6983      	ldr	r3, [r0, #24]
 80099a8:	b90b      	cbnz	r3, 80099ae <_fflush_r+0x1a>
 80099aa:	f000 f887 	bl	8009abc <__sinit>
 80099ae:	4b14      	ldr	r3, [pc, #80]	; (8009a00 <_fflush_r+0x6c>)
 80099b0:	429c      	cmp	r4, r3
 80099b2:	d11b      	bne.n	80099ec <_fflush_r+0x58>
 80099b4:	686c      	ldr	r4, [r5, #4]
 80099b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d0ef      	beq.n	800999e <_fflush_r+0xa>
 80099be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099c0:	07d0      	lsls	r0, r2, #31
 80099c2:	d404      	bmi.n	80099ce <_fflush_r+0x3a>
 80099c4:	0599      	lsls	r1, r3, #22
 80099c6:	d402      	bmi.n	80099ce <_fflush_r+0x3a>
 80099c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099ca:	f000 f915 	bl	8009bf8 <__retarget_lock_acquire_recursive>
 80099ce:	4628      	mov	r0, r5
 80099d0:	4621      	mov	r1, r4
 80099d2:	f7ff ff59 	bl	8009888 <__sflush_r>
 80099d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099d8:	07da      	lsls	r2, r3, #31
 80099da:	4605      	mov	r5, r0
 80099dc:	d4e0      	bmi.n	80099a0 <_fflush_r+0xc>
 80099de:	89a3      	ldrh	r3, [r4, #12]
 80099e0:	059b      	lsls	r3, r3, #22
 80099e2:	d4dd      	bmi.n	80099a0 <_fflush_r+0xc>
 80099e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099e6:	f000 f908 	bl	8009bfa <__retarget_lock_release_recursive>
 80099ea:	e7d9      	b.n	80099a0 <_fflush_r+0xc>
 80099ec:	4b05      	ldr	r3, [pc, #20]	; (8009a04 <_fflush_r+0x70>)
 80099ee:	429c      	cmp	r4, r3
 80099f0:	d101      	bne.n	80099f6 <_fflush_r+0x62>
 80099f2:	68ac      	ldr	r4, [r5, #8]
 80099f4:	e7df      	b.n	80099b6 <_fflush_r+0x22>
 80099f6:	4b04      	ldr	r3, [pc, #16]	; (8009a08 <_fflush_r+0x74>)
 80099f8:	429c      	cmp	r4, r3
 80099fa:	bf08      	it	eq
 80099fc:	68ec      	ldreq	r4, [r5, #12]
 80099fe:	e7da      	b.n	80099b6 <_fflush_r+0x22>
 8009a00:	0800a34c 	.word	0x0800a34c
 8009a04:	0800a36c 	.word	0x0800a36c
 8009a08:	0800a32c 	.word	0x0800a32c

08009a0c <std>:
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	b510      	push	{r4, lr}
 8009a10:	4604      	mov	r4, r0
 8009a12:	e9c0 3300 	strd	r3, r3, [r0]
 8009a16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a1a:	6083      	str	r3, [r0, #8]
 8009a1c:	8181      	strh	r1, [r0, #12]
 8009a1e:	6643      	str	r3, [r0, #100]	; 0x64
 8009a20:	81c2      	strh	r2, [r0, #14]
 8009a22:	6183      	str	r3, [r0, #24]
 8009a24:	4619      	mov	r1, r3
 8009a26:	2208      	movs	r2, #8
 8009a28:	305c      	adds	r0, #92	; 0x5c
 8009a2a:	f7fd fb47 	bl	80070bc <memset>
 8009a2e:	4b05      	ldr	r3, [pc, #20]	; (8009a44 <std+0x38>)
 8009a30:	6263      	str	r3, [r4, #36]	; 0x24
 8009a32:	4b05      	ldr	r3, [pc, #20]	; (8009a48 <std+0x3c>)
 8009a34:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a36:	4b05      	ldr	r3, [pc, #20]	; (8009a4c <std+0x40>)
 8009a38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a3a:	4b05      	ldr	r3, [pc, #20]	; (8009a50 <std+0x44>)
 8009a3c:	6224      	str	r4, [r4, #32]
 8009a3e:	6323      	str	r3, [r4, #48]	; 0x30
 8009a40:	bd10      	pop	{r4, pc}
 8009a42:	bf00      	nop
 8009a44:	08009d61 	.word	0x08009d61
 8009a48:	08009d83 	.word	0x08009d83
 8009a4c:	08009dbb 	.word	0x08009dbb
 8009a50:	08009ddf 	.word	0x08009ddf

08009a54 <_cleanup_r>:
 8009a54:	4901      	ldr	r1, [pc, #4]	; (8009a5c <_cleanup_r+0x8>)
 8009a56:	f000 b8af 	b.w	8009bb8 <_fwalk_reent>
 8009a5a:	bf00      	nop
 8009a5c:	08009995 	.word	0x08009995

08009a60 <__sfmoreglue>:
 8009a60:	b570      	push	{r4, r5, r6, lr}
 8009a62:	2268      	movs	r2, #104	; 0x68
 8009a64:	1e4d      	subs	r5, r1, #1
 8009a66:	4355      	muls	r5, r2
 8009a68:	460e      	mov	r6, r1
 8009a6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a6e:	f7ff fa65 	bl	8008f3c <_malloc_r>
 8009a72:	4604      	mov	r4, r0
 8009a74:	b140      	cbz	r0, 8009a88 <__sfmoreglue+0x28>
 8009a76:	2100      	movs	r1, #0
 8009a78:	e9c0 1600 	strd	r1, r6, [r0]
 8009a7c:	300c      	adds	r0, #12
 8009a7e:	60a0      	str	r0, [r4, #8]
 8009a80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a84:	f7fd fb1a 	bl	80070bc <memset>
 8009a88:	4620      	mov	r0, r4
 8009a8a:	bd70      	pop	{r4, r5, r6, pc}

08009a8c <__sfp_lock_acquire>:
 8009a8c:	4801      	ldr	r0, [pc, #4]	; (8009a94 <__sfp_lock_acquire+0x8>)
 8009a8e:	f000 b8b3 	b.w	8009bf8 <__retarget_lock_acquire_recursive>
 8009a92:	bf00      	nop
 8009a94:	20000501 	.word	0x20000501

08009a98 <__sfp_lock_release>:
 8009a98:	4801      	ldr	r0, [pc, #4]	; (8009aa0 <__sfp_lock_release+0x8>)
 8009a9a:	f000 b8ae 	b.w	8009bfa <__retarget_lock_release_recursive>
 8009a9e:	bf00      	nop
 8009aa0:	20000501 	.word	0x20000501

08009aa4 <__sinit_lock_acquire>:
 8009aa4:	4801      	ldr	r0, [pc, #4]	; (8009aac <__sinit_lock_acquire+0x8>)
 8009aa6:	f000 b8a7 	b.w	8009bf8 <__retarget_lock_acquire_recursive>
 8009aaa:	bf00      	nop
 8009aac:	20000502 	.word	0x20000502

08009ab0 <__sinit_lock_release>:
 8009ab0:	4801      	ldr	r0, [pc, #4]	; (8009ab8 <__sinit_lock_release+0x8>)
 8009ab2:	f000 b8a2 	b.w	8009bfa <__retarget_lock_release_recursive>
 8009ab6:	bf00      	nop
 8009ab8:	20000502 	.word	0x20000502

08009abc <__sinit>:
 8009abc:	b510      	push	{r4, lr}
 8009abe:	4604      	mov	r4, r0
 8009ac0:	f7ff fff0 	bl	8009aa4 <__sinit_lock_acquire>
 8009ac4:	69a3      	ldr	r3, [r4, #24]
 8009ac6:	b11b      	cbz	r3, 8009ad0 <__sinit+0x14>
 8009ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009acc:	f7ff bff0 	b.w	8009ab0 <__sinit_lock_release>
 8009ad0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ad4:	6523      	str	r3, [r4, #80]	; 0x50
 8009ad6:	4b13      	ldr	r3, [pc, #76]	; (8009b24 <__sinit+0x68>)
 8009ad8:	4a13      	ldr	r2, [pc, #76]	; (8009b28 <__sinit+0x6c>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	62a2      	str	r2, [r4, #40]	; 0x28
 8009ade:	42a3      	cmp	r3, r4
 8009ae0:	bf04      	itt	eq
 8009ae2:	2301      	moveq	r3, #1
 8009ae4:	61a3      	streq	r3, [r4, #24]
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	f000 f820 	bl	8009b2c <__sfp>
 8009aec:	6060      	str	r0, [r4, #4]
 8009aee:	4620      	mov	r0, r4
 8009af0:	f000 f81c 	bl	8009b2c <__sfp>
 8009af4:	60a0      	str	r0, [r4, #8]
 8009af6:	4620      	mov	r0, r4
 8009af8:	f000 f818 	bl	8009b2c <__sfp>
 8009afc:	2200      	movs	r2, #0
 8009afe:	60e0      	str	r0, [r4, #12]
 8009b00:	2104      	movs	r1, #4
 8009b02:	6860      	ldr	r0, [r4, #4]
 8009b04:	f7ff ff82 	bl	8009a0c <std>
 8009b08:	68a0      	ldr	r0, [r4, #8]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	2109      	movs	r1, #9
 8009b0e:	f7ff ff7d 	bl	8009a0c <std>
 8009b12:	68e0      	ldr	r0, [r4, #12]
 8009b14:	2202      	movs	r2, #2
 8009b16:	2112      	movs	r1, #18
 8009b18:	f7ff ff78 	bl	8009a0c <std>
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	61a3      	str	r3, [r4, #24]
 8009b20:	e7d2      	b.n	8009ac8 <__sinit+0xc>
 8009b22:	bf00      	nop
 8009b24:	08009fb4 	.word	0x08009fb4
 8009b28:	08009a55 	.word	0x08009a55

08009b2c <__sfp>:
 8009b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b2e:	4607      	mov	r7, r0
 8009b30:	f7ff ffac 	bl	8009a8c <__sfp_lock_acquire>
 8009b34:	4b1e      	ldr	r3, [pc, #120]	; (8009bb0 <__sfp+0x84>)
 8009b36:	681e      	ldr	r6, [r3, #0]
 8009b38:	69b3      	ldr	r3, [r6, #24]
 8009b3a:	b913      	cbnz	r3, 8009b42 <__sfp+0x16>
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	f7ff ffbd 	bl	8009abc <__sinit>
 8009b42:	3648      	adds	r6, #72	; 0x48
 8009b44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	d503      	bpl.n	8009b54 <__sfp+0x28>
 8009b4c:	6833      	ldr	r3, [r6, #0]
 8009b4e:	b30b      	cbz	r3, 8009b94 <__sfp+0x68>
 8009b50:	6836      	ldr	r6, [r6, #0]
 8009b52:	e7f7      	b.n	8009b44 <__sfp+0x18>
 8009b54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b58:	b9d5      	cbnz	r5, 8009b90 <__sfp+0x64>
 8009b5a:	4b16      	ldr	r3, [pc, #88]	; (8009bb4 <__sfp+0x88>)
 8009b5c:	60e3      	str	r3, [r4, #12]
 8009b5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b62:	6665      	str	r5, [r4, #100]	; 0x64
 8009b64:	f000 f847 	bl	8009bf6 <__retarget_lock_init_recursive>
 8009b68:	f7ff ff96 	bl	8009a98 <__sfp_lock_release>
 8009b6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b74:	6025      	str	r5, [r4, #0]
 8009b76:	61a5      	str	r5, [r4, #24]
 8009b78:	2208      	movs	r2, #8
 8009b7a:	4629      	mov	r1, r5
 8009b7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b80:	f7fd fa9c 	bl	80070bc <memset>
 8009b84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b90:	3468      	adds	r4, #104	; 0x68
 8009b92:	e7d9      	b.n	8009b48 <__sfp+0x1c>
 8009b94:	2104      	movs	r1, #4
 8009b96:	4638      	mov	r0, r7
 8009b98:	f7ff ff62 	bl	8009a60 <__sfmoreglue>
 8009b9c:	4604      	mov	r4, r0
 8009b9e:	6030      	str	r0, [r6, #0]
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	d1d5      	bne.n	8009b50 <__sfp+0x24>
 8009ba4:	f7ff ff78 	bl	8009a98 <__sfp_lock_release>
 8009ba8:	230c      	movs	r3, #12
 8009baa:	603b      	str	r3, [r7, #0]
 8009bac:	e7ee      	b.n	8009b8c <__sfp+0x60>
 8009bae:	bf00      	nop
 8009bb0:	08009fb4 	.word	0x08009fb4
 8009bb4:	ffff0001 	.word	0xffff0001

08009bb8 <_fwalk_reent>:
 8009bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bbc:	4606      	mov	r6, r0
 8009bbe:	4688      	mov	r8, r1
 8009bc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009bc4:	2700      	movs	r7, #0
 8009bc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009bca:	f1b9 0901 	subs.w	r9, r9, #1
 8009bce:	d505      	bpl.n	8009bdc <_fwalk_reent+0x24>
 8009bd0:	6824      	ldr	r4, [r4, #0]
 8009bd2:	2c00      	cmp	r4, #0
 8009bd4:	d1f7      	bne.n	8009bc6 <_fwalk_reent+0xe>
 8009bd6:	4638      	mov	r0, r7
 8009bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bdc:	89ab      	ldrh	r3, [r5, #12]
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d907      	bls.n	8009bf2 <_fwalk_reent+0x3a>
 8009be2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009be6:	3301      	adds	r3, #1
 8009be8:	d003      	beq.n	8009bf2 <_fwalk_reent+0x3a>
 8009bea:	4629      	mov	r1, r5
 8009bec:	4630      	mov	r0, r6
 8009bee:	47c0      	blx	r8
 8009bf0:	4307      	orrs	r7, r0
 8009bf2:	3568      	adds	r5, #104	; 0x68
 8009bf4:	e7e9      	b.n	8009bca <_fwalk_reent+0x12>

08009bf6 <__retarget_lock_init_recursive>:
 8009bf6:	4770      	bx	lr

08009bf8 <__retarget_lock_acquire_recursive>:
 8009bf8:	4770      	bx	lr

08009bfa <__retarget_lock_release_recursive>:
 8009bfa:	4770      	bx	lr

08009bfc <__swhatbuf_r>:
 8009bfc:	b570      	push	{r4, r5, r6, lr}
 8009bfe:	460e      	mov	r6, r1
 8009c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c04:	2900      	cmp	r1, #0
 8009c06:	b096      	sub	sp, #88	; 0x58
 8009c08:	4614      	mov	r4, r2
 8009c0a:	461d      	mov	r5, r3
 8009c0c:	da08      	bge.n	8009c20 <__swhatbuf_r+0x24>
 8009c0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009c12:	2200      	movs	r2, #0
 8009c14:	602a      	str	r2, [r5, #0]
 8009c16:	061a      	lsls	r2, r3, #24
 8009c18:	d410      	bmi.n	8009c3c <__swhatbuf_r+0x40>
 8009c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c1e:	e00e      	b.n	8009c3e <__swhatbuf_r+0x42>
 8009c20:	466a      	mov	r2, sp
 8009c22:	f000 f903 	bl	8009e2c <_fstat_r>
 8009c26:	2800      	cmp	r0, #0
 8009c28:	dbf1      	blt.n	8009c0e <__swhatbuf_r+0x12>
 8009c2a:	9a01      	ldr	r2, [sp, #4]
 8009c2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c34:	425a      	negs	r2, r3
 8009c36:	415a      	adcs	r2, r3
 8009c38:	602a      	str	r2, [r5, #0]
 8009c3a:	e7ee      	b.n	8009c1a <__swhatbuf_r+0x1e>
 8009c3c:	2340      	movs	r3, #64	; 0x40
 8009c3e:	2000      	movs	r0, #0
 8009c40:	6023      	str	r3, [r4, #0]
 8009c42:	b016      	add	sp, #88	; 0x58
 8009c44:	bd70      	pop	{r4, r5, r6, pc}
	...

08009c48 <__smakebuf_r>:
 8009c48:	898b      	ldrh	r3, [r1, #12]
 8009c4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c4c:	079d      	lsls	r5, r3, #30
 8009c4e:	4606      	mov	r6, r0
 8009c50:	460c      	mov	r4, r1
 8009c52:	d507      	bpl.n	8009c64 <__smakebuf_r+0x1c>
 8009c54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c58:	6023      	str	r3, [r4, #0]
 8009c5a:	6123      	str	r3, [r4, #16]
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	6163      	str	r3, [r4, #20]
 8009c60:	b002      	add	sp, #8
 8009c62:	bd70      	pop	{r4, r5, r6, pc}
 8009c64:	ab01      	add	r3, sp, #4
 8009c66:	466a      	mov	r2, sp
 8009c68:	f7ff ffc8 	bl	8009bfc <__swhatbuf_r>
 8009c6c:	9900      	ldr	r1, [sp, #0]
 8009c6e:	4605      	mov	r5, r0
 8009c70:	4630      	mov	r0, r6
 8009c72:	f7ff f963 	bl	8008f3c <_malloc_r>
 8009c76:	b948      	cbnz	r0, 8009c8c <__smakebuf_r+0x44>
 8009c78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c7c:	059a      	lsls	r2, r3, #22
 8009c7e:	d4ef      	bmi.n	8009c60 <__smakebuf_r+0x18>
 8009c80:	f023 0303 	bic.w	r3, r3, #3
 8009c84:	f043 0302 	orr.w	r3, r3, #2
 8009c88:	81a3      	strh	r3, [r4, #12]
 8009c8a:	e7e3      	b.n	8009c54 <__smakebuf_r+0xc>
 8009c8c:	4b0d      	ldr	r3, [pc, #52]	; (8009cc4 <__smakebuf_r+0x7c>)
 8009c8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009c90:	89a3      	ldrh	r3, [r4, #12]
 8009c92:	6020      	str	r0, [r4, #0]
 8009c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c98:	81a3      	strh	r3, [r4, #12]
 8009c9a:	9b00      	ldr	r3, [sp, #0]
 8009c9c:	6163      	str	r3, [r4, #20]
 8009c9e:	9b01      	ldr	r3, [sp, #4]
 8009ca0:	6120      	str	r0, [r4, #16]
 8009ca2:	b15b      	cbz	r3, 8009cbc <__smakebuf_r+0x74>
 8009ca4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ca8:	4630      	mov	r0, r6
 8009caa:	f000 f8d1 	bl	8009e50 <_isatty_r>
 8009cae:	b128      	cbz	r0, 8009cbc <__smakebuf_r+0x74>
 8009cb0:	89a3      	ldrh	r3, [r4, #12]
 8009cb2:	f023 0303 	bic.w	r3, r3, #3
 8009cb6:	f043 0301 	orr.w	r3, r3, #1
 8009cba:	81a3      	strh	r3, [r4, #12]
 8009cbc:	89a0      	ldrh	r0, [r4, #12]
 8009cbe:	4305      	orrs	r5, r0
 8009cc0:	81a5      	strh	r5, [r4, #12]
 8009cc2:	e7cd      	b.n	8009c60 <__smakebuf_r+0x18>
 8009cc4:	08009a55 	.word	0x08009a55

08009cc8 <_malloc_usable_size_r>:
 8009cc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ccc:	1f18      	subs	r0, r3, #4
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	bfbc      	itt	lt
 8009cd2:	580b      	ldrlt	r3, [r1, r0]
 8009cd4:	18c0      	addlt	r0, r0, r3
 8009cd6:	4770      	bx	lr

08009cd8 <_raise_r>:
 8009cd8:	291f      	cmp	r1, #31
 8009cda:	b538      	push	{r3, r4, r5, lr}
 8009cdc:	4604      	mov	r4, r0
 8009cde:	460d      	mov	r5, r1
 8009ce0:	d904      	bls.n	8009cec <_raise_r+0x14>
 8009ce2:	2316      	movs	r3, #22
 8009ce4:	6003      	str	r3, [r0, #0]
 8009ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8009cea:	bd38      	pop	{r3, r4, r5, pc}
 8009cec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009cee:	b112      	cbz	r2, 8009cf6 <_raise_r+0x1e>
 8009cf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009cf4:	b94b      	cbnz	r3, 8009d0a <_raise_r+0x32>
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	f000 f830 	bl	8009d5c <_getpid_r>
 8009cfc:	462a      	mov	r2, r5
 8009cfe:	4601      	mov	r1, r0
 8009d00:	4620      	mov	r0, r4
 8009d02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d06:	f000 b817 	b.w	8009d38 <_kill_r>
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d00a      	beq.n	8009d24 <_raise_r+0x4c>
 8009d0e:	1c59      	adds	r1, r3, #1
 8009d10:	d103      	bne.n	8009d1a <_raise_r+0x42>
 8009d12:	2316      	movs	r3, #22
 8009d14:	6003      	str	r3, [r0, #0]
 8009d16:	2001      	movs	r0, #1
 8009d18:	e7e7      	b.n	8009cea <_raise_r+0x12>
 8009d1a:	2400      	movs	r4, #0
 8009d1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d20:	4628      	mov	r0, r5
 8009d22:	4798      	blx	r3
 8009d24:	2000      	movs	r0, #0
 8009d26:	e7e0      	b.n	8009cea <_raise_r+0x12>

08009d28 <raise>:
 8009d28:	4b02      	ldr	r3, [pc, #8]	; (8009d34 <raise+0xc>)
 8009d2a:	4601      	mov	r1, r0
 8009d2c:	6818      	ldr	r0, [r3, #0]
 8009d2e:	f7ff bfd3 	b.w	8009cd8 <_raise_r>
 8009d32:	bf00      	nop
 8009d34:	20000010 	.word	0x20000010

08009d38 <_kill_r>:
 8009d38:	b538      	push	{r3, r4, r5, lr}
 8009d3a:	4d07      	ldr	r5, [pc, #28]	; (8009d58 <_kill_r+0x20>)
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	4604      	mov	r4, r0
 8009d40:	4608      	mov	r0, r1
 8009d42:	4611      	mov	r1, r2
 8009d44:	602b      	str	r3, [r5, #0]
 8009d46:	f000 f8d7 	bl	8009ef8 <_kill>
 8009d4a:	1c43      	adds	r3, r0, #1
 8009d4c:	d102      	bne.n	8009d54 <_kill_r+0x1c>
 8009d4e:	682b      	ldr	r3, [r5, #0]
 8009d50:	b103      	cbz	r3, 8009d54 <_kill_r+0x1c>
 8009d52:	6023      	str	r3, [r4, #0]
 8009d54:	bd38      	pop	{r3, r4, r5, pc}
 8009d56:	bf00      	nop
 8009d58:	200004fc 	.word	0x200004fc

08009d5c <_getpid_r>:
 8009d5c:	f000 b8bc 	b.w	8009ed8 <_getpid>

08009d60 <__sread>:
 8009d60:	b510      	push	{r4, lr}
 8009d62:	460c      	mov	r4, r1
 8009d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d68:	f000 f894 	bl	8009e94 <_read_r>
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	bfab      	itete	ge
 8009d70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d72:	89a3      	ldrhlt	r3, [r4, #12]
 8009d74:	181b      	addge	r3, r3, r0
 8009d76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d7a:	bfac      	ite	ge
 8009d7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d7e:	81a3      	strhlt	r3, [r4, #12]
 8009d80:	bd10      	pop	{r4, pc}

08009d82 <__swrite>:
 8009d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d86:	461f      	mov	r7, r3
 8009d88:	898b      	ldrh	r3, [r1, #12]
 8009d8a:	05db      	lsls	r3, r3, #23
 8009d8c:	4605      	mov	r5, r0
 8009d8e:	460c      	mov	r4, r1
 8009d90:	4616      	mov	r6, r2
 8009d92:	d505      	bpl.n	8009da0 <__swrite+0x1e>
 8009d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d98:	2302      	movs	r3, #2
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f000 f868 	bl	8009e70 <_lseek_r>
 8009da0:	89a3      	ldrh	r3, [r4, #12]
 8009da2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009da6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009daa:	81a3      	strh	r3, [r4, #12]
 8009dac:	4632      	mov	r2, r6
 8009dae:	463b      	mov	r3, r7
 8009db0:	4628      	mov	r0, r5
 8009db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009db6:	f000 b817 	b.w	8009de8 <_write_r>

08009dba <__sseek>:
 8009dba:	b510      	push	{r4, lr}
 8009dbc:	460c      	mov	r4, r1
 8009dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dc2:	f000 f855 	bl	8009e70 <_lseek_r>
 8009dc6:	1c43      	adds	r3, r0, #1
 8009dc8:	89a3      	ldrh	r3, [r4, #12]
 8009dca:	bf15      	itete	ne
 8009dcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8009dce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009dd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009dd6:	81a3      	strheq	r3, [r4, #12]
 8009dd8:	bf18      	it	ne
 8009dda:	81a3      	strhne	r3, [r4, #12]
 8009ddc:	bd10      	pop	{r4, pc}

08009dde <__sclose>:
 8009dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009de2:	f000 b813 	b.w	8009e0c <_close_r>
	...

08009de8 <_write_r>:
 8009de8:	b538      	push	{r3, r4, r5, lr}
 8009dea:	4d07      	ldr	r5, [pc, #28]	; (8009e08 <_write_r+0x20>)
 8009dec:	4604      	mov	r4, r0
 8009dee:	4608      	mov	r0, r1
 8009df0:	4611      	mov	r1, r2
 8009df2:	2200      	movs	r2, #0
 8009df4:	602a      	str	r2, [r5, #0]
 8009df6:	461a      	mov	r2, r3
 8009df8:	f000 f896 	bl	8009f28 <_write>
 8009dfc:	1c43      	adds	r3, r0, #1
 8009dfe:	d102      	bne.n	8009e06 <_write_r+0x1e>
 8009e00:	682b      	ldr	r3, [r5, #0]
 8009e02:	b103      	cbz	r3, 8009e06 <_write_r+0x1e>
 8009e04:	6023      	str	r3, [r4, #0]
 8009e06:	bd38      	pop	{r3, r4, r5, pc}
 8009e08:	200004fc 	.word	0x200004fc

08009e0c <_close_r>:
 8009e0c:	b538      	push	{r3, r4, r5, lr}
 8009e0e:	4d06      	ldr	r5, [pc, #24]	; (8009e28 <_close_r+0x1c>)
 8009e10:	2300      	movs	r3, #0
 8009e12:	4604      	mov	r4, r0
 8009e14:	4608      	mov	r0, r1
 8009e16:	602b      	str	r3, [r5, #0]
 8009e18:	f000 f84e 	bl	8009eb8 <_close>
 8009e1c:	1c43      	adds	r3, r0, #1
 8009e1e:	d102      	bne.n	8009e26 <_close_r+0x1a>
 8009e20:	682b      	ldr	r3, [r5, #0]
 8009e22:	b103      	cbz	r3, 8009e26 <_close_r+0x1a>
 8009e24:	6023      	str	r3, [r4, #0]
 8009e26:	bd38      	pop	{r3, r4, r5, pc}
 8009e28:	200004fc 	.word	0x200004fc

08009e2c <_fstat_r>:
 8009e2c:	b538      	push	{r3, r4, r5, lr}
 8009e2e:	4d07      	ldr	r5, [pc, #28]	; (8009e4c <_fstat_r+0x20>)
 8009e30:	2300      	movs	r3, #0
 8009e32:	4604      	mov	r4, r0
 8009e34:	4608      	mov	r0, r1
 8009e36:	4611      	mov	r1, r2
 8009e38:	602b      	str	r3, [r5, #0]
 8009e3a:	f000 f845 	bl	8009ec8 <_fstat>
 8009e3e:	1c43      	adds	r3, r0, #1
 8009e40:	d102      	bne.n	8009e48 <_fstat_r+0x1c>
 8009e42:	682b      	ldr	r3, [r5, #0]
 8009e44:	b103      	cbz	r3, 8009e48 <_fstat_r+0x1c>
 8009e46:	6023      	str	r3, [r4, #0]
 8009e48:	bd38      	pop	{r3, r4, r5, pc}
 8009e4a:	bf00      	nop
 8009e4c:	200004fc 	.word	0x200004fc

08009e50 <_isatty_r>:
 8009e50:	b538      	push	{r3, r4, r5, lr}
 8009e52:	4d06      	ldr	r5, [pc, #24]	; (8009e6c <_isatty_r+0x1c>)
 8009e54:	2300      	movs	r3, #0
 8009e56:	4604      	mov	r4, r0
 8009e58:	4608      	mov	r0, r1
 8009e5a:	602b      	str	r3, [r5, #0]
 8009e5c:	f000 f844 	bl	8009ee8 <_isatty>
 8009e60:	1c43      	adds	r3, r0, #1
 8009e62:	d102      	bne.n	8009e6a <_isatty_r+0x1a>
 8009e64:	682b      	ldr	r3, [r5, #0]
 8009e66:	b103      	cbz	r3, 8009e6a <_isatty_r+0x1a>
 8009e68:	6023      	str	r3, [r4, #0]
 8009e6a:	bd38      	pop	{r3, r4, r5, pc}
 8009e6c:	200004fc 	.word	0x200004fc

08009e70 <_lseek_r>:
 8009e70:	b538      	push	{r3, r4, r5, lr}
 8009e72:	4d07      	ldr	r5, [pc, #28]	; (8009e90 <_lseek_r+0x20>)
 8009e74:	4604      	mov	r4, r0
 8009e76:	4608      	mov	r0, r1
 8009e78:	4611      	mov	r1, r2
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	602a      	str	r2, [r5, #0]
 8009e7e:	461a      	mov	r2, r3
 8009e80:	f000 f842 	bl	8009f08 <_lseek>
 8009e84:	1c43      	adds	r3, r0, #1
 8009e86:	d102      	bne.n	8009e8e <_lseek_r+0x1e>
 8009e88:	682b      	ldr	r3, [r5, #0]
 8009e8a:	b103      	cbz	r3, 8009e8e <_lseek_r+0x1e>
 8009e8c:	6023      	str	r3, [r4, #0]
 8009e8e:	bd38      	pop	{r3, r4, r5, pc}
 8009e90:	200004fc 	.word	0x200004fc

08009e94 <_read_r>:
 8009e94:	b538      	push	{r3, r4, r5, lr}
 8009e96:	4d07      	ldr	r5, [pc, #28]	; (8009eb4 <_read_r+0x20>)
 8009e98:	4604      	mov	r4, r0
 8009e9a:	4608      	mov	r0, r1
 8009e9c:	4611      	mov	r1, r2
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	602a      	str	r2, [r5, #0]
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	f000 f838 	bl	8009f18 <_read>
 8009ea8:	1c43      	adds	r3, r0, #1
 8009eaa:	d102      	bne.n	8009eb2 <_read_r+0x1e>
 8009eac:	682b      	ldr	r3, [r5, #0]
 8009eae:	b103      	cbz	r3, 8009eb2 <_read_r+0x1e>
 8009eb0:	6023      	str	r3, [r4, #0]
 8009eb2:	bd38      	pop	{r3, r4, r5, pc}
 8009eb4:	200004fc 	.word	0x200004fc

08009eb8 <_close>:
 8009eb8:	4b02      	ldr	r3, [pc, #8]	; (8009ec4 <_close+0xc>)
 8009eba:	2258      	movs	r2, #88	; 0x58
 8009ebc:	601a      	str	r2, [r3, #0]
 8009ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec2:	4770      	bx	lr
 8009ec4:	200004fc 	.word	0x200004fc

08009ec8 <_fstat>:
 8009ec8:	4b02      	ldr	r3, [pc, #8]	; (8009ed4 <_fstat+0xc>)
 8009eca:	2258      	movs	r2, #88	; 0x58
 8009ecc:	601a      	str	r2, [r3, #0]
 8009ece:	f04f 30ff 	mov.w	r0, #4294967295
 8009ed2:	4770      	bx	lr
 8009ed4:	200004fc 	.word	0x200004fc

08009ed8 <_getpid>:
 8009ed8:	4b02      	ldr	r3, [pc, #8]	; (8009ee4 <_getpid+0xc>)
 8009eda:	2258      	movs	r2, #88	; 0x58
 8009edc:	601a      	str	r2, [r3, #0]
 8009ede:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee2:	4770      	bx	lr
 8009ee4:	200004fc 	.word	0x200004fc

08009ee8 <_isatty>:
 8009ee8:	4b02      	ldr	r3, [pc, #8]	; (8009ef4 <_isatty+0xc>)
 8009eea:	2258      	movs	r2, #88	; 0x58
 8009eec:	601a      	str	r2, [r3, #0]
 8009eee:	2000      	movs	r0, #0
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	200004fc 	.word	0x200004fc

08009ef8 <_kill>:
 8009ef8:	4b02      	ldr	r3, [pc, #8]	; (8009f04 <_kill+0xc>)
 8009efa:	2258      	movs	r2, #88	; 0x58
 8009efc:	601a      	str	r2, [r3, #0]
 8009efe:	f04f 30ff 	mov.w	r0, #4294967295
 8009f02:	4770      	bx	lr
 8009f04:	200004fc 	.word	0x200004fc

08009f08 <_lseek>:
 8009f08:	4b02      	ldr	r3, [pc, #8]	; (8009f14 <_lseek+0xc>)
 8009f0a:	2258      	movs	r2, #88	; 0x58
 8009f0c:	601a      	str	r2, [r3, #0]
 8009f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f12:	4770      	bx	lr
 8009f14:	200004fc 	.word	0x200004fc

08009f18 <_read>:
 8009f18:	4b02      	ldr	r3, [pc, #8]	; (8009f24 <_read+0xc>)
 8009f1a:	2258      	movs	r2, #88	; 0x58
 8009f1c:	601a      	str	r2, [r3, #0]
 8009f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f22:	4770      	bx	lr
 8009f24:	200004fc 	.word	0x200004fc

08009f28 <_write>:
 8009f28:	4b02      	ldr	r3, [pc, #8]	; (8009f34 <_write+0xc>)
 8009f2a:	2258      	movs	r2, #88	; 0x58
 8009f2c:	601a      	str	r2, [r3, #0]
 8009f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f32:	4770      	bx	lr
 8009f34:	200004fc 	.word	0x200004fc

08009f38 <_exit>:
 8009f38:	e7fe      	b.n	8009f38 <_exit>
	...

08009f3c <_init>:
 8009f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f3e:	bf00      	nop
 8009f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f42:	bc08      	pop	{r3}
 8009f44:	469e      	mov	lr, r3
 8009f46:	4770      	bx	lr

08009f48 <_fini>:
 8009f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f4a:	bf00      	nop
 8009f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f4e:	bc08      	pop	{r3}
 8009f50:	469e      	mov	lr, r3
 8009f52:	4770      	bx	lr
